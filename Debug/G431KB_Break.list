
G431KB_Break.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000931c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08009500  08009500  00019500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097e8  080097e8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080097e8  080097e8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080097e8  080097e8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097e8  080097e8  000197e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097ec  080097ec  000197ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080097f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002274  20000078  08009868  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022ec  08009868  000222ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001df78  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003dbc  00000000  00000000  0003e020  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017e0  00000000  00000000  00041de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001608  00000000  00000000  000435c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024085  00000000  00000000  00044bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018c32  00000000  00000000  00068c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d20f4  00000000  00000000  0008187f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00153973  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006494  00000000  00000000  001539f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	080094e4 	.word	0x080094e4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	080094e4 	.word	0x080094e4

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b98:	b5b0      	push	{r4, r5, r7, lr}
 8000b9a:	b090      	sub	sp, #64	; 0x40
 8000b9c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Break_Task */
  osThreadDef(Break_Task, StartBreak_Task, osPriorityNormal, 0, 128);
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_FREERTOS_Init+0x70>)
 8000ba0:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000ba4:	461d      	mov	r5, r3
 8000ba6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000baa:	682b      	ldr	r3, [r5, #0]
 8000bac:	6023      	str	r3, [r4, #0]
  Break_TaskHandle = osThreadCreate(osThread(Break_Task), NULL);
 8000bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f007 f9a2 	bl	8007efe <osThreadCreate>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <MX_FREERTOS_Init+0x74>)
 8000bbe:	601a      	str	r2, [r3, #0]

  /* definition and creation of RainBow_Task */
  osThreadDef(RainBow_Task, StartRainBow_Task, osPriorityIdle, 0, 128);
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <MX_FREERTOS_Init+0x78>)
 8000bc2:	f107 0418 	add.w	r4, r7, #24
 8000bc6:	461d      	mov	r5, r3
 8000bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bcc:	682b      	ldr	r3, [r5, #0]
 8000bce:	6023      	str	r3, [r4, #0]
  RainBow_TaskHandle = osThreadCreate(osThread(RainBow_Task), NULL);
 8000bd0:	f107 0318 	add.w	r3, r7, #24
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f007 f991 	bl	8007efe <osThreadCreate>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <MX_FREERTOS_Init+0x7c>)
 8000be0:	601a      	str	r2, [r3, #0]

  /* definition and creation of AS504X_Task */
  osThreadDef(AS504X_Task, StartAS504X_Task, osPriorityIdle, 0, 128);
 8000be2:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <MX_FREERTOS_Init+0x80>)
 8000be4:	1d3c      	adds	r4, r7, #4
 8000be6:	461d      	mov	r5, r3
 8000be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bec:	682b      	ldr	r3, [r5, #0]
 8000bee:	6023      	str	r3, [r4, #0]
  AS504X_TaskHandle = osThreadCreate(osThread(AS504X_Task), NULL);
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f007 f982 	bl	8007efe <osThreadCreate>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <MX_FREERTOS_Init+0x84>)
 8000bfe:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000c00:	bf00      	nop
 8000c02:	3740      	adds	r7, #64	; 0x40
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bdb0      	pop	{r4, r5, r7, pc}
 8000c08:	0800950c 	.word	0x0800950c
 8000c0c:	2000205c 	.word	0x2000205c
 8000c10:	08009530 	.word	0x08009530
 8000c14:	20002068 	.word	0x20002068
 8000c18:	08009550 	.word	0x08009550
 8000c1c:	20002058 	.word	0x20002058

08000c20 <StartBreak_Task>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartBreak_Task */
void StartBreak_Task(void const * argument)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08e      	sub	sp, #56	; 0x38
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBreak_Task */
  /* Infinite loop */

  uint32_t pre_time = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t led_time = 200;
 8000c2c:	23c8      	movs	r3, #200	; 0xc8
 8000c2e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t firstled = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	613b      	str	r3, [r7, #16]
	uint32_t halfled = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
	uint32_t led_index = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t led_mask= 0b1110000111;
 8000c3c:	f240 3387 	movw	r3, #903	; 0x387
 8000c40:	60bb      	str	r3, [r7, #8]


	_Bool led_flg=0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint32_t led_count = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  for(;;)
  {

		if(millis()-pre_time >= led_time)
 8000c4c:	f000 fca0 	bl	8001590 <millis>
 8000c50:	4602      	mov	r2, r0
 8000c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	f200 80b4 	bhi.w	8000dc6 <StartBreak_Task+0x1a6>
		{
			pre_time = millis();
 8000c5e:	f000 fc97 	bl	8001590 <millis>
 8000c62:	6378      	str	r0, [r7, #52]	; 0x34
			if(g_break_flg == 0) {
 8000c64:	4b5a      	ldr	r3, [pc, #360]	; (8000dd0 <StartBreak_Task+0x1b0>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	f083 0301 	eor.w	r3, r3, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d06e      	beq.n	8000d50 <StartBreak_Task+0x130>
					led_time = 200;
				}
				else {
					led_time = 50;
				}*/
				led_time = g_speed/10;
 8000c72:	4b58      	ldr	r3, [pc, #352]	; (8000dd4 <StartBreak_Task+0x1b4>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a58      	ldr	r2, [pc, #352]	; (8000dd8 <StartBreak_Task+0x1b8>)
 8000c78:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7c:	08db      	lsrs	r3, r3, #3
 8000c7e:	633b      	str	r3, [r7, #48]	; 0x30
				if(led_time < 50)
 8000c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c82:	2b31      	cmp	r3, #49	; 0x31
 8000c84:	d801      	bhi.n	8000c8a <StartBreak_Task+0x6a>
					led_time = 50;
 8000c86:	2332      	movs	r3, #50	; 0x32
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
				led_count = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
				firstled = rotateLeft(led_mask, led_index%B_LED_CNT);
 8000c8e:	68b8      	ldr	r0, [r7, #8]
 8000c90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000c92:	4b51      	ldr	r3, [pc, #324]	; (8000dd8 <StartBreak_Task+0x1b8>)
 8000c94:	fba3 2301 	umull	r2, r3, r3, r1
 8000c98:	091a      	lsrs	r2, r3, #4
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	1aca      	subs	r2, r1, r3
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	f000 fc7b 	bl	80015a0 <rotateLeft>
 8000caa:	4603      	mov	r3, r0
 8000cac:	613b      	str	r3, [r7, #16]
				halfled = rotateRight(led_mask, led_index%B_LED_CNT);
 8000cae:	68b8      	ldr	r0, [r7, #8]
 8000cb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000cb2:	4b49      	ldr	r3, [pc, #292]	; (8000dd8 <StartBreak_Task+0x1b8>)
 8000cb4:	fba3 2301 	umull	r2, r3, r3, r1
 8000cb8:	091a      	lsrs	r2, r3, #4
 8000cba:	4613      	mov	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	1aca      	subs	r2, r1, r3
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	f000 fc95 	bl	80015f4 <rotateRight>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	60fb      	str	r3, [r7, #12]

				led_index++;
 8000cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
				for(uint32_t j=0; j<12; j++) {
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
 8000cd8:	e017      	b.n	8000d0a <StartBreak_Task+0xea>
					if( firstled >> j & 0x01){
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	6a3b      	ldr	r3, [r7, #32]
 8000cde:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d006      	beq.n	8000cf8 <StartBreak_Task+0xd8>
							ws2812SetColor(j, 255, 255, 255);
 8000cea:	23ff      	movs	r3, #255	; 0xff
 8000cec:	22ff      	movs	r2, #255	; 0xff
 8000cee:	21ff      	movs	r1, #255	; 0xff
 8000cf0:	6a38      	ldr	r0, [r7, #32]
 8000cf2:	f001 f85b 	bl	8001dac <ws2812SetColor>
 8000cf6:	e005      	b.n	8000d04 <StartBreak_Task+0xe4>
					}else {
						ws2812SetColor(j, 0, 0, 0);
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	6a38      	ldr	r0, [r7, #32]
 8000d00:	f001 f854 	bl	8001dac <ws2812SetColor>
				for(uint32_t j=0; j<12; j++) {
 8000d04:	6a3b      	ldr	r3, [r7, #32]
 8000d06:	3301      	adds	r3, #1
 8000d08:	623b      	str	r3, [r7, #32]
 8000d0a:	6a3b      	ldr	r3, [r7, #32]
 8000d0c:	2b0b      	cmp	r3, #11
 8000d0e:	d9e4      	bls.n	8000cda <StartBreak_Task+0xba>
					}
				}
				for(uint32_t j=20; j>11; j--) {
 8000d10:	2314      	movs	r3, #20
 8000d12:	61fb      	str	r3, [r7, #28]
 8000d14:	e018      	b.n	8000d48 <StartBreak_Task+0x128>
					if( halfled >> (j-11) & 0x01){
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3b0b      	subs	r3, #11
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d006      	beq.n	8000d36 <StartBreak_Task+0x116>
							ws2812SetColor(j, 255, 255, 255);
 8000d28:	23ff      	movs	r3, #255	; 0xff
 8000d2a:	22ff      	movs	r2, #255	; 0xff
 8000d2c:	21ff      	movs	r1, #255	; 0xff
 8000d2e:	69f8      	ldr	r0, [r7, #28]
 8000d30:	f001 f83c 	bl	8001dac <ws2812SetColor>
 8000d34:	e005      	b.n	8000d42 <StartBreak_Task+0x122>
					}else {
						ws2812SetColor(j, 0, 0, 0);
 8000d36:	2300      	movs	r3, #0
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	69f8      	ldr	r0, [r7, #28]
 8000d3e:	f001 f835 	bl	8001dac <ws2812SetColor>
				for(uint32_t j=20; j>11; j--) {
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	61fb      	str	r3, [r7, #28]
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	2b0b      	cmp	r3, #11
 8000d4c:	d8e3      	bhi.n	8000d16 <StartBreak_Task+0xf6>
 8000d4e:	e03a      	b.n	8000dc6 <StartBreak_Task+0x1a6>
					}
				}
			}
			else{ // break
				led_count++;
 8000d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d52:	3301      	adds	r3, #1
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
				if(led_count > 30) {
 8000d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d58:	2b1e      	cmp	r3, #30
 8000d5a:	d903      	bls.n	8000d64 <StartBreak_Task+0x144>
					led_time = 500;
 8000d5c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
 8000d62:	e001      	b.n	8000d68 <StartBreak_Task+0x148>
				}else {
					led_time = 50;
 8000d64:	2332      	movs	r3, #50	; 0x32
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if(led_count > 40) {
 8000d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6a:	2b28      	cmp	r3, #40	; 0x28
 8000d6c:	d902      	bls.n	8000d74 <StartBreak_Task+0x154>
						//led_count = 0;
						g_break_flg = 0;
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <StartBreak_Task+0x1b0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
				}

				if(led_flg) {
 8000d74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d012      	beq.n	8000da2 <StartBreak_Task+0x182>
					for(int i = 0; i < B_LED_CNT; i++) {
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61bb      	str	r3, [r7, #24]
 8000d80:	e00b      	b.n	8000d9a <StartBreak_Task+0x17a>
						ws2812SetColor(i, 255, 0, 0);
 8000d82:	69b8      	ldr	r0, [r7, #24]
 8000d84:	2300      	movs	r3, #0
 8000d86:	2200      	movs	r2, #0
 8000d88:	21ff      	movs	r1, #255	; 0xff
 8000d8a:	f001 f80f 	bl	8001dac <ws2812SetColor>
						led_flg = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					for(int i = 0; i < B_LED_CNT; i++) {
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	3301      	adds	r3, #1
 8000d98:	61bb      	str	r3, [r7, #24]
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	2b13      	cmp	r3, #19
 8000d9e:	ddf0      	ble.n	8000d82 <StartBreak_Task+0x162>
 8000da0:	e011      	b.n	8000dc6 <StartBreak_Task+0x1a6>
					}
				}else {
					for(int i = 0; i < B_LED_CNT; i++) {
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00b      	b.n	8000dc0 <StartBreak_Task+0x1a0>
						ws2812SetColor(i, 0, 0, 0);
 8000da8:	6978      	ldr	r0, [r7, #20]
 8000daa:	2300      	movs	r3, #0
 8000dac:	2200      	movs	r2, #0
 8000dae:	2100      	movs	r1, #0
 8000db0:	f000 fffc 	bl	8001dac <ws2812SetColor>
						led_flg = 1;
 8000db4:	2301      	movs	r3, #1
 8000db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					for(int i = 0; i < B_LED_CNT; i++) {
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	2b13      	cmp	r3, #19
 8000dc4:	ddf0      	ble.n	8000da8 <StartBreak_Task+0x188>
					}
				}
			}
		}
    osDelay(1);
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f007 f8c0 	bl	8007f4c <osDelay>
		if(millis()-pre_time >= led_time)
 8000dcc:	e73e      	b.n	8000c4c <StartBreak_Task+0x2c>
 8000dce:	bf00      	nop
 8000dd0:	20000094 	.word	0x20000094
 8000dd4:	20000098 	.word	0x20000098
 8000dd8:	cccccccd 	.word	0xcccccccd

08000ddc <StartRainBow_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRainBow_Task */
void StartRainBow_Task(void const * argument)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRainBow_Task */
  /* Infinite loop */

	uint32_t rainbow_pre_time=0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t rainbow_led_time=10;
 8000de8:	230a      	movs	r3, #10
 8000dea:	623b      	str	r3, [r7, #32]
	_Bool led_flg=0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	77fb      	strb	r3, [r7, #31]
	uint32_t led_count = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61bb      	str	r3, [r7, #24]
	for(;;)
	{
		uint16_t i, j;
		for(j=0; j<256*5;) { // 5 cycles of all colors on wheel
 8000df4:	2300      	movs	r3, #0
 8000df6:	82bb      	strh	r3, [r7, #20]
 8000df8:	e06f      	b.n	8000eda <StartRainBow_Task+0xfe>
			if(millis()-rainbow_pre_time >= rainbow_led_time)
 8000dfa:	f000 fbc9 	bl	8001590 <millis>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	6a3a      	ldr	r2, [r7, #32]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d867      	bhi.n	8000eda <StartRainBow_Task+0xfe>
			{
				rainbow_pre_time = millis();
 8000e0a:	f000 fbc1 	bl	8001590 <millis>
 8000e0e:	6278      	str	r0, [r7, #36]	; 0x24
				j++;
 8000e10:	8abb      	ldrh	r3, [r7, #20]
 8000e12:	3301      	adds	r3, #1
 8000e14:	82bb      	strh	r3, [r7, #20]
				rainbow_led_time = 10;
 8000e16:	230a      	movs	r3, #10
 8000e18:	623b      	str	r3, [r7, #32]
				if(g_break_flg == 0) {
 8000e1a:	4b34      	ldr	r3, [pc, #208]	; (8000eec <StartRainBow_Task+0x110>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	f083 0301 	eor.w	r3, r3, #1
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d01f      	beq.n	8000e68 <StartRainBow_Task+0x8c>
					led_count = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61bb      	str	r3, [r7, #24]
					for(i=0; i< R_LED_CNT; i++) {
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	82fb      	strh	r3, [r7, #22]
 8000e30:	e016      	b.n	8000e60 <StartRainBow_Task+0x84>
						setPixelColor(i, Wheel(((i * 256 / R_LED_CNT) + j) & 255));
 8000e32:	8afb      	ldrh	r3, [r7, #22]
 8000e34:	021b      	lsls	r3, r3, #8
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	da00      	bge.n	8000e3c <StartRainBow_Task+0x60>
 8000e3a:	337f      	adds	r3, #127	; 0x7f
 8000e3c:	11db      	asrs	r3, r3, #7
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	8abb      	ldrh	r3, [r7, #20]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	4413      	add	r3, r2
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f001 f94f 	bl	80020ec <Wheel>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	8afb      	ldrh	r3, [r7, #22]
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f001 f8c5 	bl	8001fe4 <setPixelColor>
					for(i=0; i< R_LED_CNT; i++) {
 8000e5a:	8afb      	ldrh	r3, [r7, #22]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	82fb      	strh	r3, [r7, #22]
 8000e60:	8afb      	ldrh	r3, [r7, #22]
 8000e62:	2b7f      	cmp	r3, #127	; 0x7f
 8000e64:	d9e5      	bls.n	8000e32 <StartRainBow_Task+0x56>
 8000e66:	e038      	b.n	8000eda <StartRainBow_Task+0xfe>
					}
				}
				else{ // break
					led_count++;
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	61bb      	str	r3, [r7, #24]
					if(led_count > 20) {
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	2b14      	cmp	r3, #20
 8000e72:	d903      	bls.n	8000e7c <StartRainBow_Task+0xa0>
						rainbow_led_time = 500;
 8000e74:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e78:	623b      	str	r3, [r7, #32]
 8000e7a:	e001      	b.n	8000e80 <StartRainBow_Task+0xa4>
					}else {
						rainbow_led_time = 50;
 8000e7c:	2332      	movs	r3, #50	; 0x32
 8000e7e:	623b      	str	r3, [r7, #32]
					}
					if(led_count > 30) {
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	2b1e      	cmp	r3, #30
 8000e84:	d902      	bls.n	8000e8c <StartRainBow_Task+0xb0>
							//led_count = 0;
							g_break_flg = 0;
 8000e86:	4b19      	ldr	r3, [pc, #100]	; (8000eec <StartRainBow_Task+0x110>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
					}

					if(led_flg) {
 8000e8c:	7ffb      	ldrb	r3, [r7, #31]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d012      	beq.n	8000eb8 <StartRainBow_Task+0xdc>
						for(int i = 0; i < B_LED_CNT; i++) {
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	e00b      	b.n	8000eb0 <StartRainBow_Task+0xd4>
							setPixelColor(i, 0xff0000);
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f001 f89f 	bl	8001fe4 <setPixelColor>
							led_flg = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	77fb      	strb	r3, [r7, #31]
						for(int i = 0; i < B_LED_CNT; i++) {
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	3301      	adds	r3, #1
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	2b13      	cmp	r3, #19
 8000eb4:	ddf0      	ble.n	8000e98 <StartRainBow_Task+0xbc>
 8000eb6:	e010      	b.n	8000eda <StartRainBow_Task+0xfe>
						}
					}else {
						for(int i = 0; i < B_LED_CNT; i++) {
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	e00a      	b.n	8000ed4 <StartRainBow_Task+0xf8>
							setPixelColor(i, 0);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f001 f88d 	bl	8001fe4 <setPixelColor>
							led_flg = 1;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	77fb      	strb	r3, [r7, #31]
						for(int i = 0; i < B_LED_CNT; i++) {
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2b13      	cmp	r3, #19
 8000ed8:	ddf1      	ble.n	8000ebe <StartRainBow_Task+0xe2>
		for(j=0; j<256*5;) { // 5 cycles of all colors on wheel
 8000eda:	8abb      	ldrh	r3, [r7, #20]
 8000edc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000ee0:	d38b      	bcc.n	8000dfa <StartRainBow_Task+0x1e>
						}
					}
				}
			}
		}
		osDelay(1);
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f007 f832 	bl	8007f4c <osDelay>
	{
 8000ee8:	e784      	b.n	8000df4 <StartRainBow_Task+0x18>
 8000eea:	bf00      	nop
 8000eec:	20000094 	.word	0x20000094

08000ef0 <StartAS504X_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAS504X_Task */
void StartAS504X_Task(void const * argument)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAS504X_Task */
  /* Infinite loop */

  uint32_t Task03_pre_time = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61fb      	str	r3, [r7, #28]
  uint32_t Task03_led_time = 1000;
 8000efc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f00:	61bb      	str	r3, [r7, #24]
  //uint32_t speed = 0;

  for(;;)
  {

		if (millis()-Task03_pre_time >= Task03_led_time)
 8000f02:	f000 fb45 	bl	8001590 <millis>
 8000f06:	4602      	mov	r2, r0
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d838      	bhi.n	8000f84 <StartAS504X_Task+0x94>
		{
			Task03_pre_time = millis();
 8000f12:	f000 fb3d 	bl	8001590 <millis>
 8000f16:	61f8      	str	r0, [r7, #28]
		  uint16_t current_angle = as504x_getRawRotation();
 8000f18:	f000 f8e4 	bl	80010e4 <as504x_getRawRotation>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	82fb      	strh	r3, [r7, #22]
		  float current_angle_map = as504x_read2angle(current_angle);
 8000f20:	8afb      	ldrh	r3, [r7, #22]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f934 	bl	8001190 <as504x_read2angle>
 8000f28:	ed87 0a04 	vstr	s0, [r7, #16]

		  float angle = current_angle_map - zero_position_map;
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <StartAS504X_Task+0x9c>)
 8000f2e:	edd3 7a00 	vldr	s15, [r3]
 8000f32:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f3a:	edc7 7a03 	vstr	s15, [r7, #12]
		  angle = as504x_normalize(angle);
 8000f3e:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f42:	f000 f8f9 	bl	8001138 <as504x_normalize>
 8000f46:	ed87 0a03 	vstr	s0, [r7, #12]
		  if( (angle - old_angle) > 10)
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <StartAS504X_Task+0xa0>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	ee07 3a90 	vmov	s15, r3
 8000f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f56:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f5e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6a:	dd02      	ble.n	8000f72 <StartAS504X_Task+0x82>
		  	g_break_flg = 1;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <StartAS504X_Task+0xa4>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
		  //else
		  	//g_break_flg = 0;
			old_angle = angle;
 8000f72:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f7a:	ee17 3a90 	vmov	r3, s15
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <StartAS504X_Task+0xa0>)
 8000f82:	801a      	strh	r2, [r3, #0]
	  if (as504x_error()) {
		  //printf("ERROR: %d\n", as504x_getErrors());
	  }

*/
    osDelay(1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f006 ffe1 	bl	8007f4c <osDelay>
		if (millis()-Task03_pre_time >= Task03_led_time)
 8000f8a:	e7ba      	b.n	8000f02 <StartAS504X_Task+0x12>
 8000f8c:	2000213c 	.word	0x2000213c
 8000f90:	20002066 	.word	0x20002066
 8000f94:	20000094 	.word	0x20000094

08000f98 <as504x_spiCalcEvenParity>:
}

/**
 * Utility function used to calculate even parity of word
 */
uint8_t as504x_spiCalcEvenParity(uint16_t value){
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80fb      	strh	r3, [r7, #6]
	uint8_t cnt = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73fb      	strb	r3, [r7, #15]
	uint8_t i;

	for (i = 0; i < 16; i++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73bb      	strb	r3, [r7, #14]
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80e      	bhi.n	8000fce <as504x_spiCalcEvenParity+0x36>
	{
		if (value & 0x1)
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d002      	beq.n	8000fc0 <as504x_spiCalcEvenParity+0x28>
		{
			cnt++;
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	73fb      	strb	r3, [r7, #15]
		}
		value >>= 1;
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	105b      	asrs	r3, r3, #1
 8000fc4:	80fb      	strh	r3, [r7, #6]
	for (i = 0; i < 16; i++)
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	73bb      	strb	r3, [r7, #14]
 8000fcc:	e7ed      	b.n	8000faa <as504x_spiCalcEvenParity+0x12>
	}
	return cnt & 0x1;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	b2db      	uxtb	r3, r3
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <as504x_read>:
/*
 * Read a register from the sensor
 * Takes the address of the register as a 16 bit word
 * Returns the value of the register
 */
uint16_t as504x_read(uint16_t registerAddress){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	80fb      	strh	r3, [r7, #6]

	uint8_t data[2];

	uint16_t command = 0b0100000000000000; // PAR=0 R/W=R
 8000fee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ff2:	81fb      	strh	r3, [r7, #14]
	command = command | registerAddress;
 8000ff4:	89fa      	ldrh	r2, [r7, #14]
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	81fb      	strh	r3, [r7, #14]

	//Add a parity bit on the the MSB
	command |= ((uint16_t)as504x_spiCalcEvenParity(command)<<15);
 8000ffc:	89fb      	ldrh	r3, [r7, #14]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ffca 	bl	8000f98 <as504x_spiCalcEvenParity>
 8001004:	4603      	mov	r3, r0
 8001006:	03db      	lsls	r3, r3, #15
 8001008:	b21a      	sxth	r2, r3
 800100a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800100e:	4313      	orrs	r3, r2
 8001010:	b21b      	sxth	r3, r3
 8001012:	81fb      	strh	r3, [r7, #14]

	//Split the command into two bytes
	data[1] = command & 0xFF;
 8001014:	89fb      	ldrh	r3, [r7, #14]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	737b      	strb	r3, [r7, #13]
	data[0] = ( command >> 8 ) & 0xFF;
 800101a:	89fb      	ldrh	r3, [r7, #14]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	b29b      	uxth	r3, r3
 8001020:	b2db      	uxtb	r3, r3
 8001022:	733b      	strb	r3, [r7, #12]

	EN_SPI;
 8001024:	2200      	movs	r2, #0
 8001026:	2110      	movs	r1, #16
 8001028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102c:	f002 faca 	bl	80035c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&data, 2, 0xFFFF);
 8001030:	f107 010c 	add.w	r1, r7, #12
 8001034:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001038:	2202      	movs	r2, #2
 800103a:	4828      	ldr	r0, [pc, #160]	; (80010dc <as504x_read+0xf8>)
 800103c:	f003 fff2 	bl	8005024 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {}
 8001040:	4826      	ldr	r0, [pc, #152]	; (80010dc <as504x_read+0xf8>)
 8001042:	f004 fcab 	bl	800599c <HAL_SPI_GetState>
 8001046:	4603      	mov	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	bf14      	ite	ne
 800104c:	2301      	movne	r3, #1
 800104e:	2300      	moveq	r3, #0
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d000      	beq.n	8001058 <as504x_read+0x74>
 8001056:	e7f3      	b.n	8001040 <as504x_read+0x5c>
	DIS_SPI;
 8001058:	2201      	movs	r2, #1
 800105a:	2110      	movs	r1, #16
 800105c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001060:	f002 fab0 	bl	80035c4 <HAL_GPIO_WritePin>

	EN_SPI;
 8001064:	2200      	movs	r2, #0
 8001066:	2110      	movs	r1, #16
 8001068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106c:	f002 faaa 	bl	80035c4 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)&data, 2, 0xFFFF);
 8001070:	f107 010c 	add.w	r1, r7, #12
 8001074:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001078:	2202      	movs	r2, #2
 800107a:	4818      	ldr	r0, [pc, #96]	; (80010dc <as504x_read+0xf8>)
 800107c:	f004 f948 	bl	8005310 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {}
 8001080:	4816      	ldr	r0, [pc, #88]	; (80010dc <as504x_read+0xf8>)
 8001082:	f004 fc8b 	bl	800599c <HAL_SPI_GetState>
 8001086:	4603      	mov	r3, r0
 8001088:	2b01      	cmp	r3, #1
 800108a:	bf14      	ite	ne
 800108c:	2301      	movne	r3, #1
 800108e:	2300      	moveq	r3, #0
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d000      	beq.n	8001098 <as504x_read+0xb4>
 8001096:	e7f3      	b.n	8001080 <as504x_read+0x9c>
	DIS_SPI;
 8001098:	2201      	movs	r2, #1
 800109a:	2110      	movs	r1, #16
 800109c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a0:	f002 fa90 	bl	80035c4 <HAL_GPIO_WritePin>

	if (data[1] & 0x40) {
 80010a4:	7b7b      	ldrb	r3, [r7, #13]
 80010a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <as504x_read+0xd2>
		errorFlag = 1;
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <as504x_read+0xfc>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	701a      	strb	r2, [r3, #0]
 80010b4:	e002      	b.n	80010bc <as504x_read+0xd8>
	} else {
		errorFlag = 0;
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <as504x_read+0xfc>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
	}

	//Return the data, stripping the parity and error bits
	return (( ( data[1] & 0xFF ) << 8 ) | ( data[0] & 0xFF )) & ~0xC000;
 80010bc:	7b7b      	ldrb	r3, [r7, #13]
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	7b3b      	ldrb	r3, [r7, #12]
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80010d0:	b29b      	uxth	r3, r3
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200020d4 	.word	0x200020d4
 80010e0:	2000009c 	.word	0x2000009c

080010e4 <as504x_getRawRotation>:
}

/**
 * Returns the raw angle directly from the sensor
 */
uint16_t as504x_getRawRotation(){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	return as504x_read(AS5048A_ANGLE);
 80010e8:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80010ec:	f7ff ff7a 	bl	8000fe4 <as504x_read>
 80010f0:	4603      	mov	r3, r0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_ZSt4fmodIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
 80010f6:	b5b0      	push	{r4, r5, r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	ed87 0a01 	vstr	s0, [r7, #4]
 8001100:	6038      	str	r0, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff f9f0 	bl	80004e8 <__aeabi_f2d>
 8001108:	4604      	mov	r4, r0
 800110a:	460d      	mov	r5, r1
 800110c:	6838      	ldr	r0, [r7, #0]
 800110e:	f7ff f9d9 	bl	80004c4 <__aeabi_i2d>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	ec43 2b11 	vmov	d1, r2, r3
 800111a:	ec45 4b10 	vmov	d0, r4, r5
 800111e:	f008 f837 	bl	8009190 <fmod>
 8001122:	eeb0 7a40 	vmov.f32	s14, s0
 8001126:	eef0 7a60 	vmov.f32	s15, s1
    }
 800112a:	eeb0 0a47 	vmov.f32	s0, s14
 800112e:	eef0 0a67 	vmov.f32	s1, s15
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bdb0      	pop	{r4, r5, r7, pc}

08001138 <as504x_normalize>:
}

/*
 * Returns normalized angle value
 */
float as504x_normalize(float angle) {
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	ed87 0a01 	vstr	s0, [r7, #4]
	// http://stackoverflow.com/a/11498248/3167294
	#ifdef ANGLE_MODE_1
		angle += 180;
	#endif
	angle = fmod(angle, 360);
 8001142:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8001146:	ed97 0a01 	vldr	s0, [r7, #4]
 800114a:	f7ff ffd4 	bl	80010f6 <_ZSt4fmodIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800114e:	ec54 3b10 	vmov	r3, r4, d0
 8001152:	4618      	mov	r0, r3
 8001154:	4621      	mov	r1, r4
 8001156:	f7ff fccf 	bl	8000af8 <__aeabi_d2f>
 800115a:	4603      	mov	r3, r0
 800115c:	607b      	str	r3, [r7, #4]
	if (angle < 0) {
 800115e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001162:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116a:	d507      	bpl.n	800117c <as504x_normalize+0x44>
		angle += 360;
 800116c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001170:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800118c <as504x_normalize+0x54>
 8001174:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001178:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	#ifdef ANGLE_MODE_1
		angle -= 180;
	#endif
	return angle;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	ee07 3a90 	vmov	s15, r3
}
 8001182:	eeb0 0a67 	vmov.f32	s0, s15
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	bd90      	pop	{r4, r7, pc}
 800118c:	43b40000 	.word	0x43b40000

08001190 <as504x_read2angle>:

/*
 * Returns caalculated angle value
 */
float as504x_read2angle(uint16_t angle) {
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	80fb      	strh	r3, [r7, #6]
	 * 14 bits = 2^(14) - 1 = 16.383
	 *
	 * https://www.arduino.cc/en/Reference/Map
	 *
	 */
	return (float)angle * ((float)360 / 16383);
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80011bc <as504x_read2angle+0x2c>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
};
 80011ac:	eeb0 0a67 	vmov.f32	s0, s15
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	3cb402d0 	.word	0x3cb402d0

080011c0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <MX_DMA_Init+0x60>)
 80011c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ca:	4a15      	ldr	r2, [pc, #84]	; (8001220 <MX_DMA_Init+0x60>)
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	6493      	str	r3, [r2, #72]	; 0x48
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <MX_DMA_Init+0x60>)
 80011d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <MX_DMA_Init+0x60>)
 80011e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e2:	4a0f      	ldr	r2, [pc, #60]	; (8001220 <MX_DMA_Init+0x60>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6493      	str	r3, [r2, #72]	; 0x48
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <MX_DMA_Init+0x60>)
 80011ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2105      	movs	r1, #5
 80011fa:	200d      	movs	r0, #13
 80011fc:	f001 f908 	bl	8002410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001200:	200d      	movs	r0, #13
 8001202:	f001 f92f 	bl	8002464 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2105      	movs	r1, #5
 800120a:	200e      	movs	r0, #14
 800120c:	f001 f900 	bl	8002410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001210:	200e      	movs	r0, #14
 8001212:	f001 f927 	bl	8002464 <HAL_NVIC_EnableIRQ>

}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000

08001224 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0

  hfdcan1.Instance = FDCAN1;
 8001228:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <MX_FDCAN1_Init+0x84>)
 800122a:	4a20      	ldr	r2, [pc, #128]	; (80012ac <MX_FDCAN1_Init+0x88>)
 800122c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800122e:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <MX_FDCAN1_Init+0x84>)
 8001230:	2200      	movs	r2, #0
 8001232:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001234:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <MX_FDCAN1_Init+0x84>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800123a:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <MX_FDCAN1_Init+0x84>)
 800123c:	2200      	movs	r2, #0
 800123e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001240:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <MX_FDCAN1_Init+0x84>)
 8001242:	2200      	movs	r2, #0
 8001244:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <MX_FDCAN1_Init+0x84>)
 8001248:	2200      	movs	r2, #0
 800124a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800124c:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <MX_FDCAN1_Init+0x84>)
 800124e:	2200      	movs	r2, #0
 8001250:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <MX_FDCAN1_Init+0x84>)
 8001254:	2201      	movs	r2, #1
 8001256:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <MX_FDCAN1_Init+0x84>)
 800125a:	2201      	movs	r2, #1
 800125c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_FDCAN1_Init+0x84>)
 8001260:	2202      	movs	r2, #2
 8001262:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001264:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <MX_FDCAN1_Init+0x84>)
 8001266:	2202      	movs	r2, #2
 8001268:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_FDCAN1_Init+0x84>)
 800126c:	2201      	movs	r2, #1
 800126e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001270:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <MX_FDCAN1_Init+0x84>)
 8001272:	2201      	movs	r2, #1
 8001274:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <MX_FDCAN1_Init+0x84>)
 8001278:	2201      	movs	r2, #1
 800127a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <MX_FDCAN1_Init+0x84>)
 800127e:	2201      	movs	r2, #1
 8001280:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_FDCAN1_Init+0x84>)
 8001284:	2200      	movs	r2, #0
 8001286:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <MX_FDCAN1_Init+0x84>)
 800128a:	2200      	movs	r2, #0
 800128c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_FDCAN1_Init+0x84>)
 8001290:	2200      	movs	r2, #0
 8001292:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <MX_FDCAN1_Init+0x84>)
 8001296:	f001 fc51 	bl	8002b3c <HAL_FDCAN_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80012a0:	f000 f9e8 	bl	8001674 <Error_Handler>
  }

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20002070 	.word	0x20002070
 80012ac:	40006400 	.word	0x40006400

080012b0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a18      	ldr	r2, [pc, #96]	; (8001330 <HAL_FDCAN_MspInit+0x80>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d129      	bne.n	8001326 <HAL_FDCAN_MspInit+0x76>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_FDCAN_MspInit+0x84>)
 80012d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d6:	4a17      	ldr	r2, [pc, #92]	; (8001334 <HAL_FDCAN_MspInit+0x84>)
 80012d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012dc:	6593      	str	r3, [r2, #88]	; 0x58
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_FDCAN_MspInit+0x84>)
 80012e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_FDCAN_MspInit+0x84>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	4a11      	ldr	r2, [pc, #68]	; (8001334 <HAL_FDCAN_MspInit+0x84>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_FDCAN_MspInit+0x84>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001302:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001314:	2309      	movs	r3, #9
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001322:	f001 fef7 	bl	8003114 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001326:	bf00      	nop
 8001328:	3728      	adds	r7, #40	; 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40006400 	.word	0x40006400
 8001334:	40021000 	.word	0x40021000

08001338 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800134e:	4b3f      	ldr	r3, [pc, #252]	; (800144c <MX_GPIO_Init+0x114>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	4a3e      	ldr	r2, [pc, #248]	; (800144c <MX_GPIO_Init+0x114>)
 8001354:	f043 0320 	orr.w	r3, r3, #32
 8001358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800135a:	4b3c      	ldr	r3, [pc, #240]	; (800144c <MX_GPIO_Init+0x114>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	f003 0320 	and.w	r3, r3, #32
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001366:	4b39      	ldr	r3, [pc, #228]	; (800144c <MX_GPIO_Init+0x114>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	4a38      	ldr	r2, [pc, #224]	; (800144c <MX_GPIO_Init+0x114>)
 800136c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001372:	4b36      	ldr	r3, [pc, #216]	; (800144c <MX_GPIO_Init+0x114>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	4b33      	ldr	r3, [pc, #204]	; (800144c <MX_GPIO_Init+0x114>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	4a32      	ldr	r2, [pc, #200]	; (800144c <MX_GPIO_Init+0x114>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138a:	4b30      	ldr	r3, [pc, #192]	; (800144c <MX_GPIO_Init+0x114>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	4b2d      	ldr	r3, [pc, #180]	; (800144c <MX_GPIO_Init+0x114>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	4a2c      	ldr	r2, [pc, #176]	; (800144c <MX_GPIO_Init+0x114>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a2:	4b2a      	ldr	r3, [pc, #168]	; (800144c <MX_GPIO_Init+0x114>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE0_Pin|LED_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 7188 	mov.w	r1, #272	; 0x110
 80013b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b8:	f002 f904 	bl	80035c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013bc:	2303      	movs	r3, #3
 80013be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c0:	2303      	movs	r3, #3
 80013c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4619      	mov	r1, r3
 80013ce:	4820      	ldr	r0, [pc, #128]	; (8001450 <MX_GPIO_Init+0x118>)
 80013d0:	f001 fea0 	bl	8003114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013da:	2303      	movs	r3, #3
 80013dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	481a      	ldr	r0, [pc, #104]	; (8001454 <MX_GPIO_Init+0x11c>)
 80013ea:	f001 fe93 	bl	8003114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA9 
                           PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9 
 80013ee:	f248 630e 	movw	r3, #34318	; 0x860e
 80013f2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f4:	2303      	movs	r3, #3
 80013f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001406:	f001 fe85 	bl	8003114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CE0_Pin|LED_Pin;
 800140a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800140e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001410:	2301      	movs	r3, #1
 8001412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001426:	f001 fe75 	bl	8003114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 PB4 PB6 
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6 
 800142a:	f240 13d9 	movw	r3, #473	; 0x1d9
 800142e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001430:	2303      	movs	r3, #3
 8001432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	4806      	ldr	r0, [pc, #24]	; (8001458 <MX_GPIO_Init+0x120>)
 8001440:	f001 fe68 	bl	8003114 <HAL_GPIO_Init>

}
 8001444:	bf00      	nop
 8001446:	3728      	adds	r7, #40	; 0x28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021000 	.word	0x40021000
 8001450:	48001400 	.word	0x48001400
 8001454:	48001800 	.word	0x48001800
 8001458:	48000400 	.word	0x48000400

0800145c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001460:	f000 fed1 	bl	8002206 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001464:	f000 f82e 	bl	80014c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001468:	f7ff ff66 	bl	8001338 <MX_GPIO_Init>
  MX_DMA_Init();
 800146c:	f7ff fea8 	bl	80011c0 <MX_DMA_Init>
  MX_SPI1_Init();
 8001470:	f000 f912 	bl	8001698 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001474:	f000 fa8c 	bl	8001990 <MX_TIM2_Init>
  MX_TIM17_Init();
 8001478:	f000 fae2 	bl	8001a40 <MX_TIM17_Init>
  MX_FDCAN1_Init();
 800147c:	f7ff fed2 	bl	8001224 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  ws2812Init();
 8001480:	f000 fc46 	bl	8001d10 <ws2812Init>
  ws2812Begin(B_LED_CNT, R_LED_CNT);
 8001484:	2180      	movs	r1, #128	; 0x80
 8001486:	2014      	movs	r0, #20
 8001488:	f000 fc58 	bl	8001d3c <ws2812Begin>
  zero_position = as504x_getRawRotation();
 800148c:	f7ff fe2a 	bl	80010e4 <as504x_getRawRotation>
 8001490:	4603      	mov	r3, r0
 8001492:	b29a      	uxth	r2, r3
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <main+0x60>)
 8001496:	801a      	strh	r2, [r3, #0]
  //printf("Zero: %d\n", zero_position);
  zero_position_map = as504x_read2angle(zero_position);
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <main+0x60>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fe77 	bl	8001190 <as504x_read2angle>
 80014a2:	ee07 0a90 	vmov	s15, r0
 80014a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014aa:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <main+0x64>)
 80014ac:	edc3 7a00 	vstr	s15, [r3]
  //printf("Angle: %f\n", zero_position_map);
	//uint32_t led_index=0;
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80014b0:	f7ff fb72 	bl	8000b98 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80014b4:	f006 fd1c 	bl	8007ef0 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <main+0x5c>
 80014ba:	bf00      	nop
 80014bc:	20002138 	.word	0x20002138
 80014c0:	2000213c 	.word	0x2000213c

080014c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b0a4      	sub	sp, #144	; 0x90
 80014c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014ce:	2238      	movs	r2, #56	; 0x38
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f007 fffe 	bl	80094d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014e8:	463b      	mov	r3, r7
 80014ea:	2244      	movs	r2, #68	; 0x44
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f007 fff0 	bl	80094d4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f002 f895 	bl	8003624 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014fa:	2302      	movs	r3, #2
 80014fc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001502:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001504:	2340      	movs	r3, #64	; 0x40
 8001506:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001508:	2302      	movs	r3, #2
 800150a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800150c:	2302      	movs	r3, #2
 800150e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001510:	2304      	movs	r3, #4
 8001512:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001514:	2355      	movs	r3, #85	; 0x55
 8001516:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800151a:	2302      	movs	r3, #2
 800151c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001520:	2302      	movs	r3, #2
 8001522:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001526:	2302      	movs	r3, #2
 8001528:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001530:	4618      	mov	r0, r3
 8001532:	f002 f92b 	bl	800378c <HAL_RCC_OscConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800153c:	f000 f89a 	bl	8001674 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001540:	230f      	movs	r3, #15
 8001542:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001544:	2303      	movs	r3, #3
 8001546:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800154c:	2300      	movs	r3, #0
 800154e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001550:	2300      	movs	r3, #0
 8001552:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8001554:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001558:	2108      	movs	r1, #8
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fd28 	bl	8003fb0 <HAL_RCC_ClockConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001566:	f000 f885 	bl	8001674 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800156a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001570:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001576:	463b      	mov	r3, r7
 8001578:	4618      	mov	r0, r3
 800157a:	f003 f821 	bl	80045c0 <HAL_RCCEx_PeriphCLKConfig>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001584:	f000 f876 	bl	8001674 <Error_Handler>
  }
}
 8001588:	bf00      	nop
 800158a:	3790      	adds	r7, #144	; 0x90
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <millis>:
{
  HAL_Delay(ms);
}

uint32_t millis(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001594:	f000 fe62 	bl	800225c <HAL_GetTick>
 8001598:	4603      	mov	r3, r0
}
 800159a:	4618      	mov	r0, r3
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <rotateLeft>:
 *
 * @num         Number to rotate.
 * @rotation    Number of times to rotate left.
 */
int rotateLeft(int num, unsigned int rotation)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
    int DROPPED_MSB;

    // The effective rotation
    rotation %= INT_BITS;
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <rotateLeft+0x50>)
 80015ae:	fba3 1302 	umull	r1, r3, r3, r2
 80015b2:	0919      	lsrs	r1, r3, #4
 80015b4:	460b      	mov	r3, r1
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	603b      	str	r3, [r7, #0]


    // Loop till rotation becomes 0
    while(rotation--)
 80015c0:	e009      	b.n	80015d6 <rotateLeft+0x36>
    {
        // Get MSB of num before it gets dropped
        DROPPED_MSB = (num >> INT_BITS) & 1;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	151b      	asrs	r3, r3, #20
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]

        // Left rotate num by 1 and
        // Set its dropped MSB as new LSB
        num = (num << 1) | DROPPED_MSB;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	607b      	str	r3, [r7, #4]
    while(rotation--)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	1e5a      	subs	r2, r3, #1
 80015da:	603a      	str	r2, [r7, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f0      	bne.n	80015c2 <rotateLeft+0x22>
    }

    return num;
 80015e0:	687b      	ldr	r3, [r7, #4]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	cccccccd 	.word	0xcccccccd

080015f4 <rotateRight>:
 *
 * @num         Number to rotate.
 * @rotation    Number of times to rotate right.
 */
int rotateRight(int num, unsigned int rotation)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
    int DROPPED_LSB;

    // The effective rotation
    rotation %= INT_BITS;
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <rotateRight+0x58>)
 8001602:	fba3 1302 	umull	r1, r3, r3, r2
 8001606:	0919      	lsrs	r1, r3, #4
 8001608:	460b      	mov	r3, r1
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	603b      	str	r3, [r7, #0]


    // Loop till rotation becomes 0
    while(rotation--)
 8001614:	e00d      	b.n	8001632 <rotateRight+0x3e>
    {
        // Get LSB of num before it gets dropped
        DROPPED_LSB = num & 1;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	60fb      	str	r3, [r7, #12]

        // Right shift num by 1 and
        // Clear its MSB
        num = (num >> 1) & (~(1 << INT_BITS));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	105b      	asrs	r3, r3, #1
 8001622:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001626:	607b      	str	r3, [r7, #4]

        // Set its dropped LSB as new MSB
        num = num | (DROPPED_LSB << INT_BITS);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	051b      	lsls	r3, r3, #20
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	4313      	orrs	r3, r2
 8001630:	607b      	str	r3, [r7, #4]
    while(rotation--)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	1e5a      	subs	r2, r3, #1
 8001636:	603a      	str	r2, [r7, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1ec      	bne.n	8001616 <rotateRight+0x22>
    }

    return num;
 800163c:	687b      	ldr	r3, [r7, #4]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	cccccccd 	.word	0xcccccccd

08001650 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d101      	bne.n	8001666 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001662:	f000 fde9 	bl	8002238 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40012c00 	.word	0x40012c00

08001674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
 800168a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800169c:	4b1b      	ldr	r3, [pc, #108]	; (800170c <MX_SPI1_Init+0x74>)
 800169e:	4a1c      	ldr	r2, [pc, #112]	; (8001710 <MX_SPI1_Init+0x78>)
 80016a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016a2:	4b1a      	ldr	r3, [pc, #104]	; (800170c <MX_SPI1_Init+0x74>)
 80016a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <MX_SPI1_Init+0x74>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80016b0:	4b16      	ldr	r3, [pc, #88]	; (800170c <MX_SPI1_Init+0x74>)
 80016b2:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80016b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <MX_SPI1_Init+0x74>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <MX_SPI1_Init+0x74>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_SPI1_Init+0x74>)
 80016c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <MX_SPI1_Init+0x74>)
 80016ce:	2218      	movs	r2, #24
 80016d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_SPI1_Init+0x74>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_SPI1_Init+0x74>)
 80016da:	2200      	movs	r2, #0
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <MX_SPI1_Init+0x74>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_SPI1_Init+0x74>)
 80016e6:	2207      	movs	r2, #7
 80016e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <MX_SPI1_Init+0x74>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_SPI1_Init+0x74>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_SPI1_Init+0x74>)
 80016f8:	f003 fb02 	bl	8004d00 <HAL_SPI_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001702:	f7ff ffb7 	bl	8001674 <Error_Handler>
  }

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200020d4 	.word	0x200020d4
 8001710:	40013000 	.word	0x40013000

08001714 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a25      	ldr	r2, [pc, #148]	; (80017c8 <HAL_SPI_MspInit+0xb4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d144      	bne.n	80017c0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001736:	4b25      	ldr	r3, [pc, #148]	; (80017cc <HAL_SPI_MspInit+0xb8>)
 8001738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173a:	4a24      	ldr	r2, [pc, #144]	; (80017cc <HAL_SPI_MspInit+0xb8>)
 800173c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001740:	6613      	str	r3, [r2, #96]	; 0x60
 8001742:	4b22      	ldr	r3, [pc, #136]	; (80017cc <HAL_SPI_MspInit+0xb8>)
 8001744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <HAL_SPI_MspInit+0xb8>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	4a1e      	ldr	r2, [pc, #120]	; (80017cc <HAL_SPI_MspInit+0xb8>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175a:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <HAL_SPI_MspInit+0xb8>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	4b19      	ldr	r3, [pc, #100]	; (80017cc <HAL_SPI_MspInit+0xb8>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	4a18      	ldr	r2, [pc, #96]	; (80017cc <HAL_SPI_MspInit+0xb8>)
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <HAL_SPI_MspInit+0xb8>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800177e:	2360      	movs	r3, #96	; 0x60
 8001780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800178e:	2305      	movs	r3, #5
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179c:	f001 fcba 	bl	8003114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017a0:	2320      	movs	r3, #32
 80017a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017b0:	2305      	movs	r3, #5
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	4619      	mov	r1, r3
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <HAL_SPI_MspInit+0xbc>)
 80017bc:	f001 fcaa 	bl	8003114 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80017c0:	bf00      	nop
 80017c2:	3728      	adds	r7, #40	; 0x28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40013000 	.word	0x40013000
 80017cc:	40021000 	.word	0x40021000
 80017d0:	48000400 	.word	0x48000400

080017d4 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80017de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e2:	6093      	str	r3, [r2, #8]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40007000 	.word	0x40007000

080017f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_MspInit+0x50>)
 80017fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fe:	4a11      	ldr	r2, [pc, #68]	; (8001844 <HAL_MspInit+0x50>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6613      	str	r3, [r2, #96]	; 0x60
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <HAL_MspInit+0x50>)
 8001808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <HAL_MspInit+0x50>)
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <HAL_MspInit+0x50>)
 8001818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181c:	6593      	str	r3, [r2, #88]	; 0x58
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_MspInit+0x50>)
 8001820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	210f      	movs	r1, #15
 800182e:	f06f 0001 	mvn.w	r0, #1
 8001832:	f000 fded 	bl	8002410 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8001836:	f7ff ffcd 	bl	80017d4 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40021000 	.word	0x40021000

08001848 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08c      	sub	sp, #48	; 0x30
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8001858:	2200      	movs	r2, #0
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	2019      	movs	r0, #25
 800185e:	f000 fdd7 	bl	8002410 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8001862:	2019      	movs	r0, #25
 8001864:	f000 fdfe 	bl	8002464 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001868:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <HAL_InitTick+0x9c>)
 800186a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800186c:	4a1d      	ldr	r2, [pc, #116]	; (80018e4 <HAL_InitTick+0x9c>)
 800186e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001872:	6613      	str	r3, [r2, #96]	; 0x60
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <HAL_InitTick+0x9c>)
 8001876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001880:	f107 0210 	add.w	r2, r7, #16
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f002 fe12 	bl	80044b4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001890:	f002 fdfa 	bl	8004488 <HAL_RCC_GetPCLK2Freq>
 8001894:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001898:	4a13      	ldr	r2, [pc, #76]	; (80018e8 <HAL_InitTick+0xa0>)
 800189a:	fba2 2303 	umull	r2, r3, r2, r3
 800189e:	0c9b      	lsrs	r3, r3, #18
 80018a0:	3b01      	subs	r3, #1
 80018a2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <HAL_InitTick+0xa4>)
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <HAL_InitTick+0xa8>)
 80018a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <HAL_InitTick+0xa4>)
 80018ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018b0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80018b2:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <HAL_InitTick+0xa4>)
 80018b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <HAL_InitTick+0xa4>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_InitTick+0xa4>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80018c4:	4809      	ldr	r0, [pc, #36]	; (80018ec <HAL_InitTick+0xa4>)
 80018c6:	f004 f9ed 	bl	8005ca4 <HAL_TIM_Base_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d104      	bne.n	80018da <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80018d0:	4806      	ldr	r0, [pc, #24]	; (80018ec <HAL_InitTick+0xa4>)
 80018d2:	f004 fac3 	bl	8005e5c <HAL_TIM_Base_Start_IT>
 80018d6:	4603      	mov	r3, r0
 80018d8:	e000      	b.n	80018dc <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3730      	adds	r7, #48	; 0x30
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40021000 	.word	0x40021000
 80018e8:	431bde83 	.word	0x431bde83
 80018ec:	20002140 	.word	0x20002140
 80018f0:	40012c00 	.word	0x40012c00

080018f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001906:	e7fe      	b.n	8001906 <HardFault_Handler+0x4>

08001908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800190c:	e7fe      	b.n	800190c <MemManage_Handler+0x4>

0800190e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <BusFault_Handler+0x4>

08001914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <UsageFault_Handler+0x4>

0800191a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <DMA1_Channel3_IRQHandler+0x10>)
 800192e:	f000 ffb5 	bl	800289c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20002284 	.word	0x20002284

0800193c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001940:	4802      	ldr	r0, [pc, #8]	; (800194c <DMA1_Channel4_IRQHandler+0x10>)
 8001942:	f000 ffab 	bl	800289c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	2000218c 	.word	0x2000218c

08001950 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001954:	4802      	ldr	r0, [pc, #8]	; (8001960 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001956:	f004 fe51 	bl	80065fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20002140 	.word	0x20002140

08001964 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <SystemInit+0x28>)
 800196a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800196e:	4a07      	ldr	r2, [pc, #28]	; (800198c <SystemInit+0x28>)
 8001970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <SystemInit+0x28>)
 800197a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800197e:	609a      	str	r2, [r3, #8]
#endif
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim2_ch1;
DMA_HandleTypeDef hdma_tim17_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019a2:	463b      	mov	r3, r7
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
 80019b0:	615a      	str	r2, [r3, #20]
 80019b2:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80019b4:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <MX_TIM2_Init+0xac>)
 80019b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019bc:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <MX_TIM2_Init+0xac>)
 80019be:	2200      	movs	r2, #0
 80019c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c2:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <MX_TIM2_Init+0xac>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 212;
 80019c8:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <MX_TIM2_Init+0xac>)
 80019ca:	22d4      	movs	r2, #212	; 0xd4
 80019cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ce:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <MX_TIM2_Init+0xac>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d4:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <MX_TIM2_Init+0xac>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019da:	4818      	ldr	r0, [pc, #96]	; (8001a3c <MX_TIM2_Init+0xac>)
 80019dc:	f004 fabe 	bl	8005f5c <HAL_TIM_PWM_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80019e6:	f7ff fe45 	bl	8001674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4619      	mov	r1, r3
 80019f8:	4810      	ldr	r0, [pc, #64]	; (8001a3c <MX_TIM2_Init+0xac>)
 80019fa:	f005 ff5b 	bl	80078b4 <HAL_TIMEx_MasterConfigSynchronization>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001a04:	f7ff fe36 	bl	8001674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a08:	2360      	movs	r3, #96	; 0x60
 8001a0a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a18:	463b      	mov	r3, r7
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4807      	ldr	r0, [pc, #28]	; (8001a3c <MX_TIM2_Init+0xac>)
 8001a20:	f004 ff6c 	bl	80068fc <HAL_TIM_PWM_ConfigChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001a2a:	f7ff fe23 	bl	8001674 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001a2e:	4803      	ldr	r0, [pc, #12]	; (8001a3c <MX_TIM2_Init+0xac>)
 8001a30:	f000 f914 	bl	8001c5c <HAL_TIM_MspPostInit>

}
 8001a34:	bf00      	nop
 8001a36:	3728      	adds	r7, #40	; 0x28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20002238 	.word	0x20002238

08001a40 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b094      	sub	sp, #80	; 0x50
 8001a44:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
 8001a54:	611a      	str	r2, [r3, #16]
 8001a56:	615a      	str	r2, [r3, #20]
 8001a58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	2234      	movs	r2, #52	; 0x34
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f007 fd37 	bl	80094d4 <memset>

  htim17.Instance = TIM17;
 8001a66:	4b30      	ldr	r3, [pc, #192]	; (8001b28 <MX_TIM17_Init+0xe8>)
 8001a68:	4a30      	ldr	r2, [pc, #192]	; (8001b2c <MX_TIM17_Init+0xec>)
 8001a6a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001a6c:	4b2e      	ldr	r3, [pc, #184]	; (8001b28 <MX_TIM17_Init+0xe8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a72:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <MX_TIM17_Init+0xe8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 212;
 8001a78:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <MX_TIM17_Init+0xe8>)
 8001a7a:	22d4      	movs	r2, #212	; 0xd4
 8001a7c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7e:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <MX_TIM17_Init+0xe8>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001a84:	4b28      	ldr	r3, [pc, #160]	; (8001b28 <MX_TIM17_Init+0xe8>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8a:	4b27      	ldr	r3, [pc, #156]	; (8001b28 <MX_TIM17_Init+0xe8>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001a90:	4825      	ldr	r0, [pc, #148]	; (8001b28 <MX_TIM17_Init+0xe8>)
 8001a92:	f004 f907 	bl	8005ca4 <HAL_TIM_Base_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001a9c:	f7ff fdea 	bl	8001674 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001aa0:	4821      	ldr	r0, [pc, #132]	; (8001b28 <MX_TIM17_Init+0xe8>)
 8001aa2:	f004 fa5b 	bl	8005f5c <HAL_TIM_PWM_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8001aac:	f7ff fde2 	bl	8001674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ab0:	2360      	movs	r3, #96	; 0x60
 8001ab2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001abc:	2300      	movs	r3, #0
 8001abe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001acc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4814      	ldr	r0, [pc, #80]	; (8001b28 <MX_TIM17_Init+0xe8>)
 8001ad6:	f004 ff11 	bl	80068fc <HAL_TIM_PWM_ConfigChannel>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 8001ae0:	f7ff fdc8 	bl	8001674 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001af8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001afc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001b06:	463b      	mov	r3, r7
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4807      	ldr	r0, [pc, #28]	; (8001b28 <MX_TIM17_Init+0xe8>)
 8001b0c:	f006 f816 	bl	8007b3c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8001b16:	f7ff fdad 	bl	8001674 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim17);
 8001b1a:	4803      	ldr	r0, [pc, #12]	; (8001b28 <MX_TIM17_Init+0xe8>)
 8001b1c:	f000 f89e 	bl	8001c5c <HAL_TIM_MspPostInit>

}
 8001b20:	bf00      	nop
 8001b22:	3750      	adds	r7, #80	; 0x50
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	200021ec 	.word	0x200021ec
 8001b2c:	40014800 	.word	0x40014800

08001b30 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b40:	d135      	bne.n	8001bae <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b42:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <HAL_TIM_PWM_MspInit+0x88>)
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b46:	4a1c      	ldr	r2, [pc, #112]	; (8001bb8 <HAL_TIM_PWM_MspInit+0x88>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <HAL_TIM_PWM_MspInit+0x88>)
 8001b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel4;
 8001b5a:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <HAL_TIM_PWM_MspInit+0x8c>)
 8001b5c:	4a18      	ldr	r2, [pc, #96]	; (8001bc0 <HAL_TIM_PWM_MspInit+0x90>)
 8001b5e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8001b60:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <HAL_TIM_PWM_MspInit+0x8c>)
 8001b62:	2238      	movs	r2, #56	; 0x38
 8001b64:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <HAL_TIM_PWM_MspInit+0x8c>)
 8001b68:	2210      	movs	r2, #16
 8001b6a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <HAL_TIM_PWM_MspInit+0x8c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001b72:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_TIM_PWM_MspInit+0x8c>)
 8001b74:	2280      	movs	r2, #128	; 0x80
 8001b76:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b78:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <HAL_TIM_PWM_MspInit+0x8c>)
 8001b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b7e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b80:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <HAL_TIM_PWM_MspInit+0x8c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001b86:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <HAL_TIM_PWM_MspInit+0x8c>)
 8001b88:	2220      	movs	r2, #32
 8001b8a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_TIM_PWM_MspInit+0x8c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001b92:	480a      	ldr	r0, [pc, #40]	; (8001bbc <HAL_TIM_PWM_MspInit+0x8c>)
 8001b94:	f000 fc7e 	bl	8002494 <HAL_DMA_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_TIM_PWM_MspInit+0x72>
    {
      Error_Handler();
 8001b9e:	f7ff fd69 	bl	8001674 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <HAL_TIM_PWM_MspInit+0x8c>)
 8001ba6:	625a      	str	r2, [r3, #36]	; 0x24
 8001ba8:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <HAL_TIM_PWM_MspInit+0x8c>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	2000218c 	.word	0x2000218c
 8001bc0:	40020044 	.word	0x40020044

08001bc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a1e      	ldr	r2, [pc, #120]	; (8001c4c <HAL_TIM_Base_MspInit+0x88>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d135      	bne.n	8001c42 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <HAL_TIM_Base_MspInit+0x8c>)
 8001bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bda:	4a1d      	ldr	r2, [pc, #116]	; (8001c50 <HAL_TIM_Base_MspInit+0x8c>)
 8001bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be0:	6613      	str	r3, [r2, #96]	; 0x60
 8001be2:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <HAL_TIM_Base_MspInit+0x8c>)
 8001be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM17 DMA Init */
    /* TIM17_CH1 Init */
    hdma_tim17_ch1.Instance = DMA1_Channel3;
 8001bee:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_TIM_Base_MspInit+0x90>)
 8001bf0:	4a19      	ldr	r2, [pc, #100]	; (8001c58 <HAL_TIM_Base_MspInit+0x94>)
 8001bf2:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
 8001bf4:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <HAL_TIM_Base_MspInit+0x90>)
 8001bf6:	2254      	movs	r2, #84	; 0x54
 8001bf8:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bfa:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <HAL_TIM_Base_MspInit+0x90>)
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c00:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <HAL_TIM_Base_MspInit+0x90>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <HAL_TIM_Base_MspInit+0x90>)
 8001c08:	2280      	movs	r2, #128	; 0x80
 8001c0a:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <HAL_TIM_Base_MspInit+0x90>)
 8001c0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c12:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_TIM_Base_MspInit+0x90>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1.Init.Mode = DMA_CIRCULAR;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <HAL_TIM_Base_MspInit+0x90>)
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	61da      	str	r2, [r3, #28]
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <HAL_TIM_Base_MspInit+0x90>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 8001c26:	480b      	ldr	r0, [pc, #44]	; (8001c54 <HAL_TIM_Base_MspInit+0x90>)
 8001c28:	f000 fc34 	bl	8002494 <HAL_DMA_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8001c32:	f7ff fd1f 	bl	8001674 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a06      	ldr	r2, [pc, #24]	; (8001c54 <HAL_TIM_Base_MspInit+0x90>)
 8001c3a:	625a      	str	r2, [r3, #36]	; 0x24
 8001c3c:	4a05      	ldr	r2, [pc, #20]	; (8001c54 <HAL_TIM_Base_MspInit+0x90>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40014800 	.word	0x40014800
 8001c50:	40021000 	.word	0x40021000
 8001c54:	20002284 	.word	0x20002284
 8001c58:	40020030 	.word	0x40020030

08001c5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7c:	d11d      	bne.n	8001cba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <HAL_TIM_MspPostInit+0xac>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c82:	4a21      	ldr	r2, [pc, #132]	; (8001d08 <HAL_TIM_MspPostInit+0xac>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c8a:	4b1f      	ldr	r3, [pc, #124]	; (8001d08 <HAL_TIM_MspPostInit+0xac>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = B_NP_Pin;
 8001c96:	2301      	movs	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(B_NP_GPIO_Port, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb4:	f001 fa2e 	bl	8003114 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001cb8:	e021      	b.n	8001cfe <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM17)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a13      	ldr	r2, [pc, #76]	; (8001d0c <HAL_TIM_MspPostInit+0xb0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d11c      	bne.n	8001cfe <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc4:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <HAL_TIM_MspPostInit+0xac>)
 8001cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc8:	4a0f      	ldr	r2, [pc, #60]	; (8001d08 <HAL_TIM_MspPostInit+0xac>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_TIM_MspPostInit+0xac>)
 8001cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = R_NP_Pin;
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001cec:	2301      	movs	r3, #1
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(R_NP_GPIO_Port, &GPIO_InitStruct);
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cfa:	f001 fa0b 	bl	8003114 <HAL_GPIO_Init>
}
 8001cfe:	bf00      	nop
 8001d00:	3728      	adds	r7, #40	; 0x28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40014800 	.word	0x40014800

08001d10 <ws2812Init>:
extern TIM_HandleTypeDef htim17;



_Bool ws2812Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  memset(led_buf, 0, sizeof(led_buf));
 8001d14:	f240 6232 	movw	r2, #1586	; 0x632
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4806      	ldr	r0, [pc, #24]	; (8001d34 <ws2812Init+0x24>)
 8001d1c:	f007 fbda 	bl	80094d4 <memset>
  memset(led_buf_rainbow, 0, sizeof(led_buf));
 8001d20:	f240 6232 	movw	r2, #1586	; 0x632
 8001d24:	2100      	movs	r1, #0
 8001d26:	4804      	ldr	r0, [pc, #16]	; (8001d38 <ws2812Init+0x28>)
 8001d28:	f007 fbd4 	bl	80094d4 <memset>

  return 0;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200000a0 	.word	0x200000a0
 8001d38:	200006d4 	.word	0x200006d4

08001d3c <ws2812Begin>:

void ws2812Begin(uint32_t break_led_cnt, uint32_t ranbow_led_cnt)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  ws2812.break_led_cnt = break_led_cnt;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <ws2812Begin+0x5c>)
 8001d4c:	801a      	strh	r2, [r3, #0]
  ws2812.ranbow_led_cnt = ranbow_led_cnt;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <ws2812Begin+0x5c>)
 8001d54:	805a      	strh	r2, [r3, #2]


  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)led_buf, (50 + 24 *  ws2812.break_led_cnt) * 1);
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <ws2812Begin+0x5c>)
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	0052      	lsls	r2, r2, #1
 8001d5e:	4413      	add	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	3332      	adds	r3, #50	; 0x32
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	4a0c      	ldr	r2, [pc, #48]	; (8001d9c <ws2812Begin+0x60>)
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	480c      	ldr	r0, [pc, #48]	; (8001da0 <ws2812Begin+0x64>)
 8001d6e:	f004 f9d1 	bl	8006114 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t *)led_buf_rainbow, (50 + 24 *  ws2812.ranbow_led_cnt) * 1);
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <ws2812Begin+0x5c>)
 8001d74:	885b      	ldrh	r3, [r3, #2]
 8001d76:	461a      	mov	r2, r3
 8001d78:	0052      	lsls	r2, r2, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	3332      	adds	r3, #50	; 0x32
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	4a07      	ldr	r2, [pc, #28]	; (8001da4 <ws2812Begin+0x68>)
 8001d86:	2100      	movs	r1, #0
 8001d88:	4807      	ldr	r0, [pc, #28]	; (8001da8 <ws2812Begin+0x6c>)
 8001d8a:	f004 f9c3 	bl	8006114 <HAL_TIM_PWM_Start_DMA>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200022e4 	.word	0x200022e4
 8001d9c:	200000a0 	.word	0x200000a0
 8001da0:	20002238 	.word	0x20002238
 8001da4:	200006d4 	.word	0x200006d4
 8001da8:	200021ec 	.word	0x200021ec

08001dac <ws2812SetColor>:

void ws2812SetColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b08b      	sub	sp, #44	; 0x2c
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	4608      	mov	r0, r1
 8001db6:	4611      	mov	r1, r2
 8001db8:	461a      	mov	r2, r3
 8001dba:	4603      	mov	r3, r0
 8001dbc:	70fb      	strb	r3, [r7, #3]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	70bb      	strb	r3, [r7, #2]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	707b      	strb	r3, [r7, #1]
  uint8_t b_bit[8];

  uint32_t offset;


  for (int i=0; i<8; i++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dca:	e03e      	b.n	8001e4a <ws2812SetColor+0x9e>
  {
    if (red & (1<<7))
 8001dcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	da06      	bge.n	8001de2 <ws2812SetColor+0x36>
    {
      r_bit[i] = BIT_HIGH;
 8001dd4:	f107 0218 	add.w	r2, r7, #24
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	4413      	add	r3, r2
 8001ddc:	2287      	movs	r2, #135	; 0x87
 8001dde:	701a      	strb	r2, [r3, #0]
 8001de0:	e005      	b.n	8001dee <ws2812SetColor+0x42>
    }
    else
    {
      r_bit[i] = BIT_LOW;
 8001de2:	f107 0218 	add.w	r2, r7, #24
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	4413      	add	r3, r2
 8001dea:	2243      	movs	r2, #67	; 0x43
 8001dec:	701a      	strb	r2, [r3, #0]
    }
    red <<= 1;
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	70fb      	strb	r3, [r7, #3]

    if (green & (1<<7))
 8001df4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	da06      	bge.n	8001e0a <ws2812SetColor+0x5e>
    {
      g_bit[i] = BIT_HIGH;
 8001dfc:	f107 0210 	add.w	r2, r7, #16
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	4413      	add	r3, r2
 8001e04:	2287      	movs	r2, #135	; 0x87
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	e005      	b.n	8001e16 <ws2812SetColor+0x6a>
    }
    else
    {
      g_bit[i] = BIT_LOW;
 8001e0a:	f107 0210 	add.w	r2, r7, #16
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	4413      	add	r3, r2
 8001e12:	2243      	movs	r2, #67	; 0x43
 8001e14:	701a      	strb	r2, [r3, #0]
    }
    green <<= 1;
 8001e16:	78bb      	ldrb	r3, [r7, #2]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	70bb      	strb	r3, [r7, #2]

    if (blue & (1<<7))
 8001e1c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	da06      	bge.n	8001e32 <ws2812SetColor+0x86>
    {
      b_bit[i] = BIT_HIGH;
 8001e24:	f107 0208 	add.w	r2, r7, #8
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	4413      	add	r3, r2
 8001e2c:	2287      	movs	r2, #135	; 0x87
 8001e2e:	701a      	strb	r2, [r3, #0]
 8001e30:	e005      	b.n	8001e3e <ws2812SetColor+0x92>
    }
    else
    {
      b_bit[i] = BIT_LOW;
 8001e32:	f107 0208 	add.w	r2, r7, #8
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	4413      	add	r3, r2
 8001e3a:	2243      	movs	r2, #67	; 0x43
 8001e3c:	701a      	strb	r2, [r3, #0]
    }
    blue <<= 1;
 8001e3e:	787b      	ldrb	r3, [r7, #1]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	707b      	strb	r3, [r7, #1]
  for (int i=0; i<8; i++)
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	3301      	adds	r3, #1
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	2b07      	cmp	r3, #7
 8001e4e:	ddbd      	ble.n	8001dcc <ws2812SetColor+0x20>
  }

  offset = 50;
 8001e50:	2332      	movs	r3, #50	; 0x32
 8001e52:	623b      	str	r3, [r7, #32]

  memcpy(&led_buf[offset + index*24 + 8*0], g_bit, 8*1);
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	4413      	add	r3, r2
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <ws2812SetColor+0x118>)
 8001e66:	4413      	add	r3, r2
 8001e68:	461a      	mov	r2, r3
 8001e6a:	f107 0310 	add.w	r3, r7, #16
 8001e6e:	cb03      	ldmia	r3!, {r0, r1}
 8001e70:	6010      	str	r0, [r2, #0]
 8001e72:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf[offset + index*24 + 8*1], r_bit, 8*1);
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	4413      	add	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	461a      	mov	r2, r3
 8001e80:	6a3b      	ldr	r3, [r7, #32]
 8001e82:	4413      	add	r3, r2
 8001e84:	3308      	adds	r3, #8
 8001e86:	4a0f      	ldr	r2, [pc, #60]	; (8001ec4 <ws2812SetColor+0x118>)
 8001e88:	4413      	add	r3, r2
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f107 0318 	add.w	r3, r7, #24
 8001e90:	cb03      	ldmia	r3!, {r0, r1}
 8001e92:	6010      	str	r0, [r2, #0]
 8001e94:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf[offset + index*24 + 8*2], b_bit, 8*1);
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3310      	adds	r3, #16
 8001ea8:	4a06      	ldr	r2, [pc, #24]	; (8001ec4 <ws2812SetColor+0x118>)
 8001eaa:	4413      	add	r3, r2
 8001eac:	461a      	mov	r2, r3
 8001eae:	f107 0308 	add.w	r3, r7, #8
 8001eb2:	cb03      	ldmia	r3!, {r0, r1}
 8001eb4:	6010      	str	r0, [r2, #0]
 8001eb6:	6051      	str	r1, [r2, #4]
}
 8001eb8:	bf00      	nop
 8001eba:	372c      	adds	r7, #44	; 0x2c
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	200000a0 	.word	0x200000a0

08001ec8 <ws2812SetRanbowColor>:

void ws2812SetRanbowColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b08b      	sub	sp, #44	; 0x2c
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	4608      	mov	r0, r1
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	70fb      	strb	r3, [r7, #3]
 8001eda:	460b      	mov	r3, r1
 8001edc:	70bb      	strb	r3, [r7, #2]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	707b      	strb	r3, [r7, #1]
  uint8_t b_bit[8];

  uint32_t offset;


  for (int i=0; i<8; i++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee6:	e03e      	b.n	8001f66 <ws2812SetRanbowColor+0x9e>
  {
    if (red & (1<<7))
 8001ee8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	da06      	bge.n	8001efe <ws2812SetRanbowColor+0x36>
    {
      r_bit[i] = BIT_HIGH;
 8001ef0:	f107 0218 	add.w	r2, r7, #24
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	4413      	add	r3, r2
 8001ef8:	2287      	movs	r2, #135	; 0x87
 8001efa:	701a      	strb	r2, [r3, #0]
 8001efc:	e005      	b.n	8001f0a <ws2812SetRanbowColor+0x42>
    }
    else
    {
      r_bit[i] = BIT_LOW;
 8001efe:	f107 0218 	add.w	r2, r7, #24
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	4413      	add	r3, r2
 8001f06:	2243      	movs	r2, #67	; 0x43
 8001f08:	701a      	strb	r2, [r3, #0]
    }
    red <<= 1;
 8001f0a:	78fb      	ldrb	r3, [r7, #3]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	70fb      	strb	r3, [r7, #3]

    if (green & (1<<7))
 8001f10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	da06      	bge.n	8001f26 <ws2812SetRanbowColor+0x5e>
    {
      g_bit[i] = BIT_HIGH;
 8001f18:	f107 0210 	add.w	r2, r7, #16
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	4413      	add	r3, r2
 8001f20:	2287      	movs	r2, #135	; 0x87
 8001f22:	701a      	strb	r2, [r3, #0]
 8001f24:	e005      	b.n	8001f32 <ws2812SetRanbowColor+0x6a>
    }
    else
    {
      g_bit[i] = BIT_LOW;
 8001f26:	f107 0210 	add.w	r2, r7, #16
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	4413      	add	r3, r2
 8001f2e:	2243      	movs	r2, #67	; 0x43
 8001f30:	701a      	strb	r2, [r3, #0]
    }
    green <<= 1;
 8001f32:	78bb      	ldrb	r3, [r7, #2]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	70bb      	strb	r3, [r7, #2]

    if (blue & (1<<7))
 8001f38:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	da06      	bge.n	8001f4e <ws2812SetRanbowColor+0x86>
    {
      b_bit[i] = BIT_HIGH;
 8001f40:	f107 0208 	add.w	r2, r7, #8
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	4413      	add	r3, r2
 8001f48:	2287      	movs	r2, #135	; 0x87
 8001f4a:	701a      	strb	r2, [r3, #0]
 8001f4c:	e005      	b.n	8001f5a <ws2812SetRanbowColor+0x92>
    }
    else
    {
      b_bit[i] = BIT_LOW;
 8001f4e:	f107 0208 	add.w	r2, r7, #8
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	4413      	add	r3, r2
 8001f56:	2243      	movs	r2, #67	; 0x43
 8001f58:	701a      	strb	r2, [r3, #0]
    }
    blue <<= 1;
 8001f5a:	787b      	ldrb	r3, [r7, #1]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	707b      	strb	r3, [r7, #1]
  for (int i=0; i<8; i++)
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	3301      	adds	r3, #1
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	2b07      	cmp	r3, #7
 8001f6a:	ddbd      	ble.n	8001ee8 <ws2812SetRanbowColor+0x20>
  }

  offset = 50;
 8001f6c:	2332      	movs	r3, #50	; 0x32
 8001f6e:	623b      	str	r3, [r7, #32]

  memcpy(&led_buf_rainbow[offset + index*24 + 8*0], g_bit, 8*1);
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	4413      	add	r3, r2
 8001f80:	4a17      	ldr	r2, [pc, #92]	; (8001fe0 <ws2812SetRanbowColor+0x118>)
 8001f82:	4413      	add	r3, r2
 8001f84:	461a      	mov	r2, r3
 8001f86:	f107 0310 	add.w	r3, r7, #16
 8001f8a:	cb03      	ldmia	r3!, {r0, r1}
 8001f8c:	6010      	str	r0, [r2, #0]
 8001f8e:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf_rainbow[offset + index*24 + 8*1], r_bit, 8*1);
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	4413      	add	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3308      	adds	r3, #8
 8001fa2:	4a0f      	ldr	r2, [pc, #60]	; (8001fe0 <ws2812SetRanbowColor+0x118>)
 8001fa4:	4413      	add	r3, r2
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	f107 0318 	add.w	r3, r7, #24
 8001fac:	cb03      	ldmia	r3!, {r0, r1}
 8001fae:	6010      	str	r0, [r2, #0]
 8001fb0:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf_rainbow[offset + index*24 + 8*2], b_bit, 8*1);
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4413      	add	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3310      	adds	r3, #16
 8001fc4:	4a06      	ldr	r2, [pc, #24]	; (8001fe0 <ws2812SetRanbowColor+0x118>)
 8001fc6:	4413      	add	r3, r2
 8001fc8:	461a      	mov	r2, r3
 8001fca:	f107 0308 	add.w	r3, r7, #8
 8001fce:	cb03      	ldmia	r3!, {r0, r1}
 8001fd0:	6010      	str	r0, [r2, #0]
 8001fd2:	6051      	str	r1, [r2, #4]
}
 8001fd4:	bf00      	nop
 8001fd6:	372c      	adds	r7, #44	; 0x2c
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	200006d4 	.word	0x200006d4

08001fe4 <setPixelColor>:
    }
    brightness = newBrightness;
  }
}

void setPixelColor(uint16_t n, uint32_t c) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	6039      	str	r1, [r7, #0]
 8001fee:	80fb      	strh	r3, [r7, #6]
  if(n < ws2812.ranbow_led_cnt) {
 8001ff0:	4b37      	ldr	r3, [pc, #220]	; (80020d0 <setPixelColor+0xec>)
 8001ff2:	885b      	ldrh	r3, [r3, #2]
 8001ff4:	88fa      	ldrh	r2, [r7, #6]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d266      	bcs.n	80020c8 <setPixelColor+0xe4>
    uint8_t *p,
      r = (uint8_t)(c >> 16),
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	0c1b      	lsrs	r3, r3, #16
 8001ffe:	72fb      	strb	r3, [r7, #11]
      g = (uint8_t)(c >>  8),
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	0a1b      	lsrs	r3, r3, #8
 8002004:	72bb      	strb	r3, [r7, #10]
      b = (uint8_t)c;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	727b      	strb	r3, [r7, #9]
    if(brightness) { // See notes in setBrightness()
 800200a:	4b32      	ldr	r3, [pc, #200]	; (80020d4 <setPixelColor+0xf0>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d014      	beq.n	800203c <setPixelColor+0x58>
      r = (r * brightness) >> 8;
 8002012:	7afb      	ldrb	r3, [r7, #11]
 8002014:	4a2f      	ldr	r2, [pc, #188]	; (80020d4 <setPixelColor+0xf0>)
 8002016:	7812      	ldrb	r2, [r2, #0]
 8002018:	fb02 f303 	mul.w	r3, r2, r3
 800201c:	121b      	asrs	r3, r3, #8
 800201e:	72fb      	strb	r3, [r7, #11]
      g = (g * brightness) >> 8;
 8002020:	7abb      	ldrb	r3, [r7, #10]
 8002022:	4a2c      	ldr	r2, [pc, #176]	; (80020d4 <setPixelColor+0xf0>)
 8002024:	7812      	ldrb	r2, [r2, #0]
 8002026:	fb02 f303 	mul.w	r3, r2, r3
 800202a:	121b      	asrs	r3, r3, #8
 800202c:	72bb      	strb	r3, [r7, #10]
      b = (b * brightness) >> 8;
 800202e:	7a7b      	ldrb	r3, [r7, #9]
 8002030:	4a28      	ldr	r2, [pc, #160]	; (80020d4 <setPixelColor+0xf0>)
 8002032:	7812      	ldrb	r2, [r2, #0]
 8002034:	fb02 f303 	mul.w	r3, r2, r3
 8002038:	121b      	asrs	r3, r3, #8
 800203a:	727b      	strb	r3, [r7, #9]
    }
    if(wOffset == rOffset) {
 800203c:	4b26      	ldr	r3, [pc, #152]	; (80020d8 <setPixelColor+0xf4>)
 800203e:	781a      	ldrb	r2, [r3, #0]
 8002040:	4b26      	ldr	r3, [pc, #152]	; (80020dc <setPixelColor+0xf8>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d108      	bne.n	800205a <setPixelColor+0x76>
      p = &pixels[n * 3];
 8002048:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <setPixelColor+0xfc>)
 800204a:	6819      	ldr	r1, [r3, #0]
 800204c:	88fa      	ldrh	r2, [r7, #6]
 800204e:	4613      	mov	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4413      	add	r3, r2
 8002054:	440b      	add	r3, r1
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	e01b      	b.n	8002092 <setPixelColor+0xae>
    } else {
      p = &pixels[n * 4];
 800205a:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <setPixelColor+0xfc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	88fa      	ldrh	r2, [r7, #6]
 8002060:	0092      	lsls	r2, r2, #2
 8002062:	4413      	add	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
      uint8_t w = (uint8_t)(c >> 24);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	0e1b      	lsrs	r3, r3, #24
 800206a:	723b      	strb	r3, [r7, #8]
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <setPixelColor+0xf0>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <setPixelColor+0xa0>
 8002074:	7a3b      	ldrb	r3, [r7, #8]
 8002076:	4a17      	ldr	r2, [pc, #92]	; (80020d4 <setPixelColor+0xf0>)
 8002078:	7812      	ldrb	r2, [r2, #0]
 800207a:	fb02 f303 	mul.w	r3, r2, r3
 800207e:	121b      	asrs	r3, r3, #8
 8002080:	b2db      	uxtb	r3, r3
 8002082:	e000      	b.n	8002086 <setPixelColor+0xa2>
 8002084:	7a3b      	ldrb	r3, [r7, #8]
 8002086:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <setPixelColor+0xf4>)
 8002088:	7812      	ldrb	r2, [r2, #0]
 800208a:	4611      	mov	r1, r2
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	440a      	add	r2, r1
 8002090:	7013      	strb	r3, [r2, #0]
    }
    p[rOffset] = r;
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <setPixelColor+0xf8>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4413      	add	r3, r2
 800209c:	7afa      	ldrb	r2, [r7, #11]
 800209e:	701a      	strb	r2, [r3, #0]
    p[gOffset] = g;
 80020a0:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <setPixelColor+0x100>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4413      	add	r3, r2
 80020aa:	7aba      	ldrb	r2, [r7, #10]
 80020ac:	701a      	strb	r2, [r3, #0]
    p[bOffset] = b;
 80020ae:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <setPixelColor+0x104>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4413      	add	r3, r2
 80020b8:	7a7a      	ldrb	r2, [r7, #9]
 80020ba:	701a      	strb	r2, [r3, #0]
    ws2812SetRanbowColor(n, r, g , b);
 80020bc:	88f8      	ldrh	r0, [r7, #6]
 80020be:	7a7b      	ldrb	r3, [r7, #9]
 80020c0:	7aba      	ldrb	r2, [r7, #10]
 80020c2:	7af9      	ldrb	r1, [r7, #11]
 80020c4:	f7ff ff00 	bl	8001ec8 <ws2812SetRanbowColor>
  }

}
 80020c8:	bf00      	nop
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	200022e4 	.word	0x200022e4
 80020d4:	2000206c 	.word	0x2000206c
 80020d8:	20002060 	.word	0x20002060
 80020dc:	2000206e 	.word	0x2000206e
 80020e0:	20002054 	.word	0x20002054
 80020e4:	20002064 	.word	0x20002064
 80020e8:	2000206d 	.word	0x2000206d

080020ec <Wheel>:

uint32_t Wheel(uint8_t WheelPos) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
  WheelPos = 255 - WheelPos;
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	71fb      	strb	r3, [r7, #7]
  if(WheelPos < 85) {
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	2b54      	cmp	r3, #84	; 0x54
 8002100:	d811      	bhi.n	8002126 <Wheel+0x3a>
    return Color(255 - WheelPos * 3, 0, WheelPos * 3);
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	461a      	mov	r2, r3
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b2d8      	uxtb	r0, r3
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	461a      	mov	r2, r3
 8002114:	0052      	lsls	r2, r2, #1
 8002116:	4413      	add	r3, r2
 8002118:	b2db      	uxtb	r3, r3
 800211a:	461a      	mov	r2, r3
 800211c:	2100      	movs	r1, #0
 800211e:	f000 f832 	bl	8002186 <Color>
 8002122:	4603      	mov	r3, r0
 8002124:	e02b      	b.n	800217e <Wheel+0x92>
  }
  if(WheelPos < 170) {
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	2ba9      	cmp	r3, #169	; 0xa9
 800212a:	d814      	bhi.n	8002156 <Wheel+0x6a>
  		WheelPos -= 85;
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	3b55      	subs	r3, #85	; 0x55
 8002130:	71fb      	strb	r3, [r7, #7]
    return Color(0, WheelPos * 3, 255 - WheelPos * 3);
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	461a      	mov	r2, r3
 8002136:	0052      	lsls	r2, r2, #1
 8002138:	4413      	add	r3, r2
 800213a:	b2d9      	uxtb	r1, r3
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	461a      	mov	r2, r3
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	3b01      	subs	r3, #1
 8002148:	b2db      	uxtb	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	2000      	movs	r0, #0
 800214e:	f000 f81a 	bl	8002186 <Color>
 8002152:	4603      	mov	r3, r0
 8002154:	e013      	b.n	800217e <Wheel+0x92>
  }
  WheelPos -= 170;
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	3356      	adds	r3, #86	; 0x56
 800215a:	71fb      	strb	r3, [r7, #7]
  return Color(WheelPos * 3, 255 - WheelPos * 3, 0);
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	461a      	mov	r2, r3
 8002160:	0052      	lsls	r2, r2, #1
 8002162:	4413      	add	r3, r2
 8002164:	b2d8      	uxtb	r0, r3
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	461a      	mov	r2, r3
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	3b01      	subs	r3, #1
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2200      	movs	r2, #0
 8002176:	4619      	mov	r1, r3
 8002178:	f000 f805 	bl	8002186 <Color>
 800217c:	4603      	mov	r3, r0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <Color>:

uint32_t Color(uint8_t r, uint8_t g, uint8_t b) {
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	71fb      	strb	r3, [r7, #7]
 8002190:	460b      	mov	r3, r1
 8002192:	71bb      	strb	r3, [r7, #6]
 8002194:	4613      	mov	r3, r2
 8002196:	717b      	strb	r3, [r7, #5]
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	041a      	lsls	r2, r3, #16
 800219c:	79bb      	ldrb	r3, [r7, #6]
 800219e:	021b      	lsls	r3, r3, #8
 80021a0:	431a      	orrs	r2, r3
 80021a2:	797b      	ldrb	r3, [r7, #5]
 80021a4:	4313      	orrs	r3, r2
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021b4:	480d      	ldr	r0, [pc, #52]	; (80021ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021b8:	480d      	ldr	r0, [pc, #52]	; (80021f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80021ba:	490e      	ldr	r1, [pc, #56]	; (80021f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021bc:	4a0e      	ldr	r2, [pc, #56]	; (80021f8 <LoopForever+0xe>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80021c0:	e002      	b.n	80021c8 <LoopCopyDataInit>

080021c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021c6:	3304      	adds	r3, #4

080021c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021cc:	d3f9      	bcc.n	80021c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ce:	4a0b      	ldr	r2, [pc, #44]	; (80021fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80021d0:	4c0b      	ldr	r4, [pc, #44]	; (8002200 <LoopForever+0x16>)
  movs r3, #0
 80021d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021d4:	e001      	b.n	80021da <LoopFillZerobss>

080021d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021d8:	3204      	adds	r2, #4

080021da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021dc:	d3fb      	bcc.n	80021d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021de:	f7ff fbc1 	bl	8001964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021e2:	f007 f953 	bl	800948c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021e6:	f7ff f939 	bl	800145c <main>

080021ea <LoopForever>:

LoopForever:
    b LoopForever
 80021ea:	e7fe      	b.n	80021ea <LoopForever>
  ldr   r0, =_estack
 80021ec:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80021f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021f4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80021f8:	080097f0 	.word	0x080097f0
  ldr r2, =_sbss
 80021fc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002200:	200022ec 	.word	0x200022ec

08002204 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002204:	e7fe      	b.n	8002204 <ADC1_2_IRQHandler>

08002206 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800220c:	2300      	movs	r3, #0
 800220e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002210:	2003      	movs	r0, #3
 8002212:	f000 f8dd 	bl	80023d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002216:	2000      	movs	r0, #0
 8002218:	f7ff fb16 	bl	8001848 <HAL_InitTick>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d002      	beq.n	8002228 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	71fb      	strb	r3, [r7, #7]
 8002226:	e001      	b.n	800222c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002228:	f7ff fae4 	bl	80017f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800222c:	79fb      	ldrb	r3, [r7, #7]

}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <HAL_IncTick+0x1c>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_IncTick+0x20>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4413      	add	r3, r2
 8002246:	4a03      	ldr	r2, [pc, #12]	; (8002254 <HAL_IncTick+0x1c>)
 8002248:	6013      	str	r3, [r2, #0]
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	200022e8 	.word	0x200022e8
 8002258:	20000008 	.word	0x20000008

0800225c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return uwTick;
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <HAL_GetTick+0x14>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	200022e8 	.word	0x200022e8

08002274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002290:	4013      	ands	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800229c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a6:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	60d3      	str	r3, [r2, #12]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <__NVIC_GetPriorityGrouping+0x18>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	f003 0307 	and.w	r3, r3, #7
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	db0b      	blt.n	8002302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	4907      	ldr	r1, [pc, #28]	; (8002310 <__NVIC_EnableIRQ+0x38>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	2001      	movs	r0, #1
 80022fa:	fa00 f202 	lsl.w	r2, r0, r2
 80022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000e100 	.word	0xe000e100

08002314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	6039      	str	r1, [r7, #0]
 800231e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	2b00      	cmp	r3, #0
 8002326:	db0a      	blt.n	800233e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	b2da      	uxtb	r2, r3
 800232c:	490c      	ldr	r1, [pc, #48]	; (8002360 <__NVIC_SetPriority+0x4c>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	0112      	lsls	r2, r2, #4
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	440b      	add	r3, r1
 8002338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800233c:	e00a      	b.n	8002354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4908      	ldr	r1, [pc, #32]	; (8002364 <__NVIC_SetPriority+0x50>)
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	3b04      	subs	r3, #4
 800234c:	0112      	lsls	r2, r2, #4
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	440b      	add	r3, r1
 8002352:	761a      	strb	r2, [r3, #24]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000e100 	.word	0xe000e100
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f1c3 0307 	rsb	r3, r3, #7
 8002382:	2b04      	cmp	r3, #4
 8002384:	bf28      	it	cs
 8002386:	2304      	movcs	r3, #4
 8002388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3304      	adds	r3, #4
 800238e:	2b06      	cmp	r3, #6
 8002390:	d902      	bls.n	8002398 <NVIC_EncodePriority+0x30>
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3b03      	subs	r3, #3
 8002396:	e000      	b.n	800239a <NVIC_EncodePriority+0x32>
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	f04f 32ff 	mov.w	r2, #4294967295
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43da      	mvns	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	401a      	ands	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b0:	f04f 31ff 	mov.w	r1, #4294967295
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	43d9      	mvns	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	4313      	orrs	r3, r2
         );
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3724      	adds	r7, #36	; 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b07      	cmp	r3, #7
 80023dc:	d00f      	beq.n	80023fe <HAL_NVIC_SetPriorityGrouping+0x2e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b06      	cmp	r3, #6
 80023e2:	d00c      	beq.n	80023fe <HAL_NVIC_SetPriorityGrouping+0x2e>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b05      	cmp	r3, #5
 80023e8:	d009      	beq.n	80023fe <HAL_NVIC_SetPriorityGrouping+0x2e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d006      	beq.n	80023fe <HAL_NVIC_SetPriorityGrouping+0x2e>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d003      	beq.n	80023fe <HAL_NVIC_SetPriorityGrouping+0x2e>
 80023f6:	21a7      	movs	r1, #167	; 0xa7
 80023f8:	4804      	ldr	r0, [pc, #16]	; (800240c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80023fa:	f7ff f942 	bl	8001682 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ff38 	bl	8002274 <__NVIC_SetPriorityGrouping>
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	08009564 	.word	0x08009564

08002410 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b0f      	cmp	r3, #15
 8002422:	d903      	bls.n	800242c <HAL_NVIC_SetPriority+0x1c>
 8002424:	21bf      	movs	r1, #191	; 0xbf
 8002426:	480e      	ldr	r0, [pc, #56]	; (8002460 <HAL_NVIC_SetPriority+0x50>)
 8002428:	f7ff f92b 	bl	8001682 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b0f      	cmp	r3, #15
 8002430:	d903      	bls.n	800243a <HAL_NVIC_SetPriority+0x2a>
 8002432:	21c0      	movs	r1, #192	; 0xc0
 8002434:	480a      	ldr	r0, [pc, #40]	; (8002460 <HAL_NVIC_SetPriority+0x50>)
 8002436:	f7ff f924 	bl	8001682 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 800243a:	f7ff ff3f 	bl	80022bc <__NVIC_GetPriorityGrouping>
 800243e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	6978      	ldr	r0, [r7, #20]
 8002446:	f7ff ff8f 	bl	8002368 <NVIC_EncodePriority>
 800244a:	4602      	mov	r2, r0
 800244c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002450:	4611      	mov	r1, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ff5e 	bl	8002314 <__NVIC_SetPriority>
}
 8002458:	bf00      	nop
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	08009564 	.word	0x08009564

08002464 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	2b00      	cmp	r3, #0
 8002474:	da03      	bge.n	800247e <HAL_NVIC_EnableIRQ+0x1a>
 8002476:	21d3      	movs	r1, #211	; 0xd3
 8002478:	4805      	ldr	r0, [pc, #20]	; (8002490 <HAL_NVIC_EnableIRQ+0x2c>)
 800247a:	f7ff f902 	bl	8001682 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ff28 	bl	80022d8 <__NVIC_EnableIRQ>
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	08009564 	.word	0x08009564

08002494 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e16b      	b.n	800277e <HAL_DMA_Init+0x2ea>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a97      	ldr	r2, [pc, #604]	; (8002708 <HAL_DMA_Init+0x274>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d03a      	beq.n	8002526 <HAL_DMA_Init+0x92>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a95      	ldr	r2, [pc, #596]	; (800270c <HAL_DMA_Init+0x278>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d035      	beq.n	8002526 <HAL_DMA_Init+0x92>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a94      	ldr	r2, [pc, #592]	; (8002710 <HAL_DMA_Init+0x27c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d030      	beq.n	8002526 <HAL_DMA_Init+0x92>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a92      	ldr	r2, [pc, #584]	; (8002714 <HAL_DMA_Init+0x280>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d02b      	beq.n	8002526 <HAL_DMA_Init+0x92>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a91      	ldr	r2, [pc, #580]	; (8002718 <HAL_DMA_Init+0x284>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d026      	beq.n	8002526 <HAL_DMA_Init+0x92>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a8f      	ldr	r2, [pc, #572]	; (800271c <HAL_DMA_Init+0x288>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d021      	beq.n	8002526 <HAL_DMA_Init+0x92>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a8e      	ldr	r2, [pc, #568]	; (8002720 <HAL_DMA_Init+0x28c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d01c      	beq.n	8002526 <HAL_DMA_Init+0x92>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a8c      	ldr	r2, [pc, #560]	; (8002724 <HAL_DMA_Init+0x290>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d017      	beq.n	8002526 <HAL_DMA_Init+0x92>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a8b      	ldr	r2, [pc, #556]	; (8002728 <HAL_DMA_Init+0x294>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d012      	beq.n	8002526 <HAL_DMA_Init+0x92>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a89      	ldr	r2, [pc, #548]	; (800272c <HAL_DMA_Init+0x298>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00d      	beq.n	8002526 <HAL_DMA_Init+0x92>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a88      	ldr	r2, [pc, #544]	; (8002730 <HAL_DMA_Init+0x29c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d008      	beq.n	8002526 <HAL_DMA_Init+0x92>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a86      	ldr	r2, [pc, #536]	; (8002734 <HAL_DMA_Init+0x2a0>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d003      	beq.n	8002526 <HAL_DMA_Init+0x92>
 800251e:	21a3      	movs	r1, #163	; 0xa3
 8002520:	4885      	ldr	r0, [pc, #532]	; (8002738 <HAL_DMA_Init+0x2a4>)
 8002522:	f7ff f8ae 	bl	8001682 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00c      	beq.n	8002548 <HAL_DMA_Init+0xb4>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b10      	cmp	r3, #16
 8002534:	d008      	beq.n	8002548 <HAL_DMA_Init+0xb4>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800253e:	d003      	beq.n	8002548 <HAL_DMA_Init+0xb4>
 8002540:	21a4      	movs	r1, #164	; 0xa4
 8002542:	487d      	ldr	r0, [pc, #500]	; (8002738 <HAL_DMA_Init+0x2a4>)
 8002544:	f7ff f89d 	bl	8001682 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	2b40      	cmp	r3, #64	; 0x40
 800254e:	d007      	beq.n	8002560 <HAL_DMA_Init+0xcc>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_DMA_Init+0xcc>
 8002558:	21a5      	movs	r1, #165	; 0xa5
 800255a:	4877      	ldr	r0, [pc, #476]	; (8002738 <HAL_DMA_Init+0x2a4>)
 800255c:	f7ff f891 	bl	8001682 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	2b80      	cmp	r3, #128	; 0x80
 8002566:	d007      	beq.n	8002578 <HAL_DMA_Init+0xe4>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_DMA_Init+0xe4>
 8002570:	21a6      	movs	r1, #166	; 0xa6
 8002572:	4871      	ldr	r0, [pc, #452]	; (8002738 <HAL_DMA_Init+0x2a4>)
 8002574:	f7ff f885 	bl	8001682 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00d      	beq.n	800259c <HAL_DMA_Init+0x108>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002588:	d008      	beq.n	800259c <HAL_DMA_Init+0x108>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002592:	d003      	beq.n	800259c <HAL_DMA_Init+0x108>
 8002594:	21a7      	movs	r1, #167	; 0xa7
 8002596:	4868      	ldr	r0, [pc, #416]	; (8002738 <HAL_DMA_Init+0x2a4>)
 8002598:	f7ff f873 	bl	8001682 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00d      	beq.n	80025c0 <HAL_DMA_Init+0x12c>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ac:	d008      	beq.n	80025c0 <HAL_DMA_Init+0x12c>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025b6:	d003      	beq.n	80025c0 <HAL_DMA_Init+0x12c>
 80025b8:	21a8      	movs	r1, #168	; 0xa8
 80025ba:	485f      	ldr	r0, [pc, #380]	; (8002738 <HAL_DMA_Init+0x2a4>)
 80025bc:	f7ff f861 	bl	8001682 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d007      	beq.n	80025d8 <HAL_DMA_Init+0x144>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	d003      	beq.n	80025d8 <HAL_DMA_Init+0x144>
 80025d0:	21a9      	movs	r1, #169	; 0xa9
 80025d2:	4859      	ldr	r0, [pc, #356]	; (8002738 <HAL_DMA_Init+0x2a4>)
 80025d4:	f7ff f855 	bl	8001682 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d012      	beq.n	8002606 <HAL_DMA_Init+0x172>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e8:	d00d      	beq.n	8002606 <HAL_DMA_Init+0x172>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025f2:	d008      	beq.n	8002606 <HAL_DMA_Init+0x172>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80025fc:	d003      	beq.n	8002606 <HAL_DMA_Init+0x172>
 80025fe:	21aa      	movs	r1, #170	; 0xaa
 8002600:	484d      	ldr	r0, [pc, #308]	; (8002738 <HAL_DMA_Init+0x2a4>)
 8002602:	f7ff f83e 	bl	8001682 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b73      	cmp	r3, #115	; 0x73
 800260c:	d903      	bls.n	8002616 <HAL_DMA_Init+0x182>
 800260e:	21ac      	movs	r1, #172	; 0xac
 8002610:	4849      	ldr	r0, [pc, #292]	; (8002738 <HAL_DMA_Init+0x2a4>)
 8002612:	f7ff f836 	bl	8001682 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	4b47      	ldr	r3, [pc, #284]	; (800273c <HAL_DMA_Init+0x2a8>)
 800261e:	429a      	cmp	r2, r3
 8002620:	d80f      	bhi.n	8002642 <HAL_DMA_Init+0x1ae>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	4b45      	ldr	r3, [pc, #276]	; (8002740 <HAL_DMA_Init+0x2ac>)
 800262a:	4413      	add	r3, r2
 800262c:	4a45      	ldr	r2, [pc, #276]	; (8002744 <HAL_DMA_Init+0x2b0>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	091b      	lsrs	r3, r3, #4
 8002634:	009a      	lsls	r2, r3, #2
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a42      	ldr	r2, [pc, #264]	; (8002748 <HAL_DMA_Init+0x2b4>)
 800263e:	641a      	str	r2, [r3, #64]	; 0x40
 8002640:	e00e      	b.n	8002660 <HAL_DMA_Init+0x1cc>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	461a      	mov	r2, r3
 8002648:	4b40      	ldr	r3, [pc, #256]	; (800274c <HAL_DMA_Init+0x2b8>)
 800264a:	4413      	add	r3, r2
 800264c:	4a3d      	ldr	r2, [pc, #244]	; (8002744 <HAL_DMA_Init+0x2b0>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	091b      	lsrs	r3, r3, #4
 8002654:	009a      	lsls	r2, r3, #2
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a3c      	ldr	r2, [pc, #240]	; (8002750 <HAL_DMA_Init+0x2bc>)
 800265e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002684:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002690:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800269c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f9e0 	bl	8002a78 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026c0:	d102      	bne.n	80026c8 <HAL_DMA_Init+0x234>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026dc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d036      	beq.n	8002754 <HAL_DMA_Init+0x2c0>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d832      	bhi.n	8002754 <HAL_DMA_Init+0x2c0>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fa00 	bl	8002af4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	e02e      	b.n	8002766 <HAL_DMA_Init+0x2d2>
 8002708:	40020008 	.word	0x40020008
 800270c:	4002001c 	.word	0x4002001c
 8002710:	40020030 	.word	0x40020030
 8002714:	40020044 	.word	0x40020044
 8002718:	40020058 	.word	0x40020058
 800271c:	4002006c 	.word	0x4002006c
 8002720:	40020408 	.word	0x40020408
 8002724:	4002041c 	.word	0x4002041c
 8002728:	40020430 	.word	0x40020430
 800272c:	40020444 	.word	0x40020444
 8002730:	40020458 	.word	0x40020458
 8002734:	4002046c 	.word	0x4002046c
 8002738:	080095a0 	.word	0x080095a0
 800273c:	40020407 	.word	0x40020407
 8002740:	bffdfff8 	.word	0xbffdfff8
 8002744:	cccccccd 	.word	0xcccccccd
 8002748:	40020000 	.word	0x40020000
 800274c:	bffdfbf8 	.word	0xbffdfbf8
 8002750:	40020400 	.word	0x40020400
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop

08002788 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_DMA_Start_IT+0x20>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027a6:	d304      	bcc.n	80027b2 <HAL_DMA_Start_IT+0x2a>
 80027a8:	f240 11ab 	movw	r1, #427	; 0x1ab
 80027ac:	483a      	ldr	r0, [pc, #232]	; (8002898 <HAL_DMA_Start_IT+0x110>)
 80027ae:	f7fe ff68 	bl	8001682 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_DMA_Start_IT+0x38>
 80027bc:	2302      	movs	r3, #2
 80027be:	e066      	b.n	800288e <HAL_DMA_Start_IT+0x106>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d155      	bne.n	8002880 <HAL_DMA_Start_IT+0xf8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0201 	bic.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 f8fe 	bl	80029fa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	2b00      	cmp	r3, #0
 8002804:	d008      	beq.n	8002818 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 020e 	orr.w	r2, r2, #14
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	e00f      	b.n	8002838 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0204 	bic.w	r2, r2, #4
 8002826:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 020a 	orr.w	r2, r2, #10
 8002836:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <HAL_DMA_Start_IT+0xce>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002850:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002854:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285a:	2b00      	cmp	r3, #0
 800285c:	d007      	beq.n	800286e <HAL_DMA_Start_IT+0xe6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002868:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800286c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f042 0201 	orr.w	r2, r2, #1
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	e005      	b.n	800288c <HAL_DMA_Start_IT+0x104>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002888:	2302      	movs	r3, #2
 800288a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800288c:	7dfb      	ldrb	r3, [r7, #23]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	080095a0 	.word	0x080095a0

0800289c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	2204      	movs	r2, #4
 80028be:	409a      	lsls	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d026      	beq.n	8002916 <HAL_DMA_IRQHandler+0x7a>
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d021      	beq.n	8002916 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0320 	and.w	r3, r3, #32
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d107      	bne.n	80028f0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0204 	bic.w	r2, r2, #4
 80028ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f4:	f003 021f 	and.w	r2, r3, #31
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	2104      	movs	r1, #4
 80028fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002902:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	2b00      	cmp	r3, #0
 800290a:	d071      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002914:	e06c      	b.n	80029f0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	f003 031f 	and.w	r3, r3, #31
 800291e:	2202      	movs	r2, #2
 8002920:	409a      	lsls	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4013      	ands	r3, r2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d02e      	beq.n	8002988 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d029      	beq.n	8002988 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0320 	and.w	r3, r3, #32
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10b      	bne.n	800295a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 020a 	bic.w	r2, r2, #10
 8002950:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	f003 021f 	and.w	r2, r3, #31
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	2102      	movs	r1, #2
 8002968:	fa01 f202 	lsl.w	r2, r1, r2
 800296c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	2b00      	cmp	r3, #0
 800297c:	d038      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002986:	e033      	b.n	80029f0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298c:	f003 031f 	and.w	r3, r3, #31
 8002990:	2208      	movs	r2, #8
 8002992:	409a      	lsls	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4013      	ands	r3, r2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d02a      	beq.n	80029f2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d025      	beq.n	80029f2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 020e 	bic.w	r2, r2, #14
 80029b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	f003 021f 	and.w	r2, r3, #31
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	2101      	movs	r1, #1
 80029c4:	fa01 f202 	lsl.w	r2, r1, r2
 80029c8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d004      	beq.n	80029f2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
}
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b085      	sub	sp, #20
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a10:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d004      	beq.n	8002a24 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a22:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	f003 021f 	and.w	r2, r3, #31
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	2101      	movs	r1, #1
 8002a32:	fa01 f202 	lsl.w	r2, r1, r2
 8002a36:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b10      	cmp	r3, #16
 8002a46:	d108      	bne.n	8002a5a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a58:	e007      	b.n	8002a6a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	60da      	str	r2, [r3, #12]
}
 8002a6a:	bf00      	nop
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d802      	bhi.n	8002a92 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002a8c:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	e001      	b.n	8002a96 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002a92:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002a94:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	3b08      	subs	r3, #8
 8002aa2:	4a12      	ldr	r2, [pc, #72]	; (8002aec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa8:	091b      	lsrs	r3, r3, #4
 8002aaa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	009a      	lsls	r2, r3, #2
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	461a      	mov	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a0b      	ldr	r2, [pc, #44]	; (8002af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002ac2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 031f 	and.w	r3, r3, #31
 8002aca:	2201      	movs	r2, #1
 8002acc:	409a      	lsls	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ad2:	bf00      	nop
 8002ad4:	371c      	adds	r7, #28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40020407 	.word	0x40020407
 8002ae4:	40020800 	.word	0x40020800
 8002ae8:	40020820 	.word	0x40020820
 8002aec:	cccccccd 	.word	0xcccccccd
 8002af0:	40020880 	.word	0x40020880

08002af4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002b08:	4413      	add	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a08      	ldr	r2, [pc, #32]	; (8002b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002b16:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	2201      	movs	r2, #1
 8002b22:	409a      	lsls	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	1000823f 	.word	0x1000823f
 8002b38:	40020940 	.word	0x40020940

08002b3c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e283      	b.n	8003056 <HAL_FDCAN_Init+0x51a>
  }

  /* Check function parameters */
  assert_param(IS_FDCAN_ALL_INSTANCE(hfdcan->Instance));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4aa1      	ldr	r2, [pc, #644]	; (8002dd8 <HAL_FDCAN_Init+0x29c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d004      	beq.n	8002b62 <HAL_FDCAN_Init+0x26>
 8002b58:	f44f 7193 	mov.w	r1, #294	; 0x126
 8002b5c:	489f      	ldr	r0, [pc, #636]	; (8002ddc <HAL_FDCAN_Init+0x2a0>)
 8002b5e:	f7fe fd90 	bl	8001682 <assert_failed>
  if (hfdcan->Instance == FDCAN1)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a9c      	ldr	r2, [pc, #624]	; (8002dd8 <HAL_FDCAN_Init+0x29c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d144      	bne.n	8002bf6 <HAL_FDCAN_Init+0xba>
  {
    assert_param(IS_FDCAN_CKDIV(hfdcan->Init.ClockDivider));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d040      	beq.n	8002bf6 <HAL_FDCAN_Init+0xba>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d03c      	beq.n	8002bf6 <HAL_FDCAN_Init+0xba>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d038      	beq.n	8002bf6 <HAL_FDCAN_Init+0xba>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d034      	beq.n	8002bf6 <HAL_FDCAN_Init+0xba>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d030      	beq.n	8002bf6 <HAL_FDCAN_Init+0xba>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b05      	cmp	r3, #5
 8002b9a:	d02c      	beq.n	8002bf6 <HAL_FDCAN_Init+0xba>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b06      	cmp	r3, #6
 8002ba2:	d028      	beq.n	8002bf6 <HAL_FDCAN_Init+0xba>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b07      	cmp	r3, #7
 8002baa:	d024      	beq.n	8002bf6 <HAL_FDCAN_Init+0xba>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d020      	beq.n	8002bf6 <HAL_FDCAN_Init+0xba>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b09      	cmp	r3, #9
 8002bba:	d01c      	beq.n	8002bf6 <HAL_FDCAN_Init+0xba>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b0a      	cmp	r3, #10
 8002bc2:	d018      	beq.n	8002bf6 <HAL_FDCAN_Init+0xba>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b0b      	cmp	r3, #11
 8002bca:	d014      	beq.n	8002bf6 <HAL_FDCAN_Init+0xba>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2b0c      	cmp	r3, #12
 8002bd2:	d010      	beq.n	8002bf6 <HAL_FDCAN_Init+0xba>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b0d      	cmp	r3, #13
 8002bda:	d00c      	beq.n	8002bf6 <HAL_FDCAN_Init+0xba>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b0e      	cmp	r3, #14
 8002be2:	d008      	beq.n	8002bf6 <HAL_FDCAN_Init+0xba>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b0f      	cmp	r3, #15
 8002bea:	d004      	beq.n	8002bf6 <HAL_FDCAN_Init+0xba>
 8002bec:	f240 1129 	movw	r1, #297	; 0x129
 8002bf0:	487a      	ldr	r0, [pc, #488]	; (8002ddc <HAL_FDCAN_Init+0x2a0>)
 8002bf2:	f7fe fd46 	bl	8001682 <assert_failed>
  }
  assert_param(IS_FDCAN_FRAME_FORMAT(hfdcan->Init.FrameFormat));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00e      	beq.n	8002c1c <HAL_FDCAN_Init+0xe0>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c06:	d009      	beq.n	8002c1c <HAL_FDCAN_Init+0xe0>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c10:	d004      	beq.n	8002c1c <HAL_FDCAN_Init+0xe0>
 8002c12:	f240 112b 	movw	r1, #299	; 0x12b
 8002c16:	4871      	ldr	r0, [pc, #452]	; (8002ddc <HAL_FDCAN_Init+0x2a0>)
 8002c18:	f7fe fd33 	bl	8001682 <assert_failed>
  assert_param(IS_FDCAN_MODE(hfdcan->Init.Mode));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d014      	beq.n	8002c4e <HAL_FDCAN_Init+0x112>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d010      	beq.n	8002c4e <HAL_FDCAN_Init+0x112>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d00c      	beq.n	8002c4e <HAL_FDCAN_Init+0x112>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d008      	beq.n	8002c4e <HAL_FDCAN_Init+0x112>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d004      	beq.n	8002c4e <HAL_FDCAN_Init+0x112>
 8002c44:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002c48:	4864      	ldr	r0, [pc, #400]	; (8002ddc <HAL_FDCAN_Init+0x2a0>)
 8002c4a:	f7fe fd1a 	bl	8001682 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.AutoRetransmission));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	7c1b      	ldrb	r3, [r3, #16]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d008      	beq.n	8002c68 <HAL_FDCAN_Init+0x12c>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	7c1b      	ldrb	r3, [r3, #16]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d004      	beq.n	8002c68 <HAL_FDCAN_Init+0x12c>
 8002c5e:	f240 112d 	movw	r1, #301	; 0x12d
 8002c62:	485e      	ldr	r0, [pc, #376]	; (8002ddc <HAL_FDCAN_Init+0x2a0>)
 8002c64:	f7fe fd0d 	bl	8001682 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.TransmitPause));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	7c5b      	ldrb	r3, [r3, #17]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_FDCAN_Init+0x146>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	7c5b      	ldrb	r3, [r3, #17]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d004      	beq.n	8002c82 <HAL_FDCAN_Init+0x146>
 8002c78:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8002c7c:	4857      	ldr	r0, [pc, #348]	; (8002ddc <HAL_FDCAN_Init+0x2a0>)
 8002c7e:	f7fe fd00 	bl	8001682 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.ProtocolException));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	7c9b      	ldrb	r3, [r3, #18]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d008      	beq.n	8002c9c <HAL_FDCAN_Init+0x160>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	7c9b      	ldrb	r3, [r3, #18]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d004      	beq.n	8002c9c <HAL_FDCAN_Init+0x160>
 8002c92:	f240 112f 	movw	r1, #303	; 0x12f
 8002c96:	4851      	ldr	r0, [pc, #324]	; (8002ddc <HAL_FDCAN_Init+0x2a0>)
 8002c98:	f7fe fcf3 	bl	8001682 <assert_failed>
  assert_param(IS_FDCAN_NOMINAL_PRESCALER(hfdcan->Init.NominalPrescaler));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d004      	beq.n	8002cae <HAL_FDCAN_Init+0x172>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cac:	d904      	bls.n	8002cb8 <HAL_FDCAN_Init+0x17c>
 8002cae:	f44f 7198 	mov.w	r1, #304	; 0x130
 8002cb2:	484a      	ldr	r0, [pc, #296]	; (8002ddc <HAL_FDCAN_Init+0x2a0>)
 8002cb4:	f7fe fce5 	bl	8001682 <assert_failed>
  assert_param(IS_FDCAN_NOMINAL_SJW(hfdcan->Init.NominalSyncJumpWidth));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_FDCAN_Init+0x18c>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	2b80      	cmp	r3, #128	; 0x80
 8002cc6:	d904      	bls.n	8002cd2 <HAL_FDCAN_Init+0x196>
 8002cc8:	f240 1131 	movw	r1, #305	; 0x131
 8002ccc:	4843      	ldr	r0, [pc, #268]	; (8002ddc <HAL_FDCAN_Init+0x2a0>)
 8002cce:	f7fe fcd8 	bl	8001682 <assert_failed>
  assert_param(IS_FDCAN_NOMINAL_TSEG1(hfdcan->Init.NominalTimeSeg1));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d004      	beq.n	8002ce4 <HAL_FDCAN_Init+0x1a8>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ce2:	d904      	bls.n	8002cee <HAL_FDCAN_Init+0x1b2>
 8002ce4:	f44f 7199 	mov.w	r1, #306	; 0x132
 8002ce8:	483c      	ldr	r0, [pc, #240]	; (8002ddc <HAL_FDCAN_Init+0x2a0>)
 8002cea:	f7fe fcca 	bl	8001682 <assert_failed>
  assert_param(IS_FDCAN_NOMINAL_TSEG2(hfdcan->Init.NominalTimeSeg2));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_FDCAN_Init+0x1c2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	2b80      	cmp	r3, #128	; 0x80
 8002cfc:	d904      	bls.n	8002d08 <HAL_FDCAN_Init+0x1cc>
 8002cfe:	f240 1133 	movw	r1, #307	; 0x133
 8002d02:	4836      	ldr	r0, [pc, #216]	; (8002ddc <HAL_FDCAN_Init+0x2a0>)
 8002d04:	f7fe fcbd 	bl	8001682 <assert_failed>
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d10:	d133      	bne.n	8002d7a <HAL_FDCAN_Init+0x23e>
  {
    assert_param(IS_FDCAN_DATA_PRESCALER(hfdcan->Init.DataPrescaler));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_FDCAN_Init+0x1e6>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	2b20      	cmp	r3, #32
 8002d20:	d904      	bls.n	8002d2c <HAL_FDCAN_Init+0x1f0>
 8002d22:	f44f 719b 	mov.w	r1, #310	; 0x136
 8002d26:	482d      	ldr	r0, [pc, #180]	; (8002ddc <HAL_FDCAN_Init+0x2a0>)
 8002d28:	f7fe fcab 	bl	8001682 <assert_failed>
    assert_param(IS_FDCAN_DATA_SJW(hfdcan->Init.DataSyncJumpWidth));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_FDCAN_Init+0x200>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	2b10      	cmp	r3, #16
 8002d3a:	d904      	bls.n	8002d46 <HAL_FDCAN_Init+0x20a>
 8002d3c:	f240 1137 	movw	r1, #311	; 0x137
 8002d40:	4826      	ldr	r0, [pc, #152]	; (8002ddc <HAL_FDCAN_Init+0x2a0>)
 8002d42:	f7fe fc9e 	bl	8001682 <assert_failed>
    assert_param(IS_FDCAN_DATA_TSEG1(hfdcan->Init.DataTimeSeg1));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_FDCAN_Init+0x21a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d52:	2b20      	cmp	r3, #32
 8002d54:	d904      	bls.n	8002d60 <HAL_FDCAN_Init+0x224>
 8002d56:	f44f 719c 	mov.w	r1, #312	; 0x138
 8002d5a:	4820      	ldr	r0, [pc, #128]	; (8002ddc <HAL_FDCAN_Init+0x2a0>)
 8002d5c:	f7fe fc91 	bl	8001682 <assert_failed>
    assert_param(IS_FDCAN_DATA_TSEG2(hfdcan->Init.DataTimeSeg2));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_FDCAN_Init+0x234>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6c:	2b10      	cmp	r3, #16
 8002d6e:	d904      	bls.n	8002d7a <HAL_FDCAN_Init+0x23e>
 8002d70:	f240 1139 	movw	r1, #313	; 0x139
 8002d74:	4819      	ldr	r0, [pc, #100]	; (8002ddc <HAL_FDCAN_Init+0x2a0>)
 8002d76:	f7fe fc84 	bl	8001682 <assert_failed>
  }
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.StdFiltersNbr, SRAMCAN_FLS_NBR));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7e:	2b1c      	cmp	r3, #28
 8002d80:	d904      	bls.n	8002d8c <HAL_FDCAN_Init+0x250>
 8002d82:	f240 113b 	movw	r1, #315	; 0x13b
 8002d86:	4815      	ldr	r0, [pc, #84]	; (8002ddc <HAL_FDCAN_Init+0x2a0>)
 8002d88:	f7fe fc7b 	bl	8001682 <assert_failed>
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.ExtFiltersNbr, SRAMCAN_FLE_NBR));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d904      	bls.n	8002d9e <HAL_FDCAN_Init+0x262>
 8002d94:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8002d98:	4810      	ldr	r0, [pc, #64]	; (8002ddc <HAL_FDCAN_Init+0x2a0>)
 8002d9a:	f7fe fc72 	bl	8001682 <assert_failed>
  assert_param(IS_FDCAN_TX_FIFO_QUEUE_MODE(hfdcan->Init.TxFifoQueueMode));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d009      	beq.n	8002dba <HAL_FDCAN_Init+0x27e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002daa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dae:	d004      	beq.n	8002dba <HAL_FDCAN_Init+0x27e>
 8002db0:	f240 113d 	movw	r1, #317	; 0x13d
 8002db4:	4809      	ldr	r0, [pc, #36]	; (8002ddc <HAL_FDCAN_Init+0x2a0>)
 8002db6:	f7fe fc64 	bl	8001682 <assert_failed>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10c      	bne.n	8002de0 <HAL_FDCAN_Init+0x2a4>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7fe fa6e 	bl	80012b0 <HAL_FDCAN_MspInit>
 8002dd4:	e004      	b.n	8002de0 <HAL_FDCAN_Init+0x2a4>
 8002dd6:	bf00      	nop
 8002dd8:	40006400 	.word	0x40006400
 8002ddc:	080095d8 	.word	0x080095d8
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699a      	ldr	r2, [r3, #24]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0210 	bic.w	r2, r2, #16
 8002dee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002df0:	f7ff fa34 	bl	800225c <HAL_GetTick>
 8002df4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002df6:	e012      	b.n	8002e1e <HAL_FDCAN_Init+0x2e2>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002df8:	f7ff fa30 	bl	800225c <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b0a      	cmp	r3, #10
 8002e04:	d90b      	bls.n	8002e1e <HAL_FDCAN_Init+0x2e2>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e0a:	f043 0201 	orr.w	r2, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2203      	movs	r2, #3
 8002e16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e11b      	b.n	8003056 <HAL_FDCAN_Init+0x51a>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d0e5      	beq.n	8002df8 <HAL_FDCAN_Init+0x2bc>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699a      	ldr	r2, [r3, #24]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e3c:	f7ff fa0e 	bl	800225c <HAL_GetTick>
 8002e40:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002e42:	e012      	b.n	8002e6a <HAL_FDCAN_Init+0x32e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002e44:	f7ff fa0a 	bl	800225c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b0a      	cmp	r3, #10
 8002e50:	d90b      	bls.n	8002e6a <HAL_FDCAN_Init+0x32e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e56:	f043 0201 	orr.w	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2203      	movs	r2, #3
 8002e62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e0f5      	b.n	8003056 <HAL_FDCAN_Init+0x51a>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0e5      	beq.n	8002e44 <HAL_FDCAN_Init+0x308>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699a      	ldr	r2, [r3, #24]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0202 	orr.w	r2, r2, #2
 8002e86:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a74      	ldr	r2, [pc, #464]	; (8003060 <HAL_FDCAN_Init+0x524>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d103      	bne.n	8002e9a <HAL_FDCAN_Init+0x35e>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002e92:	4a74      	ldr	r2, [pc, #464]	; (8003064 <HAL_FDCAN_Init+0x528>)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	7c1b      	ldrb	r3, [r3, #16]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d108      	bne.n	8002eb4 <HAL_FDCAN_Init+0x378>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699a      	ldr	r2, [r3, #24]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eb0:	619a      	str	r2, [r3, #24]
 8002eb2:	e007      	b.n	8002ec4 <HAL_FDCAN_Init+0x388>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699a      	ldr	r2, [r3, #24]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ec2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	7c5b      	ldrb	r3, [r3, #17]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d108      	bne.n	8002ede <HAL_FDCAN_Init+0x3a2>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eda:	619a      	str	r2, [r3, #24]
 8002edc:	e007      	b.n	8002eee <HAL_FDCAN_Init+0x3b2>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699a      	ldr	r2, [r3, #24]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002eec:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	7c9b      	ldrb	r3, [r3, #18]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d108      	bne.n	8002f08 <HAL_FDCAN_Init+0x3cc>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699a      	ldr	r2, [r3, #24]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f04:	619a      	str	r2, [r3, #24]
 8002f06:	e007      	b.n	8002f18 <HAL_FDCAN_Init+0x3dc>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699a      	ldr	r2, [r3, #24]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f16:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699a      	ldr	r2, [r3, #24]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002f3c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0210 	bic.w	r2, r2, #16
 8002f4c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d108      	bne.n	8002f68 <HAL_FDCAN_Init+0x42c>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699a      	ldr	r2, [r3, #24]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0204 	orr.w	r2, r2, #4
 8002f64:	619a      	str	r2, [r3, #24]
 8002f66:	e02c      	b.n	8002fc2 <HAL_FDCAN_Init+0x486>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d028      	beq.n	8002fc2 <HAL_FDCAN_Init+0x486>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d01c      	beq.n	8002fb2 <HAL_FDCAN_Init+0x476>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699a      	ldr	r2, [r3, #24]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f86:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0210 	orr.w	r2, r2, #16
 8002f96:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	d110      	bne.n	8002fc2 <HAL_FDCAN_Init+0x486>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0220 	orr.w	r2, r2, #32
 8002fae:	619a      	str	r2, [r3, #24]
 8002fb0:	e007      	b.n	8002fc2 <HAL_FDCAN_Init+0x486>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	699a      	ldr	r2, [r3, #24]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0220 	orr.w	r2, r2, #32
 8002fc0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002fd2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002fda:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002fea:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002fec:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ff6:	d115      	bne.n	8003024 <HAL_FDCAN_Init+0x4e8>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	3b01      	subs	r3, #1
 8003004:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003006:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	3b01      	subs	r3, #1
 800300e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003010:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	3b01      	subs	r3, #1
 800301a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003020:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003022:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f814 	bl	8003068 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40006400 	.word	0x40006400
 8003064:	40006500 	.word	0x40006500

08003068 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003070:	4b27      	ldr	r3, [pc, #156]	; (8003110 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003072:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003082:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308a:	041a      	lsls	r2, r3, #16
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030a8:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	061a      	lsls	r2, r3, #24
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	e005      	b.n	80030f6 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	3304      	adds	r3, #4
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d3f3      	bcc.n	80030ea <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	4000a400 	.word	0x4000a400

08003114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003128:	d01b      	beq.n	8003162 <HAL_GPIO_Init+0x4e>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a3b      	ldr	r2, [pc, #236]	; (800321c <HAL_GPIO_Init+0x108>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d017      	beq.n	8003162 <HAL_GPIO_Init+0x4e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a3a      	ldr	r2, [pc, #232]	; (8003220 <HAL_GPIO_Init+0x10c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d013      	beq.n	8003162 <HAL_GPIO_Init+0x4e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a39      	ldr	r2, [pc, #228]	; (8003224 <HAL_GPIO_Init+0x110>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d00f      	beq.n	8003162 <HAL_GPIO_Init+0x4e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a38      	ldr	r2, [pc, #224]	; (8003228 <HAL_GPIO_Init+0x114>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00b      	beq.n	8003162 <HAL_GPIO_Init+0x4e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a37      	ldr	r2, [pc, #220]	; (800322c <HAL_GPIO_Init+0x118>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d007      	beq.n	8003162 <HAL_GPIO_Init+0x4e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a36      	ldr	r2, [pc, #216]	; (8003230 <HAL_GPIO_Init+0x11c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_Init+0x4e>
 800315a:	21b1      	movs	r1, #177	; 0xb1
 800315c:	4835      	ldr	r0, [pc, #212]	; (8003234 <HAL_GPIO_Init+0x120>)
 800315e:	f7fe fa90 	bl	8001682 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	b29b      	uxth	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_GPIO_Init+0x64>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	0c1b      	lsrs	r3, r3, #16
 8003172:	041b      	lsls	r3, r3, #16
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_GPIO_Init+0x6c>
 8003178:	21b2      	movs	r1, #178	; 0xb2
 800317a:	482e      	ldr	r0, [pc, #184]	; (8003234 <HAL_GPIO_Init+0x120>)
 800317c:	f7fe fa81 	bl	8001682 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d035      	beq.n	80031f4 <HAL_GPIO_Init+0xe0>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d031      	beq.n	80031f4 <HAL_GPIO_Init+0xe0>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b11      	cmp	r3, #17
 8003196:	d02d      	beq.n	80031f4 <HAL_GPIO_Init+0xe0>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d029      	beq.n	80031f4 <HAL_GPIO_Init+0xe0>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b12      	cmp	r3, #18
 80031a6:	d025      	beq.n	80031f4 <HAL_GPIO_Init+0xe0>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4a22      	ldr	r2, [pc, #136]	; (8003238 <HAL_GPIO_Init+0x124>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d020      	beq.n	80031f4 <HAL_GPIO_Init+0xe0>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	4a21      	ldr	r2, [pc, #132]	; (800323c <HAL_GPIO_Init+0x128>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d01b      	beq.n	80031f4 <HAL_GPIO_Init+0xe0>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	4a1f      	ldr	r2, [pc, #124]	; (8003240 <HAL_GPIO_Init+0x12c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d016      	beq.n	80031f4 <HAL_GPIO_Init+0xe0>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4a1e      	ldr	r2, [pc, #120]	; (8003244 <HAL_GPIO_Init+0x130>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d011      	beq.n	80031f4 <HAL_GPIO_Init+0xe0>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	4a1c      	ldr	r2, [pc, #112]	; (8003248 <HAL_GPIO_Init+0x134>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00c      	beq.n	80031f4 <HAL_GPIO_Init+0xe0>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4a1b      	ldr	r2, [pc, #108]	; (800324c <HAL_GPIO_Init+0x138>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d007      	beq.n	80031f4 <HAL_GPIO_Init+0xe0>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d003      	beq.n	80031f4 <HAL_GPIO_Init+0xe0>
 80031ec:	21b3      	movs	r1, #179	; 0xb3
 80031ee:	4811      	ldr	r0, [pc, #68]	; (8003234 <HAL_GPIO_Init+0x120>)
 80031f0:	f7fe fa47 	bl	8001682 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 81d2 	beq.w	80035a2 <HAL_GPIO_Init+0x48e>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	2b01      	cmp	r3, #1
 8003204:	f000 81cd 	beq.w	80035a2 <HAL_GPIO_Init+0x48e>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b02      	cmp	r3, #2
 800320e:	f000 81c8 	beq.w	80035a2 <HAL_GPIO_Init+0x48e>
 8003212:	21b4      	movs	r1, #180	; 0xb4
 8003214:	4807      	ldr	r0, [pc, #28]	; (8003234 <HAL_GPIO_Init+0x120>)
 8003216:	f7fe fa34 	bl	8001682 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800321a:	e1c2      	b.n	80035a2 <HAL_GPIO_Init+0x48e>
 800321c:	48000400 	.word	0x48000400
 8003220:	48000800 	.word	0x48000800
 8003224:	48000c00 	.word	0x48000c00
 8003228:	48001000 	.word	0x48001000
 800322c:	48001400 	.word	0x48001400
 8003230:	48001800 	.word	0x48001800
 8003234:	08009614 	.word	0x08009614
 8003238:	10110000 	.word	0x10110000
 800323c:	10210000 	.word	0x10210000
 8003240:	10310000 	.word	0x10310000
 8003244:	10120000 	.word	0x10120000
 8003248:	10220000 	.word	0x10220000
 800324c:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	2101      	movs	r1, #1
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	fa01 f303 	lsl.w	r3, r1, r3
 800325c:	4013      	ands	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 819a 	beq.w	800359c <HAL_GPIO_Init+0x488>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d00b      	beq.n	8003288 <HAL_GPIO_Init+0x174>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d007      	beq.n	8003288 <HAL_GPIO_Init+0x174>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800327c:	2b11      	cmp	r3, #17
 800327e:	d003      	beq.n	8003288 <HAL_GPIO_Init+0x174>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b12      	cmp	r3, #18
 8003286:	d144      	bne.n	8003312 <HAL_GPIO_Init+0x1fe>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00f      	beq.n	80032b0 <HAL_GPIO_Init+0x19c>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d00b      	beq.n	80032b0 <HAL_GPIO_Init+0x19c>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d007      	beq.n	80032b0 <HAL_GPIO_Init+0x19c>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	2b03      	cmp	r3, #3
 80032a6:	d003      	beq.n	80032b0 <HAL_GPIO_Init+0x19c>
 80032a8:	21c4      	movs	r1, #196	; 0xc4
 80032aa:	4881      	ldr	r0, [pc, #516]	; (80034b0 <HAL_GPIO_Init+0x39c>)
 80032ac:	f7fe f9e9 	bl	8001682 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	2203      	movs	r2, #3
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4013      	ands	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032e6:	2201      	movs	r2, #1
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4013      	ands	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	091b      	lsrs	r3, r3, #4
 80032fc:	f003 0201 	and.w	r2, r3, #1
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	2203      	movs	r2, #3
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43db      	mvns	r3, r3
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4013      	ands	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d003      	beq.n	8003352 <HAL_GPIO_Init+0x23e>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b12      	cmp	r3, #18
 8003350:	d14b      	bne.n	80033ea <HAL_GPIO_Init+0x2d6>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003358:	d01b      	beq.n	8003392 <HAL_GPIO_Init+0x27e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a55      	ldr	r2, [pc, #340]	; (80034b4 <HAL_GPIO_Init+0x3a0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d017      	beq.n	8003392 <HAL_GPIO_Init+0x27e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a54      	ldr	r2, [pc, #336]	; (80034b8 <HAL_GPIO_Init+0x3a4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d013      	beq.n	8003392 <HAL_GPIO_Init+0x27e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a53      	ldr	r2, [pc, #332]	; (80034bc <HAL_GPIO_Init+0x3a8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00f      	beq.n	8003392 <HAL_GPIO_Init+0x27e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a52      	ldr	r2, [pc, #328]	; (80034c0 <HAL_GPIO_Init+0x3ac>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00b      	beq.n	8003392 <HAL_GPIO_Init+0x27e>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a51      	ldr	r2, [pc, #324]	; (80034c4 <HAL_GPIO_Init+0x3b0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d007      	beq.n	8003392 <HAL_GPIO_Init+0x27e>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a50      	ldr	r2, [pc, #320]	; (80034c8 <HAL_GPIO_Init+0x3b4>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_Init+0x27e>
 800338a:	21dc      	movs	r1, #220	; 0xdc
 800338c:	4848      	ldr	r0, [pc, #288]	; (80034b0 <HAL_GPIO_Init+0x39c>)
 800338e:	f7fe f978 	bl	8001682 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	2b0f      	cmp	r3, #15
 8003398:	d903      	bls.n	80033a2 <HAL_GPIO_Init+0x28e>
 800339a:	21dd      	movs	r1, #221	; 0xdd
 800339c:	4844      	ldr	r0, [pc, #272]	; (80034b0 <HAL_GPIO_Init+0x39c>)
 800339e:	f7fe f970 	bl	8001682 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	08da      	lsrs	r2, r3, #3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3208      	adds	r2, #8
 80033aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	220f      	movs	r2, #15
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43db      	mvns	r3, r3
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4013      	ands	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	691a      	ldr	r2, [r3, #16]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	08da      	lsrs	r2, r3, #3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3208      	adds	r2, #8
 80033e4:	6939      	ldr	r1, [r7, #16]
 80033e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	2203      	movs	r2, #3
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4013      	ands	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f003 0203 	and.w	r2, r3, #3
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 80b8 	beq.w	800359c <HAL_GPIO_Init+0x488>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342c:	4b27      	ldr	r3, [pc, #156]	; (80034cc <HAL_GPIO_Init+0x3b8>)
 800342e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003430:	4a26      	ldr	r2, [pc, #152]	; (80034cc <HAL_GPIO_Init+0x3b8>)
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	6613      	str	r3, [r2, #96]	; 0x60
 8003438:	4b24      	ldr	r3, [pc, #144]	; (80034cc <HAL_GPIO_Init+0x3b8>)
 800343a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003444:	4a22      	ldr	r2, [pc, #136]	; (80034d0 <HAL_GPIO_Init+0x3bc>)
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	089b      	lsrs	r3, r3, #2
 800344a:	3302      	adds	r3, #2
 800344c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003450:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	220f      	movs	r2, #15
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4013      	ands	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800346e:	d031      	beq.n	80034d4 <HAL_GPIO_Init+0x3c0>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a10      	ldr	r2, [pc, #64]	; (80034b4 <HAL_GPIO_Init+0x3a0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d019      	beq.n	80034ac <HAL_GPIO_Init+0x398>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a0f      	ldr	r2, [pc, #60]	; (80034b8 <HAL_GPIO_Init+0x3a4>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d013      	beq.n	80034a8 <HAL_GPIO_Init+0x394>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a0e      	ldr	r2, [pc, #56]	; (80034bc <HAL_GPIO_Init+0x3a8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00d      	beq.n	80034a4 <HAL_GPIO_Init+0x390>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a0d      	ldr	r2, [pc, #52]	; (80034c0 <HAL_GPIO_Init+0x3ac>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d007      	beq.n	80034a0 <HAL_GPIO_Init+0x38c>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a0c      	ldr	r2, [pc, #48]	; (80034c4 <HAL_GPIO_Init+0x3b0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d101      	bne.n	800349c <HAL_GPIO_Init+0x388>
 8003498:	2305      	movs	r3, #5
 800349a:	e01c      	b.n	80034d6 <HAL_GPIO_Init+0x3c2>
 800349c:	2306      	movs	r3, #6
 800349e:	e01a      	b.n	80034d6 <HAL_GPIO_Init+0x3c2>
 80034a0:	2304      	movs	r3, #4
 80034a2:	e018      	b.n	80034d6 <HAL_GPIO_Init+0x3c2>
 80034a4:	2303      	movs	r3, #3
 80034a6:	e016      	b.n	80034d6 <HAL_GPIO_Init+0x3c2>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e014      	b.n	80034d6 <HAL_GPIO_Init+0x3c2>
 80034ac:	2301      	movs	r3, #1
 80034ae:	e012      	b.n	80034d6 <HAL_GPIO_Init+0x3c2>
 80034b0:	08009614 	.word	0x08009614
 80034b4:	48000400 	.word	0x48000400
 80034b8:	48000800 	.word	0x48000800
 80034bc:	48000c00 	.word	0x48000c00
 80034c0:	48001000 	.word	0x48001000
 80034c4:	48001400 	.word	0x48001400
 80034c8:	48001800 	.word	0x48001800
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40010000 	.word	0x40010000
 80034d4:	2300      	movs	r3, #0
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	f002 0203 	and.w	r2, r2, #3
 80034dc:	0092      	lsls	r2, r2, #2
 80034de:	4093      	lsls	r3, r2
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034e6:	4935      	ldr	r1, [pc, #212]	; (80035bc <HAL_GPIO_Init+0x4a8>)
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	089b      	lsrs	r3, r3, #2
 80034ec:	3302      	adds	r3, #2
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80034f4:	4b32      	ldr	r3, [pc, #200]	; (80035c0 <HAL_GPIO_Init+0x4ac>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4013      	ands	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_GPIO_Init+0x404>
        {
          temp |= iocurrent;
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003518:	4a29      	ldr	r2, [pc, #164]	; (80035c0 <HAL_GPIO_Init+0x4ac>)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800351e:	4b28      	ldr	r3, [pc, #160]	; (80035c0 <HAL_GPIO_Init+0x4ac>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	43db      	mvns	r3, r3
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4013      	ands	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_Init+0x42e>
        {
          temp |= iocurrent;
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003542:	4a1f      	ldr	r2, [pc, #124]	; (80035c0 <HAL_GPIO_Init+0x4ac>)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003548:	4b1d      	ldr	r3, [pc, #116]	; (80035c0 <HAL_GPIO_Init+0x4ac>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	43db      	mvns	r3, r3
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4013      	ands	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_GPIO_Init+0x458>
        {
          temp |= iocurrent;
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800356c:	4a14      	ldr	r2, [pc, #80]	; (80035c0 <HAL_GPIO_Init+0x4ac>)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003572:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <HAL_GPIO_Init+0x4ac>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	43db      	mvns	r3, r3
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4013      	ands	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_GPIO_Init+0x482>
        {
          temp |= iocurrent;
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003596:	4a0a      	ldr	r2, [pc, #40]	; (80035c0 <HAL_GPIO_Init+0x4ac>)
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	3301      	adds	r3, #1
 80035a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	fa22 f303 	lsr.w	r3, r2, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f47f ae4f 	bne.w	8003250 <HAL_GPIO_Init+0x13c>
  }
}
 80035b2:	bf00      	nop
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40010000 	.word	0x40010000
 80035c0:	40010400 	.word	0x40010400

080035c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	807b      	strh	r3, [r7, #2]
 80035d0:	4613      	mov	r3, r2
 80035d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80035d4:	887b      	ldrh	r3, [r7, #2]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d004      	beq.n	80035e4 <HAL_GPIO_WritePin+0x20>
 80035da:	887b      	ldrh	r3, [r7, #2]
 80035dc:	0c1b      	lsrs	r3, r3, #16
 80035de:	041b      	lsls	r3, r3, #16
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d004      	beq.n	80035ee <HAL_GPIO_WritePin+0x2a>
 80035e4:	f240 119d 	movw	r1, #413	; 0x19d
 80035e8:	480d      	ldr	r0, [pc, #52]	; (8003620 <HAL_GPIO_WritePin+0x5c>)
 80035ea:	f7fe f84a 	bl	8001682 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80035ee:	787b      	ldrb	r3, [r7, #1]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d007      	beq.n	8003604 <HAL_GPIO_WritePin+0x40>
 80035f4:	787b      	ldrb	r3, [r7, #1]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d004      	beq.n	8003604 <HAL_GPIO_WritePin+0x40>
 80035fa:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80035fe:	4808      	ldr	r0, [pc, #32]	; (8003620 <HAL_GPIO_WritePin+0x5c>)
 8003600:	f7fe f83f 	bl	8001682 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003604:	787b      	ldrb	r3, [r7, #1]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800360a:	887a      	ldrh	r2, [r7, #2]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003610:	e002      	b.n	8003618 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003612:	887a      	ldrh	r2, [r7, #2]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003618:	bf00      	nop
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	08009614 	.word	0x08009614

08003624 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00b      	beq.n	800364a <HAL_PWREx_ControlVoltageScaling+0x26>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003638:	d007      	beq.n	800364a <HAL_PWREx_ControlVoltageScaling+0x26>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003640:	d003      	beq.n	800364a <HAL_PWREx_ControlVoltageScaling+0x26>
 8003642:	219e      	movs	r1, #158	; 0x9e
 8003644:	484d      	ldr	r0, [pc, #308]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x158>)
 8003646:	f7fe f81c 	bl	8001682 <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d141      	bne.n	80036d4 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003650:	4b4b      	ldr	r3, [pc, #300]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800365c:	d131      	bne.n	80036c2 <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800365e:	4b48      	ldr	r3, [pc, #288]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003664:	4a46      	ldr	r2, [pc, #280]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003666:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800366a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800366e:	4b44      	ldr	r3, [pc, #272]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003676:	4a42      	ldr	r2, [pc, #264]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003678:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800367c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800367e:	4b41      	ldr	r3, [pc, #260]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x160>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2232      	movs	r2, #50	; 0x32
 8003684:	fb02 f303 	mul.w	r3, r2, r3
 8003688:	4a3f      	ldr	r2, [pc, #252]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x164>)
 800368a:	fba2 2303 	umull	r2, r3, r2, r3
 800368e:	0c9b      	lsrs	r3, r3, #18
 8003690:	3301      	adds	r3, #1
 8003692:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003694:	e002      	b.n	800369c <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	3b01      	subs	r3, #1
 800369a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800369c:	4b38      	ldr	r3, [pc, #224]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a8:	d102      	bne.n	80036b0 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1f2      	bne.n	8003696 <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036b0:	4b33      	ldr	r3, [pc, #204]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036bc:	d158      	bne.n	8003770 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e057      	b.n	8003772 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036c2:	4b2f      	ldr	r3, [pc, #188]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80036c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036c8:	4a2d      	ldr	r2, [pc, #180]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80036ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036ce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036d2:	e04d      	b.n	8003770 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036da:	d141      	bne.n	8003760 <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036dc:	4b28      	ldr	r3, [pc, #160]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e8:	d131      	bne.n	800374e <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036ea:	4b25      	ldr	r3, [pc, #148]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80036ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036f0:	4a23      	ldr	r2, [pc, #140]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80036f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036fa:	4b21      	ldr	r3, [pc, #132]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003702:	4a1f      	ldr	r2, [pc, #124]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003704:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003708:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800370a:	4b1e      	ldr	r3, [pc, #120]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x160>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2232      	movs	r2, #50	; 0x32
 8003710:	fb02 f303 	mul.w	r3, r2, r3
 8003714:	4a1c      	ldr	r2, [pc, #112]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	0c9b      	lsrs	r3, r3, #18
 800371c:	3301      	adds	r3, #1
 800371e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003720:	e002      	b.n	8003728 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3b01      	subs	r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003728:	4b15      	ldr	r3, [pc, #84]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003734:	d102      	bne.n	800373c <HAL_PWREx_ControlVoltageScaling+0x118>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1f2      	bne.n	8003722 <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800373c:	4b10      	ldr	r3, [pc, #64]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003748:	d112      	bne.n	8003770 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e011      	b.n	8003772 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800374e:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003754:	4a0a      	ldr	r2, [pc, #40]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800375a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800375e:	e007      	b.n	8003770 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003760:	4b07      	ldr	r3, [pc, #28]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003768:	4a05      	ldr	r2, [pc, #20]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800376a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800376e:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	08009650 	.word	0x08009650
 8003780:	40007000 	.word	0x40007000
 8003784:	20000000 	.word	0x20000000
 8003788:	431bde83 	.word	0x431bde83

0800378c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d102      	bne.n	80037a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	f000 bc03 	b.w	8003fa6 <HAL_RCC_OscConfig+0x81a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d022      	beq.n	80037ee <HAL_RCC_OscConfig+0x62>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d11c      	bne.n	80037ee <HAL_RCC_OscConfig+0x62>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d116      	bne.n	80037ee <HAL_RCC_OscConfig+0x62>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d110      	bne.n	80037ee <HAL_RCC_OscConfig+0x62>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <HAL_RCC_OscConfig+0x62>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d104      	bne.n	80037ee <HAL_RCC_OscConfig+0x62>
 80037e4:	f240 114b 	movw	r1, #331	; 0x14b
 80037e8:	48a4      	ldr	r0, [pc, #656]	; (8003a7c <HAL_RCC_OscConfig+0x2f0>)
 80037ea:	f7fd ff4a 	bl	8001682 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 8089 	beq.w	800390e <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00e      	beq.n	8003822 <HAL_RCC_OscConfig+0x96>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380c:	d009      	beq.n	8003822 <HAL_RCC_OscConfig+0x96>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003816:	d004      	beq.n	8003822 <HAL_RCC_OscConfig+0x96>
 8003818:	f240 1151 	movw	r1, #337	; 0x151
 800381c:	4897      	ldr	r0, [pc, #604]	; (8003a7c <HAL_RCC_OscConfig+0x2f0>)
 800381e:	f7fd ff30 	bl	8001682 <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003822:	4b97      	ldr	r3, [pc, #604]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 030c 	and.w	r3, r3, #12
 800382a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800382c:	4b94      	ldr	r3, [pc, #592]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 0303 	and.w	r3, r3, #3
 8003834:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	2b0c      	cmp	r3, #12
 800383a:	d102      	bne.n	8003842 <HAL_RCC_OscConfig+0xb6>
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2b03      	cmp	r3, #3
 8003840:	d002      	beq.n	8003848 <HAL_RCC_OscConfig+0xbc>
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	2b08      	cmp	r3, #8
 8003846:	d10b      	bne.n	8003860 <HAL_RCC_OscConfig+0xd4>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003848:	4b8d      	ldr	r3, [pc, #564]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d05b      	beq.n	800390c <HAL_RCC_OscConfig+0x180>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d157      	bne.n	800390c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e3a2      	b.n	8003fa6 <HAL_RCC_OscConfig+0x81a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003868:	d106      	bne.n	8003878 <HAL_RCC_OscConfig+0xec>
 800386a:	4b85      	ldr	r3, [pc, #532]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a84      	ldr	r2, [pc, #528]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 8003870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	e01d      	b.n	80038b4 <HAL_RCC_OscConfig+0x128>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003880:	d10c      	bne.n	800389c <HAL_RCC_OscConfig+0x110>
 8003882:	4b7f      	ldr	r3, [pc, #508]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a7e      	ldr	r2, [pc, #504]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 8003888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	4b7c      	ldr	r3, [pc, #496]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a7b      	ldr	r2, [pc, #492]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 8003894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	e00b      	b.n	80038b4 <HAL_RCC_OscConfig+0x128>
 800389c:	4b78      	ldr	r3, [pc, #480]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a77      	ldr	r2, [pc, #476]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 80038a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	4b75      	ldr	r3, [pc, #468]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a74      	ldr	r2, [pc, #464]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 80038ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d013      	beq.n	80038e4 <HAL_RCC_OscConfig+0x158>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038bc:	f7fe fcce 	bl	800225c <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c4:	f7fe fcca 	bl	800225c <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b64      	cmp	r3, #100	; 0x64
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e367      	b.n	8003fa6 <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038d6:	4b6a      	ldr	r3, [pc, #424]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0f0      	beq.n	80038c4 <HAL_RCC_OscConfig+0x138>
 80038e2:	e014      	b.n	800390e <HAL_RCC_OscConfig+0x182>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fe fcba 	bl	800225c <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ec:	f7fe fcb6 	bl	800225c <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b64      	cmp	r3, #100	; 0x64
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e353      	b.n	8003fa6 <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038fe:	4b60      	ldr	r3, [pc, #384]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x160>
 800390a:	e000      	b.n	800390e <HAL_RCC_OscConfig+0x182>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800390c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 808d 	beq.w	8003a36 <HAL_RCC_OscConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d009      	beq.n	8003938 <HAL_RCC_OscConfig+0x1ac>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800392c:	d004      	beq.n	8003938 <HAL_RCC_OscConfig+0x1ac>
 800392e:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8003932:	4852      	ldr	r0, [pc, #328]	; (8003a7c <HAL_RCC_OscConfig+0x2f0>)
 8003934:	f7fd fea5 	bl	8001682 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	2b7f      	cmp	r3, #127	; 0x7f
 800393e:	d904      	bls.n	800394a <HAL_RCC_OscConfig+0x1be>
 8003940:	f240 1187 	movw	r1, #391	; 0x187
 8003944:	484d      	ldr	r0, [pc, #308]	; (8003a7c <HAL_RCC_OscConfig+0x2f0>)
 8003946:	f7fd fe9c 	bl	8001682 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800394a:	4b4d      	ldr	r3, [pc, #308]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
 8003952:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003954:	4b4a      	ldr	r3, [pc, #296]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0303 	and.w	r3, r3, #3
 800395c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	2b0c      	cmp	r3, #12
 8003962:	d102      	bne.n	800396a <HAL_RCC_OscConfig+0x1de>
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d002      	beq.n	8003970 <HAL_RCC_OscConfig+0x1e4>
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	2b04      	cmp	r3, #4
 800396e:	d11f      	bne.n	80039b0 <HAL_RCC_OscConfig+0x224>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003970:	4b43      	ldr	r3, [pc, #268]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_RCC_OscConfig+0x1fc>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_RCC_OscConfig+0x1fc>
      {
        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e30e      	b.n	8003fa6 <HAL_RCC_OscConfig+0x81a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003988:	4b3d      	ldr	r3, [pc, #244]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	061b      	lsls	r3, r3, #24
 8003996:	493a      	ldr	r1, [pc, #232]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 8003998:	4313      	orrs	r3, r2
 800399a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800399c:	4b39      	ldr	r3, [pc, #228]	; (8003a84 <HAL_RCC_OscConfig+0x2f8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fd ff51 	bl	8001848 <HAL_InitTick>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d043      	beq.n	8003a34 <HAL_RCC_OscConfig+0x2a8>
        {
          return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e2fa      	b.n	8003fa6 <HAL_RCC_OscConfig+0x81a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d023      	beq.n	8003a00 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b8:	4b31      	ldr	r3, [pc, #196]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a30      	ldr	r2, [pc, #192]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 80039be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7fe fc4a 	bl	800225c <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x252>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039cc:	f7fe fc46 	bl	800225c <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x252>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e2e3      	b.n	8003fa6 <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039de:	4b28      	ldr	r3, [pc, #160]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0x240>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ea:	4b25      	ldr	r3, [pc, #148]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	061b      	lsls	r3, r3, #24
 80039f8:	4921      	ldr	r1, [pc, #132]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	604b      	str	r3, [r1, #4]
 80039fe:	e01a      	b.n	8003a36 <HAL_RCC_OscConfig+0x2aa>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a00:	4b1f      	ldr	r3, [pc, #124]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a1e      	ldr	r2, [pc, #120]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 8003a06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0c:	f7fe fc26 	bl	800225c <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x29a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a14:	f7fe fc22 	bl	800225c <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e2bf      	b.n	8003fa6 <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a26:	4b16      	ldr	r3, [pc, #88]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0x288>
 8003a32:	e000      	b.n	8003a36 <HAL_RCC_OscConfig+0x2aa>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d04f      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d008      	beq.n	8003a5c <HAL_RCC_OscConfig+0x2d0>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d004      	beq.n	8003a5c <HAL_RCC_OscConfig+0x2d0>
 8003a52:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8003a56:	4809      	ldr	r0, [pc, #36]	; (8003a7c <HAL_RCC_OscConfig+0x2f0>)
 8003a58:	f7fd fe13 	bl	8001682 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d022      	beq.n	8003aaa <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a64:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 8003a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a6a:	4a05      	ldr	r2, [pc, #20]	; (8003a80 <HAL_RCC_OscConfig+0x2f4>)
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a74:	f7fe fbf2 	bl	800225c <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a7a:	e00e      	b.n	8003a9a <HAL_RCC_OscConfig+0x30e>
 8003a7c:	0800968c 	.word	0x0800968c
 8003a80:	40021000 	.word	0x40021000
 8003a84:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a88:	f7fe fbe8 	bl	800225c <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e285      	b.n	8003fa6 <HAL_RCC_OscConfig+0x81a>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a9a:	4b95      	ldr	r3, [pc, #596]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0ef      	beq.n	8003a88 <HAL_RCC_OscConfig+0x2fc>
 8003aa8:	e01b      	b.n	8003ae2 <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aaa:	4b91      	ldr	r3, [pc, #580]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ab0:	4a8f      	ldr	r2, [pc, #572]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003ab2:	f023 0301 	bic.w	r3, r3, #1
 8003ab6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aba:	f7fe fbcf 	bl	800225c <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac2:	f7fe fbcb 	bl	800225c <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e268      	b.n	8003fa6 <HAL_RCC_OscConfig+0x81a>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ad4:	4b86      	ldr	r3, [pc, #536]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1ef      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 80b7 	beq.w	8003c5e <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003af0:	2300      	movs	r3, #0
 8003af2:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00c      	beq.n	8003b16 <HAL_RCC_OscConfig+0x38a>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d008      	beq.n	8003b16 <HAL_RCC_OscConfig+0x38a>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	2b05      	cmp	r3, #5
 8003b0a:	d004      	beq.n	8003b16 <HAL_RCC_OscConfig+0x38a>
 8003b0c:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 8003b10:	4878      	ldr	r0, [pc, #480]	; (8003cf4 <HAL_RCC_OscConfig+0x568>)
 8003b12:	f7fd fdb6 	bl	8001682 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b16:	4b76      	ldr	r3, [pc, #472]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_RCC_OscConfig+0x39a>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <HAL_RCC_OscConfig+0x39c>
 8003b26:	2300      	movs	r3, #0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00d      	beq.n	8003b48 <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b2c:	4b70      	ldr	r3, [pc, #448]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b30:	4a6f      	ldr	r2, [pc, #444]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b36:	6593      	str	r3, [r2, #88]	; 0x58
 8003b38:	4b6d      	ldr	r3, [pc, #436]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b44:	2301      	movs	r3, #1
 8003b46:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b48:	4b6b      	ldr	r3, [pc, #428]	; (8003cf8 <HAL_RCC_OscConfig+0x56c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d118      	bne.n	8003b86 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b54:	4b68      	ldr	r3, [pc, #416]	; (8003cf8 <HAL_RCC_OscConfig+0x56c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a67      	ldr	r2, [pc, #412]	; (8003cf8 <HAL_RCC_OscConfig+0x56c>)
 8003b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b60:	f7fe fb7c 	bl	800225c <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b68:	f7fe fb78 	bl	800225c <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e215      	b.n	8003fa6 <HAL_RCC_OscConfig+0x81a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b7a:	4b5f      	ldr	r3, [pc, #380]	; (8003cf8 <HAL_RCC_OscConfig+0x56c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0f0      	beq.n	8003b68 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d108      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x414>
 8003b8e:	4b58      	ldr	r3, [pc, #352]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b94:	4a56      	ldr	r2, [pc, #344]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b9e:	e024      	b.n	8003bea <HAL_RCC_OscConfig+0x45e>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b05      	cmp	r3, #5
 8003ba6:	d110      	bne.n	8003bca <HAL_RCC_OscConfig+0x43e>
 8003ba8:	4b51      	ldr	r3, [pc, #324]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bae:	4a50      	ldr	r2, [pc, #320]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003bb0:	f043 0304 	orr.w	r3, r3, #4
 8003bb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bb8:	4b4d      	ldr	r3, [pc, #308]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbe:	4a4c      	ldr	r2, [pc, #304]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bc8:	e00f      	b.n	8003bea <HAL_RCC_OscConfig+0x45e>
 8003bca:	4b49      	ldr	r3, [pc, #292]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd0:	4a47      	ldr	r2, [pc, #284]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003bd2:	f023 0301 	bic.w	r3, r3, #1
 8003bd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bda:	4b45      	ldr	r3, [pc, #276]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be0:	4a43      	ldr	r2, [pc, #268]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003be2:	f023 0304 	bic.w	r3, r3, #4
 8003be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d016      	beq.n	8003c20 <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf2:	f7fe fb33 	bl	800225c <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bf8:	e00a      	b.n	8003c10 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfa:	f7fe fb2f 	bl	800225c <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e1ca      	b.n	8003fa6 <HAL_RCC_OscConfig+0x81a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c10:	4b37      	ldr	r3, [pc, #220]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0ed      	beq.n	8003bfa <HAL_RCC_OscConfig+0x46e>
 8003c1e:	e015      	b.n	8003c4c <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c20:	f7fe fb1c 	bl	800225c <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c28:	f7fe fb18 	bl	800225c <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e1b3      	b.n	8003fa6 <HAL_RCC_OscConfig+0x81a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c3e:	4b2c      	ldr	r3, [pc, #176]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1ed      	bne.n	8003c28 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c4c:	7ffb      	ldrb	r3, [r7, #31]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d105      	bne.n	8003c5e <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c52:	4b27      	ldr	r3, [pc, #156]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c56:	4a26      	ldr	r2, [pc, #152]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d04f      	beq.n	8003d0a <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d008      	beq.n	8003c84 <HAL_RCC_OscConfig+0x4f8>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d004      	beq.n	8003c84 <HAL_RCC_OscConfig+0x4f8>
 8003c7a:	f240 2141 	movw	r1, #577	; 0x241
 8003c7e:	481d      	ldr	r0, [pc, #116]	; (8003cf4 <HAL_RCC_OscConfig+0x568>)
 8003c80:	f7fd fcff 	bl	8001682 <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d01c      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c8c:	4b18      	ldr	r3, [pc, #96]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003c8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c92:	4a17      	ldr	r2, [pc, #92]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003c94:	f043 0301 	orr.w	r3, r3, #1
 8003c98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9c:	f7fe fade 	bl	800225c <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ca4:	f7fe fada 	bl	800225c <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e177      	b.n	8003fa6 <HAL_RCC_OscConfig+0x81a>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cb6:	4b0e      	ldr	r3, [pc, #56]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003cb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0ef      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x518>
 8003cc4:	e021      	b.n	8003d0a <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cc6:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003cc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ccc:	4a08      	ldr	r2, [pc, #32]	; (8003cf0 <HAL_RCC_OscConfig+0x564>)
 8003cce:	f023 0301 	bic.w	r3, r3, #1
 8003cd2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd6:	f7fe fac1 	bl	800225c <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cdc:	e00e      	b.n	8003cfc <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cde:	f7fe fabd 	bl	800225c <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d907      	bls.n	8003cfc <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e15a      	b.n	8003fa6 <HAL_RCC_OscConfig+0x81a>
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	0800968c 	.word	0x0800968c
 8003cf8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cfc:	4ba6      	ldr	r3, [pc, #664]	; (8003f98 <HAL_RCC_OscConfig+0x80c>)
 8003cfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1e9      	bne.n	8003cde <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00c      	beq.n	8003d2c <HAL_RCC_OscConfig+0x5a0>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d008      	beq.n	8003d2c <HAL_RCC_OscConfig+0x5a0>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d004      	beq.n	8003d2c <HAL_RCC_OscConfig+0x5a0>
 8003d22:	f240 216a 	movw	r1, #618	; 0x26a
 8003d26:	489d      	ldr	r0, [pc, #628]	; (8003f9c <HAL_RCC_OscConfig+0x810>)
 8003d28:	f7fd fcab 	bl	8001682 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8137 	beq.w	8003fa4 <HAL_RCC_OscConfig+0x818>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d36:	4b98      	ldr	r3, [pc, #608]	; (8003f98 <HAL_RCC_OscConfig+0x80c>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 030c 	and.w	r3, r3, #12
 8003d3e:	2b0c      	cmp	r3, #12
 8003d40:	f000 80ea 	beq.w	8003f18 <HAL_RCC_OscConfig+0x78c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	f040 80bd 	bne.w	8003ec8 <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00c      	beq.n	8003d70 <HAL_RCC_OscConfig+0x5e4>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d008      	beq.n	8003d70 <HAL_RCC_OscConfig+0x5e4>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d004      	beq.n	8003d70 <HAL_RCC_OscConfig+0x5e4>
 8003d66:	f44f 711d 	mov.w	r1, #628	; 0x274
 8003d6a:	488c      	ldr	r0, [pc, #560]	; (8003f9c <HAL_RCC_OscConfig+0x810>)
 8003d6c:	f7fd fc89 	bl	8001682 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_RCC_OscConfig+0x5f4>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	2b10      	cmp	r3, #16
 8003d7e:	d904      	bls.n	8003d8a <HAL_RCC_OscConfig+0x5fe>
 8003d80:	f240 2175 	movw	r1, #629	; 0x275
 8003d84:	4885      	ldr	r0, [pc, #532]	; (8003f9c <HAL_RCC_OscConfig+0x810>)
 8003d86:	f7fd fc7c 	bl	8001682 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8e:	2b07      	cmp	r3, #7
 8003d90:	d903      	bls.n	8003d9a <HAL_RCC_OscConfig+0x60e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d96:	2b7f      	cmp	r3, #127	; 0x7f
 8003d98:	d904      	bls.n	8003da4 <HAL_RCC_OscConfig+0x618>
 8003d9a:	f240 2176 	movw	r1, #630	; 0x276
 8003d9e:	487f      	ldr	r0, [pc, #508]	; (8003f9c <HAL_RCC_OscConfig+0x810>)
 8003da0:	f7fd fc6f 	bl	8001682 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d903      	bls.n	8003db4 <HAL_RCC_OscConfig+0x628>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	2b1f      	cmp	r3, #31
 8003db2:	d904      	bls.n	8003dbe <HAL_RCC_OscConfig+0x632>
 8003db4:	f240 2177 	movw	r1, #631	; 0x277
 8003db8:	4878      	ldr	r0, [pc, #480]	; (8003f9c <HAL_RCC_OscConfig+0x810>)
 8003dba:	f7fd fc62 	bl	8001682 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d010      	beq.n	8003de8 <HAL_RCC_OscConfig+0x65c>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d00c      	beq.n	8003de8 <HAL_RCC_OscConfig+0x65c>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	2b06      	cmp	r3, #6
 8003dd4:	d008      	beq.n	8003de8 <HAL_RCC_OscConfig+0x65c>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	d004      	beq.n	8003de8 <HAL_RCC_OscConfig+0x65c>
 8003dde:	f44f 711e 	mov.w	r1, #632	; 0x278
 8003de2:	486e      	ldr	r0, [pc, #440]	; (8003f9c <HAL_RCC_OscConfig+0x810>)
 8003de4:	f7fd fc4d 	bl	8001682 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d010      	beq.n	8003e12 <HAL_RCC_OscConfig+0x686>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d00c      	beq.n	8003e12 <HAL_RCC_OscConfig+0x686>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfc:	2b06      	cmp	r3, #6
 8003dfe:	d008      	beq.n	8003e12 <HAL_RCC_OscConfig+0x686>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d004      	beq.n	8003e12 <HAL_RCC_OscConfig+0x686>
 8003e08:	f240 2179 	movw	r1, #633	; 0x279
 8003e0c:	4863      	ldr	r0, [pc, #396]	; (8003f9c <HAL_RCC_OscConfig+0x810>)
 8003e0e:	f7fd fc38 	bl	8001682 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e12:	4b61      	ldr	r3, [pc, #388]	; (8003f98 <HAL_RCC_OscConfig+0x80c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a60      	ldr	r2, [pc, #384]	; (8003f98 <HAL_RCC_OscConfig+0x80c>)
 8003e18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1e:	f7fe fa1d 	bl	800225c <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e26:	f7fe fa19 	bl	800225c <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e0b6      	b.n	8003fa6 <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e38:	4b57      	ldr	r3, [pc, #348]	; (8003f98 <HAL_RCC_OscConfig+0x80c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1f0      	bne.n	8003e26 <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e44:	4b54      	ldr	r3, [pc, #336]	; (8003f98 <HAL_RCC_OscConfig+0x80c>)
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	4b55      	ldr	r3, [pc, #340]	; (8003fa0 <HAL_RCC_OscConfig+0x814>)
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6a11      	ldr	r1, [r2, #32]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e54:	3a01      	subs	r2, #1
 8003e56:	0112      	lsls	r2, r2, #4
 8003e58:	4311      	orrs	r1, r2
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003e5e:	0212      	lsls	r2, r2, #8
 8003e60:	4311      	orrs	r1, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e66:	0852      	lsrs	r2, r2, #1
 8003e68:	3a01      	subs	r2, #1
 8003e6a:	0552      	lsls	r2, r2, #21
 8003e6c:	4311      	orrs	r1, r2
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e72:	0852      	lsrs	r2, r2, #1
 8003e74:	3a01      	subs	r2, #1
 8003e76:	0652      	lsls	r2, r2, #25
 8003e78:	4311      	orrs	r1, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e7e:	06d2      	lsls	r2, r2, #27
 8003e80:	430a      	orrs	r2, r1
 8003e82:	4945      	ldr	r1, [pc, #276]	; (8003f98 <HAL_RCC_OscConfig+0x80c>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e88:	4b43      	ldr	r3, [pc, #268]	; (8003f98 <HAL_RCC_OscConfig+0x80c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a42      	ldr	r2, [pc, #264]	; (8003f98 <HAL_RCC_OscConfig+0x80c>)
 8003e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e92:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e94:	4b40      	ldr	r3, [pc, #256]	; (8003f98 <HAL_RCC_OscConfig+0x80c>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4a3f      	ldr	r2, [pc, #252]	; (8003f98 <HAL_RCC_OscConfig+0x80c>)
 8003e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fe f9dc 	bl	800225c <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea8:	f7fe f9d8 	bl	800225c <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e075      	b.n	8003fa6 <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eba:	4b37      	ldr	r3, [pc, #220]	; (8003f98 <HAL_RCC_OscConfig+0x80c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x71c>
 8003ec6:	e06d      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec8:	4b33      	ldr	r3, [pc, #204]	; (8003f98 <HAL_RCC_OscConfig+0x80c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a32      	ldr	r2, [pc, #200]	; (8003f98 <HAL_RCC_OscConfig+0x80c>)
 8003ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ed2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ed4:	4b30      	ldr	r3, [pc, #192]	; (8003f98 <HAL_RCC_OscConfig+0x80c>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	4a2f      	ldr	r2, [pc, #188]	; (8003f98 <HAL_RCC_OscConfig+0x80c>)
 8003eda:	f023 0303 	bic.w	r3, r3, #3
 8003ede:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ee0:	4b2d      	ldr	r3, [pc, #180]	; (8003f98 <HAL_RCC_OscConfig+0x80c>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	4a2c      	ldr	r2, [pc, #176]	; (8003f98 <HAL_RCC_OscConfig+0x80c>)
 8003ee6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef0:	f7fe f9b4 	bl	800225c <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x77e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef8:	f7fe f9b0 	bl	800225c <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x77e>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e04d      	b.n	8003fa6 <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f0a:	4b23      	ldr	r3, [pc, #140]	; (8003f98 <HAL_RCC_OscConfig+0x80c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x76c>
 8003f16:	e045      	b.n	8003fa4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_RCC_OscConfig+0x798>
      {
        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e040      	b.n	8003fa6 <HAL_RCC_OscConfig+0x81a>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003f24:	4b1c      	ldr	r3, [pc, #112]	; (8003f98 <HAL_RCC_OscConfig+0x80c>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f003 0203 	and.w	r2, r3, #3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d12c      	bne.n	8003f92 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	3b01      	subs	r3, #1
 8003f44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d123      	bne.n	8003f92 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d11b      	bne.n	8003f92 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d113      	bne.n	8003f92 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f74:	085b      	lsrs	r3, r3, #1
 8003f76:	3b01      	subs	r3, #1
 8003f78:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d109      	bne.n	8003f92 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f88:	085b      	lsrs	r3, r3, #1
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d008      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x818>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e007      	b.n	8003fa6 <HAL_RCC_OscConfig+0x81a>
 8003f96:	bf00      	nop
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	0800968c 	.word	0x0800968c
 8003fa0:	019f800c 	.word	0x019f800c
      }
    }
  }
  }

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3720      	adds	r7, #32
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop

08003fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e1e2      	b.n	800438e <HAL_RCC_ClockConfig+0x3de>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 030f 	and.w	r3, r3, #15
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x30>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f023 030f 	bic.w	r3, r3, #15
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d004      	beq.n	8003fea <HAL_RCC_ClockConfig+0x3a>
 8003fe0:	f240 3112 	movw	r1, #786	; 0x312
 8003fe4:	4897      	ldr	r0, [pc, #604]	; (8004244 <HAL_RCC_ClockConfig+0x294>)
 8003fe6:	f7fd fb4c 	bl	8001682 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d031      	beq.n	8004054 <HAL_RCC_ClockConfig+0xa4>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d02e      	beq.n	8004054 <HAL_RCC_ClockConfig+0xa4>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d02b      	beq.n	8004054 <HAL_RCC_ClockConfig+0xa4>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	d028      	beq.n	8004054 <HAL_RCC_ClockConfig+0xa4>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b04      	cmp	r3, #4
 8004006:	d025      	beq.n	8004054 <HAL_RCC_ClockConfig+0xa4>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2b05      	cmp	r3, #5
 800400c:	d022      	beq.n	8004054 <HAL_RCC_ClockConfig+0xa4>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b06      	cmp	r3, #6
 8004012:	d01f      	beq.n	8004054 <HAL_RCC_ClockConfig+0xa4>
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	2b07      	cmp	r3, #7
 8004018:	d01c      	beq.n	8004054 <HAL_RCC_ClockConfig+0xa4>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b08      	cmp	r3, #8
 800401e:	d019      	beq.n	8004054 <HAL_RCC_ClockConfig+0xa4>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	2b09      	cmp	r3, #9
 8004024:	d016      	beq.n	8004054 <HAL_RCC_ClockConfig+0xa4>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b0a      	cmp	r3, #10
 800402a:	d013      	beq.n	8004054 <HAL_RCC_ClockConfig+0xa4>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	2b0b      	cmp	r3, #11
 8004030:	d010      	beq.n	8004054 <HAL_RCC_ClockConfig+0xa4>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	2b0c      	cmp	r3, #12
 8004036:	d00d      	beq.n	8004054 <HAL_RCC_ClockConfig+0xa4>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	2b0d      	cmp	r3, #13
 800403c:	d00a      	beq.n	8004054 <HAL_RCC_ClockConfig+0xa4>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b0e      	cmp	r3, #14
 8004042:	d007      	beq.n	8004054 <HAL_RCC_ClockConfig+0xa4>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	2b0f      	cmp	r3, #15
 8004048:	d004      	beq.n	8004054 <HAL_RCC_ClockConfig+0xa4>
 800404a:	f240 3113 	movw	r1, #787	; 0x313
 800404e:	487d      	ldr	r0, [pc, #500]	; (8004244 <HAL_RCC_ClockConfig+0x294>)
 8004050:	f7fd fb17 	bl	8001682 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004054:	4b7c      	ldr	r3, [pc, #496]	; (8004248 <HAL_RCC_ClockConfig+0x298>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 030f 	and.w	r3, r3, #15
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d910      	bls.n	8004084 <HAL_RCC_ClockConfig+0xd4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004062:	4b79      	ldr	r3, [pc, #484]	; (8004248 <HAL_RCC_ClockConfig+0x298>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f023 020f 	bic.w	r2, r3, #15
 800406a:	4977      	ldr	r1, [pc, #476]	; (8004248 <HAL_RCC_ClockConfig+0x298>)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	4313      	orrs	r3, r2
 8004070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004072:	4b75      	ldr	r3, [pc, #468]	; (8004248 <HAL_RCC_ClockConfig+0x298>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	429a      	cmp	r2, r3
 800407e:	d001      	beq.n	8004084 <HAL_RCC_ClockConfig+0xd4>
    {
      return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e184      	b.n	800438e <HAL_RCC_ClockConfig+0x3de>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 8085 	beq.w	800419c <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d00c      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x104>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d008      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x104>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d004      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x104>
 80040aa:	f240 312a 	movw	r1, #810	; 0x32a
 80040ae:	4865      	ldr	r0, [pc, #404]	; (8004244 <HAL_RCC_ClockConfig+0x294>)
 80040b0:	f7fd fae7 	bl	8001682 <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d129      	bne.n	8004110 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040bc:	4b63      	ldr	r3, [pc, #396]	; (800424c <HAL_RCC_ClockConfig+0x29c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_RCC_ClockConfig+0x11c>
      {
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e160      	b.n	800438e <HAL_RCC_ClockConfig+0x3de>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80040cc:	f000 fa34 	bl	8004538 <RCC_GetSysClockFreqFromPLLSource>
 80040d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	4a5e      	ldr	r2, [pc, #376]	; (8004250 <HAL_RCC_ClockConfig+0x2a0>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d93f      	bls.n	800415a <HAL_RCC_ClockConfig+0x1aa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80040da:	4b5c      	ldr	r3, [pc, #368]	; (800424c <HAL_RCC_ClockConfig+0x29c>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d009      	beq.n	80040fa <HAL_RCC_ClockConfig+0x14a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d033      	beq.n	800415a <HAL_RCC_ClockConfig+0x1aa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d12f      	bne.n	800415a <HAL_RCC_ClockConfig+0x1aa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040fa:	4b54      	ldr	r3, [pc, #336]	; (800424c <HAL_RCC_ClockConfig+0x29c>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004102:	4a52      	ldr	r2, [pc, #328]	; (800424c <HAL_RCC_ClockConfig+0x29c>)
 8004104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004108:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800410a:	2380      	movs	r3, #128	; 0x80
 800410c:	617b      	str	r3, [r7, #20]
 800410e:	e024      	b.n	800415a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d107      	bne.n	8004128 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004118:	4b4c      	ldr	r3, [pc, #304]	; (800424c <HAL_RCC_ClockConfig+0x29c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d109      	bne.n	8004138 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e132      	b.n	800438e <HAL_RCC_ClockConfig+0x3de>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004128:	4b48      	ldr	r3, [pc, #288]	; (800424c <HAL_RCC_ClockConfig+0x29c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e12a      	b.n	800438e <HAL_RCC_ClockConfig+0x3de>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004138:	f000 f93a 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 800413c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	4a43      	ldr	r2, [pc, #268]	; (8004250 <HAL_RCC_ClockConfig+0x2a0>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d909      	bls.n	800415a <HAL_RCC_ClockConfig+0x1aa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004146:	4b41      	ldr	r3, [pc, #260]	; (800424c <HAL_RCC_ClockConfig+0x29c>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800414e:	4a3f      	ldr	r2, [pc, #252]	; (800424c <HAL_RCC_ClockConfig+0x29c>)
 8004150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004154:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004156:	2380      	movs	r3, #128	; 0x80
 8004158:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800415a:	4b3c      	ldr	r3, [pc, #240]	; (800424c <HAL_RCC_ClockConfig+0x29c>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f023 0203 	bic.w	r2, r3, #3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	4939      	ldr	r1, [pc, #228]	; (800424c <HAL_RCC_ClockConfig+0x29c>)
 8004168:	4313      	orrs	r3, r2
 800416a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800416c:	f7fe f876 	bl	800225c <HAL_GetTick>
 8004170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004172:	e00a      	b.n	800418a <HAL_RCC_ClockConfig+0x1da>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004174:	f7fe f872 	bl	800225c <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004182:	4293      	cmp	r3, r2
 8004184:	d901      	bls.n	800418a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e101      	b.n	800438e <HAL_RCC_ClockConfig+0x3de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418a:	4b30      	ldr	r3, [pc, #192]	; (800424c <HAL_RCC_ClockConfig+0x29c>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 020c 	and.w	r2, r3, #12
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	429a      	cmp	r2, r3
 800419a:	d1eb      	bne.n	8004174 <HAL_RCC_ClockConfig+0x1c4>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d055      	beq.n	8004254 <HAL_RCC_ClockConfig+0x2a4>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x210>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041b4:	4b25      	ldr	r3, [pc, #148]	; (800424c <HAL_RCC_ClockConfig+0x29c>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	4a24      	ldr	r2, [pc, #144]	; (800424c <HAL_RCC_ClockConfig+0x29c>)
 80041ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0308 	and.w	r3, r3, #8
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d007      	beq.n	80041dc <HAL_RCC_ClockConfig+0x22c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80041cc:	4b1f      	ldr	r3, [pc, #124]	; (800424c <HAL_RCC_ClockConfig+0x29c>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80041d4:	4a1d      	ldr	r2, [pc, #116]	; (800424c <HAL_RCC_ClockConfig+0x29c>)
 80041d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d024      	beq.n	800422e <HAL_RCC_ClockConfig+0x27e>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2b80      	cmp	r3, #128	; 0x80
 80041ea:	d020      	beq.n	800422e <HAL_RCC_ClockConfig+0x27e>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	2b90      	cmp	r3, #144	; 0x90
 80041f2:	d01c      	beq.n	800422e <HAL_RCC_ClockConfig+0x27e>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2ba0      	cmp	r3, #160	; 0xa0
 80041fa:	d018      	beq.n	800422e <HAL_RCC_ClockConfig+0x27e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	2bb0      	cmp	r3, #176	; 0xb0
 8004202:	d014      	beq.n	800422e <HAL_RCC_ClockConfig+0x27e>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2bc0      	cmp	r3, #192	; 0xc0
 800420a:	d010      	beq.n	800422e <HAL_RCC_ClockConfig+0x27e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	2bd0      	cmp	r3, #208	; 0xd0
 8004212:	d00c      	beq.n	800422e <HAL_RCC_ClockConfig+0x27e>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2be0      	cmp	r3, #224	; 0xe0
 800421a:	d008      	beq.n	800422e <HAL_RCC_ClockConfig+0x27e>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2bf0      	cmp	r3, #240	; 0xf0
 8004222:	d004      	beq.n	800422e <HAL_RCC_ClockConfig+0x27e>
 8004224:	f240 3181 	movw	r1, #897	; 0x381
 8004228:	4806      	ldr	r0, [pc, #24]	; (8004244 <HAL_RCC_ClockConfig+0x294>)
 800422a:	f7fd fa2a 	bl	8001682 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800422e:	4b07      	ldr	r3, [pc, #28]	; (800424c <HAL_RCC_ClockConfig+0x29c>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	4904      	ldr	r1, [pc, #16]	; (800424c <HAL_RCC_ClockConfig+0x29c>)
 800423c:	4313      	orrs	r3, r2
 800423e:	608b      	str	r3, [r1, #8]
 8004240:	e011      	b.n	8004266 <HAL_RCC_ClockConfig+0x2b6>
 8004242:	bf00      	nop
 8004244:	0800968c 	.word	0x0800968c
 8004248:	40022000 	.word	0x40022000
 800424c:	40021000 	.word	0x40021000
 8004250:	04c4b400 	.word	0x04c4b400
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	2b80      	cmp	r3, #128	; 0x80
 8004258:	d105      	bne.n	8004266 <HAL_RCC_ClockConfig+0x2b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800425a:	4b4f      	ldr	r3, [pc, #316]	; (8004398 <HAL_RCC_ClockConfig+0x3e8>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	4a4e      	ldr	r2, [pc, #312]	; (8004398 <HAL_RCC_ClockConfig+0x3e8>)
 8004260:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004264:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004266:	4b4d      	ldr	r3, [pc, #308]	; (800439c <HAL_RCC_ClockConfig+0x3ec>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 030f 	and.w	r3, r3, #15
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d21d      	bcs.n	80042b0 <HAL_RCC_ClockConfig+0x300>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004274:	4b49      	ldr	r3, [pc, #292]	; (800439c <HAL_RCC_ClockConfig+0x3ec>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f023 020f 	bic.w	r2, r3, #15
 800427c:	4947      	ldr	r1, [pc, #284]	; (800439c <HAL_RCC_ClockConfig+0x3ec>)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	4313      	orrs	r3, r2
 8004282:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004284:	f7fd ffea 	bl	800225c <HAL_GetTick>
 8004288:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800428a:	e00a      	b.n	80042a2 <HAL_RCC_ClockConfig+0x2f2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800428c:	f7fd ffe6 	bl	800225c <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	f241 3288 	movw	r2, #5000	; 0x1388
 800429a:	4293      	cmp	r3, r2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_ClockConfig+0x2f2>
      {
        return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e075      	b.n	800438e <HAL_RCC_ClockConfig+0x3de>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a2:	4b3e      	ldr	r3, [pc, #248]	; (800439c <HAL_RCC_ClockConfig+0x3ec>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d1ed      	bne.n	800428c <HAL_RCC_ClockConfig+0x2dc>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d025      	beq.n	8004308 <HAL_RCC_ClockConfig+0x358>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d018      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x346>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042cc:	d013      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x346>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80042d6:	d00e      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x346>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042e0:	d009      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x346>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042ea:	d004      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x346>
 80042ec:	f240 31a3 	movw	r1, #931	; 0x3a3
 80042f0:	482b      	ldr	r0, [pc, #172]	; (80043a0 <HAL_RCC_ClockConfig+0x3f0>)
 80042f2:	f7fd f9c6 	bl	8001682 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042f6:	4b28      	ldr	r3, [pc, #160]	; (8004398 <HAL_RCC_ClockConfig+0x3e8>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	4925      	ldr	r1, [pc, #148]	; (8004398 <HAL_RCC_ClockConfig+0x3e8>)
 8004304:	4313      	orrs	r3, r2
 8004306:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b00      	cmp	r3, #0
 8004312:	d026      	beq.n	8004362 <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d018      	beq.n	800434e <HAL_RCC_ClockConfig+0x39e>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004324:	d013      	beq.n	800434e <HAL_RCC_ClockConfig+0x39e>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800432e:	d00e      	beq.n	800434e <HAL_RCC_ClockConfig+0x39e>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004338:	d009      	beq.n	800434e <HAL_RCC_ClockConfig+0x39e>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004342:	d004      	beq.n	800434e <HAL_RCC_ClockConfig+0x39e>
 8004344:	f240 31aa 	movw	r1, #938	; 0x3aa
 8004348:	4815      	ldr	r0, [pc, #84]	; (80043a0 <HAL_RCC_ClockConfig+0x3f0>)
 800434a:	f7fd f99a 	bl	8001682 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800434e:	4b12      	ldr	r3, [pc, #72]	; (8004398 <HAL_RCC_ClockConfig+0x3e8>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	490e      	ldr	r1, [pc, #56]	; (8004398 <HAL_RCC_ClockConfig+0x3e8>)
 800435e:	4313      	orrs	r3, r2
 8004360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004362:	f000 f825 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 8004366:	4601      	mov	r1, r0
 8004368:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <HAL_RCC_ClockConfig+0x3e8>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	091b      	lsrs	r3, r3, #4
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	4a0c      	ldr	r2, [pc, #48]	; (80043a4 <HAL_RCC_ClockConfig+0x3f4>)
 8004374:	5cd3      	ldrb	r3, [r2, r3]
 8004376:	f003 031f 	and.w	r3, r3, #31
 800437a:	fa21 f303 	lsr.w	r3, r1, r3
 800437e:	4a0a      	ldr	r2, [pc, #40]	; (80043a8 <HAL_RCC_ClockConfig+0x3f8>)
 8004380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004382:	4b0a      	ldr	r3, [pc, #40]	; (80043ac <HAL_RCC_ClockConfig+0x3fc>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7fd fa5e 	bl	8001848 <HAL_InitTick>
 800438c:	4603      	mov	r3, r0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40021000 	.word	0x40021000
 800439c:	40022000 	.word	0x40022000
 80043a0:	0800968c 	.word	0x0800968c
 80043a4:	080097b4 	.word	0x080097b4
 80043a8:	20000000 	.word	0x20000000
 80043ac:	20000004 	.word	0x20000004

080043b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80043b6:	4b2c      	ldr	r3, [pc, #176]	; (8004468 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 030c 	and.w	r3, r3, #12
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d102      	bne.n	80043c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043c2:	4b2a      	ldr	r3, [pc, #168]	; (800446c <HAL_RCC_GetSysClockFreq+0xbc>)
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	e047      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80043c8:	4b27      	ldr	r3, [pc, #156]	; (8004468 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f003 030c 	and.w	r3, r3, #12
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d102      	bne.n	80043da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043d4:	4b25      	ldr	r3, [pc, #148]	; (800446c <HAL_RCC_GetSysClockFreq+0xbc>)
 80043d6:	613b      	str	r3, [r7, #16]
 80043d8:	e03e      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80043da:	4b23      	ldr	r3, [pc, #140]	; (8004468 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 030c 	and.w	r3, r3, #12
 80043e2:	2b0c      	cmp	r3, #12
 80043e4:	d136      	bne.n	8004454 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043e6:	4b20      	ldr	r3, [pc, #128]	; (8004468 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043f0:	4b1d      	ldr	r3, [pc, #116]	; (8004468 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	091b      	lsrs	r3, r3, #4
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	3301      	adds	r3, #1
 80043fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b03      	cmp	r3, #3
 8004402:	d10c      	bne.n	800441e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004404:	4a19      	ldr	r2, [pc, #100]	; (800446c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	fbb2 f3f3 	udiv	r3, r2, r3
 800440c:	4a16      	ldr	r2, [pc, #88]	; (8004468 <HAL_RCC_GetSysClockFreq+0xb8>)
 800440e:	68d2      	ldr	r2, [r2, #12]
 8004410:	0a12      	lsrs	r2, r2, #8
 8004412:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004416:	fb02 f303 	mul.w	r3, r2, r3
 800441a:	617b      	str	r3, [r7, #20]
      break;
 800441c:	e00c      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800441e:	4a13      	ldr	r2, [pc, #76]	; (800446c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	fbb2 f3f3 	udiv	r3, r2, r3
 8004426:	4a10      	ldr	r2, [pc, #64]	; (8004468 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004428:	68d2      	ldr	r2, [r2, #12]
 800442a:	0a12      	lsrs	r2, r2, #8
 800442c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004430:	fb02 f303 	mul.w	r3, r2, r3
 8004434:	617b      	str	r3, [r7, #20]
      break;
 8004436:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004438:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <HAL_RCC_GetSysClockFreq+0xb8>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	0e5b      	lsrs	r3, r3, #25
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	3301      	adds	r3, #1
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	e001      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004458:	693b      	ldr	r3, [r7, #16]
}
 800445a:	4618      	mov	r0, r3
 800445c:	371c      	adds	r7, #28
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40021000 	.word	0x40021000
 800446c:	00f42400 	.word	0x00f42400

08004470 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004474:	4b03      	ldr	r3, [pc, #12]	; (8004484 <HAL_RCC_GetHCLKFreq+0x14>)
 8004476:	681b      	ldr	r3, [r3, #0]
}
 8004478:	4618      	mov	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20000000 	.word	0x20000000

08004488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800448c:	f7ff fff0 	bl	8004470 <HAL_RCC_GetHCLKFreq>
 8004490:	4601      	mov	r1, r0
 8004492:	4b06      	ldr	r3, [pc, #24]	; (80044ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	0adb      	lsrs	r3, r3, #11
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	4a04      	ldr	r2, [pc, #16]	; (80044b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800449e:	5cd3      	ldrb	r3, [r2, r3]
 80044a0:	f003 031f 	and.w	r3, r3, #31
 80044a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40021000 	.word	0x40021000
 80044b0:	080097c4 	.word	0x080097c4

080044b4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d104      	bne.n	80044ce <HAL_RCC_GetClockConfig+0x1a>
 80044c4:	f240 41d9 	movw	r1, #1241	; 0x4d9
 80044c8:	4818      	ldr	r0, [pc, #96]	; (800452c <HAL_RCC_GetClockConfig+0x78>)
 80044ca:	f7fd f8da 	bl	8001682 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d104      	bne.n	80044de <HAL_RCC_GetClockConfig+0x2a>
 80044d4:	f240 41da 	movw	r1, #1242	; 0x4da
 80044d8:	4814      	ldr	r0, [pc, #80]	; (800452c <HAL_RCC_GetClockConfig+0x78>)
 80044da:	f7fd f8d2 	bl	8001682 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	220f      	movs	r2, #15
 80044e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80044e4:	4b12      	ldr	r3, [pc, #72]	; (8004530 <HAL_RCC_GetClockConfig+0x7c>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 0203 	and.w	r2, r3, #3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80044f0:	4b0f      	ldr	r3, [pc, #60]	; (8004530 <HAL_RCC_GetClockConfig+0x7c>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80044fc:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <HAL_RCC_GetClockConfig+0x7c>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004508:	4b09      	ldr	r3, [pc, #36]	; (8004530 <HAL_RCC_GetClockConfig+0x7c>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	08db      	lsrs	r3, r3, #3
 800450e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004516:	4b07      	ldr	r3, [pc, #28]	; (8004534 <HAL_RCC_GetClockConfig+0x80>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 020f 	and.w	r2, r3, #15
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	601a      	str	r2, [r3, #0]
}
 8004522:	bf00      	nop
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	0800968c 	.word	0x0800968c
 8004530:	40021000 	.word	0x40021000
 8004534:	40022000 	.word	0x40022000

08004538 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800453e:	4b1e      	ldr	r3, [pc, #120]	; (80045b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004548:	4b1b      	ldr	r3, [pc, #108]	; (80045b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	091b      	lsrs	r3, r3, #4
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	3301      	adds	r3, #1
 8004554:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	2b03      	cmp	r3, #3
 800455a:	d10c      	bne.n	8004576 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800455c:	4a17      	ldr	r2, [pc, #92]	; (80045bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	fbb2 f3f3 	udiv	r3, r2, r3
 8004564:	4a14      	ldr	r2, [pc, #80]	; (80045b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004566:	68d2      	ldr	r2, [r2, #12]
 8004568:	0a12      	lsrs	r2, r2, #8
 800456a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800456e:	fb02 f303 	mul.w	r3, r2, r3
 8004572:	617b      	str	r3, [r7, #20]
    break;
 8004574:	e00c      	b.n	8004590 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004576:	4a11      	ldr	r2, [pc, #68]	; (80045bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	fbb2 f3f3 	udiv	r3, r2, r3
 800457e:	4a0e      	ldr	r2, [pc, #56]	; (80045b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004580:	68d2      	ldr	r2, [r2, #12]
 8004582:	0a12      	lsrs	r2, r2, #8
 8004584:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004588:	fb02 f303 	mul.w	r3, r2, r3
 800458c:	617b      	str	r3, [r7, #20]
    break;
 800458e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004590:	4b09      	ldr	r3, [pc, #36]	; (80045b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	0e5b      	lsrs	r3, r3, #25
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	3301      	adds	r3, #1
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80045aa:	687b      	ldr	r3, [r7, #4]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	371c      	adds	r7, #28
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	40021000 	.word	0x40021000
 80045bc:	00f42400 	.word	0x00f42400

080045c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045c8:	2300      	movs	r3, #0
 80045ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045cc:	2300      	movs	r3, #0
 80045ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d15d      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d157      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d151      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d14b      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b00      	cmp	r3, #0
 800460a:	d145      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004614:	2b00      	cmp	r3, #0
 8004616:	d13f      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004620:	2b00      	cmp	r3, #0
 8004622:	d139      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462c:	2b00      	cmp	r3, #0
 800462e:	d133      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004638:	2b00      	cmp	r3, #0
 800463a:	d12d      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004644:	2b00      	cmp	r3, #0
 8004646:	d127      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004650:	2b00      	cmp	r3, #0
 8004652:	d121      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d11b      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d115      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10f      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d109      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d103      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004690:	2185      	movs	r1, #133	; 0x85
 8004692:	4855      	ldr	r0, [pc, #340]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004694:	f7fc fff5 	bl	8001682 <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 80b2 	beq.w	800480a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046a6:	2300      	movs	r3, #0
 80046a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d012      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ba:	d00d      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046c4:	d008      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ce:	d003      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80046d0:	218d      	movs	r1, #141	; 0x8d
 80046d2:	4845      	ldr	r0, [pc, #276]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80046d4:	f7fc ffd5 	bl	8001682 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046d8:	4b44      	ldr	r3, [pc, #272]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80046da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10d      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x140>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e4:	4b41      	ldr	r3, [pc, #260]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80046e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e8:	4a40      	ldr	r2, [pc, #256]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80046ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ee:	6593      	str	r3, [r2, #88]	; 0x58
 80046f0:	4b3e      	ldr	r3, [pc, #248]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80046f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046fc:	2301      	movs	r3, #1
 80046fe:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004700:	4b3b      	ldr	r3, [pc, #236]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a3a      	ldr	r2, [pc, #232]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800470a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800470c:	f7fd fda6 	bl	800225c <HAL_GetTick>
 8004710:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004712:	e009      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004714:	f7fd fda2 	bl	800225c <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d902      	bls.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        ret = HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	74fb      	strb	r3, [r7, #19]
        break;
 8004726:	e005      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x174>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004728:	4b31      	ldr	r3, [pc, #196]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0ef      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x154>
      }
    }

    if(ret == HAL_OK)
 8004734:	7cfb      	ldrb	r3, [r7, #19]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d15c      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800473a:	4b2c      	ldr	r3, [pc, #176]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800473c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004744:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01e      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	429a      	cmp	r2, r3
 8004754:	d019      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004756:	4b25      	ldr	r3, [pc, #148]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004760:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004762:	4b22      	ldr	r3, [pc, #136]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004768:	4a20      	ldr	r2, [pc, #128]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800476a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800476e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004772:	4b1e      	ldr	r3, [pc, #120]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004778:	4a1c      	ldr	r2, [pc, #112]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800477a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800477e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004782:	4a1a      	ldr	r2, [pc, #104]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d016      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x202>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fd fd62 	bl	800225c <HAL_GetTick>
 8004798:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800479a:	e00b      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800479c:	f7fd fd5e 	bl	800225c <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d902      	bls.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
          {
            ret = HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	74fb      	strb	r3, [r7, #19]
            break;
 80047b2:	e006      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x202>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047b4:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0ec      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
          }
        }
      }
      
      if(ret == HAL_OK)
 80047c2:	7cfb      	ldrb	r3, [r7, #19]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10b      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047c8:	4b08      	ldr	r3, [pc, #32]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80047ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	4905      	ldr	r1, [pc, #20]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047de:	e00b      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047e0:	7cfb      	ldrb	r3, [r7, #19]
 80047e2:	74bb      	strb	r3, [r7, #18]
 80047e4:	e008      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80047e6:	bf00      	nop
 80047e8:	080096c4 	.word	0x080096c4
 80047ec:	40021000 	.word	0x40021000
 80047f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f4:	7cfb      	ldrb	r3, [r7, #19]
 80047f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047f8:	7c7b      	ldrb	r3, [r7, #17]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d105      	bne.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x24a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047fe:	4ba7      	ldr	r3, [pc, #668]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004802:	4aa6      	ldr	r2, [pc, #664]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004808:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d01e      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00f      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d00b      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b03      	cmp	r3, #3
 800482c:	d007      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b02      	cmp	r3, #2
 8004834:	d003      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004836:	21e2      	movs	r1, #226	; 0xe2
 8004838:	4899      	ldr	r0, [pc, #612]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800483a:	f7fc ff22 	bl	8001682 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800483e:	4b97      	ldr	r3, [pc, #604]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004844:	f023 0203 	bic.w	r2, r3, #3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	4993      	ldr	r1, [pc, #588]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d01e      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00f      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2b04      	cmp	r3, #4
 800486e:	d00b      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2b0c      	cmp	r3, #12
 8004876:	d007      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b08      	cmp	r3, #8
 800487e:	d003      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004880:	21ec      	movs	r1, #236	; 0xec
 8004882:	4887      	ldr	r0, [pc, #540]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004884:	f7fc fefd 	bl	8001682 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004888:	4b84      	ldr	r3, [pc, #528]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800488a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488e:	f023 020c 	bic.w	r2, r3, #12
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	4981      	ldr	r1, [pc, #516]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0304 	and.w	r3, r3, #4
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d01e      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00f      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	2b10      	cmp	r3, #16
 80048b8:	d00b      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	2b30      	cmp	r3, #48	; 0x30
 80048c0:	d007      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	2b20      	cmp	r3, #32
 80048c8:	d003      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80048ca:	21f6      	movs	r1, #246	; 0xf6
 80048cc:	4874      	ldr	r0, [pc, #464]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80048ce:	f7fc fed8 	bl	8001682 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048d2:	4b72      	ldr	r3, [pc, #456]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80048d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	496e      	ldr	r1, [pc, #440]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0308 	and.w	r3, r3, #8
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d01f      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d010      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	2b40      	cmp	r3, #64	; 0x40
 8004902:	d00c      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	2bc0      	cmp	r3, #192	; 0xc0
 800490a:	d008      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	2b80      	cmp	r3, #128	; 0x80
 8004912:	d004      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004914:	f240 1101 	movw	r1, #257	; 0x101
 8004918:	4861      	ldr	r0, [pc, #388]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800491a:	f7fc feb2 	bl	8001682 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800491e:	4b5f      	ldr	r3, [pc, #380]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004924:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	495b      	ldr	r1, [pc, #364]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800492e:	4313      	orrs	r3, r2
 8004930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0320 	and.w	r3, r3, #32
 800493c:	2b00      	cmp	r3, #0
 800493e:	d022      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d013      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004950:	d00e      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800495a:	d009      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004964:	d004      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8004966:	f44f 718d 	mov.w	r1, #282	; 0x11a
 800496a:	484d      	ldr	r0, [pc, #308]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800496c:	f7fc fe89 	bl	8001682 <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004970:	4b4a      	ldr	r3, [pc, #296]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004976:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	4947      	ldr	r1, [pc, #284]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498e:	2b00      	cmp	r3, #0
 8004990:	d01d      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00e      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a2:	d009      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ac:	d004      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80049ae:	f44f 7192 	mov.w	r1, #292	; 0x124
 80049b2:	483b      	ldr	r0, [pc, #236]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80049b4:	f7fc fe65 	bl	8001682 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049b8:	4b38      	ldr	r3, [pc, #224]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80049ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	4935      	ldr	r1, [pc, #212]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d01d      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00e      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049ea:	d009      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f4:	d004      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80049f6:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80049fa:	4829      	ldr	r0, [pc, #164]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80049fc:	f7fc fe41 	bl	8001682 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a00:	4b26      	ldr	r3, [pc, #152]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a06:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	4923      	ldr	r1, [pc, #140]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d01d      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x49e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00e      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a32:	d009      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a3c:	d004      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004a3e:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004a42:	4817      	ldr	r0, [pc, #92]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004a44:	f7fc fe1d 	bl	8001682 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a48:	4b14      	ldr	r3, [pc, #80]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	4911      	ldr	r1, [pc, #68]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d027      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d018      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a7a:	d013      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a84:	d00e      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004a8e:	d009      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004a90:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004a94:	4802      	ldr	r0, [pc, #8]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004a96:	f7fc fdf4 	bl	8001682 <assert_failed>
 8004a9a:	e003      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	080096c4 	.word	0x080096c4

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004aa4:	4b94      	ldr	r3, [pc, #592]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aaa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	4991      	ldr	r1, [pc, #580]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d02d      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d013      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x536>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ad6:	d00e      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x536>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004adc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ae0:	d009      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x536>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004aea:	d004      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x536>
 8004aec:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8004af0:	4882      	ldr	r0, [pc, #520]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004af2:	f7fc fdc6 	bl	8001682 <assert_failed>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004af6:	4b80      	ldr	r3, [pc, #512]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b04:	497c      	ldr	r1, [pc, #496]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b14:	d105      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b16:	4b78      	ldr	r3, [pc, #480]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	4a77      	ldr	r2, [pc, #476]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004b1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b20:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d02d      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d013      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b3e:	d00e      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b48:	d009      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b52:	d004      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004b54:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8004b58:	4868      	ldr	r0, [pc, #416]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004b5a:	f7fc fd92 	bl	8001682 <assert_failed>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b5e:	4b66      	ldr	r3, [pc, #408]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	4962      	ldr	r1, [pc, #392]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b7c:	d105      	bne.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b7e:	4b5e      	ldr	r3, [pc, #376]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	4a5d      	ldr	r2, [pc, #372]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004b84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b88:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d028      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00e      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ba6:	d009      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bb0:	d004      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8004bb2:	f240 117b 	movw	r1, #379	; 0x17b
 8004bb6:	4851      	ldr	r0, [pc, #324]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004bb8:	f7fc fd63 	bl	8001682 <assert_failed>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004bbc:	4b4e      	ldr	r3, [pc, #312]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bca:	494b      	ldr	r1, [pc, #300]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bda:	d105      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bdc:	4b46      	ldr	r3, [pc, #280]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	4a45      	ldr	r2, [pc, #276]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004be2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004be6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d023      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d009      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c04:	d004      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004c06:	f240 118d 	movw	r1, #397	; 0x18d
 8004c0a:	483c      	ldr	r0, [pc, #240]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004c0c:	f7fc fd39 	bl	8001682 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c10:	4b39      	ldr	r3, [pc, #228]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1e:	4936      	ldr	r1, [pc, #216]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c2e:	d105      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c30:	4b31      	ldr	r3, [pc, #196]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	4a30      	ldr	r2, [pc, #192]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004c36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c3a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d023      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d009      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c58:	d004      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8004c5a:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8004c5e:	4827      	ldr	r0, [pc, #156]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004c60:	f7fc fd0f 	bl	8001682 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c64:	4b24      	ldr	r3, [pc, #144]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c72:	4921      	ldr	r1, [pc, #132]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c82:	d105      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c84:	4b1c      	ldr	r3, [pc, #112]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	4a1b      	ldr	r2, [pc, #108]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c8e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d028      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x72e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00e      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x702>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cac:	d009      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x702>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cb6:	d004      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x702>
 8004cb8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004cbc:	480f      	ldr	r0, [pc, #60]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004cbe:	f7fc fce0 	bl	8001682 <assert_failed>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004cc2:	4b0d      	ldr	r3, [pc, #52]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd0:	4909      	ldr	r1, [pc, #36]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ce0:	d105      	bne.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x72e>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ce2:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	4a04      	ldr	r2, [pc, #16]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cec:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004cee:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	080096c4 	.word	0x080096c4

08004d00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e184      	b.n	800501c <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a9b      	ldr	r2, [pc, #620]	; (8004f84 <HAL_SPI_Init+0x284>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00e      	beq.n	8004d3a <HAL_SPI_Init+0x3a>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a99      	ldr	r2, [pc, #612]	; (8004f88 <HAL_SPI_Init+0x288>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d009      	beq.n	8004d3a <HAL_SPI_Init+0x3a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a98      	ldr	r2, [pc, #608]	; (8004f8c <HAL_SPI_Init+0x28c>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d004      	beq.n	8004d3a <HAL_SPI_Init+0x3a>
 8004d30:	f240 1147 	movw	r1, #327	; 0x147
 8004d34:	4896      	ldr	r0, [pc, #600]	; (8004f90 <HAL_SPI_Init+0x290>)
 8004d36:	f7fc fca4 	bl	8001682 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d009      	beq.n	8004d56 <HAL_SPI_Init+0x56>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d4a:	d004      	beq.n	8004d56 <HAL_SPI_Init+0x56>
 8004d4c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004d50:	488f      	ldr	r0, [pc, #572]	; (8004f90 <HAL_SPI_Init+0x290>)
 8004d52:	f7fc fc96 	bl	8001682 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00e      	beq.n	8004d7c <HAL_SPI_Init+0x7c>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d66:	d009      	beq.n	8004d7c <HAL_SPI_Init+0x7c>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d70:	d004      	beq.n	8004d7c <HAL_SPI_Init+0x7c>
 8004d72:	f240 1149 	movw	r1, #329	; 0x149
 8004d76:	4886      	ldr	r0, [pc, #536]	; (8004f90 <HAL_SPI_Init+0x290>)
 8004d78:	f7fc fc83 	bl	8001682 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d84:	d040      	beq.n	8004e08 <HAL_SPI_Init+0x108>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8004d8e:	d03b      	beq.n	8004e08 <HAL_SPI_Init+0x108>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004d98:	d036      	beq.n	8004e08 <HAL_SPI_Init+0x108>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004da2:	d031      	beq.n	8004e08 <HAL_SPI_Init+0x108>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004dac:	d02c      	beq.n	8004e08 <HAL_SPI_Init+0x108>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004db6:	d027      	beq.n	8004e08 <HAL_SPI_Init+0x108>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004dc0:	d022      	beq.n	8004e08 <HAL_SPI_Init+0x108>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dca:	d01d      	beq.n	8004e08 <HAL_SPI_Init+0x108>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dd4:	d018      	beq.n	8004e08 <HAL_SPI_Init+0x108>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004dde:	d013      	beq.n	8004e08 <HAL_SPI_Init+0x108>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004de8:	d00e      	beq.n	8004e08 <HAL_SPI_Init+0x108>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004df2:	d009      	beq.n	8004e08 <HAL_SPI_Init+0x108>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dfc:	d004      	beq.n	8004e08 <HAL_SPI_Init+0x108>
 8004dfe:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004e02:	4863      	ldr	r0, [pc, #396]	; (8004f90 <HAL_SPI_Init+0x290>)
 8004e04:	f7fc fc3d 	bl	8001682 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e10:	d00d      	beq.n	8004e2e <HAL_SPI_Init+0x12e>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d009      	beq.n	8004e2e <HAL_SPI_Init+0x12e>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e22:	d004      	beq.n	8004e2e <HAL_SPI_Init+0x12e>
 8004e24:	f240 114b 	movw	r1, #331	; 0x14b
 8004e28:	4859      	ldr	r0, [pc, #356]	; (8004f90 <HAL_SPI_Init+0x290>)
 8004e2a:	f7fc fc2a 	bl	8001682 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e32:	2b08      	cmp	r3, #8
 8004e34:	d008      	beq.n	8004e48 <HAL_SPI_Init+0x148>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d004      	beq.n	8004e48 <HAL_SPI_Init+0x148>
 8004e3e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004e42:	4853      	ldr	r0, [pc, #332]	; (8004f90 <HAL_SPI_Init+0x290>)
 8004e44:	f7fc fc1d 	bl	8001682 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d020      	beq.n	8004e92 <HAL_SPI_Init+0x192>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d01c      	beq.n	8004e92 <HAL_SPI_Init+0x192>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	2b10      	cmp	r3, #16
 8004e5e:	d018      	beq.n	8004e92 <HAL_SPI_Init+0x192>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	2b18      	cmp	r3, #24
 8004e66:	d014      	beq.n	8004e92 <HAL_SPI_Init+0x192>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d010      	beq.n	8004e92 <HAL_SPI_Init+0x192>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	2b28      	cmp	r3, #40	; 0x28
 8004e76:	d00c      	beq.n	8004e92 <HAL_SPI_Init+0x192>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	2b30      	cmp	r3, #48	; 0x30
 8004e7e:	d008      	beq.n	8004e92 <HAL_SPI_Init+0x192>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	2b38      	cmp	r3, #56	; 0x38
 8004e86:	d004      	beq.n	8004e92 <HAL_SPI_Init+0x192>
 8004e88:	f240 114d 	movw	r1, #333	; 0x14d
 8004e8c:	4840      	ldr	r0, [pc, #256]	; (8004f90 <HAL_SPI_Init+0x290>)
 8004e8e:	f7fc fbf8 	bl	8001682 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d008      	beq.n	8004eac <HAL_SPI_Init+0x1ac>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	2b80      	cmp	r3, #128	; 0x80
 8004ea0:	d004      	beq.n	8004eac <HAL_SPI_Init+0x1ac>
 8004ea2:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8004ea6:	483a      	ldr	r0, [pc, #232]	; (8004f90 <HAL_SPI_Init+0x290>)
 8004ea8:	f7fc fbeb 	bl	8001682 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d008      	beq.n	8004ec6 <HAL_SPI_Init+0x1c6>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	2b10      	cmp	r3, #16
 8004eba:	d004      	beq.n	8004ec6 <HAL_SPI_Init+0x1c6>
 8004ebc:	f240 114f 	movw	r1, #335	; 0x14f
 8004ec0:	4833      	ldr	r0, [pc, #204]	; (8004f90 <HAL_SPI_Init+0x290>)
 8004ec2:	f7fc fbde 	bl	8001682 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d119      	bne.n	8004f02 <HAL_SPI_Init+0x202>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d008      	beq.n	8004ee8 <HAL_SPI_Init+0x1e8>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d004      	beq.n	8004ee8 <HAL_SPI_Init+0x1e8>
 8004ede:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8004ee2:	482b      	ldr	r0, [pc, #172]	; (8004f90 <HAL_SPI_Init+0x290>)
 8004ee4:	f7fc fbcd 	bl	8001682 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d008      	beq.n	8004f02 <HAL_SPI_Init+0x202>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d004      	beq.n	8004f02 <HAL_SPI_Init+0x202>
 8004ef8:	f240 1153 	movw	r1, #339	; 0x153
 8004efc:	4824      	ldr	r0, [pc, #144]	; (8004f90 <HAL_SPI_Init+0x290>)
 8004efe:	f7fc fbc0 	bl	8001682 <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d106      	bne.n	8004f22 <HAL_SPI_Init+0x222>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7fc fbf9 	bl	8001714 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2202      	movs	r2, #2
 8004f26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f38:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f42:	d902      	bls.n	8004f4a <HAL_SPI_Init+0x24a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f44:	2300      	movs	r3, #0
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	e002      	b.n	8004f50 <HAL_SPI_Init+0x250>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f4e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004f58:	d007      	beq.n	8004f6a <HAL_SPI_Init+0x26a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f62:	d002      	beq.n	8004f6a <HAL_SPI_Init+0x26a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d113      	bne.n	8004f9a <HAL_SPI_Init+0x29a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f7a:	d90b      	bls.n	8004f94 <HAL_SPI_Init+0x294>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	631a      	str	r2, [r3, #48]	; 0x30
 8004f82:	e00a      	b.n	8004f9a <HAL_SPI_Init+0x29a>
 8004f84:	40013000 	.word	0x40013000
 8004f88:	40003800 	.word	0x40003800
 8004f8c:	40003c00 	.word	0x40003c00
 8004f90:	08009700 	.word	0x08009700
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	ea42 0103 	orr.w	r1, r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	0c1b      	lsrs	r3, r3, #16
 8004fda:	f003 0204 	and.w	r2, r3, #4
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	ea42 0103 	orr.w	r1, r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	69da      	ldr	r2, [r3, #28]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800500a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	4613      	mov	r3, r2
 8005032:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005034:	2300      	movs	r3, #0
 8005036:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d009      	beq.n	8005054 <HAL_SPI_Transmit+0x30>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005048:	d004      	beq.n	8005054 <HAL_SPI_Transmit+0x30>
 800504a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800504e:	4895      	ldr	r0, [pc, #596]	; (80052a4 <HAL_SPI_Transmit+0x280>)
 8005050:	f7fc fb17 	bl	8001682 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800505a:	2b01      	cmp	r3, #1
 800505c:	d101      	bne.n	8005062 <HAL_SPI_Transmit+0x3e>
 800505e:	2302      	movs	r3, #2
 8005060:	e152      	b.n	8005308 <HAL_SPI_Transmit+0x2e4>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800506a:	f7fd f8f7 	bl	800225c <HAL_GetTick>
 800506e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005070:	88fb      	ldrh	r3, [r7, #6]
 8005072:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b01      	cmp	r3, #1
 800507e:	d002      	beq.n	8005086 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8005080:	2302      	movs	r3, #2
 8005082:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005084:	e137      	b.n	80052f6 <HAL_SPI_Transmit+0x2d2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <HAL_SPI_Transmit+0x6e>
 800508c:	88fb      	ldrh	r3, [r7, #6]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d102      	bne.n	8005098 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005096:	e12e      	b.n	80052f6 <HAL_SPI_Transmit+0x2d2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2203      	movs	r2, #3
 800509c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	88fa      	ldrh	r2, [r7, #6]
 80050b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	88fa      	ldrh	r2, [r7, #6]
 80050b6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e2:	d107      	bne.n	80050f4 <HAL_SPI_Transmit+0xd0>
  {
    SPI_1LINE_TX(hspi);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050fe:	2b40      	cmp	r3, #64	; 0x40
 8005100:	d007      	beq.n	8005112 <HAL_SPI_Transmit+0xee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005110:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800511a:	d94b      	bls.n	80051b4 <HAL_SPI_Transmit+0x190>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <HAL_SPI_Transmit+0x106>
 8005124:	8afb      	ldrh	r3, [r7, #22]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d13e      	bne.n	80051a8 <HAL_SPI_Transmit+0x184>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	881a      	ldrh	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	1c9a      	adds	r2, r3, #2
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800514e:	e02b      	b.n	80051a8 <HAL_SPI_Transmit+0x184>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b02      	cmp	r3, #2
 800515c:	d112      	bne.n	8005184 <HAL_SPI_Transmit+0x160>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005162:	881a      	ldrh	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516e:	1c9a      	adds	r2, r3, #2
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005178:	b29b      	uxth	r3, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005182:	e011      	b.n	80051a8 <HAL_SPI_Transmit+0x184>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005184:	f7fd f86a 	bl	800225c <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d803      	bhi.n	800519c <HAL_SPI_Transmit+0x178>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519a:	d102      	bne.n	80051a2 <HAL_SPI_Transmit+0x17e>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d102      	bne.n	80051a8 <HAL_SPI_Transmit+0x184>
        {
          errorcode = HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051a6:	e0a6      	b.n	80052f6 <HAL_SPI_Transmit+0x2d2>
    while (hspi->TxXferCount > 0U)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1ce      	bne.n	8005150 <HAL_SPI_Transmit+0x12c>
 80051b2:	e07e      	b.n	80052b2 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <HAL_SPI_Transmit+0x19e>
 80051bc:	8afb      	ldrh	r3, [r7, #22]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d172      	bne.n	80052a8 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d912      	bls.n	80051f2 <HAL_SPI_Transmit+0x1ce>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d0:	881a      	ldrh	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051dc:	1c9a      	adds	r2, r3, #2
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3b02      	subs	r3, #2
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051f0:	e05a      	b.n	80052a8 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	330c      	adds	r3, #12
 80051fc:	7812      	ldrb	r2, [r2, #0]
 80051fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800520e:	b29b      	uxth	r3, r3
 8005210:	3b01      	subs	r3, #1
 8005212:	b29a      	uxth	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005218:	e046      	b.n	80052a8 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b02      	cmp	r3, #2
 8005226:	d12b      	bne.n	8005280 <HAL_SPI_Transmit+0x25c>
      {
        if (hspi->TxXferCount > 1U)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800522c:	b29b      	uxth	r3, r3
 800522e:	2b01      	cmp	r3, #1
 8005230:	d912      	bls.n	8005258 <HAL_SPI_Transmit+0x234>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005236:	881a      	ldrh	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005242:	1c9a      	adds	r2, r3, #2
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800524c:	b29b      	uxth	r3, r3
 800524e:	3b02      	subs	r3, #2
 8005250:	b29a      	uxth	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005256:	e027      	b.n	80052a8 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	330c      	adds	r3, #12
 8005262:	7812      	ldrb	r2, [r2, #0]
 8005264:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005274:	b29b      	uxth	r3, r3
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800527e:	e013      	b.n	80052a8 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005280:	f7fc ffec 	bl	800225c <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d803      	bhi.n	8005298 <HAL_SPI_Transmit+0x274>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005296:	d102      	bne.n	800529e <HAL_SPI_Transmit+0x27a>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d104      	bne.n	80052a8 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80052a2:	e028      	b.n	80052f6 <HAL_SPI_Transmit+0x2d2>
 80052a4:	08009700 	.word	0x08009700
    while (hspi->TxXferCount > 0U)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1b3      	bne.n	800521a <HAL_SPI_Transmit+0x1f6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	6839      	ldr	r1, [r7, #0]
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 fcad 	bl	8005c16 <SPI_EndRxTxTransaction>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d002      	beq.n	80052c8 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2220      	movs	r2, #32
 80052c6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10a      	bne.n	80052e6 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052d0:	2300      	movs	r3, #0
 80052d2:	613b      	str	r3, [r7, #16]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	613b      	str	r3, [r7, #16]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	613b      	str	r3, [r7, #16]
 80052e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	77fb      	strb	r3, [r7, #31]
 80052f2:	e000      	b.n	80052f6 <HAL_SPI_Transmit+0x2d2>
  }

error:
 80052f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005306:	7ffb      	ldrb	r3, [r7, #31]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3720      	adds	r7, #32
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af02      	add	r7, sp, #8
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	603b      	str	r3, [r7, #0]
 800531c:	4613      	mov	r3, r2
 800531e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800532c:	d112      	bne.n	8005354 <HAL_SPI_Receive+0x44>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10e      	bne.n	8005354 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2204      	movs	r2, #4
 800533a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800533e:	88fa      	ldrh	r2, [r7, #6]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	4613      	mov	r3, r2
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	68b9      	ldr	r1, [r7, #8]
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 f908 	bl	8005560 <HAL_SPI_TransmitReceive>
 8005350:	4603      	mov	r3, r0
 8005352:	e101      	b.n	8005558 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800535a:	2b01      	cmp	r3, #1
 800535c:	d101      	bne.n	8005362 <HAL_SPI_Receive+0x52>
 800535e:	2302      	movs	r3, #2
 8005360:	e0fa      	b.n	8005558 <HAL_SPI_Receive+0x248>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800536a:	f7fc ff77 	bl	800225c <HAL_GetTick>
 800536e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b01      	cmp	r3, #1
 800537a:	d002      	beq.n	8005382 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800537c:	2302      	movs	r3, #2
 800537e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005380:	e0e1      	b.n	8005546 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d002      	beq.n	800538e <HAL_SPI_Receive+0x7e>
 8005388:	88fb      	ldrh	r3, [r7, #6]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d102      	bne.n	8005394 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005392:	e0d8      	b.n	8005546 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2204      	movs	r2, #4
 8005398:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	88fa      	ldrh	r2, [r7, #6]
 80053ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	88fa      	ldrh	r2, [r7, #6]
 80053b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053de:	d908      	bls.n	80053f2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053ee:	605a      	str	r2, [r3, #4]
 80053f0:	e007      	b.n	8005402 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005400:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800540a:	d107      	bne.n	800541c <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800541a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005426:	2b40      	cmp	r3, #64	; 0x40
 8005428:	d007      	beq.n	800543a <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005438:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005442:	d867      	bhi.n	8005514 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005444:	e030      	b.n	80054a8 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b01      	cmp	r3, #1
 8005452:	d117      	bne.n	8005484 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f103 020c 	add.w	r2, r3, #12
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005460:	7812      	ldrb	r2, [r2, #0]
 8005462:	b2d2      	uxtb	r2, r2
 8005464:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005476:	b29b      	uxth	r3, r3
 8005478:	3b01      	subs	r3, #1
 800547a:	b29a      	uxth	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005482:	e011      	b.n	80054a8 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005484:	f7fc feea 	bl	800225c <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d803      	bhi.n	800549c <HAL_SPI_Receive+0x18c>
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549a:	d102      	bne.n	80054a2 <HAL_SPI_Receive+0x192>
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d102      	bne.n	80054a8 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80054a6:	e04e      	b.n	8005546 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1c8      	bne.n	8005446 <HAL_SPI_Receive+0x136>
 80054b4:	e034      	b.n	8005520 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d115      	bne.n	80054f0 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	b292      	uxth	r2, r2
 80054d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	1c9a      	adds	r2, r3, #2
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80054ee:	e011      	b.n	8005514 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054f0:	f7fc feb4 	bl	800225c <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d803      	bhi.n	8005508 <HAL_SPI_Receive+0x1f8>
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005506:	d102      	bne.n	800550e <HAL_SPI_Receive+0x1fe>
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d102      	bne.n	8005514 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005512:	e018      	b.n	8005546 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800551a:	b29b      	uxth	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1ca      	bne.n	80054b6 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	6839      	ldr	r1, [r7, #0]
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 fb1e 	bl	8005b66 <SPI_EndRxTransaction>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d002      	beq.n	8005536 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2220      	movs	r2, #32
 8005534:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	75fb      	strb	r3, [r7, #23]
 8005542:	e000      	b.n	8005546 <HAL_SPI_Receive+0x236>
  }

error :
 8005544:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005556:	7dfb      	ldrb	r3, [r7, #23]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08a      	sub	sp, #40	; 0x28
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
 800556c:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800556e:	2301      	movs	r3, #1
 8005570:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d004      	beq.n	800558a <HAL_SPI_TransmitReceive+0x2a>
 8005580:	f240 41c3 	movw	r1, #1219	; 0x4c3
 8005584:	4895      	ldr	r0, [pc, #596]	; (80057dc <HAL_SPI_TransmitReceive+0x27c>)
 8005586:	f7fc f87c 	bl	8001682 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005590:	2b01      	cmp	r3, #1
 8005592:	d101      	bne.n	8005598 <HAL_SPI_TransmitReceive+0x38>
 8005594:	2302      	movs	r3, #2
 8005596:	e1fd      	b.n	8005994 <HAL_SPI_TransmitReceive+0x434>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055a0:	f7fc fe5c 	bl	800225c <HAL_GetTick>
 80055a4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055ac:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80055b4:	887b      	ldrh	r3, [r7, #2]
 80055b6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80055b8:	887b      	ldrh	r3, [r7, #2]
 80055ba:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80055bc:	7efb      	ldrb	r3, [r7, #27]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d00e      	beq.n	80055e0 <HAL_SPI_TransmitReceive+0x80>
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055c8:	d106      	bne.n	80055d8 <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d102      	bne.n	80055d8 <HAL_SPI_TransmitReceive+0x78>
 80055d2:	7efb      	ldrb	r3, [r7, #27]
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d003      	beq.n	80055e0 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 80055d8:	2302      	movs	r3, #2
 80055da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80055de:	e1cf      	b.n	8005980 <HAL_SPI_TransmitReceive+0x420>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d005      	beq.n	80055f2 <HAL_SPI_TransmitReceive+0x92>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <HAL_SPI_TransmitReceive+0x92>
 80055ec:	887b      	ldrh	r3, [r7, #2]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d103      	bne.n	80055fa <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80055f8:	e1c2      	b.n	8005980 <HAL_SPI_TransmitReceive+0x420>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b04      	cmp	r3, #4
 8005604:	d003      	beq.n	800560e <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2205      	movs	r2, #5
 800560a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	887a      	ldrh	r2, [r7, #2]
 800561e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	887a      	ldrh	r2, [r7, #2]
 8005626:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	887a      	ldrh	r2, [r7, #2]
 8005634:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	887a      	ldrh	r2, [r7, #2]
 800563a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005650:	d802      	bhi.n	8005658 <HAL_SPI_TransmitReceive+0xf8>
 8005652:	8a3b      	ldrh	r3, [r7, #16]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d908      	bls.n	800566a <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005666:	605a      	str	r2, [r3, #4]
 8005668:	e007      	b.n	800567a <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005678:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005684:	2b40      	cmp	r3, #64	; 0x40
 8005686:	d007      	beq.n	8005698 <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005696:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056a0:	d97c      	bls.n	800579c <HAL_SPI_TransmitReceive+0x23c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d002      	beq.n	80056b0 <HAL_SPI_TransmitReceive+0x150>
 80056aa:	8a7b      	ldrh	r3, [r7, #18]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d169      	bne.n	8005784 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b4:	881a      	ldrh	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c0:	1c9a      	adds	r2, r3, #2
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056d4:	e056      	b.n	8005784 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d11b      	bne.n	800571c <HAL_SPI_TransmitReceive+0x1bc>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d016      	beq.n	800571c <HAL_SPI_TransmitReceive+0x1bc>
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d113      	bne.n	800571c <HAL_SPI_TransmitReceive+0x1bc>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f8:	881a      	ldrh	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005704:	1c9a      	adds	r2, r3, #2
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800570e:	b29b      	uxth	r3, r3
 8005710:	3b01      	subs	r3, #1
 8005712:	b29a      	uxth	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b01      	cmp	r3, #1
 8005728:	d11c      	bne.n	8005764 <HAL_SPI_TransmitReceive+0x204>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d016      	beq.n	8005764 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68da      	ldr	r2, [r3, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005740:	b292      	uxth	r2, r2
 8005742:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	1c9a      	adds	r2, r3, #2
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005754:	b29b      	uxth	r3, r3
 8005756:	3b01      	subs	r3, #1
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005760:	2301      	movs	r3, #1
 8005762:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005764:	f7fc fd7a 	bl	800225c <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005770:	429a      	cmp	r2, r3
 8005772:	d807      	bhi.n	8005784 <HAL_SPI_TransmitReceive+0x224>
 8005774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577a:	d003      	beq.n	8005784 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005782:	e0fd      	b.n	8005980 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005788:	b29b      	uxth	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1a3      	bne.n	80056d6 <HAL_SPI_TransmitReceive+0x176>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005794:	b29b      	uxth	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d19d      	bne.n	80056d6 <HAL_SPI_TransmitReceive+0x176>
 800579a:	e0e1      	b.n	8005960 <HAL_SPI_TransmitReceive+0x400>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <HAL_SPI_TransmitReceive+0x24c>
 80057a4:	8a7b      	ldrh	r3, [r7, #18]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	f040 80cd 	bne.w	8005946 <HAL_SPI_TransmitReceive+0x3e6>
    {
      if (hspi->TxXferCount > 1U)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d914      	bls.n	80057e0 <HAL_SPI_TransmitReceive+0x280>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ba:	881a      	ldrh	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	1c9a      	adds	r2, r3, #2
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	3b02      	subs	r3, #2
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057da:	e0b4      	b.n	8005946 <HAL_SPI_TransmitReceive+0x3e6>
 80057dc:	08009700 	.word	0x08009700
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	330c      	adds	r3, #12
 80057ea:	7812      	ldrb	r2, [r2, #0]
 80057ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005806:	e09e      	b.n	8005946 <HAL_SPI_TransmitReceive+0x3e6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b02      	cmp	r3, #2
 8005814:	d134      	bne.n	8005880 <HAL_SPI_TransmitReceive+0x320>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800581a:	b29b      	uxth	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	d02f      	beq.n	8005880 <HAL_SPI_TransmitReceive+0x320>
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	2b01      	cmp	r3, #1
 8005824:	d12c      	bne.n	8005880 <HAL_SPI_TransmitReceive+0x320>
      {
        if (hspi->TxXferCount > 1U)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800582a:	b29b      	uxth	r3, r3
 800582c:	2b01      	cmp	r3, #1
 800582e:	d912      	bls.n	8005856 <HAL_SPI_TransmitReceive+0x2f6>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	881a      	ldrh	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005840:	1c9a      	adds	r2, r3, #2
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800584a:	b29b      	uxth	r3, r3
 800584c:	3b02      	subs	r3, #2
 800584e:	b29a      	uxth	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005854:	e012      	b.n	800587c <HAL_SPI_TransmitReceive+0x31c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	330c      	adds	r3, #12
 8005860:	7812      	ldrb	r2, [r2, #0]
 8005862:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005872:	b29b      	uxth	r3, r3
 8005874:	3b01      	subs	r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b01      	cmp	r3, #1
 800588c:	d148      	bne.n	8005920 <HAL_SPI_TransmitReceive+0x3c0>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d042      	beq.n	8005920 <HAL_SPI_TransmitReceive+0x3c0>
      {
        if (hspi->RxXferCount > 1U)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d923      	bls.n	80058ee <HAL_SPI_TransmitReceive+0x38e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	b292      	uxth	r2, r2
 80058b2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	1c9a      	adds	r2, r3, #2
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	3b02      	subs	r3, #2
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d81f      	bhi.n	800591c <HAL_SPI_TransmitReceive+0x3bc>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058ea:	605a      	str	r2, [r3, #4]
 80058ec:	e016      	b.n	800591c <HAL_SPI_TransmitReceive+0x3bc>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f103 020c 	add.w	r2, r3, #12
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	7812      	ldrb	r2, [r2, #0]
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005910:	b29b      	uxth	r3, r3
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800591c:	2301      	movs	r3, #1
 800591e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005920:	f7fc fc9c 	bl	800225c <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800592c:	429a      	cmp	r2, r3
 800592e:	d803      	bhi.n	8005938 <HAL_SPI_TransmitReceive+0x3d8>
 8005930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005936:	d102      	bne.n	800593e <HAL_SPI_TransmitReceive+0x3de>
 8005938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593a:	2b00      	cmp	r3, #0
 800593c:	d103      	bne.n	8005946 <HAL_SPI_TransmitReceive+0x3e6>
      {
        errorcode = HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005944:	e01c      	b.n	8005980 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800594a:	b29b      	uxth	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	f47f af5b 	bne.w	8005808 <HAL_SPI_TransmitReceive+0x2a8>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005958:	b29b      	uxth	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	f47f af54 	bne.w	8005808 <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 f956 	bl	8005c16 <SPI_EndRxTxTransaction>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d006      	beq.n	800597e <HAL_SPI_TransmitReceive+0x41e>
  {
    errorcode = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2220      	movs	r2, #32
 800597a:	661a      	str	r2, [r3, #96]	; 0x60
 800597c:	e000      	b.n	8005980 <HAL_SPI_TransmitReceive+0x420>
  }

error :
 800597e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005990:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005994:	4618      	mov	r0, r3
 8005996:	3728      	adds	r7, #40	; 0x28
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059aa:	b2db      	uxtb	r3, r3
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	4613      	mov	r3, r2
 80059c6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059c8:	e04c      	b.n	8005a64 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d0:	d048      	beq.n	8005a64 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80059d2:	f7fc fc43 	bl	800225c <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d902      	bls.n	80059e8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d13d      	bne.n	8005a64 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a00:	d111      	bne.n	8005a26 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a0a:	d004      	beq.n	8005a16 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a14:	d107      	bne.n	8005a26 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a2e:	d10f      	bne.n	8005a50 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e00f      	b.n	8005a84 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689a      	ldr	r2, [r3, #8]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	bf0c      	ite	eq
 8005a74:	2301      	moveq	r3, #1
 8005a76:	2300      	movne	r3, #0
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	79fb      	ldrb	r3, [r7, #7]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d1a3      	bne.n	80059ca <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005a9a:	e057      	b.n	8005b4c <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005aa2:	d106      	bne.n	8005ab2 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d103      	bne.n	8005ab2 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	330c      	adds	r3, #12
 8005ab0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab8:	d048      	beq.n	8005b4c <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005aba:	f7fc fbcf 	bl	800225c <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d902      	bls.n	8005ad0 <SPI_WaitFifoStateUntilTimeout+0x44>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d13d      	bne.n	8005b4c <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ade:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ae8:	d111      	bne.n	8005b0e <SPI_WaitFifoStateUntilTimeout+0x82>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005af2:	d004      	beq.n	8005afe <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005afc:	d107      	bne.n	8005b0e <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b16:	d10f      	bne.n	8005b38 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e008      	b.n	8005b5e <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689a      	ldr	r2, [r3, #8]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	4013      	ands	r3, r2
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d19f      	bne.n	8005a9c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b086      	sub	sp, #24
 8005b6a:	af02      	add	r7, sp, #8
 8005b6c:	60f8      	str	r0, [r7, #12]
 8005b6e:	60b9      	str	r1, [r7, #8]
 8005b70:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b7a:	d111      	bne.n	8005ba0 <SPI_EndRxTransaction+0x3a>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b84:	d004      	beq.n	8005b90 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b8e:	d107      	bne.n	8005ba0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b9e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	2180      	movs	r1, #128	; 0x80
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f7ff ff04 	bl	80059b8 <SPI_WaitFlagStateUntilTimeout>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d007      	beq.n	8005bc6 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bba:	f043 0220 	orr.w	r2, r3, #32
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e023      	b.n	8005c0e <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bce:	d11d      	bne.n	8005c0c <SPI_EndRxTransaction+0xa6>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bd8:	d004      	beq.n	8005be4 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be2:	d113      	bne.n	8005c0c <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f7ff ff4b 	bl	8005a8c <SPI_WaitFifoStateUntilTimeout>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d007      	beq.n	8005c0c <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c00:	f043 0220 	orr.w	r2, r3, #32
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e000      	b.n	8005c0e <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b086      	sub	sp, #24
 8005c1a:	af02      	add	r7, sp, #8
 8005c1c:	60f8      	str	r0, [r7, #12]
 8005c1e:	60b9      	str	r1, [r7, #8]
 8005c20:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f7ff ff2c 	bl	8005a8c <SPI_WaitFifoStateUntilTimeout>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d007      	beq.n	8005c4a <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c3e:	f043 0220 	orr.w	r2, r3, #32
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e027      	b.n	8005c9a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2200      	movs	r2, #0
 8005c52:	2180      	movs	r1, #128	; 0x80
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f7ff feaf 	bl	80059b8 <SPI_WaitFlagStateUntilTimeout>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d007      	beq.n	8005c70 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c64:	f043 0220 	orr.w	r2, r3, #32
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e014      	b.n	8005c9a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f7ff ff05 	bl	8005a8c <SPI_WaitFifoStateUntilTimeout>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d007      	beq.n	8005c98 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c8c:	f043 0220 	orr.w	r2, r3, #32
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e000      	b.n	8005c9a <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
	...

08005ca4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e0b9      	b.n	8005e2a <HAL_TIM_Base_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a5e      	ldr	r2, [pc, #376]	; (8005e34 <HAL_TIM_Base_Init+0x190>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d031      	beq.n	8005d24 <HAL_TIM_Base_Init+0x80>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc8:	d02c      	beq.n	8005d24 <HAL_TIM_Base_Init+0x80>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a5a      	ldr	r2, [pc, #360]	; (8005e38 <HAL_TIM_Base_Init+0x194>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d027      	beq.n	8005d24 <HAL_TIM_Base_Init+0x80>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a58      	ldr	r2, [pc, #352]	; (8005e3c <HAL_TIM_Base_Init+0x198>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d022      	beq.n	8005d24 <HAL_TIM_Base_Init+0x80>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a57      	ldr	r2, [pc, #348]	; (8005e40 <HAL_TIM_Base_Init+0x19c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d01d      	beq.n	8005d24 <HAL_TIM_Base_Init+0x80>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a55      	ldr	r2, [pc, #340]	; (8005e44 <HAL_TIM_Base_Init+0x1a0>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d018      	beq.n	8005d24 <HAL_TIM_Base_Init+0x80>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a54      	ldr	r2, [pc, #336]	; (8005e48 <HAL_TIM_Base_Init+0x1a4>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d013      	beq.n	8005d24 <HAL_TIM_Base_Init+0x80>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a52      	ldr	r2, [pc, #328]	; (8005e4c <HAL_TIM_Base_Init+0x1a8>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d00e      	beq.n	8005d24 <HAL_TIM_Base_Init+0x80>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a51      	ldr	r2, [pc, #324]	; (8005e50 <HAL_TIM_Base_Init+0x1ac>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d009      	beq.n	8005d24 <HAL_TIM_Base_Init+0x80>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a4f      	ldr	r2, [pc, #316]	; (8005e54 <HAL_TIM_Base_Init+0x1b0>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d004      	beq.n	8005d24 <HAL_TIM_Base_Init+0x80>
 8005d1a:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8005d1e:	484e      	ldr	r0, [pc, #312]	; (8005e58 <HAL_TIM_Base_Init+0x1b4>)
 8005d20:	f7fb fcaf 	bl	8001682 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d014      	beq.n	8005d56 <HAL_TIM_Base_Init+0xb2>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	2b10      	cmp	r3, #16
 8005d32:	d010      	beq.n	8005d56 <HAL_TIM_Base_Init+0xb2>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	2b20      	cmp	r3, #32
 8005d3a:	d00c      	beq.n	8005d56 <HAL_TIM_Base_Init+0xb2>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	2b40      	cmp	r3, #64	; 0x40
 8005d42:	d008      	beq.n	8005d56 <HAL_TIM_Base_Init+0xb2>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	2b60      	cmp	r3, #96	; 0x60
 8005d4a:	d004      	beq.n	8005d56 <HAL_TIM_Base_Init+0xb2>
 8005d4c:	f240 111d 	movw	r1, #285	; 0x11d
 8005d50:	4841      	ldr	r0, [pc, #260]	; (8005e58 <HAL_TIM_Base_Init+0x1b4>)
 8005d52:	f7fb fc96 	bl	8001682 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00e      	beq.n	8005d7c <HAL_TIM_Base_Init+0xd8>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d66:	d009      	beq.n	8005d7c <HAL_TIM_Base_Init+0xd8>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d70:	d004      	beq.n	8005d7c <HAL_TIM_Base_Init+0xd8>
 8005d72:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8005d76:	4838      	ldr	r0, [pc, #224]	; (8005e58 <HAL_TIM_Base_Init+0x1b4>)
 8005d78:	f7fb fc83 	bl	8001682 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d008      	beq.n	8005d96 <HAL_TIM_Base_Init+0xf2>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	2b80      	cmp	r3, #128	; 0x80
 8005d8a:	d004      	beq.n	8005d96 <HAL_TIM_Base_Init+0xf2>
 8005d8c:	f240 111f 	movw	r1, #287	; 0x11f
 8005d90:	4831      	ldr	r0, [pc, #196]	; (8005e58 <HAL_TIM_Base_Init+0x1b4>)
 8005d92:	f7fb fc76 	bl	8001682 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d106      	bne.n	8005db0 <HAL_TIM_Base_Init+0x10c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7fb ff0a 	bl	8001bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2202      	movs	r2, #2
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	4610      	mov	r0, r2
 8005dc4:	f001 f8da 	bl	8006f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	40012c00 	.word	0x40012c00
 8005e38:	40000400 	.word	0x40000400
 8005e3c:	40000800 	.word	0x40000800
 8005e40:	40001000 	.word	0x40001000
 8005e44:	40001400 	.word	0x40001400
 8005e48:	40013400 	.word	0x40013400
 8005e4c:	40014000 	.word	0x40014000
 8005e50:	40014400 	.word	0x40014400
 8005e54:	40014800 	.word	0x40014800
 8005e58:	08009738 	.word	0x08009738

08005e5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a31      	ldr	r2, [pc, #196]	; (8005f30 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d031      	beq.n	8005ed2 <HAL_TIM_Base_Start_IT+0x76>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e76:	d02c      	beq.n	8005ed2 <HAL_TIM_Base_Start_IT+0x76>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a2d      	ldr	r2, [pc, #180]	; (8005f34 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d027      	beq.n	8005ed2 <HAL_TIM_Base_Start_IT+0x76>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a2c      	ldr	r2, [pc, #176]	; (8005f38 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d022      	beq.n	8005ed2 <HAL_TIM_Base_Start_IT+0x76>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a2a      	ldr	r2, [pc, #168]	; (8005f3c <HAL_TIM_Base_Start_IT+0xe0>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d01d      	beq.n	8005ed2 <HAL_TIM_Base_Start_IT+0x76>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a29      	ldr	r2, [pc, #164]	; (8005f40 <HAL_TIM_Base_Start_IT+0xe4>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d018      	beq.n	8005ed2 <HAL_TIM_Base_Start_IT+0x76>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a27      	ldr	r2, [pc, #156]	; (8005f44 <HAL_TIM_Base_Start_IT+0xe8>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d013      	beq.n	8005ed2 <HAL_TIM_Base_Start_IT+0x76>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a26      	ldr	r2, [pc, #152]	; (8005f48 <HAL_TIM_Base_Start_IT+0xec>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d00e      	beq.n	8005ed2 <HAL_TIM_Base_Start_IT+0x76>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a24      	ldr	r2, [pc, #144]	; (8005f4c <HAL_TIM_Base_Start_IT+0xf0>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d009      	beq.n	8005ed2 <HAL_TIM_Base_Start_IT+0x76>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a23      	ldr	r2, [pc, #140]	; (8005f50 <HAL_TIM_Base_Start_IT+0xf4>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d004      	beq.n	8005ed2 <HAL_TIM_Base_Start_IT+0x76>
 8005ec8:	f240 11d1 	movw	r1, #465	; 0x1d1
 8005ecc:	4821      	ldr	r0, [pc, #132]	; (8005f54 <HAL_TIM_Base_Start_IT+0xf8>)
 8005ece:	f7fb fbd8 	bl	8001682 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d001      	beq.n	8005ee2 <HAL_TIM_Base_Start_IT+0x86>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e021      	b.n	8005f26 <HAL_TIM_Base_Start_IT+0xca>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68da      	ldr	r2, [r3, #12]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f042 0201 	orr.w	r2, r2, #1
 8005ef8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	4b15      	ldr	r3, [pc, #84]	; (8005f58 <HAL_TIM_Base_Start_IT+0xfc>)
 8005f02:	4013      	ands	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b06      	cmp	r3, #6
 8005f0a:	d00b      	beq.n	8005f24 <HAL_TIM_Base_Start_IT+0xc8>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f12:	d007      	beq.n	8005f24 <HAL_TIM_Base_Start_IT+0xc8>
  {
    __HAL_TIM_ENABLE(htim);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0201 	orr.w	r2, r2, #1
 8005f22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	40012c00 	.word	0x40012c00
 8005f34:	40000400 	.word	0x40000400
 8005f38:	40000800 	.word	0x40000800
 8005f3c:	40001000 	.word	0x40001000
 8005f40:	40001400 	.word	0x40001400
 8005f44:	40013400 	.word	0x40013400
 8005f48:	40014000 	.word	0x40014000
 8005f4c:	40014400 	.word	0x40014400
 8005f50:	40014800 	.word	0x40014800
 8005f54:	08009738 	.word	0x08009738
 8005f58:	00010007 	.word	0x00010007

08005f5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e0b9      	b.n	80060e2 <HAL_TIM_PWM_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a5e      	ldr	r2, [pc, #376]	; (80060ec <HAL_TIM_PWM_Init+0x190>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d031      	beq.n	8005fdc <HAL_TIM_PWM_Init+0x80>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f80:	d02c      	beq.n	8005fdc <HAL_TIM_PWM_Init+0x80>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a5a      	ldr	r2, [pc, #360]	; (80060f0 <HAL_TIM_PWM_Init+0x194>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d027      	beq.n	8005fdc <HAL_TIM_PWM_Init+0x80>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a58      	ldr	r2, [pc, #352]	; (80060f4 <HAL_TIM_PWM_Init+0x198>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d022      	beq.n	8005fdc <HAL_TIM_PWM_Init+0x80>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a57      	ldr	r2, [pc, #348]	; (80060f8 <HAL_TIM_PWM_Init+0x19c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d01d      	beq.n	8005fdc <HAL_TIM_PWM_Init+0x80>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a55      	ldr	r2, [pc, #340]	; (80060fc <HAL_TIM_PWM_Init+0x1a0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d018      	beq.n	8005fdc <HAL_TIM_PWM_Init+0x80>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a54      	ldr	r2, [pc, #336]	; (8006100 <HAL_TIM_PWM_Init+0x1a4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d013      	beq.n	8005fdc <HAL_TIM_PWM_Init+0x80>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a52      	ldr	r2, [pc, #328]	; (8006104 <HAL_TIM_PWM_Init+0x1a8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d00e      	beq.n	8005fdc <HAL_TIM_PWM_Init+0x80>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a51      	ldr	r2, [pc, #324]	; (8006108 <HAL_TIM_PWM_Init+0x1ac>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d009      	beq.n	8005fdc <HAL_TIM_PWM_Init+0x80>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a4f      	ldr	r2, [pc, #316]	; (800610c <HAL_TIM_PWM_Init+0x1b0>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d004      	beq.n	8005fdc <HAL_TIM_PWM_Init+0x80>
 8005fd2:	f240 41ec 	movw	r1, #1260	; 0x4ec
 8005fd6:	484e      	ldr	r0, [pc, #312]	; (8006110 <HAL_TIM_PWM_Init+0x1b4>)
 8005fd8:	f7fb fb53 	bl	8001682 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d014      	beq.n	800600e <HAL_TIM_PWM_Init+0xb2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	2b10      	cmp	r3, #16
 8005fea:	d010      	beq.n	800600e <HAL_TIM_PWM_Init+0xb2>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	2b20      	cmp	r3, #32
 8005ff2:	d00c      	beq.n	800600e <HAL_TIM_PWM_Init+0xb2>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	2b40      	cmp	r3, #64	; 0x40
 8005ffa:	d008      	beq.n	800600e <HAL_TIM_PWM_Init+0xb2>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	2b60      	cmp	r3, #96	; 0x60
 8006002:	d004      	beq.n	800600e <HAL_TIM_PWM_Init+0xb2>
 8006004:	f240 41ed 	movw	r1, #1261	; 0x4ed
 8006008:	4841      	ldr	r0, [pc, #260]	; (8006110 <HAL_TIM_PWM_Init+0x1b4>)
 800600a:	f7fb fb3a 	bl	8001682 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00e      	beq.n	8006034 <HAL_TIM_PWM_Init+0xd8>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800601e:	d009      	beq.n	8006034 <HAL_TIM_PWM_Init+0xd8>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006028:	d004      	beq.n	8006034 <HAL_TIM_PWM_Init+0xd8>
 800602a:	f240 41ee 	movw	r1, #1262	; 0x4ee
 800602e:	4838      	ldr	r0, [pc, #224]	; (8006110 <HAL_TIM_PWM_Init+0x1b4>)
 8006030:	f7fb fb27 	bl	8001682 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d008      	beq.n	800604e <HAL_TIM_PWM_Init+0xf2>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	2b80      	cmp	r3, #128	; 0x80
 8006042:	d004      	beq.n	800604e <HAL_TIM_PWM_Init+0xf2>
 8006044:	f240 41ef 	movw	r1, #1263	; 0x4ef
 8006048:	4831      	ldr	r0, [pc, #196]	; (8006110 <HAL_TIM_PWM_Init+0x1b4>)
 800604a:	f7fb fb1a 	bl	8001682 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d106      	bne.n	8006068 <HAL_TIM_PWM_Init+0x10c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7fb fd64 	bl	8001b30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2202      	movs	r2, #2
 800606c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	3304      	adds	r3, #4
 8006078:	4619      	mov	r1, r3
 800607a:	4610      	mov	r0, r2
 800607c:	f000 ff7e 	bl	8006f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	40012c00 	.word	0x40012c00
 80060f0:	40000400 	.word	0x40000400
 80060f4:	40000800 	.word	0x40000800
 80060f8:	40001000 	.word	0x40001000
 80060fc:	40001400 	.word	0x40001400
 8006100:	40013400 	.word	0x40013400
 8006104:	40014000 	.word	0x40014000
 8006108:	40014400 	.word	0x40014400
 800610c:	40014800 	.word	0x40014800
 8006110:	08009738 	.word	0x08009738

08006114 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a94      	ldr	r2, [pc, #592]	; (8006378 <HAL_TIM_PWM_Start_DMA+0x264>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d111      	bne.n	8006150 <HAL_TIM_PWM_Start_DMA+0x3c>
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d078      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2b04      	cmp	r3, #4
 8006136:	d075      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b08      	cmp	r3, #8
 800613c:	d072      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2b0c      	cmp	r3, #12
 8006142:	d06f      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2b10      	cmp	r3, #16
 8006148:	d06c      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2b14      	cmp	r3, #20
 800614e:	d069      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006158:	d10b      	bne.n	8006172 <HAL_TIM_PWM_Start_DMA+0x5e>
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d061      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	2b04      	cmp	r3, #4
 8006164:	d05e      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2b08      	cmp	r3, #8
 800616a:	d05b      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2b0c      	cmp	r3, #12
 8006170:	d058      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a81      	ldr	r2, [pc, #516]	; (800637c <HAL_TIM_PWM_Start_DMA+0x268>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d10b      	bne.n	8006194 <HAL_TIM_PWM_Start_DMA+0x80>
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d050      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b04      	cmp	r3, #4
 8006186:	d04d      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	2b08      	cmp	r3, #8
 800618c:	d04a      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2b0c      	cmp	r3, #12
 8006192:	d047      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a79      	ldr	r2, [pc, #484]	; (8006380 <HAL_TIM_PWM_Start_DMA+0x26c>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d10b      	bne.n	80061b6 <HAL_TIM_PWM_Start_DMA+0xa2>
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d03f      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d03c      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	2b08      	cmp	r3, #8
 80061ae:	d039      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2b0c      	cmp	r3, #12
 80061b4:	d036      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a72      	ldr	r2, [pc, #456]	; (8006384 <HAL_TIM_PWM_Start_DMA+0x270>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d111      	bne.n	80061e4 <HAL_TIM_PWM_Start_DMA+0xd0>
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d02e      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b04      	cmp	r3, #4
 80061ca:	d02b      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2b08      	cmp	r3, #8
 80061d0:	d028      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2b0c      	cmp	r3, #12
 80061d6:	d025      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2b10      	cmp	r3, #16
 80061dc:	d022      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2b14      	cmp	r3, #20
 80061e2:	d01f      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a67      	ldr	r2, [pc, #412]	; (8006388 <HAL_TIM_PWM_Start_DMA+0x274>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d105      	bne.n	80061fa <HAL_TIM_PWM_Start_DMA+0xe6>
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d017      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d014      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a63      	ldr	r2, [pc, #396]	; (800638c <HAL_TIM_PWM_Start_DMA+0x278>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d102      	bne.n	800620a <HAL_TIM_PWM_Start_DMA+0xf6>
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00c      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a60      	ldr	r2, [pc, #384]	; (8006390 <HAL_TIM_PWM_Start_DMA+0x27c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d102      	bne.n	800621a <HAL_TIM_PWM_Start_DMA+0x106>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d004      	beq.n	8006224 <HAL_TIM_PWM_Start_DMA+0x110>
 800621a:	f240 615f 	movw	r1, #1631	; 0x65f
 800621e:	485d      	ldr	r0, [pc, #372]	; (8006394 <HAL_TIM_PWM_Start_DMA+0x280>)
 8006220:	f7fb fa2f 	bl	8001682 <assert_failed>

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d109      	bne.n	800623e <HAL_TIM_PWM_Start_DMA+0x12a>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b02      	cmp	r3, #2
 8006234:	bf0c      	ite	eq
 8006236:	2301      	moveq	r3, #1
 8006238:	2300      	movne	r3, #0
 800623a:	b2db      	uxtb	r3, r3
 800623c:	e03c      	b.n	80062b8 <HAL_TIM_PWM_Start_DMA+0x1a4>
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	2b04      	cmp	r3, #4
 8006242:	d109      	bne.n	8006258 <HAL_TIM_PWM_Start_DMA+0x144>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b02      	cmp	r3, #2
 800624e:	bf0c      	ite	eq
 8006250:	2301      	moveq	r3, #1
 8006252:	2300      	movne	r3, #0
 8006254:	b2db      	uxtb	r3, r3
 8006256:	e02f      	b.n	80062b8 <HAL_TIM_PWM_Start_DMA+0x1a4>
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2b08      	cmp	r3, #8
 800625c:	d109      	bne.n	8006272 <HAL_TIM_PWM_Start_DMA+0x15e>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b02      	cmp	r3, #2
 8006268:	bf0c      	ite	eq
 800626a:	2301      	moveq	r3, #1
 800626c:	2300      	movne	r3, #0
 800626e:	b2db      	uxtb	r3, r3
 8006270:	e022      	b.n	80062b8 <HAL_TIM_PWM_Start_DMA+0x1a4>
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2b0c      	cmp	r3, #12
 8006276:	d109      	bne.n	800628c <HAL_TIM_PWM_Start_DMA+0x178>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b02      	cmp	r3, #2
 8006282:	bf0c      	ite	eq
 8006284:	2301      	moveq	r3, #1
 8006286:	2300      	movne	r3, #0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	e015      	b.n	80062b8 <HAL_TIM_PWM_Start_DMA+0x1a4>
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2b10      	cmp	r3, #16
 8006290:	d109      	bne.n	80062a6 <HAL_TIM_PWM_Start_DMA+0x192>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b02      	cmp	r3, #2
 800629c:	bf0c      	ite	eq
 800629e:	2301      	moveq	r3, #1
 80062a0:	2300      	movne	r3, #0
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	e008      	b.n	80062b8 <HAL_TIM_PWM_Start_DMA+0x1a4>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	bf0c      	ite	eq
 80062b2:	2301      	moveq	r3, #1
 80062b4:	2300      	movne	r3, #0
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    return HAL_BUSY;
 80062bc:	2302      	movs	r3, #2
 80062be:	e187      	b.n	80065d0 <HAL_TIM_PWM_Start_DMA+0x4bc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d109      	bne.n	80062da <HAL_TIM_PWM_Start_DMA+0x1c6>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	bf0c      	ite	eq
 80062d2:	2301      	moveq	r3, #1
 80062d4:	2300      	movne	r3, #0
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	e03c      	b.n	8006354 <HAL_TIM_PWM_Start_DMA+0x240>
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2b04      	cmp	r3, #4
 80062de:	d109      	bne.n	80062f4 <HAL_TIM_PWM_Start_DMA+0x1e0>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	bf0c      	ite	eq
 80062ec:	2301      	moveq	r3, #1
 80062ee:	2300      	movne	r3, #0
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	e02f      	b.n	8006354 <HAL_TIM_PWM_Start_DMA+0x240>
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2b08      	cmp	r3, #8
 80062f8:	d109      	bne.n	800630e <HAL_TIM_PWM_Start_DMA+0x1fa>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b01      	cmp	r3, #1
 8006304:	bf0c      	ite	eq
 8006306:	2301      	moveq	r3, #1
 8006308:	2300      	movne	r3, #0
 800630a:	b2db      	uxtb	r3, r3
 800630c:	e022      	b.n	8006354 <HAL_TIM_PWM_Start_DMA+0x240>
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2b0c      	cmp	r3, #12
 8006312:	d109      	bne.n	8006328 <HAL_TIM_PWM_Start_DMA+0x214>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b01      	cmp	r3, #1
 800631e:	bf0c      	ite	eq
 8006320:	2301      	moveq	r3, #1
 8006322:	2300      	movne	r3, #0
 8006324:	b2db      	uxtb	r3, r3
 8006326:	e015      	b.n	8006354 <HAL_TIM_PWM_Start_DMA+0x240>
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b10      	cmp	r3, #16
 800632c:	d109      	bne.n	8006342 <HAL_TIM_PWM_Start_DMA+0x22e>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b01      	cmp	r3, #1
 8006338:	bf0c      	ite	eq
 800633a:	2301      	moveq	r3, #1
 800633c:	2300      	movne	r3, #0
 800633e:	b2db      	uxtb	r3, r3
 8006340:	e008      	b.n	8006354 <HAL_TIM_PWM_Start_DMA+0x240>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b01      	cmp	r3, #1
 800634c:	bf0c      	ite	eq
 800634e:	2301      	moveq	r3, #1
 8006350:	2300      	movne	r3, #0
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b00      	cmp	r3, #0
 8006356:	d044      	beq.n	80063e2 <HAL_TIM_PWM_Start_DMA+0x2ce>
  {
    if ((pData == NULL) && (Length > 0U))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d104      	bne.n	8006368 <HAL_TIM_PWM_Start_DMA+0x254>
 800635e:	887b      	ldrh	r3, [r7, #2]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <HAL_TIM_PWM_Start_DMA+0x254>
    {
      return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e133      	b.n	80065d0 <HAL_TIM_PWM_Start_DMA+0x4bc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d114      	bne.n	8006398 <HAL_TIM_PWM_Start_DMA+0x284>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2202      	movs	r2, #2
 8006372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006376:	e036      	b.n	80063e6 <HAL_TIM_PWM_Start_DMA+0x2d2>
 8006378:	40012c00 	.word	0x40012c00
 800637c:	40000400 	.word	0x40000400
 8006380:	40000800 	.word	0x40000800
 8006384:	40013400 	.word	0x40013400
 8006388:	40014000 	.word	0x40014000
 800638c:	40014400 	.word	0x40014400
 8006390:	40014800 	.word	0x40014800
 8006394:	08009738 	.word	0x08009738
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	2b04      	cmp	r3, #4
 800639c:	d104      	bne.n	80063a8 <HAL_TIM_PWM_Start_DMA+0x294>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2202      	movs	r2, #2
 80063a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063a6:	e01e      	b.n	80063e6 <HAL_TIM_PWM_Start_DMA+0x2d2>
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2b08      	cmp	r3, #8
 80063ac:	d104      	bne.n	80063b8 <HAL_TIM_PWM_Start_DMA+0x2a4>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2202      	movs	r2, #2
 80063b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063b6:	e016      	b.n	80063e6 <HAL_TIM_PWM_Start_DMA+0x2d2>
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2b0c      	cmp	r3, #12
 80063bc:	d104      	bne.n	80063c8 <HAL_TIM_PWM_Start_DMA+0x2b4>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2202      	movs	r2, #2
 80063c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063c6:	e00e      	b.n	80063e6 <HAL_TIM_PWM_Start_DMA+0x2d2>
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2b10      	cmp	r3, #16
 80063cc:	d104      	bne.n	80063d8 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2202      	movs	r2, #2
 80063d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063d6:	e006      	b.n	80063e6 <HAL_TIM_PWM_Start_DMA+0x2d2>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063e0:	e001      	b.n	80063e6 <HAL_TIM_PWM_Start_DMA+0x2d2>
    }
  }
  else
  {
    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e0f4      	b.n	80065d0 <HAL_TIM_PWM_Start_DMA+0x4bc>
  }

  switch (Channel)
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2b0c      	cmp	r3, #12
 80063ea:	f200 80ad 	bhi.w	8006548 <HAL_TIM_PWM_Start_DMA+0x434>
 80063ee:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <HAL_TIM_PWM_Start_DMA+0x2e0>)
 80063f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f4:	08006429 	.word	0x08006429
 80063f8:	08006549 	.word	0x08006549
 80063fc:	08006549 	.word	0x08006549
 8006400:	08006549 	.word	0x08006549
 8006404:	08006471 	.word	0x08006471
 8006408:	08006549 	.word	0x08006549
 800640c:	08006549 	.word	0x08006549
 8006410:	08006549 	.word	0x08006549
 8006414:	080064b9 	.word	0x080064b9
 8006418:	08006549 	.word	0x08006549
 800641c:	08006549 	.word	0x08006549
 8006420:	08006549 	.word	0x08006549
 8006424:	08006501 	.word	0x08006501
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	4a6a      	ldr	r2, [pc, #424]	; (80065d8 <HAL_TIM_PWM_Start_DMA+0x4c4>)
 800642e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006434:	4a69      	ldr	r2, [pc, #420]	; (80065dc <HAL_TIM_PWM_Start_DMA+0x4c8>)
 8006436:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643c:	4a68      	ldr	r2, [pc, #416]	; (80065e0 <HAL_TIM_PWM_Start_DMA+0x4cc>)
 800643e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006444:	6879      	ldr	r1, [r7, #4]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3334      	adds	r3, #52	; 0x34
 800644c:	461a      	mov	r2, r3
 800644e:	887b      	ldrh	r3, [r7, #2]
 8006450:	f7fc f99a 	bl	8002788 <HAL_DMA_Start_IT>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <HAL_TIM_PWM_Start_DMA+0x34a>
      {
        return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e0b8      	b.n	80065d0 <HAL_TIM_PWM_Start_DMA+0x4bc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800646c:	60da      	str	r2, [r3, #12]
      break;
 800646e:	e06c      	b.n	800654a <HAL_TIM_PWM_Start_DMA+0x436>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006474:	4a58      	ldr	r2, [pc, #352]	; (80065d8 <HAL_TIM_PWM_Start_DMA+0x4c4>)
 8006476:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647c:	4a57      	ldr	r2, [pc, #348]	; (80065dc <HAL_TIM_PWM_Start_DMA+0x4c8>)
 800647e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006484:	4a56      	ldr	r2, [pc, #344]	; (80065e0 <HAL_TIM_PWM_Start_DMA+0x4cc>)
 8006486:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800648c:	6879      	ldr	r1, [r7, #4]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	3338      	adds	r3, #56	; 0x38
 8006494:	461a      	mov	r2, r3
 8006496:	887b      	ldrh	r3, [r7, #2]
 8006498:	f7fc f976 	bl	8002788 <HAL_DMA_Start_IT>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <HAL_TIM_PWM_Start_DMA+0x392>
      {
        return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e094      	b.n	80065d0 <HAL_TIM_PWM_Start_DMA+0x4bc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064b4:	60da      	str	r2, [r3, #12]
      break;
 80064b6:	e048      	b.n	800654a <HAL_TIM_PWM_Start_DMA+0x436>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064bc:	4a46      	ldr	r2, [pc, #280]	; (80065d8 <HAL_TIM_PWM_Start_DMA+0x4c4>)
 80064be:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c4:	4a45      	ldr	r2, [pc, #276]	; (80065dc <HAL_TIM_PWM_Start_DMA+0x4c8>)
 80064c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	4a44      	ldr	r2, [pc, #272]	; (80065e0 <HAL_TIM_PWM_Start_DMA+0x4cc>)
 80064ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80064d4:	6879      	ldr	r1, [r7, #4]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	333c      	adds	r3, #60	; 0x3c
 80064dc:	461a      	mov	r2, r3
 80064de:	887b      	ldrh	r3, [r7, #2]
 80064e0:	f7fc f952 	bl	8002788 <HAL_DMA_Start_IT>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <HAL_TIM_PWM_Start_DMA+0x3da>
      {
        return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e070      	b.n	80065d0 <HAL_TIM_PWM_Start_DMA+0x4bc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68da      	ldr	r2, [r3, #12]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064fc:	60da      	str	r2, [r3, #12]
      break;
 80064fe:	e024      	b.n	800654a <HAL_TIM_PWM_Start_DMA+0x436>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006504:	4a34      	ldr	r2, [pc, #208]	; (80065d8 <HAL_TIM_PWM_Start_DMA+0x4c4>)
 8006506:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650c:	4a33      	ldr	r2, [pc, #204]	; (80065dc <HAL_TIM_PWM_Start_DMA+0x4c8>)
 800650e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006514:	4a32      	ldr	r2, [pc, #200]	; (80065e0 <HAL_TIM_PWM_Start_DMA+0x4cc>)
 8006516:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800651c:	6879      	ldr	r1, [r7, #4]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3340      	adds	r3, #64	; 0x40
 8006524:	461a      	mov	r2, r3
 8006526:	887b      	ldrh	r3, [r7, #2]
 8006528:	f7fc f92e 	bl	8002788 <HAL_DMA_Start_IT>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <HAL_TIM_PWM_Start_DMA+0x422>
      {
        return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e04c      	b.n	80065d0 <HAL_TIM_PWM_Start_DMA+0x4bc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68da      	ldr	r2, [r3, #12]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006544:	60da      	str	r2, [r3, #12]
      break;
 8006546:	e000      	b.n	800654a <HAL_TIM_PWM_Start_DMA+0x436>
    }

    default:
      break;
 8006548:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2201      	movs	r2, #1
 8006550:	68b9      	ldr	r1, [r7, #8]
 8006552:	4618      	mov	r0, r3
 8006554:	f001 f93c 	bl	80077d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a21      	ldr	r2, [pc, #132]	; (80065e4 <HAL_TIM_PWM_Start_DMA+0x4d0>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d013      	beq.n	800658a <HAL_TIM_PWM_Start_DMA+0x476>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a20      	ldr	r2, [pc, #128]	; (80065e8 <HAL_TIM_PWM_Start_DMA+0x4d4>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d00e      	beq.n	800658a <HAL_TIM_PWM_Start_DMA+0x476>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a1e      	ldr	r2, [pc, #120]	; (80065ec <HAL_TIM_PWM_Start_DMA+0x4d8>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d009      	beq.n	800658a <HAL_TIM_PWM_Start_DMA+0x476>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a1d      	ldr	r2, [pc, #116]	; (80065f0 <HAL_TIM_PWM_Start_DMA+0x4dc>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d004      	beq.n	800658a <HAL_TIM_PWM_Start_DMA+0x476>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a1b      	ldr	r2, [pc, #108]	; (80065f4 <HAL_TIM_PWM_Start_DMA+0x4e0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d101      	bne.n	800658e <HAL_TIM_PWM_Start_DMA+0x47a>
 800658a:	2301      	movs	r3, #1
 800658c:	e000      	b.n	8006590 <HAL_TIM_PWM_Start_DMA+0x47c>
 800658e:	2300      	movs	r3, #0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d007      	beq.n	80065a4 <HAL_TIM_PWM_Start_DMA+0x490>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689a      	ldr	r2, [r3, #8]
 80065aa:	4b13      	ldr	r3, [pc, #76]	; (80065f8 <HAL_TIM_PWM_Start_DMA+0x4e4>)
 80065ac:	4013      	ands	r3, r2
 80065ae:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2b06      	cmp	r3, #6
 80065b4:	d00b      	beq.n	80065ce <HAL_TIM_PWM_Start_DMA+0x4ba>
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065bc:	d007      	beq.n	80065ce <HAL_TIM_PWM_Start_DMA+0x4ba>
  {
    __HAL_TIM_ENABLE(htim);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f042 0201 	orr.w	r2, r2, #1
 80065cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	08006e6b 	.word	0x08006e6b
 80065dc:	08006f13 	.word	0x08006f13
 80065e0:	08006dd9 	.word	0x08006dd9
 80065e4:	40012c00 	.word	0x40012c00
 80065e8:	40013400 	.word	0x40013400
 80065ec:	40014000 	.word	0x40014000
 80065f0:	40014400 	.word	0x40014400
 80065f4:	40014800 	.word	0x40014800
 80065f8:	00010007 	.word	0x00010007

080065fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	f003 0302 	and.w	r3, r3, #2
 800660e:	2b02      	cmp	r3, #2
 8006610:	d122      	bne.n	8006658 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b02      	cmp	r3, #2
 800661e:	d11b      	bne.n	8006658 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0202 	mvn.w	r2, #2
 8006628:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	f003 0303 	and.w	r3, r3, #3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fb98 	bl	8006d74 <HAL_TIM_IC_CaptureCallback>
 8006644:	e005      	b.n	8006652 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fb8a 	bl	8006d60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fb9b 	bl	8006d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	f003 0304 	and.w	r3, r3, #4
 8006662:	2b04      	cmp	r3, #4
 8006664:	d122      	bne.n	80066ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f003 0304 	and.w	r3, r3, #4
 8006670:	2b04      	cmp	r3, #4
 8006672:	d11b      	bne.n	80066ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f06f 0204 	mvn.w	r2, #4
 800667c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2202      	movs	r2, #2
 8006682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fb6e 	bl	8006d74 <HAL_TIM_IC_CaptureCallback>
 8006698:	e005      	b.n	80066a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fb60 	bl	8006d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fb71 	bl	8006d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f003 0308 	and.w	r3, r3, #8
 80066b6:	2b08      	cmp	r3, #8
 80066b8:	d122      	bne.n	8006700 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	f003 0308 	and.w	r3, r3, #8
 80066c4:	2b08      	cmp	r3, #8
 80066c6:	d11b      	bne.n	8006700 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f06f 0208 	mvn.w	r2, #8
 80066d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2204      	movs	r2, #4
 80066d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	f003 0303 	and.w	r3, r3, #3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fb44 	bl	8006d74 <HAL_TIM_IC_CaptureCallback>
 80066ec:	e005      	b.n	80066fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fb36 	bl	8006d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fb47 	bl	8006d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	f003 0310 	and.w	r3, r3, #16
 800670a:	2b10      	cmp	r3, #16
 800670c:	d122      	bne.n	8006754 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f003 0310 	and.w	r3, r3, #16
 8006718:	2b10      	cmp	r3, #16
 800671a:	d11b      	bne.n	8006754 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f06f 0210 	mvn.w	r2, #16
 8006724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2208      	movs	r2, #8
 800672a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fb1a 	bl	8006d74 <HAL_TIM_IC_CaptureCallback>
 8006740:	e005      	b.n	800674e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fb0c 	bl	8006d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fb1d 	bl	8006d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b01      	cmp	r3, #1
 8006760:	d10e      	bne.n	8006780 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b01      	cmp	r3, #1
 800676e:	d107      	bne.n	8006780 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f06f 0201 	mvn.w	r2, #1
 8006778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7fa ff68 	bl	8001650 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800678a:	2b80      	cmp	r3, #128	; 0x80
 800678c:	d10e      	bne.n	80067ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006798:	2b80      	cmp	r3, #128	; 0x80
 800679a:	d107      	bne.n	80067ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f001 fb4e 	bl	8007e48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ba:	d10e      	bne.n	80067da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c6:	2b80      	cmp	r3, #128	; 0x80
 80067c8:	d107      	bne.n	80067da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80067d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f001 fb41 	bl	8007e5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e4:	2b40      	cmp	r3, #64	; 0x40
 80067e6:	d10e      	bne.n	8006806 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f2:	2b40      	cmp	r3, #64	; 0x40
 80067f4:	d107      	bne.n	8006806 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fad5 	bl	8006db0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	f003 0320 	and.w	r3, r3, #32
 8006810:	2b20      	cmp	r3, #32
 8006812:	d10e      	bne.n	8006832 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	f003 0320 	and.w	r3, r3, #32
 800681e:	2b20      	cmp	r3, #32
 8006820:	d107      	bne.n	8006832 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f06f 0220 	mvn.w	r2, #32
 800682a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f001 fb01 	bl	8007e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800683c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006840:	d10f      	bne.n	8006862 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800684c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006850:	d107      	bne.n	8006862 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800685a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f001 fb07 	bl	8007e70 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800686c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006870:	d10f      	bne.n	8006892 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800687c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006880:	d107      	bne.n	8006892 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800688a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f001 faf9 	bl	8007e84 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800689c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068a0:	d10f      	bne.n	80068c2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068b0:	d107      	bne.n	80068c2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80068ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f001 faeb 	bl	8007e98 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068d0:	d10f      	bne.n	80068f2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068e0:	d107      	bne.n	80068f2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80068ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f001 fadd 	bl	8007eac <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068f2:	bf00      	nop
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
	...

080068fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d016      	beq.n	800693c <HAL_TIM_PWM_ConfigChannel+0x40>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b04      	cmp	r3, #4
 8006912:	d013      	beq.n	800693c <HAL_TIM_PWM_ConfigChannel+0x40>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b08      	cmp	r3, #8
 8006918:	d010      	beq.n	800693c <HAL_TIM_PWM_ConfigChannel+0x40>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b0c      	cmp	r3, #12
 800691e:	d00d      	beq.n	800693c <HAL_TIM_PWM_ConfigChannel+0x40>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b10      	cmp	r3, #16
 8006924:	d00a      	beq.n	800693c <HAL_TIM_PWM_ConfigChannel+0x40>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b14      	cmp	r3, #20
 800692a:	d007      	beq.n	800693c <HAL_TIM_PWM_ConfigChannel+0x40>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b3c      	cmp	r3, #60	; 0x3c
 8006930:	d004      	beq.n	800693c <HAL_TIM_PWM_ConfigChannel+0x40>
 8006932:	f241 0118 	movw	r1, #4120	; 0x1018
 8006936:	4886      	ldr	r0, [pc, #536]	; (8006b50 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8006938:	f7fa fea3 	bl	8001682 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b60      	cmp	r3, #96	; 0x60
 8006942:	d01c      	beq.n	800697e <HAL_TIM_PWM_ConfigChannel+0x82>
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b70      	cmp	r3, #112	; 0x70
 800694a:	d018      	beq.n	800697e <HAL_TIM_PWM_ConfigChannel+0x82>
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a80      	ldr	r2, [pc, #512]	; (8006b54 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d013      	beq.n	800697e <HAL_TIM_PWM_ConfigChannel+0x82>
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a7f      	ldr	r2, [pc, #508]	; (8006b58 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d00e      	beq.n	800697e <HAL_TIM_PWM_ConfigChannel+0x82>
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a7d      	ldr	r2, [pc, #500]	; (8006b5c <HAL_TIM_PWM_ConfigChannel+0x260>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d009      	beq.n	800697e <HAL_TIM_PWM_ConfigChannel+0x82>
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a7c      	ldr	r2, [pc, #496]	; (8006b60 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d004      	beq.n	800697e <HAL_TIM_PWM_ConfigChannel+0x82>
 8006974:	f241 0119 	movw	r1, #4121	; 0x1019
 8006978:	4875      	ldr	r0, [pc, #468]	; (8006b50 <HAL_TIM_PWM_ConfigChannel+0x254>)
 800697a:	f7fa fe82 	bl	8001682 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d008      	beq.n	8006998 <HAL_TIM_PWM_ConfigChannel+0x9c>
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	2b02      	cmp	r3, #2
 800698c:	d004      	beq.n	8006998 <HAL_TIM_PWM_ConfigChannel+0x9c>
 800698e:	f241 011a 	movw	r1, #4122	; 0x101a
 8006992:	486f      	ldr	r0, [pc, #444]	; (8006b50 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8006994:	f7fa fe75 	bl	8001682 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d008      	beq.n	80069b2 <HAL_TIM_PWM_ConfigChannel+0xb6>
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	2b04      	cmp	r3, #4
 80069a6:	d004      	beq.n	80069b2 <HAL_TIM_PWM_ConfigChannel+0xb6>
 80069a8:	f241 011b 	movw	r1, #4123	; 0x101b
 80069ac:	4868      	ldr	r0, [pc, #416]	; (8006b50 <HAL_TIM_PWM_ConfigChannel+0x254>)
 80069ae:	f7fa fe68 	bl	8001682 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d101      	bne.n	80069c0 <HAL_TIM_PWM_ConfigChannel+0xc4>
 80069bc:	2302      	movs	r3, #2
 80069be:	e1c1      	b.n	8006d44 <HAL_TIM_PWM_ConfigChannel+0x448>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b14      	cmp	r3, #20
 80069cc:	f200 81b4 	bhi.w	8006d38 <HAL_TIM_PWM_ConfigChannel+0x43c>
 80069d0:	a201      	add	r2, pc, #4	; (adr r2, 80069d8 <HAL_TIM_PWM_ConfigChannel+0xdc>)
 80069d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d6:	bf00      	nop
 80069d8:	08006a2d 	.word	0x08006a2d
 80069dc:	08006d39 	.word	0x08006d39
 80069e0:	08006d39 	.word	0x08006d39
 80069e4:	08006d39 	.word	0x08006d39
 80069e8:	08006ac7 	.word	0x08006ac7
 80069ec:	08006d39 	.word	0x08006d39
 80069f0:	08006d39 	.word	0x08006d39
 80069f4:	08006d39 	.word	0x08006d39
 80069f8:	08006b81 	.word	0x08006b81
 80069fc:	08006d39 	.word	0x08006d39
 8006a00:	08006d39 	.word	0x08006d39
 8006a04:	08006d39 	.word	0x08006d39
 8006a08:	08006bfd 	.word	0x08006bfd
 8006a0c:	08006d39 	.word	0x08006d39
 8006a10:	08006d39 	.word	0x08006d39
 8006a14:	08006d39 	.word	0x08006d39
 8006a18:	08006c7b 	.word	0x08006c7b
 8006a1c:	08006d39 	.word	0x08006d39
 8006a20:	08006d39 	.word	0x08006d39
 8006a24:	08006d39 	.word	0x08006d39
 8006a28:	08006cd9 	.word	0x08006cd9
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a4c      	ldr	r2, [pc, #304]	; (8006b64 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d027      	beq.n	8006a86 <HAL_TIM_PWM_ConfigChannel+0x18a>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a3e:	d022      	beq.n	8006a86 <HAL_TIM_PWM_ConfigChannel+0x18a>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a48      	ldr	r2, [pc, #288]	; (8006b68 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d01d      	beq.n	8006a86 <HAL_TIM_PWM_ConfigChannel+0x18a>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a47      	ldr	r2, [pc, #284]	; (8006b6c <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d018      	beq.n	8006a86 <HAL_TIM_PWM_ConfigChannel+0x18a>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a45      	ldr	r2, [pc, #276]	; (8006b70 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d013      	beq.n	8006a86 <HAL_TIM_PWM_ConfigChannel+0x18a>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a44      	ldr	r2, [pc, #272]	; (8006b74 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d00e      	beq.n	8006a86 <HAL_TIM_PWM_ConfigChannel+0x18a>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a42      	ldr	r2, [pc, #264]	; (8006b78 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d009      	beq.n	8006a86 <HAL_TIM_PWM_ConfigChannel+0x18a>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a41      	ldr	r2, [pc, #260]	; (8006b7c <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d004      	beq.n	8006a86 <HAL_TIM_PWM_ConfigChannel+0x18a>
 8006a7c:	f241 0125 	movw	r1, #4133	; 0x1025
 8006a80:	4833      	ldr	r0, [pc, #204]	; (8006b50 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8006a82:	f7fa fdfe 	bl	8001682 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68b9      	ldr	r1, [r7, #8]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 fb05 	bl	800709c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	699a      	ldr	r2, [r3, #24]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f042 0208 	orr.w	r2, r2, #8
 8006aa0:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	699a      	ldr	r2, [r3, #24]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 0204 	bic.w	r2, r2, #4
 8006ab0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6999      	ldr	r1, [r3, #24]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	691a      	ldr	r2, [r3, #16]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	619a      	str	r2, [r3, #24]
      break;
 8006ac4:	e139      	b.n	8006d3a <HAL_TIM_PWM_ConfigChannel+0x43e>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a26      	ldr	r2, [pc, #152]	; (8006b64 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d01d      	beq.n	8006b0c <HAL_TIM_PWM_ConfigChannel+0x210>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad8:	d018      	beq.n	8006b0c <HAL_TIM_PWM_ConfigChannel+0x210>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a22      	ldr	r2, [pc, #136]	; (8006b68 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d013      	beq.n	8006b0c <HAL_TIM_PWM_ConfigChannel+0x210>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a20      	ldr	r2, [pc, #128]	; (8006b6c <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00e      	beq.n	8006b0c <HAL_TIM_PWM_ConfigChannel+0x210>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a1f      	ldr	r2, [pc, #124]	; (8006b70 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d009      	beq.n	8006b0c <HAL_TIM_PWM_ConfigChannel+0x210>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a1d      	ldr	r2, [pc, #116]	; (8006b74 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d004      	beq.n	8006b0c <HAL_TIM_PWM_ConfigChannel+0x210>
 8006b02:	f241 0136 	movw	r1, #4150	; 0x1036
 8006b06:	4812      	ldr	r0, [pc, #72]	; (8006b50 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8006b08:	f7fa fdbb 	bl	8001682 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68b9      	ldr	r1, [r7, #8]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 fb7c 	bl	8007210 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699a      	ldr	r2, [r3, #24]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699a      	ldr	r2, [r3, #24]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6999      	ldr	r1, [r3, #24]
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	021a      	lsls	r2, r3, #8
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	619a      	str	r2, [r3, #24]
      break;
 8006b4c:	e0f5      	b.n	8006d3a <HAL_TIM_PWM_ConfigChannel+0x43e>
 8006b4e:	bf00      	nop
 8006b50:	08009738 	.word	0x08009738
 8006b54:	00010040 	.word	0x00010040
 8006b58:	00010050 	.word	0x00010050
 8006b5c:	00010060 	.word	0x00010060
 8006b60:	00010070 	.word	0x00010070
 8006b64:	40012c00 	.word	0x40012c00
 8006b68:	40000400 	.word	0x40000400
 8006b6c:	40000800 	.word	0x40000800
 8006b70:	40013400 	.word	0x40013400
 8006b74:	40014000 	.word	0x40014000
 8006b78:	40014400 	.word	0x40014400
 8006b7c:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a71      	ldr	r2, [pc, #452]	; (8006d4c <HAL_TIM_PWM_ConfigChannel+0x450>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d018      	beq.n	8006bbc <HAL_TIM_PWM_ConfigChannel+0x2c0>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b92:	d013      	beq.n	8006bbc <HAL_TIM_PWM_ConfigChannel+0x2c0>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a6d      	ldr	r2, [pc, #436]	; (8006d50 <HAL_TIM_PWM_ConfigChannel+0x454>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d00e      	beq.n	8006bbc <HAL_TIM_PWM_ConfigChannel+0x2c0>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a6c      	ldr	r2, [pc, #432]	; (8006d54 <HAL_TIM_PWM_ConfigChannel+0x458>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d009      	beq.n	8006bbc <HAL_TIM_PWM_ConfigChannel+0x2c0>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a6a      	ldr	r2, [pc, #424]	; (8006d58 <HAL_TIM_PWM_ConfigChannel+0x45c>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d004      	beq.n	8006bbc <HAL_TIM_PWM_ConfigChannel+0x2c0>
 8006bb2:	f241 0147 	movw	r1, #4167	; 0x1047
 8006bb6:	4869      	ldr	r0, [pc, #420]	; (8006d5c <HAL_TIM_PWM_ConfigChannel+0x460>)
 8006bb8:	f7fa fd63 	bl	8001682 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68b9      	ldr	r1, [r7, #8]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 fbd6 	bl	8007374 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	69da      	ldr	r2, [r3, #28]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f042 0208 	orr.w	r2, r2, #8
 8006bd6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	69da      	ldr	r2, [r3, #28]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 0204 	bic.w	r2, r2, #4
 8006be6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	69d9      	ldr	r1, [r3, #28]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	691a      	ldr	r2, [r3, #16]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	61da      	str	r2, [r3, #28]
      break;
 8006bfa:	e09e      	b.n	8006d3a <HAL_TIM_PWM_ConfigChannel+0x43e>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a52      	ldr	r2, [pc, #328]	; (8006d4c <HAL_TIM_PWM_ConfigChannel+0x450>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d018      	beq.n	8006c38 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c0e:	d013      	beq.n	8006c38 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a4e      	ldr	r2, [pc, #312]	; (8006d50 <HAL_TIM_PWM_ConfigChannel+0x454>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d00e      	beq.n	8006c38 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a4d      	ldr	r2, [pc, #308]	; (8006d54 <HAL_TIM_PWM_ConfigChannel+0x458>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d009      	beq.n	8006c38 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a4b      	ldr	r2, [pc, #300]	; (8006d58 <HAL_TIM_PWM_ConfigChannel+0x45c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d004      	beq.n	8006c38 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8006c2e:	f241 0158 	movw	r1, #4184	; 0x1058
 8006c32:	484a      	ldr	r0, [pc, #296]	; (8006d5c <HAL_TIM_PWM_ConfigChannel+0x460>)
 8006c34:	f7fa fd25 	bl	8001682 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68b9      	ldr	r1, [r7, #8]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 fc4a 	bl	80074d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	69da      	ldr	r2, [r3, #28]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c52:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	69da      	ldr	r2, [r3, #28]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	69d9      	ldr	r1, [r3, #28]
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	021a      	lsls	r2, r3, #8
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	61da      	str	r2, [r3, #28]
      break;
 8006c78:	e05f      	b.n	8006d3a <HAL_TIM_PWM_ConfigChannel+0x43e>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a33      	ldr	r2, [pc, #204]	; (8006d4c <HAL_TIM_PWM_ConfigChannel+0x450>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d009      	beq.n	8006c98 <HAL_TIM_PWM_ConfigChannel+0x39c>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a33      	ldr	r2, [pc, #204]	; (8006d58 <HAL_TIM_PWM_ConfigChannel+0x45c>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d004      	beq.n	8006c98 <HAL_TIM_PWM_ConfigChannel+0x39c>
 8006c8e:	f241 0169 	movw	r1, #4201	; 0x1069
 8006c92:	4832      	ldr	r0, [pc, #200]	; (8006d5c <HAL_TIM_PWM_ConfigChannel+0x460>)
 8006c94:	f7fa fcf5 	bl	8001682 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68b9      	ldr	r1, [r7, #8]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fccc 	bl	800763c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f042 0208 	orr.w	r2, r2, #8
 8006cb2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 0204 	bic.w	r2, r2, #4
 8006cc2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	691a      	ldr	r2, [r3, #16]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006cd6:	e030      	b.n	8006d3a <HAL_TIM_PWM_ConfigChannel+0x43e>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a1b      	ldr	r2, [pc, #108]	; (8006d4c <HAL_TIM_PWM_ConfigChannel+0x450>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d009      	beq.n	8006cf6 <HAL_TIM_PWM_ConfigChannel+0x3fa>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a1c      	ldr	r2, [pc, #112]	; (8006d58 <HAL_TIM_PWM_ConfigChannel+0x45c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d004      	beq.n	8006cf6 <HAL_TIM_PWM_ConfigChannel+0x3fa>
 8006cec:	f241 017a 	movw	r1, #4218	; 0x107a
 8006cf0:	481a      	ldr	r0, [pc, #104]	; (8006d5c <HAL_TIM_PWM_ConfigChannel+0x460>)
 8006cf2:	f7fa fcc6 	bl	8001682 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68b9      	ldr	r1, [r7, #8]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 fd01 	bl	8007704 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d10:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d20:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	021a      	lsls	r2, r3, #8
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006d36:	e000      	b.n	8006d3a <HAL_TIM_PWM_ConfigChannel+0x43e>
    }

    default:
      break;
 8006d38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	40012c00 	.word	0x40012c00
 8006d50:	40000400 	.word	0x40000400
 8006d54:	40000800 	.word	0x40000800
 8006d58:	40013400 	.word	0x40013400
 8006d5c:	08009738 	.word	0x08009738

08006d60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d107      	bne.n	8006e00 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2201      	movs	r2, #1
 8006df4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dfe:	e02a      	b.n	8006e56 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d107      	bne.n	8006e1a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2202      	movs	r2, #2
 8006e0e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e18:	e01d      	b.n	8006e56 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d107      	bne.n	8006e34 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2204      	movs	r2, #4
 8006e28:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e32:	e010      	b.n	8006e56 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d107      	bne.n	8006e4e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2208      	movs	r2, #8
 8006e42:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e4c:	e003      	b.n	8006e56 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f7ff ffb4 	bl	8006dc4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	771a      	strb	r2, [r3, #28]
}
 8006e62:	bf00      	nop
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e76:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d10b      	bne.n	8006e9a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2201      	movs	r2, #1
 8006e86:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	69db      	ldr	r3, [r3, #28]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d136      	bne.n	8006efe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e98:	e031      	b.n	8006efe <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d10b      	bne.n	8006ebc <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d125      	bne.n	8006efe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006eba:	e020      	b.n	8006efe <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d10b      	bne.n	8006ede <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2204      	movs	r2, #4
 8006eca:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d114      	bne.n	8006efe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006edc:	e00f      	b.n	8006efe <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d10a      	bne.n	8006efe <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2208      	movs	r2, #8
 8006eec:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d103      	bne.n	8006efe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f7ff ff42 	bl	8006d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	771a      	strb	r2, [r3, #28]
}
 8006f0a:	bf00      	nop
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b084      	sub	sp, #16
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d103      	bne.n	8006f32 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	771a      	strb	r2, [r3, #28]
 8006f30:	e019      	b.n	8006f66 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d103      	bne.n	8006f44 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2202      	movs	r2, #2
 8006f40:	771a      	strb	r2, [r3, #28]
 8006f42:	e010      	b.n	8006f66 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d103      	bne.n	8006f56 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2204      	movs	r2, #4
 8006f52:	771a      	strb	r2, [r3, #28]
 8006f54:	e007      	b.n	8006f66 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d102      	bne.n	8006f66 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2208      	movs	r2, #8
 8006f64:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f7ff ff18 	bl	8006d9c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	771a      	strb	r2, [r3, #28]
}
 8006f72:	bf00      	nop
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
	...

08006f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a3c      	ldr	r2, [pc, #240]	; (8007080 <TIM_Base_SetConfig+0x104>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d00f      	beq.n	8006fb4 <TIM_Base_SetConfig+0x38>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f9a:	d00b      	beq.n	8006fb4 <TIM_Base_SetConfig+0x38>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a39      	ldr	r2, [pc, #228]	; (8007084 <TIM_Base_SetConfig+0x108>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d007      	beq.n	8006fb4 <TIM_Base_SetConfig+0x38>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a38      	ldr	r2, [pc, #224]	; (8007088 <TIM_Base_SetConfig+0x10c>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d003      	beq.n	8006fb4 <TIM_Base_SetConfig+0x38>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a37      	ldr	r2, [pc, #220]	; (800708c <TIM_Base_SetConfig+0x110>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d108      	bne.n	8006fc6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a2d      	ldr	r2, [pc, #180]	; (8007080 <TIM_Base_SetConfig+0x104>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d01b      	beq.n	8007006 <TIM_Base_SetConfig+0x8a>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fd4:	d017      	beq.n	8007006 <TIM_Base_SetConfig+0x8a>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a2a      	ldr	r2, [pc, #168]	; (8007084 <TIM_Base_SetConfig+0x108>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d013      	beq.n	8007006 <TIM_Base_SetConfig+0x8a>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a29      	ldr	r2, [pc, #164]	; (8007088 <TIM_Base_SetConfig+0x10c>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d00f      	beq.n	8007006 <TIM_Base_SetConfig+0x8a>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a28      	ldr	r2, [pc, #160]	; (800708c <TIM_Base_SetConfig+0x110>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d00b      	beq.n	8007006 <TIM_Base_SetConfig+0x8a>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a27      	ldr	r2, [pc, #156]	; (8007090 <TIM_Base_SetConfig+0x114>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d007      	beq.n	8007006 <TIM_Base_SetConfig+0x8a>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a26      	ldr	r2, [pc, #152]	; (8007094 <TIM_Base_SetConfig+0x118>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d003      	beq.n	8007006 <TIM_Base_SetConfig+0x8a>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a25      	ldr	r2, [pc, #148]	; (8007098 <TIM_Base_SetConfig+0x11c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d108      	bne.n	8007018 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800700c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	4313      	orrs	r3, r2
 8007016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	4313      	orrs	r3, r2
 8007024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a10      	ldr	r2, [pc, #64]	; (8007080 <TIM_Base_SetConfig+0x104>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d00f      	beq.n	8007064 <TIM_Base_SetConfig+0xe8>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a11      	ldr	r2, [pc, #68]	; (800708c <TIM_Base_SetConfig+0x110>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d00b      	beq.n	8007064 <TIM_Base_SetConfig+0xe8>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a10      	ldr	r2, [pc, #64]	; (8007090 <TIM_Base_SetConfig+0x114>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d007      	beq.n	8007064 <TIM_Base_SetConfig+0xe8>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a0f      	ldr	r2, [pc, #60]	; (8007094 <TIM_Base_SetConfig+0x118>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d003      	beq.n	8007064 <TIM_Base_SetConfig+0xe8>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a0e      	ldr	r2, [pc, #56]	; (8007098 <TIM_Base_SetConfig+0x11c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d103      	bne.n	800706c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	691a      	ldr	r2, [r3, #16]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	615a      	str	r2, [r3, #20]
}
 8007072:	bf00      	nop
 8007074:	3714      	adds	r7, #20
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	40012c00 	.word	0x40012c00
 8007084:	40000400 	.word	0x40000400
 8007088:	40000800 	.word	0x40000800
 800708c:	40013400 	.word	0x40013400
 8007090:	40014000 	.word	0x40014000
 8007094:	40014400 	.word	0x40014400
 8007098:	40014800 	.word	0x40014800

0800709c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	f023 0201 	bic.w	r2, r3, #1
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f023 0303 	bic.w	r3, r3, #3
 80070d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	4313      	orrs	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f023 0302 	bic.w	r3, r3, #2
 80070e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a40      	ldr	r2, [pc, #256]	; (80071f8 <TIM_OC1_SetConfig+0x15c>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d00f      	beq.n	800711c <TIM_OC1_SetConfig+0x80>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a3f      	ldr	r2, [pc, #252]	; (80071fc <TIM_OC1_SetConfig+0x160>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d00b      	beq.n	800711c <TIM_OC1_SetConfig+0x80>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a3e      	ldr	r2, [pc, #248]	; (8007200 <TIM_OC1_SetConfig+0x164>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d007      	beq.n	800711c <TIM_OC1_SetConfig+0x80>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a3d      	ldr	r2, [pc, #244]	; (8007204 <TIM_OC1_SetConfig+0x168>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d003      	beq.n	800711c <TIM_OC1_SetConfig+0x80>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a3c      	ldr	r2, [pc, #240]	; (8007208 <TIM_OC1_SetConfig+0x16c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d119      	bne.n	8007150 <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d008      	beq.n	8007136 <TIM_OC1_SetConfig+0x9a>
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	2b08      	cmp	r3, #8
 800712a:	d004      	beq.n	8007136 <TIM_OC1_SetConfig+0x9a>
 800712c:	f641 21d6 	movw	r1, #6870	; 0x1ad6
 8007130:	4836      	ldr	r0, [pc, #216]	; (800720c <TIM_OC1_SetConfig+0x170>)
 8007132:	f7fa faa6 	bl	8001682 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f023 0308 	bic.w	r3, r3, #8
 800713c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	4313      	orrs	r3, r2
 8007146:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	f023 0304 	bic.w	r3, r3, #4
 800714e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a29      	ldr	r2, [pc, #164]	; (80071f8 <TIM_OC1_SetConfig+0x15c>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d00f      	beq.n	8007178 <TIM_OC1_SetConfig+0xdc>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a28      	ldr	r2, [pc, #160]	; (80071fc <TIM_OC1_SetConfig+0x160>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d00b      	beq.n	8007178 <TIM_OC1_SetConfig+0xdc>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a27      	ldr	r2, [pc, #156]	; (8007200 <TIM_OC1_SetConfig+0x164>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d007      	beq.n	8007178 <TIM_OC1_SetConfig+0xdc>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a26      	ldr	r2, [pc, #152]	; (8007204 <TIM_OC1_SetConfig+0x168>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d003      	beq.n	8007178 <TIM_OC1_SetConfig+0xdc>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a25      	ldr	r2, [pc, #148]	; (8007208 <TIM_OC1_SetConfig+0x16c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d12d      	bne.n	80071d4 <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007180:	d008      	beq.n	8007194 <TIM_OC1_SetConfig+0xf8>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d004      	beq.n	8007194 <TIM_OC1_SetConfig+0xf8>
 800718a:	f641 21e3 	movw	r1, #6883	; 0x1ae3
 800718e:	481f      	ldr	r0, [pc, #124]	; (800720c <TIM_OC1_SetConfig+0x170>)
 8007190:	f7fa fa77 	bl	8001682 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800719c:	d008      	beq.n	80071b0 <TIM_OC1_SetConfig+0x114>
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d004      	beq.n	80071b0 <TIM_OC1_SetConfig+0x114>
 80071a6:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 80071aa:	4818      	ldr	r0, [pc, #96]	; (800720c <TIM_OC1_SetConfig+0x170>)
 80071ac:	f7fa fa69 	bl	8001682 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	621a      	str	r2, [r3, #32]
}
 80071ee:	bf00      	nop
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	40012c00 	.word	0x40012c00
 80071fc:	40013400 	.word	0x40013400
 8007200:	40014000 	.word	0x40014000
 8007204:	40014400 	.word	0x40014400
 8007208:	40014800 	.word	0x40014800
 800720c:	08009738 	.word	0x08009738

08007210 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	f023 0210 	bic.w	r2, r3, #16
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800723e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800724a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	021b      	lsls	r3, r3, #8
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	4313      	orrs	r3, r2
 8007256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	f023 0320 	bic.w	r3, r3, #32
 800725e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	011b      	lsls	r3, r3, #4
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	4313      	orrs	r3, r2
 800726a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a3b      	ldr	r2, [pc, #236]	; (800735c <TIM_OC2_SetConfig+0x14c>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d003      	beq.n	800727c <TIM_OC2_SetConfig+0x6c>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a3a      	ldr	r2, [pc, #232]	; (8007360 <TIM_OC2_SetConfig+0x150>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d11a      	bne.n	80072b2 <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d008      	beq.n	8007296 <TIM_OC2_SetConfig+0x86>
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	2b08      	cmp	r3, #8
 800728a:	d004      	beq.n	8007296 <TIM_OC2_SetConfig+0x86>
 800728c:	f641 3121 	movw	r1, #6945	; 0x1b21
 8007290:	4834      	ldr	r0, [pc, #208]	; (8007364 <TIM_OC2_SetConfig+0x154>)
 8007292:	f7fa f9f6 	bl	8001682 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800729c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	011b      	lsls	r3, r3, #4
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072b0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a29      	ldr	r2, [pc, #164]	; (800735c <TIM_OC2_SetConfig+0x14c>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d00f      	beq.n	80072da <TIM_OC2_SetConfig+0xca>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a28      	ldr	r2, [pc, #160]	; (8007360 <TIM_OC2_SetConfig+0x150>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d00b      	beq.n	80072da <TIM_OC2_SetConfig+0xca>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a28      	ldr	r2, [pc, #160]	; (8007368 <TIM_OC2_SetConfig+0x158>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d007      	beq.n	80072da <TIM_OC2_SetConfig+0xca>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a27      	ldr	r2, [pc, #156]	; (800736c <TIM_OC2_SetConfig+0x15c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d003      	beq.n	80072da <TIM_OC2_SetConfig+0xca>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a26      	ldr	r2, [pc, #152]	; (8007370 <TIM_OC2_SetConfig+0x160>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d12f      	bne.n	800733a <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072e2:	d008      	beq.n	80072f6 <TIM_OC2_SetConfig+0xe6>
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d004      	beq.n	80072f6 <TIM_OC2_SetConfig+0xe6>
 80072ec:	f641 312f 	movw	r1, #6959	; 0x1b2f
 80072f0:	481c      	ldr	r0, [pc, #112]	; (8007364 <TIM_OC2_SetConfig+0x154>)
 80072f2:	f7fa f9c6 	bl	8001682 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072fe:	d008      	beq.n	8007312 <TIM_OC2_SetConfig+0x102>
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d004      	beq.n	8007312 <TIM_OC2_SetConfig+0x102>
 8007308:	f641 3130 	movw	r1, #6960	; 0x1b30
 800730c:	4815      	ldr	r0, [pc, #84]	; (8007364 <TIM_OC2_SetConfig+0x154>)
 800730e:	f7fa f9b8 	bl	8001682 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	4313      	orrs	r3, r2
 800732c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	4313      	orrs	r3, r2
 8007338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	621a      	str	r2, [r3, #32]
}
 8007354:	bf00      	nop
 8007356:	3718      	adds	r7, #24
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	40012c00 	.word	0x40012c00
 8007360:	40013400 	.word	0x40013400
 8007364:	08009738 	.word	0x08009738
 8007368:	40014000 	.word	0x40014000
 800736c:	40014400 	.word	0x40014400
 8007370:	40014800 	.word	0x40014800

08007374 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f023 0303 	bic.w	r3, r3, #3
 80073ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	021b      	lsls	r3, r3, #8
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a3b      	ldr	r2, [pc, #236]	; (80074c0 <TIM_OC3_SetConfig+0x14c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d003      	beq.n	80073de <TIM_OC3_SetConfig+0x6a>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a3a      	ldr	r2, [pc, #232]	; (80074c4 <TIM_OC3_SetConfig+0x150>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d11a      	bne.n	8007414 <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d008      	beq.n	80073f8 <TIM_OC3_SetConfig+0x84>
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	2b08      	cmp	r3, #8
 80073ec:	d004      	beq.n	80073f8 <TIM_OC3_SetConfig+0x84>
 80073ee:	f641 316c 	movw	r1, #7020	; 0x1b6c
 80073f2:	4835      	ldr	r0, [pc, #212]	; (80074c8 <TIM_OC3_SetConfig+0x154>)
 80073f4:	f7fa f945 	bl	8001682 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	021b      	lsls	r3, r3, #8
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	4313      	orrs	r3, r2
 800740a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007412:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a2a      	ldr	r2, [pc, #168]	; (80074c0 <TIM_OC3_SetConfig+0x14c>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d00f      	beq.n	800743c <TIM_OC3_SetConfig+0xc8>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a29      	ldr	r2, [pc, #164]	; (80074c4 <TIM_OC3_SetConfig+0x150>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d00b      	beq.n	800743c <TIM_OC3_SetConfig+0xc8>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a29      	ldr	r2, [pc, #164]	; (80074cc <TIM_OC3_SetConfig+0x158>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d007      	beq.n	800743c <TIM_OC3_SetConfig+0xc8>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a28      	ldr	r2, [pc, #160]	; (80074d0 <TIM_OC3_SetConfig+0x15c>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d003      	beq.n	800743c <TIM_OC3_SetConfig+0xc8>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a27      	ldr	r2, [pc, #156]	; (80074d4 <TIM_OC3_SetConfig+0x160>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d12f      	bne.n	800749c <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007444:	d008      	beq.n	8007458 <TIM_OC3_SetConfig+0xe4>
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d004      	beq.n	8007458 <TIM_OC3_SetConfig+0xe4>
 800744e:	f641 3179 	movw	r1, #7033	; 0x1b79
 8007452:	481d      	ldr	r0, [pc, #116]	; (80074c8 <TIM_OC3_SetConfig+0x154>)
 8007454:	f7fa f915 	bl	8001682 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	695b      	ldr	r3, [r3, #20]
 800745c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007460:	d008      	beq.n	8007474 <TIM_OC3_SetConfig+0x100>
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d004      	beq.n	8007474 <TIM_OC3_SetConfig+0x100>
 800746a:	f641 317a 	movw	r1, #7034	; 0x1b7a
 800746e:	4816      	ldr	r0, [pc, #88]	; (80074c8 <TIM_OC3_SetConfig+0x154>)
 8007470:	f7fa f907 	bl	8001682 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800747a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007482:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	011b      	lsls	r3, r3, #4
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	4313      	orrs	r3, r2
 800748e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	011b      	lsls	r3, r3, #4
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	4313      	orrs	r3, r2
 800749a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	621a      	str	r2, [r3, #32]
}
 80074b6:	bf00      	nop
 80074b8:	3718      	adds	r7, #24
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	40012c00 	.word	0x40012c00
 80074c4:	40013400 	.word	0x40013400
 80074c8:	08009738 	.word	0x08009738
 80074cc:	40014000 	.word	0x40014000
 80074d0:	40014400 	.word	0x40014400
 80074d4:	40014800 	.word	0x40014800

080074d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	69db      	ldr	r3, [r3, #28]
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800750a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	021b      	lsls	r3, r3, #8
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	4313      	orrs	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007526:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	031b      	lsls	r3, r3, #12
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	4313      	orrs	r3, r2
 8007532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a3b      	ldr	r2, [pc, #236]	; (8007624 <TIM_OC4_SetConfig+0x14c>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d003      	beq.n	8007544 <TIM_OC4_SetConfig+0x6c>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a3a      	ldr	r2, [pc, #232]	; (8007628 <TIM_OC4_SetConfig+0x150>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d11a      	bne.n	800757a <TIM_OC4_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d008      	beq.n	800755e <TIM_OC4_SetConfig+0x86>
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	2b08      	cmp	r3, #8
 8007552:	d004      	beq.n	800755e <TIM_OC4_SetConfig+0x86>
 8007554:	f641 31b7 	movw	r1, #7095	; 0x1bb7
 8007558:	4834      	ldr	r0, [pc, #208]	; (800762c <TIM_OC4_SetConfig+0x154>)
 800755a:	f7fa f892 	bl	8001682 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007564:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	031b      	lsls	r3, r3, #12
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	4313      	orrs	r3, r2
 8007570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a29      	ldr	r2, [pc, #164]	; (8007624 <TIM_OC4_SetConfig+0x14c>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d00f      	beq.n	80075a2 <TIM_OC4_SetConfig+0xca>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a28      	ldr	r2, [pc, #160]	; (8007628 <TIM_OC4_SetConfig+0x150>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d00b      	beq.n	80075a2 <TIM_OC4_SetConfig+0xca>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a28      	ldr	r2, [pc, #160]	; (8007630 <TIM_OC4_SetConfig+0x158>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d007      	beq.n	80075a2 <TIM_OC4_SetConfig+0xca>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a27      	ldr	r2, [pc, #156]	; (8007634 <TIM_OC4_SetConfig+0x15c>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d003      	beq.n	80075a2 <TIM_OC4_SetConfig+0xca>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a26      	ldr	r2, [pc, #152]	; (8007638 <TIM_OC4_SetConfig+0x160>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d12f      	bne.n	8007602 <TIM_OC4_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075aa:	d008      	beq.n	80075be <TIM_OC4_SetConfig+0xe6>
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d004      	beq.n	80075be <TIM_OC4_SetConfig+0xe6>
 80075b4:	f641 31c4 	movw	r1, #7108	; 0x1bc4
 80075b8:	481c      	ldr	r0, [pc, #112]	; (800762c <TIM_OC4_SetConfig+0x154>)
 80075ba:	f7fa f862 	bl	8001682 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075c6:	d008      	beq.n	80075da <TIM_OC4_SetConfig+0x102>
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	695b      	ldr	r3, [r3, #20]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d004      	beq.n	80075da <TIM_OC4_SetConfig+0x102>
 80075d0:	f641 31c5 	movw	r1, #7109	; 0x1bc5
 80075d4:	4815      	ldr	r0, [pc, #84]	; (800762c <TIM_OC4_SetConfig+0x154>)
 80075d6:	f7fa f854 	bl	8001682 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075e0:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075e8:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	019b      	lsls	r3, r3, #6
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	019b      	lsls	r3, r3, #6
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	4313      	orrs	r3, r2
 8007600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	621a      	str	r2, [r3, #32]
}
 800761c:	bf00      	nop
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	40012c00 	.word	0x40012c00
 8007628:	40013400 	.word	0x40013400
 800762c:	08009738 	.word	0x08009738
 8007630:	40014000 	.word	0x40014000
 8007634:	40014400 	.word	0x40014400
 8007638:	40014800 	.word	0x40014800

0800763c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800763c:	b480      	push	{r7}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800766a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800766e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	4313      	orrs	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007680:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	041b      	lsls	r3, r3, #16
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	4313      	orrs	r3, r2
 800768c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a17      	ldr	r2, [pc, #92]	; (80076f0 <TIM_OC5_SetConfig+0xb4>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d00f      	beq.n	80076b6 <TIM_OC5_SetConfig+0x7a>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a16      	ldr	r2, [pc, #88]	; (80076f4 <TIM_OC5_SetConfig+0xb8>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d00b      	beq.n	80076b6 <TIM_OC5_SetConfig+0x7a>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a15      	ldr	r2, [pc, #84]	; (80076f8 <TIM_OC5_SetConfig+0xbc>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d007      	beq.n	80076b6 <TIM_OC5_SetConfig+0x7a>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a14      	ldr	r2, [pc, #80]	; (80076fc <TIM_OC5_SetConfig+0xc0>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d003      	beq.n	80076b6 <TIM_OC5_SetConfig+0x7a>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a13      	ldr	r2, [pc, #76]	; (8007700 <TIM_OC5_SetConfig+0xc4>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d109      	bne.n	80076ca <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	021b      	lsls	r3, r3, #8
 80076c4:	697a      	ldr	r2, [r7, #20]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	693a      	ldr	r2, [r7, #16]
 80076e2:	621a      	str	r2, [r3, #32]
}
 80076e4:	bf00      	nop
 80076e6:	371c      	adds	r7, #28
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	40012c00 	.word	0x40012c00
 80076f4:	40013400 	.word	0x40013400
 80076f8:	40014000 	.word	0x40014000
 80076fc:	40014400 	.word	0x40014400
 8007700:	40014800 	.word	0x40014800

08007704 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007704:	b480      	push	{r7}
 8007706:	b087      	sub	sp, #28
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800772a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	021b      	lsls	r3, r3, #8
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	4313      	orrs	r3, r2
 8007742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800774a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	051b      	lsls	r3, r3, #20
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	4313      	orrs	r3, r2
 8007756:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a18      	ldr	r2, [pc, #96]	; (80077bc <TIM_OC6_SetConfig+0xb8>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d00f      	beq.n	8007780 <TIM_OC6_SetConfig+0x7c>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a17      	ldr	r2, [pc, #92]	; (80077c0 <TIM_OC6_SetConfig+0xbc>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d00b      	beq.n	8007780 <TIM_OC6_SetConfig+0x7c>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a16      	ldr	r2, [pc, #88]	; (80077c4 <TIM_OC6_SetConfig+0xc0>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d007      	beq.n	8007780 <TIM_OC6_SetConfig+0x7c>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a15      	ldr	r2, [pc, #84]	; (80077c8 <TIM_OC6_SetConfig+0xc4>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d003      	beq.n	8007780 <TIM_OC6_SetConfig+0x7c>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a14      	ldr	r2, [pc, #80]	; (80077cc <TIM_OC6_SetConfig+0xc8>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d109      	bne.n	8007794 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007786:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	029b      	lsls	r3, r3, #10
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	4313      	orrs	r3, r2
 8007792:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	685a      	ldr	r2, [r3, #4]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	621a      	str	r2, [r3, #32]
}
 80077ae:	bf00      	nop
 80077b0:	371c      	adds	r7, #28
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	40012c00 	.word	0x40012c00
 80077c0:	40013400 	.word	0x40013400
 80077c4:	40014000 	.word	0x40014000
 80077c8:	40014400 	.word	0x40014400
 80077cc:	40014800 	.word	0x40014800

080077d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	4a2d      	ldr	r2, [pc, #180]	; (8007894 <TIM_CCxChannelCmd+0xc4>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d020      	beq.n	8007826 <TIM_CCxChannelCmd+0x56>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ea:	d01c      	beq.n	8007826 <TIM_CCxChannelCmd+0x56>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4a2a      	ldr	r2, [pc, #168]	; (8007898 <TIM_CCxChannelCmd+0xc8>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d018      	beq.n	8007826 <TIM_CCxChannelCmd+0x56>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4a29      	ldr	r2, [pc, #164]	; (800789c <TIM_CCxChannelCmd+0xcc>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d014      	beq.n	8007826 <TIM_CCxChannelCmd+0x56>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4a28      	ldr	r2, [pc, #160]	; (80078a0 <TIM_CCxChannelCmd+0xd0>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d010      	beq.n	8007826 <TIM_CCxChannelCmd+0x56>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4a27      	ldr	r2, [pc, #156]	; (80078a4 <TIM_CCxChannelCmd+0xd4>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d00c      	beq.n	8007826 <TIM_CCxChannelCmd+0x56>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4a26      	ldr	r2, [pc, #152]	; (80078a8 <TIM_CCxChannelCmd+0xd8>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d008      	beq.n	8007826 <TIM_CCxChannelCmd+0x56>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4a25      	ldr	r2, [pc, #148]	; (80078ac <TIM_CCxChannelCmd+0xdc>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d004      	beq.n	8007826 <TIM_CCxChannelCmd+0x56>
 800781c:	f641 6135 	movw	r1, #7733	; 0x1e35
 8007820:	4823      	ldr	r0, [pc, #140]	; (80078b0 <TIM_CCxChannelCmd+0xe0>)
 8007822:	f7f9 ff2e 	bl	8001682 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d016      	beq.n	800785a <TIM_CCxChannelCmd+0x8a>
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	2b04      	cmp	r3, #4
 8007830:	d013      	beq.n	800785a <TIM_CCxChannelCmd+0x8a>
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	2b08      	cmp	r3, #8
 8007836:	d010      	beq.n	800785a <TIM_CCxChannelCmd+0x8a>
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	2b0c      	cmp	r3, #12
 800783c:	d00d      	beq.n	800785a <TIM_CCxChannelCmd+0x8a>
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2b10      	cmp	r3, #16
 8007842:	d00a      	beq.n	800785a <TIM_CCxChannelCmd+0x8a>
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	2b14      	cmp	r3, #20
 8007848:	d007      	beq.n	800785a <TIM_CCxChannelCmd+0x8a>
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2b3c      	cmp	r3, #60	; 0x3c
 800784e:	d004      	beq.n	800785a <TIM_CCxChannelCmd+0x8a>
 8007850:	f641 6136 	movw	r1, #7734	; 0x1e36
 8007854:	4816      	ldr	r0, [pc, #88]	; (80078b0 <TIM_CCxChannelCmd+0xe0>)
 8007856:	f7f9 ff14 	bl	8001682 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	f003 031f 	and.w	r3, r3, #31
 8007860:	2201      	movs	r2, #1
 8007862:	fa02 f303 	lsl.w	r3, r2, r3
 8007866:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6a1a      	ldr	r2, [r3, #32]
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	43db      	mvns	r3, r3
 8007870:	401a      	ands	r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6a1a      	ldr	r2, [r3, #32]
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	f003 031f 	and.w	r3, r3, #31
 8007880:	6879      	ldr	r1, [r7, #4]
 8007882:	fa01 f303 	lsl.w	r3, r1, r3
 8007886:	431a      	orrs	r2, r3
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	621a      	str	r2, [r3, #32]
}
 800788c:	bf00      	nop
 800788e:	3718      	adds	r7, #24
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	40012c00 	.word	0x40012c00
 8007898:	40000400 	.word	0x40000400
 800789c:	40000800 	.word	0x40000800
 80078a0:	40013400 	.word	0x40013400
 80078a4:	40014000 	.word	0x40014000
 80078a8:	40014400 	.word	0x40014400
 80078ac:	40014800 	.word	0x40014800
 80078b0:	08009738 	.word	0x08009738

080078b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a96      	ldr	r2, [pc, #600]	; (8007b1c <HAL_TIMEx_MasterConfigSynchronization+0x268>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d027      	beq.n	8007918 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d0:	d022      	beq.n	8007918 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a92      	ldr	r2, [pc, #584]	; (8007b20 <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d01d      	beq.n	8007918 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a90      	ldr	r2, [pc, #576]	; (8007b24 <HAL_TIMEx_MasterConfigSynchronization+0x270>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d018      	beq.n	8007918 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a8f      	ldr	r2, [pc, #572]	; (8007b28 <HAL_TIMEx_MasterConfigSynchronization+0x274>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d013      	beq.n	8007918 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a8d      	ldr	r2, [pc, #564]	; (8007b2c <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d00e      	beq.n	8007918 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a8c      	ldr	r2, [pc, #560]	; (8007b30 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d009      	beq.n	8007918 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a8a      	ldr	r2, [pc, #552]	; (8007b34 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d004      	beq.n	8007918 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800790e:	f44f 61fd 	mov.w	r1, #2024	; 0x7e8
 8007912:	4889      	ldr	r0, [pc, #548]	; (8007b38 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 8007914:	f7f9 feb5 	bl	8001682 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d025      	beq.n	800796c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b10      	cmp	r3, #16
 8007926:	d021      	beq.n	800796c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b20      	cmp	r3, #32
 800792e:	d01d      	beq.n	800796c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2b30      	cmp	r3, #48	; 0x30
 8007936:	d019      	beq.n	800796c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b40      	cmp	r3, #64	; 0x40
 800793e:	d015      	beq.n	800796c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b50      	cmp	r3, #80	; 0x50
 8007946:	d011      	beq.n	800796c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b60      	cmp	r3, #96	; 0x60
 800794e:	d00d      	beq.n	800796c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b70      	cmp	r3, #112	; 0x70
 8007956:	d009      	beq.n	800796c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007960:	d004      	beq.n	800796c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007962:	f240 71e9 	movw	r1, #2025	; 0x7e9
 8007966:	4874      	ldr	r0, [pc, #464]	; (8007b38 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 8007968:	f7f9 fe8b 	bl	8001682 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	2b80      	cmp	r3, #128	; 0x80
 8007972:	d008      	beq.n	8007986 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d004      	beq.n	8007986 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800797c:	f240 71ea 	movw	r1, #2026	; 0x7ea
 8007980:	486d      	ldr	r0, [pc, #436]	; (8007b38 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 8007982:	f7f9 fe7e 	bl	8001682 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800798c:	2b01      	cmp	r3, #1
 800798e:	d101      	bne.n	8007994 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007990:	2302      	movs	r3, #2
 8007992:	e0be      	b.n	8007b12 <HAL_TIMEx_MasterConfigSynchronization+0x25e>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2202      	movs	r2, #2
 80079a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a58      	ldr	r2, [pc, #352]	; (8007b1c <HAL_TIMEx_MasterConfigSynchronization+0x268>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d004      	beq.n	80079c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a5b      	ldr	r2, [pc, #364]	; (8007b30 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d161      	bne.n	8007a8c <HAL_TIMEx_MasterConfigSynchronization+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d054      	beq.n	8007a7a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079d8:	d04f      	beq.n	8007a7a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079e2:	d04a      	beq.n	8007a7a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079ec:	d045      	beq.n	8007a7a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079f6:	d040      	beq.n	8007a7a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8007a00:	d03b      	beq.n	8007a7a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a0a:	d036      	beq.n	8007a7a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a14:	d031      	beq.n	8007a7a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8007a1e:	d02c      	beq.n	8007a7a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a28:	d027      	beq.n	8007a7a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8007a32:	d022      	beq.n	8007a7a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007a3c:	d01d      	beq.n	8007a7a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8007a46:	d018      	beq.n	8007a7a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007a50:	d013      	beq.n	8007a7a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8007a5a:	d00e      	beq.n	8007a7a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8007a64:	d009      	beq.n	8007a7a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8007a6e:	d004      	beq.n	8007a7a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8007a70:	f240 71fc 	movw	r1, #2044	; 0x7fc
 8007a74:	4830      	ldr	r0, [pc, #192]	; (8007b38 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 8007a76:	f7f9 fe04 	bl	8001682 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a1b      	ldr	r2, [pc, #108]	; (8007b1c <HAL_TIMEx_MasterConfigSynchronization+0x268>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d018      	beq.n	8007ae6 <HAL_TIMEx_MasterConfigSynchronization+0x232>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007abc:	d013      	beq.n	8007ae6 <HAL_TIMEx_MasterConfigSynchronization+0x232>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a17      	ldr	r2, [pc, #92]	; (8007b20 <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d00e      	beq.n	8007ae6 <HAL_TIMEx_MasterConfigSynchronization+0x232>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a15      	ldr	r2, [pc, #84]	; (8007b24 <HAL_TIMEx_MasterConfigSynchronization+0x270>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d009      	beq.n	8007ae6 <HAL_TIMEx_MasterConfigSynchronization+0x232>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a16      	ldr	r2, [pc, #88]	; (8007b30 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d004      	beq.n	8007ae6 <HAL_TIMEx_MasterConfigSynchronization+0x232>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a14      	ldr	r2, [pc, #80]	; (8007b34 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d10c      	bne.n	8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x24c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	40012c00 	.word	0x40012c00
 8007b20:	40000400 	.word	0x40000400
 8007b24:	40000800 	.word	0x40000800
 8007b28:	40001000 	.word	0x40001000
 8007b2c:	40001400 	.word	0x40001400
 8007b30:	40013400 	.word	0x40013400
 8007b34:	40014000 	.word	0x40014000
 8007b38:	08009770 	.word	0x08009770

08007b3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a49      	ldr	r2, [pc, #292]	; (8007c74 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d018      	beq.n	8007b86 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a47      	ldr	r2, [pc, #284]	; (8007c78 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d013      	beq.n	8007b86 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a46      	ldr	r2, [pc, #280]	; (8007c7c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d00e      	beq.n	8007b86 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a44      	ldr	r2, [pc, #272]	; (8007c80 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d009      	beq.n	8007b86 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a43      	ldr	r2, [pc, #268]	; (8007c84 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d004      	beq.n	8007b86 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8007b7c:	f640 0131 	movw	r1, #2097	; 0x831
 8007b80:	4841      	ldr	r0, [pc, #260]	; (8007c88 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8007b82:	f7f9 fd7e 	bl	8001682 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b8e:	d008      	beq.n	8007ba2 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d004      	beq.n	8007ba2 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8007b98:	f640 0132 	movw	r1, #2098	; 0x832
 8007b9c:	483a      	ldr	r0, [pc, #232]	; (8007c88 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8007b9e:	f7f9 fd70 	bl	8001682 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007baa:	d008      	beq.n	8007bbe <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d004      	beq.n	8007bbe <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8007bb4:	f640 0133 	movw	r1, #2099	; 0x833
 8007bb8:	4833      	ldr	r0, [pc, #204]	; (8007c88 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8007bba:	f7f9 fd62 	bl	8001682 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d013      	beq.n	8007bee <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bce:	d00e      	beq.n	8007bee <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bd8:	d009      	beq.n	8007bee <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007be2:	d004      	beq.n	8007bee <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8007be4:	f640 0134 	movw	r1, #2100	; 0x834
 8007be8:	4827      	ldr	r0, [pc, #156]	; (8007c88 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8007bea:	f7f9 fd4a 	bl	8001682 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	2bff      	cmp	r3, #255	; 0xff
 8007bf4:	d904      	bls.n	8007c00 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>
 8007bf6:	f640 0135 	movw	r1, #2101	; 0x835
 8007bfa:	4823      	ldr	r0, [pc, #140]	; (8007c88 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8007bfc:	f7f9 fd41 	bl	8001682 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c08:	d008      	beq.n	8007c1c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d004      	beq.n	8007c1c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007c12:	f640 0136 	movw	r1, #2102	; 0x836
 8007c16:	481c      	ldr	r0, [pc, #112]	; (8007c88 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8007c18:	f7f9 fd33 	bl	8001682 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d009      	beq.n	8007c38 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c2c:	d004      	beq.n	8007c38 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8007c2e:	f640 0137 	movw	r1, #2103	; 0x837
 8007c32:	4815      	ldr	r0, [pc, #84]	; (8007c88 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8007c34:	f7f9 fd25 	bl	8001682 <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	2b0f      	cmp	r3, #15
 8007c3e:	d904      	bls.n	8007c4a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007c40:	f640 0138 	movw	r1, #2104	; 0x838
 8007c44:	4810      	ldr	r0, [pc, #64]	; (8007c88 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8007c46:	f7f9 fd1c 	bl	8001682 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c52:	d008      	beq.n	8007c66 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d004      	beq.n	8007c66 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007c5c:	f640 0139 	movw	r1, #2105	; 0x839
 8007c60:	4809      	ldr	r0, [pc, #36]	; (8007c88 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8007c62:	f7f9 fd0e 	bl	8001682 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d10d      	bne.n	8007c8c <HAL_TIMEx_ConfigBreakDeadTime+0x150>
 8007c70:	2302      	movs	r3, #2
 8007c72:	e0d4      	b.n	8007e1e <HAL_TIMEx_ConfigBreakDeadTime+0x2e2>
 8007c74:	40012c00 	.word	0x40012c00
 8007c78:	40013400 	.word	0x40013400
 8007c7c:	40014000 	.word	0x40014000
 8007c80:	40014400 	.word	0x40014400
 8007c84:	40014800 	.word	0x40014800
 8007c88:	08009770 	.word	0x08009770
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	041b      	lsls	r3, r3, #16
 8007d02:	4313      	orrs	r3, r2
 8007d04:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a47      	ldr	r2, [pc, #284]	; (8007e28 <HAL_TIMEx_ConfigBreakDeadTime+0x2ec>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d004      	beq.n	8007d1a <HAL_TIMEx_ConfigBreakDeadTime+0x1de>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a45      	ldr	r2, [pc, #276]	; (8007e2c <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d114      	bne.n	8007d44 <HAL_TIMEx_ConfigBreakDeadTime+0x208>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	69db      	ldr	r3, [r3, #28]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d009      	beq.n	8007d36 <HAL_TIMEx_ConfigBreakDeadTime+0x1fa>
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	69db      	ldr	r3, [r3, #28]
 8007d26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d2a:	d004      	beq.n	8007d36 <HAL_TIMEx_ConfigBreakDeadTime+0x1fa>
 8007d2c:	f640 014e 	movw	r1, #2126	; 0x84e
 8007d30:	483f      	ldr	r0, [pc, #252]	; (8007e30 <HAL_TIMEx_ConfigBreakDeadTime+0x2f4>)
 8007d32:	f7f9 fca6 	bl	8001682 <assert_failed>

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	69db      	ldr	r3, [r3, #28]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a37      	ldr	r2, [pc, #220]	; (8007e28 <HAL_TIMEx_ConfigBreakDeadTime+0x2ec>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d004      	beq.n	8007d58 <HAL_TIMEx_ConfigBreakDeadTime+0x21c>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a36      	ldr	r2, [pc, #216]	; (8007e2c <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d159      	bne.n	8007e0c <HAL_TIMEx_ConfigBreakDeadTime+0x2d0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	6a1b      	ldr	r3, [r3, #32]
 8007d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d60:	d008      	beq.n	8007d74 <HAL_TIMEx_ConfigBreakDeadTime+0x238>
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	6a1b      	ldr	r3, [r3, #32]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d004      	beq.n	8007d74 <HAL_TIMEx_ConfigBreakDeadTime+0x238>
 8007d6a:	f640 0157 	movw	r1, #2135	; 0x857
 8007d6e:	4830      	ldr	r0, [pc, #192]	; (8007e30 <HAL_TIMEx_ConfigBreakDeadTime+0x2f4>)
 8007d70:	f7f9 fc87 	bl	8001682 <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d009      	beq.n	8007d90 <HAL_TIMEx_ConfigBreakDeadTime+0x254>
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d84:	d004      	beq.n	8007d90 <HAL_TIMEx_ConfigBreakDeadTime+0x254>
 8007d86:	f640 0158 	movw	r1, #2136	; 0x858
 8007d8a:	4829      	ldr	r0, [pc, #164]	; (8007e30 <HAL_TIMEx_ConfigBreakDeadTime+0x2f4>)
 8007d8c:	f7f9 fc79 	bl	8001682 <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d94:	2b0f      	cmp	r3, #15
 8007d96:	d904      	bls.n	8007da2 <HAL_TIMEx_ConfigBreakDeadTime+0x266>
 8007d98:	f640 0159 	movw	r1, #2137	; 0x859
 8007d9c:	4824      	ldr	r0, [pc, #144]	; (8007e30 <HAL_TIMEx_ConfigBreakDeadTime+0x2f4>)
 8007d9e:	f7f9 fc70 	bl	8001682 <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dac:	051b      	lsls	r3, r3, #20
 8007dae:	4313      	orrs	r3, r2
 8007db0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	6a1b      	ldr	r3, [r3, #32]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a15      	ldr	r2, [pc, #84]	; (8007e28 <HAL_TIMEx_ConfigBreakDeadTime+0x2ec>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d004      	beq.n	8007de2 <HAL_TIMEx_ConfigBreakDeadTime+0x2a6>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a13      	ldr	r2, [pc, #76]	; (8007e2c <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d114      	bne.n	8007e0c <HAL_TIMEx_ConfigBreakDeadTime+0x2d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d009      	beq.n	8007dfe <HAL_TIMEx_ConfigBreakDeadTime+0x2c2>
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007df2:	d004      	beq.n	8007dfe <HAL_TIMEx_ConfigBreakDeadTime+0x2c2>
 8007df4:	f640 0163 	movw	r1, #2147	; 0x863
 8007df8:	480d      	ldr	r0, [pc, #52]	; (8007e30 <HAL_TIMEx_ConfigBreakDeadTime+0x2f4>)
 8007dfa:	f7f9 fc42 	bl	8001682 <assert_failed>

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	40012c00 	.word	0x40012c00
 8007e2c:	40013400 	.word	0x40013400
 8007e30:	08009770 	.word	0x08009770

08007e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007ece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ed2:	2b84      	cmp	r3, #132	; 0x84
 8007ed4:	d005      	beq.n	8007ee2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007ed6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	4413      	add	r3, r2
 8007ede:	3303      	adds	r3, #3
 8007ee0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007ef4:	f000 fa58 	bl	80083a8 <vTaskStartScheduler>
  
  return osOK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	bd80      	pop	{r7, pc}

08007efe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007efe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f00:	b087      	sub	sp, #28
 8007f02:	af02      	add	r7, sp, #8
 8007f04:	6078      	str	r0, [r7, #4]
 8007f06:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685c      	ldr	r4, [r3, #4]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f14:	b29e      	uxth	r6, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7ff ffcf 	bl	8007ec0 <makeFreeRtosPriority>
 8007f22:	4602      	mov	r2, r0
 8007f24:	f107 030c 	add.w	r3, r7, #12
 8007f28:	9301      	str	r3, [sp, #4]
 8007f2a:	9200      	str	r2, [sp, #0]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	4632      	mov	r2, r6
 8007f30:	4629      	mov	r1, r5
 8007f32:	4620      	mov	r0, r4
 8007f34:	f000 f8d2 	bl	80080dc <xTaskCreate>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d001      	beq.n	8007f42 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	e000      	b.n	8007f44 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8007f42:	68fb      	ldr	r3, [r7, #12]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3714      	adds	r7, #20
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f4c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <osDelay+0x16>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	e000      	b.n	8007f64 <osDelay+0x18>
 8007f62:	2301      	movs	r3, #1
 8007f64:	4618      	mov	r0, r3
 8007f66:	f000 f9eb 	bl	8008340 <vTaskDelay>
  
  return osOK;
 8007f6a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f103 0208 	add.w	r2, r3, #8
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f04f 32ff 	mov.w	r2, #4294967295
 8007f8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f103 0208 	add.w	r2, r3, #8
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f103 0208 	add.w	r2, r3, #8
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007fc2:	bf00      	nop
 8007fc4:	370c      	adds	r7, #12
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b085      	sub	sp, #20
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	689a      	ldr	r2, [r3, #8]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	1c5a      	adds	r2, r3, #1
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	601a      	str	r2, [r3, #0]
}
 800800a:	bf00      	nop
 800800c:	3714      	adds	r7, #20
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr

08008016 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008016:	b480      	push	{r7}
 8008018:	b085      	sub	sp, #20
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802c:	d103      	bne.n	8008036 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	60fb      	str	r3, [r7, #12]
 8008034:	e00c      	b.n	8008050 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	3308      	adds	r3, #8
 800803a:	60fb      	str	r3, [r7, #12]
 800803c:	e002      	b.n	8008044 <vListInsert+0x2e>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	60fb      	str	r3, [r7, #12]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	429a      	cmp	r2, r3
 800804e:	d2f6      	bcs.n	800803e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	685a      	ldr	r2, [r3, #4]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	683a      	ldr	r2, [r7, #0]
 800805e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	683a      	ldr	r2, [r7, #0]
 800806a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	1c5a      	adds	r2, r3, #1
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	601a      	str	r2, [r3, #0]
}
 800807c:	bf00      	nop
 800807e:	3714      	adds	r7, #20
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	6892      	ldr	r2, [r2, #8]
 800809e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	6852      	ldr	r2, [r2, #4]
 80080a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d103      	bne.n	80080bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	689a      	ldr	r2, [r3, #8]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	1e5a      	subs	r2, r3, #1
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3714      	adds	r7, #20
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b08c      	sub	sp, #48	; 0x30
 80080e0:	af04      	add	r7, sp, #16
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	603b      	str	r3, [r7, #0]
 80080e8:	4613      	mov	r3, r2
 80080ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80080ec:	88fb      	ldrh	r3, [r7, #6]
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4618      	mov	r0, r3
 80080f2:	f000 fe77 	bl	8008de4 <pvPortMalloc>
 80080f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00e      	beq.n	800811c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80080fe:	2054      	movs	r0, #84	; 0x54
 8008100:	f000 fe70 	bl	8008de4 <pvPortMalloc>
 8008104:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d003      	beq.n	8008114 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	697a      	ldr	r2, [r7, #20]
 8008110:	631a      	str	r2, [r3, #48]	; 0x30
 8008112:	e005      	b.n	8008120 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008114:	6978      	ldr	r0, [r7, #20]
 8008116:	f000 ff27 	bl	8008f68 <vPortFree>
 800811a:	e001      	b.n	8008120 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800811c:	2300      	movs	r3, #0
 800811e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d013      	beq.n	800814e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008126:	88fa      	ldrh	r2, [r7, #6]
 8008128:	2300      	movs	r3, #0
 800812a:	9303      	str	r3, [sp, #12]
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	9302      	str	r3, [sp, #8]
 8008130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008132:	9301      	str	r3, [sp, #4]
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	9300      	str	r3, [sp, #0]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	68b9      	ldr	r1, [r7, #8]
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f000 f80e 	bl	800815e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008142:	69f8      	ldr	r0, [r7, #28]
 8008144:	f000 f892 	bl	800826c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008148:	2301      	movs	r3, #1
 800814a:	61bb      	str	r3, [r7, #24]
 800814c:	e002      	b.n	8008154 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800814e:	f04f 33ff 	mov.w	r3, #4294967295
 8008152:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008154:	69bb      	ldr	r3, [r7, #24]
	}
 8008156:	4618      	mov	r0, r3
 8008158:	3720      	adds	r7, #32
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b088      	sub	sp, #32
 8008162:	af00      	add	r7, sp, #0
 8008164:	60f8      	str	r0, [r7, #12]
 8008166:	60b9      	str	r1, [r7, #8]
 8008168:	607a      	str	r2, [r7, #4]
 800816a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800816c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008176:	3b01      	subs	r3, #1
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	4413      	add	r3, r2
 800817c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	f023 0307 	bic.w	r3, r3, #7
 8008184:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	f003 0307 	and.w	r3, r3, #7
 800818c:	2b00      	cmp	r3, #0
 800818e:	d009      	beq.n	80081a4 <prvInitialiseNewTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008194:	f383 8811 	msr	BASEPRI, r3
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	617b      	str	r3, [r7, #20]
 80081a2:	e7fe      	b.n	80081a2 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d01f      	beq.n	80081ea <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081aa:	2300      	movs	r3, #0
 80081ac:	61fb      	str	r3, [r7, #28]
 80081ae:	e012      	b.n	80081d6 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	4413      	add	r3, r2
 80081b6:	7819      	ldrb	r1, [r3, #0]
 80081b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	4413      	add	r3, r2
 80081be:	3334      	adds	r3, #52	; 0x34
 80081c0:	460a      	mov	r2, r1
 80081c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	4413      	add	r3, r2
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d006      	beq.n	80081de <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	3301      	adds	r3, #1
 80081d4:	61fb      	str	r3, [r7, #28]
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	2b0f      	cmp	r3, #15
 80081da:	d9e9      	bls.n	80081b0 <prvInitialiseNewTask+0x52>
 80081dc:	e000      	b.n	80081e0 <prvInitialiseNewTask+0x82>
			{
				break;
 80081de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80081e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081e8:	e003      	b.n	80081f2 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80081ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80081f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f4:	2b06      	cmp	r3, #6
 80081f6:	d901      	bls.n	80081fc <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80081f8:	2306      	movs	r3, #6
 80081fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80081fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008200:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008206:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820a:	2200      	movs	r2, #0
 800820c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800820e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008210:	3304      	adds	r3, #4
 8008212:	4618      	mov	r0, r3
 8008214:	f7ff fece 	bl	8007fb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821a:	3318      	adds	r3, #24
 800821c:	4618      	mov	r0, r3
 800821e:	f7ff fec9 	bl	8007fb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008226:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822a:	f1c3 0207 	rsb	r2, r3, #7
 800822e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008230:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008236:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823a:	2200      	movs	r2, #0
 800823c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800823e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008240:	2200      	movs	r2, #0
 8008242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008246:	683a      	ldr	r2, [r7, #0]
 8008248:	68f9      	ldr	r1, [r7, #12]
 800824a:	69b8      	ldr	r0, [r7, #24]
 800824c:	f000 fbc8 	bl	80089e0 <pxPortInitialiseStack>
 8008250:	4602      	mov	r2, r0
 8008252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008254:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008258:	2b00      	cmp	r3, #0
 800825a:	d002      	beq.n	8008262 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800825c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008260:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008262:	bf00      	nop
 8008264:	3720      	adds	r7, #32
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
	...

0800826c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008274:	f000 fcda 	bl	8008c2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008278:	4b2a      	ldr	r3, [pc, #168]	; (8008324 <prvAddNewTaskToReadyList+0xb8>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3301      	adds	r3, #1
 800827e:	4a29      	ldr	r2, [pc, #164]	; (8008324 <prvAddNewTaskToReadyList+0xb8>)
 8008280:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008282:	4b29      	ldr	r3, [pc, #164]	; (8008328 <prvAddNewTaskToReadyList+0xbc>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d109      	bne.n	800829e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800828a:	4a27      	ldr	r2, [pc, #156]	; (8008328 <prvAddNewTaskToReadyList+0xbc>)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008290:	4b24      	ldr	r3, [pc, #144]	; (8008324 <prvAddNewTaskToReadyList+0xb8>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d110      	bne.n	80082ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008298:	f000 faa0 	bl	80087dc <prvInitialiseTaskLists>
 800829c:	e00d      	b.n	80082ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800829e:	4b23      	ldr	r3, [pc, #140]	; (800832c <prvAddNewTaskToReadyList+0xc0>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d109      	bne.n	80082ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80082a6:	4b20      	ldr	r3, [pc, #128]	; (8008328 <prvAddNewTaskToReadyList+0xbc>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d802      	bhi.n	80082ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80082b4:	4a1c      	ldr	r2, [pc, #112]	; (8008328 <prvAddNewTaskToReadyList+0xbc>)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80082ba:	4b1d      	ldr	r3, [pc, #116]	; (8008330 <prvAddNewTaskToReadyList+0xc4>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	3301      	adds	r3, #1
 80082c0:	4a1b      	ldr	r2, [pc, #108]	; (8008330 <prvAddNewTaskToReadyList+0xc4>)
 80082c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c8:	2201      	movs	r2, #1
 80082ca:	409a      	lsls	r2, r3
 80082cc:	4b19      	ldr	r3, [pc, #100]	; (8008334 <prvAddNewTaskToReadyList+0xc8>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	4a18      	ldr	r2, [pc, #96]	; (8008334 <prvAddNewTaskToReadyList+0xc8>)
 80082d4:	6013      	str	r3, [r2, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082da:	4613      	mov	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4a15      	ldr	r2, [pc, #84]	; (8008338 <prvAddNewTaskToReadyList+0xcc>)
 80082e4:	441a      	add	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	3304      	adds	r3, #4
 80082ea:	4619      	mov	r1, r3
 80082ec:	4610      	mov	r0, r2
 80082ee:	f7ff fe6e 	bl	8007fce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80082f2:	f000 fcc9 	bl	8008c88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80082f6:	4b0d      	ldr	r3, [pc, #52]	; (800832c <prvAddNewTaskToReadyList+0xc0>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00e      	beq.n	800831c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80082fe:	4b0a      	ldr	r3, [pc, #40]	; (8008328 <prvAddNewTaskToReadyList+0xbc>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008308:	429a      	cmp	r2, r3
 800830a:	d207      	bcs.n	800831c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800830c:	4b0b      	ldr	r3, [pc, #44]	; (800833c <prvAddNewTaskToReadyList+0xd0>)
 800830e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008312:	601a      	str	r2, [r3, #0]
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800831c:	bf00      	nop
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	20001408 	.word	0x20001408
 8008328:	20001308 	.word	0x20001308
 800832c:	20001414 	.word	0x20001414
 8008330:	20001424 	.word	0x20001424
 8008334:	20001410 	.word	0x20001410
 8008338:	2000130c 	.word	0x2000130c
 800833c:	e000ed04 	.word	0xe000ed04

08008340 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008348:	2300      	movs	r3, #0
 800834a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d016      	beq.n	8008380 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008352:	4b13      	ldr	r3, [pc, #76]	; (80083a0 <vTaskDelay+0x60>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d009      	beq.n	800836e <vTaskDelay+0x2e>
 800835a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	60bb      	str	r3, [r7, #8]
 800836c:	e7fe      	b.n	800836c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800836e:	f000 f861 	bl	8008434 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008372:	2100      	movs	r1, #0
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 facd 	bl	8008914 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800837a:	f000 f869 	bl	8008450 <xTaskResumeAll>
 800837e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d107      	bne.n	8008396 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008386:	4b07      	ldr	r3, [pc, #28]	; (80083a4 <vTaskDelay+0x64>)
 8008388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800838c:	601a      	str	r2, [r3, #0]
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008396:	bf00      	nop
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	20001430 	.word	0x20001430
 80083a4:	e000ed04 	.word	0xe000ed04

080083a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b086      	sub	sp, #24
 80083ac:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80083ae:	4b1b      	ldr	r3, [pc, #108]	; (800841c <vTaskStartScheduler+0x74>)
 80083b0:	9301      	str	r3, [sp, #4]
 80083b2:	2300      	movs	r3, #0
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	2300      	movs	r3, #0
 80083b8:	2280      	movs	r2, #128	; 0x80
 80083ba:	4919      	ldr	r1, [pc, #100]	; (8008420 <vTaskStartScheduler+0x78>)
 80083bc:	4819      	ldr	r0, [pc, #100]	; (8008424 <vTaskStartScheduler+0x7c>)
 80083be:	f7ff fe8d 	bl	80080dc <xTaskCreate>
 80083c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d115      	bne.n	80083f6 <vTaskStartScheduler+0x4e>
 80083ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ce:	f383 8811 	msr	BASEPRI, r3
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	f3bf 8f4f 	dsb	sy
 80083da:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80083dc:	4b12      	ldr	r3, [pc, #72]	; (8008428 <vTaskStartScheduler+0x80>)
 80083de:	f04f 32ff 	mov.w	r2, #4294967295
 80083e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80083e4:	4b11      	ldr	r3, [pc, #68]	; (800842c <vTaskStartScheduler+0x84>)
 80083e6:	2201      	movs	r2, #1
 80083e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80083ea:	4b11      	ldr	r3, [pc, #68]	; (8008430 <vTaskStartScheduler+0x88>)
 80083ec:	2200      	movs	r2, #0
 80083ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80083f0:	f000 fb7e 	bl	8008af0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80083f4:	e00d      	b.n	8008412 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fc:	d109      	bne.n	8008412 <vTaskStartScheduler+0x6a>
 80083fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	607b      	str	r3, [r7, #4]
 8008410:	e7fe      	b.n	8008410 <vTaskStartScheduler+0x68>
}
 8008412:	bf00      	nop
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	2000142c 	.word	0x2000142c
 8008420:	080097ac 	.word	0x080097ac
 8008424:	080087ad 	.word	0x080087ad
 8008428:	20001428 	.word	0x20001428
 800842c:	20001414 	.word	0x20001414
 8008430:	2000140c 	.word	0x2000140c

08008434 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008434:	b480      	push	{r7}
 8008436:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008438:	4b04      	ldr	r3, [pc, #16]	; (800844c <vTaskSuspendAll+0x18>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3301      	adds	r3, #1
 800843e:	4a03      	ldr	r2, [pc, #12]	; (800844c <vTaskSuspendAll+0x18>)
 8008440:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008442:	bf00      	nop
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	20001430 	.word	0x20001430

08008450 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008456:	2300      	movs	r3, #0
 8008458:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800845a:	2300      	movs	r3, #0
 800845c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800845e:	4b41      	ldr	r3, [pc, #260]	; (8008564 <xTaskResumeAll+0x114>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d109      	bne.n	800847a <xTaskResumeAll+0x2a>
 8008466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846a:	f383 8811 	msr	BASEPRI, r3
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	603b      	str	r3, [r7, #0]
 8008478:	e7fe      	b.n	8008478 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800847a:	f000 fbd7 	bl	8008c2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800847e:	4b39      	ldr	r3, [pc, #228]	; (8008564 <xTaskResumeAll+0x114>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	3b01      	subs	r3, #1
 8008484:	4a37      	ldr	r2, [pc, #220]	; (8008564 <xTaskResumeAll+0x114>)
 8008486:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008488:	4b36      	ldr	r3, [pc, #216]	; (8008564 <xTaskResumeAll+0x114>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d161      	bne.n	8008554 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008490:	4b35      	ldr	r3, [pc, #212]	; (8008568 <xTaskResumeAll+0x118>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d05d      	beq.n	8008554 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008498:	e02e      	b.n	80084f8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800849a:	4b34      	ldr	r3, [pc, #208]	; (800856c <xTaskResumeAll+0x11c>)
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	3318      	adds	r3, #24
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7ff fdee 	bl	8008088 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	3304      	adds	r3, #4
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7ff fde9 	bl	8008088 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ba:	2201      	movs	r2, #1
 80084bc:	409a      	lsls	r2, r3
 80084be:	4b2c      	ldr	r3, [pc, #176]	; (8008570 <xTaskResumeAll+0x120>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	4a2a      	ldr	r2, [pc, #168]	; (8008570 <xTaskResumeAll+0x120>)
 80084c6:	6013      	str	r3, [r2, #0]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084cc:	4613      	mov	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4413      	add	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4a27      	ldr	r2, [pc, #156]	; (8008574 <xTaskResumeAll+0x124>)
 80084d6:	441a      	add	r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	3304      	adds	r3, #4
 80084dc:	4619      	mov	r1, r3
 80084de:	4610      	mov	r0, r2
 80084e0:	f7ff fd75 	bl	8007fce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e8:	4b23      	ldr	r3, [pc, #140]	; (8008578 <xTaskResumeAll+0x128>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d302      	bcc.n	80084f8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80084f2:	4b22      	ldr	r3, [pc, #136]	; (800857c <xTaskResumeAll+0x12c>)
 80084f4:	2201      	movs	r2, #1
 80084f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084f8:	4b1c      	ldr	r3, [pc, #112]	; (800856c <xTaskResumeAll+0x11c>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1cc      	bne.n	800849a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d001      	beq.n	800850a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008506:	f000 f9e5 	bl	80088d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800850a:	4b1d      	ldr	r3, [pc, #116]	; (8008580 <xTaskResumeAll+0x130>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d010      	beq.n	8008538 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008516:	f000 f837 	bl	8008588 <xTaskIncrementTick>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d002      	beq.n	8008526 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008520:	4b16      	ldr	r3, [pc, #88]	; (800857c <xTaskResumeAll+0x12c>)
 8008522:	2201      	movs	r2, #1
 8008524:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	3b01      	subs	r3, #1
 800852a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1f1      	bne.n	8008516 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008532:	4b13      	ldr	r3, [pc, #76]	; (8008580 <xTaskResumeAll+0x130>)
 8008534:	2200      	movs	r2, #0
 8008536:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008538:	4b10      	ldr	r3, [pc, #64]	; (800857c <xTaskResumeAll+0x12c>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d009      	beq.n	8008554 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008540:	2301      	movs	r3, #1
 8008542:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008544:	4b0f      	ldr	r3, [pc, #60]	; (8008584 <xTaskResumeAll+0x134>)
 8008546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800854a:	601a      	str	r2, [r3, #0]
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008554:	f000 fb98 	bl	8008c88 <vPortExitCritical>

	return xAlreadyYielded;
 8008558:	68bb      	ldr	r3, [r7, #8]
}
 800855a:	4618      	mov	r0, r3
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	20001430 	.word	0x20001430
 8008568:	20001408 	.word	0x20001408
 800856c:	200013c8 	.word	0x200013c8
 8008570:	20001410 	.word	0x20001410
 8008574:	2000130c 	.word	0x2000130c
 8008578:	20001308 	.word	0x20001308
 800857c:	2000141c 	.word	0x2000141c
 8008580:	20001418 	.word	0x20001418
 8008584:	e000ed04 	.word	0xe000ed04

08008588 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800858e:	2300      	movs	r3, #0
 8008590:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008592:	4b4e      	ldr	r3, [pc, #312]	; (80086cc <xTaskIncrementTick+0x144>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	f040 8087 	bne.w	80086aa <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800859c:	4b4c      	ldr	r3, [pc, #304]	; (80086d0 <xTaskIncrementTick+0x148>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3301      	adds	r3, #1
 80085a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80085a4:	4a4a      	ldr	r2, [pc, #296]	; (80086d0 <xTaskIncrementTick+0x148>)
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d11f      	bne.n	80085f0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80085b0:	4b48      	ldr	r3, [pc, #288]	; (80086d4 <xTaskIncrementTick+0x14c>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d009      	beq.n	80085ce <xTaskIncrementTick+0x46>
 80085ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	603b      	str	r3, [r7, #0]
 80085cc:	e7fe      	b.n	80085cc <xTaskIncrementTick+0x44>
 80085ce:	4b41      	ldr	r3, [pc, #260]	; (80086d4 <xTaskIncrementTick+0x14c>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	4b40      	ldr	r3, [pc, #256]	; (80086d8 <xTaskIncrementTick+0x150>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a3e      	ldr	r2, [pc, #248]	; (80086d4 <xTaskIncrementTick+0x14c>)
 80085da:	6013      	str	r3, [r2, #0]
 80085dc:	4a3e      	ldr	r2, [pc, #248]	; (80086d8 <xTaskIncrementTick+0x150>)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	4b3e      	ldr	r3, [pc, #248]	; (80086dc <xTaskIncrementTick+0x154>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3301      	adds	r3, #1
 80085e8:	4a3c      	ldr	r2, [pc, #240]	; (80086dc <xTaskIncrementTick+0x154>)
 80085ea:	6013      	str	r3, [r2, #0]
 80085ec:	f000 f972 	bl	80088d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085f0:	4b3b      	ldr	r3, [pc, #236]	; (80086e0 <xTaskIncrementTick+0x158>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d348      	bcc.n	800868c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085fa:	4b36      	ldr	r3, [pc, #216]	; (80086d4 <xTaskIncrementTick+0x14c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d104      	bne.n	800860e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008604:	4b36      	ldr	r3, [pc, #216]	; (80086e0 <xTaskIncrementTick+0x158>)
 8008606:	f04f 32ff 	mov.w	r2, #4294967295
 800860a:	601a      	str	r2, [r3, #0]
					break;
 800860c:	e03e      	b.n	800868c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800860e:	4b31      	ldr	r3, [pc, #196]	; (80086d4 <xTaskIncrementTick+0x14c>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	429a      	cmp	r2, r3
 8008624:	d203      	bcs.n	800862e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008626:	4a2e      	ldr	r2, [pc, #184]	; (80086e0 <xTaskIncrementTick+0x158>)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800862c:	e02e      	b.n	800868c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	3304      	adds	r3, #4
 8008632:	4618      	mov	r0, r3
 8008634:	f7ff fd28 	bl	8008088 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863c:	2b00      	cmp	r3, #0
 800863e:	d004      	beq.n	800864a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	3318      	adds	r3, #24
 8008644:	4618      	mov	r0, r3
 8008646:	f7ff fd1f 	bl	8008088 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864e:	2201      	movs	r2, #1
 8008650:	409a      	lsls	r2, r3
 8008652:	4b24      	ldr	r3, [pc, #144]	; (80086e4 <xTaskIncrementTick+0x15c>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4313      	orrs	r3, r2
 8008658:	4a22      	ldr	r2, [pc, #136]	; (80086e4 <xTaskIncrementTick+0x15c>)
 800865a:	6013      	str	r3, [r2, #0]
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008660:	4613      	mov	r3, r2
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	4413      	add	r3, r2
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	4a1f      	ldr	r2, [pc, #124]	; (80086e8 <xTaskIncrementTick+0x160>)
 800866a:	441a      	add	r2, r3
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	3304      	adds	r3, #4
 8008670:	4619      	mov	r1, r3
 8008672:	4610      	mov	r0, r2
 8008674:	f7ff fcab 	bl	8007fce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800867c:	4b1b      	ldr	r3, [pc, #108]	; (80086ec <xTaskIncrementTick+0x164>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008682:	429a      	cmp	r2, r3
 8008684:	d3b9      	bcc.n	80085fa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008686:	2301      	movs	r3, #1
 8008688:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800868a:	e7b6      	b.n	80085fa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800868c:	4b17      	ldr	r3, [pc, #92]	; (80086ec <xTaskIncrementTick+0x164>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008692:	4915      	ldr	r1, [pc, #84]	; (80086e8 <xTaskIncrementTick+0x160>)
 8008694:	4613      	mov	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	4413      	add	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	440b      	add	r3, r1
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d907      	bls.n	80086b4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80086a4:	2301      	movs	r3, #1
 80086a6:	617b      	str	r3, [r7, #20]
 80086a8:	e004      	b.n	80086b4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80086aa:	4b11      	ldr	r3, [pc, #68]	; (80086f0 <xTaskIncrementTick+0x168>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3301      	adds	r3, #1
 80086b0:	4a0f      	ldr	r2, [pc, #60]	; (80086f0 <xTaskIncrementTick+0x168>)
 80086b2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80086b4:	4b0f      	ldr	r3, [pc, #60]	; (80086f4 <xTaskIncrementTick+0x16c>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d001      	beq.n	80086c0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80086bc:	2301      	movs	r3, #1
 80086be:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80086c0:	697b      	ldr	r3, [r7, #20]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3718      	adds	r7, #24
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	20001430 	.word	0x20001430
 80086d0:	2000140c 	.word	0x2000140c
 80086d4:	200013c0 	.word	0x200013c0
 80086d8:	200013c4 	.word	0x200013c4
 80086dc:	20001420 	.word	0x20001420
 80086e0:	20001428 	.word	0x20001428
 80086e4:	20001410 	.word	0x20001410
 80086e8:	2000130c 	.word	0x2000130c
 80086ec:	20001308 	.word	0x20001308
 80086f0:	20001418 	.word	0x20001418
 80086f4:	2000141c 	.word	0x2000141c

080086f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80086f8:	b480      	push	{r7}
 80086fa:	b087      	sub	sp, #28
 80086fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80086fe:	4b26      	ldr	r3, [pc, #152]	; (8008798 <vTaskSwitchContext+0xa0>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d003      	beq.n	800870e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008706:	4b25      	ldr	r3, [pc, #148]	; (800879c <vTaskSwitchContext+0xa4>)
 8008708:	2201      	movs	r2, #1
 800870a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800870c:	e03e      	b.n	800878c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800870e:	4b23      	ldr	r3, [pc, #140]	; (800879c <vTaskSwitchContext+0xa4>)
 8008710:	2200      	movs	r2, #0
 8008712:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008714:	4b22      	ldr	r3, [pc, #136]	; (80087a0 <vTaskSwitchContext+0xa8>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	fab3 f383 	clz	r3, r3
 8008720:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008722:	7afb      	ldrb	r3, [r7, #11]
 8008724:	f1c3 031f 	rsb	r3, r3, #31
 8008728:	617b      	str	r3, [r7, #20]
 800872a:	491e      	ldr	r1, [pc, #120]	; (80087a4 <vTaskSwitchContext+0xac>)
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	4613      	mov	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4413      	add	r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	440b      	add	r3, r1
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d109      	bne.n	8008752 <vTaskSwitchContext+0x5a>
	__asm volatile
 800873e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	607b      	str	r3, [r7, #4]
 8008750:	e7fe      	b.n	8008750 <vTaskSwitchContext+0x58>
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	4613      	mov	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	4413      	add	r3, r2
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	4a11      	ldr	r2, [pc, #68]	; (80087a4 <vTaskSwitchContext+0xac>)
 800875e:	4413      	add	r3, r2
 8008760:	613b      	str	r3, [r7, #16]
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	685a      	ldr	r2, [r3, #4]
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	605a      	str	r2, [r3, #4]
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	3308      	adds	r3, #8
 8008774:	429a      	cmp	r2, r3
 8008776:	d104      	bne.n	8008782 <vTaskSwitchContext+0x8a>
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	685a      	ldr	r2, [r3, #4]
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	605a      	str	r2, [r3, #4]
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	4a07      	ldr	r2, [pc, #28]	; (80087a8 <vTaskSwitchContext+0xb0>)
 800878a:	6013      	str	r3, [r2, #0]
}
 800878c:	bf00      	nop
 800878e:	371c      	adds	r7, #28
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	20001430 	.word	0x20001430
 800879c:	2000141c 	.word	0x2000141c
 80087a0:	20001410 	.word	0x20001410
 80087a4:	2000130c 	.word	0x2000130c
 80087a8:	20001308 	.word	0x20001308

080087ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80087b4:	f000 f852 	bl	800885c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80087b8:	4b06      	ldr	r3, [pc, #24]	; (80087d4 <prvIdleTask+0x28>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d9f9      	bls.n	80087b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80087c0:	4b05      	ldr	r3, [pc, #20]	; (80087d8 <prvIdleTask+0x2c>)
 80087c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087c6:	601a      	str	r2, [r3, #0]
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80087d0:	e7f0      	b.n	80087b4 <prvIdleTask+0x8>
 80087d2:	bf00      	nop
 80087d4:	2000130c 	.word	0x2000130c
 80087d8:	e000ed04 	.word	0xe000ed04

080087dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087e2:	2300      	movs	r3, #0
 80087e4:	607b      	str	r3, [r7, #4]
 80087e6:	e00c      	b.n	8008802 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	4613      	mov	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4a12      	ldr	r2, [pc, #72]	; (800883c <prvInitialiseTaskLists+0x60>)
 80087f4:	4413      	add	r3, r2
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7ff fbbc 	bl	8007f74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	3301      	adds	r3, #1
 8008800:	607b      	str	r3, [r7, #4]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2b06      	cmp	r3, #6
 8008806:	d9ef      	bls.n	80087e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008808:	480d      	ldr	r0, [pc, #52]	; (8008840 <prvInitialiseTaskLists+0x64>)
 800880a:	f7ff fbb3 	bl	8007f74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800880e:	480d      	ldr	r0, [pc, #52]	; (8008844 <prvInitialiseTaskLists+0x68>)
 8008810:	f7ff fbb0 	bl	8007f74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008814:	480c      	ldr	r0, [pc, #48]	; (8008848 <prvInitialiseTaskLists+0x6c>)
 8008816:	f7ff fbad 	bl	8007f74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800881a:	480c      	ldr	r0, [pc, #48]	; (800884c <prvInitialiseTaskLists+0x70>)
 800881c:	f7ff fbaa 	bl	8007f74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008820:	480b      	ldr	r0, [pc, #44]	; (8008850 <prvInitialiseTaskLists+0x74>)
 8008822:	f7ff fba7 	bl	8007f74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008826:	4b0b      	ldr	r3, [pc, #44]	; (8008854 <prvInitialiseTaskLists+0x78>)
 8008828:	4a05      	ldr	r2, [pc, #20]	; (8008840 <prvInitialiseTaskLists+0x64>)
 800882a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800882c:	4b0a      	ldr	r3, [pc, #40]	; (8008858 <prvInitialiseTaskLists+0x7c>)
 800882e:	4a05      	ldr	r2, [pc, #20]	; (8008844 <prvInitialiseTaskLists+0x68>)
 8008830:	601a      	str	r2, [r3, #0]
}
 8008832:	bf00      	nop
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	2000130c 	.word	0x2000130c
 8008840:	20001398 	.word	0x20001398
 8008844:	200013ac 	.word	0x200013ac
 8008848:	200013c8 	.word	0x200013c8
 800884c:	200013dc 	.word	0x200013dc
 8008850:	200013f4 	.word	0x200013f4
 8008854:	200013c0 	.word	0x200013c0
 8008858:	200013c4 	.word	0x200013c4

0800885c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008862:	e019      	b.n	8008898 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008864:	f000 f9e2 	bl	8008c2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008868:	4b0f      	ldr	r3, [pc, #60]	; (80088a8 <prvCheckTasksWaitingTermination+0x4c>)
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	3304      	adds	r3, #4
 8008874:	4618      	mov	r0, r3
 8008876:	f7ff fc07 	bl	8008088 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800887a:	4b0c      	ldr	r3, [pc, #48]	; (80088ac <prvCheckTasksWaitingTermination+0x50>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	3b01      	subs	r3, #1
 8008880:	4a0a      	ldr	r2, [pc, #40]	; (80088ac <prvCheckTasksWaitingTermination+0x50>)
 8008882:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008884:	4b0a      	ldr	r3, [pc, #40]	; (80088b0 <prvCheckTasksWaitingTermination+0x54>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	3b01      	subs	r3, #1
 800888a:	4a09      	ldr	r2, [pc, #36]	; (80088b0 <prvCheckTasksWaitingTermination+0x54>)
 800888c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800888e:	f000 f9fb 	bl	8008c88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f80e 	bl	80088b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008898:	4b05      	ldr	r3, [pc, #20]	; (80088b0 <prvCheckTasksWaitingTermination+0x54>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1e1      	bne.n	8008864 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80088a0:	bf00      	nop
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	200013dc 	.word	0x200013dc
 80088ac:	20001408 	.word	0x20001408
 80088b0:	200013f0 	.word	0x200013f0

080088b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c0:	4618      	mov	r0, r3
 80088c2:	f000 fb51 	bl	8008f68 <vPortFree>
			vPortFree( pxTCB );
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fb4e 	bl	8008f68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80088cc:	bf00      	nop
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088da:	4b0c      	ldr	r3, [pc, #48]	; (800890c <prvResetNextTaskUnblockTime+0x38>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d104      	bne.n	80088ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80088e4:	4b0a      	ldr	r3, [pc, #40]	; (8008910 <prvResetNextTaskUnblockTime+0x3c>)
 80088e6:	f04f 32ff 	mov.w	r2, #4294967295
 80088ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80088ec:	e008      	b.n	8008900 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088ee:	4b07      	ldr	r3, [pc, #28]	; (800890c <prvResetNextTaskUnblockTime+0x38>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	4a04      	ldr	r2, [pc, #16]	; (8008910 <prvResetNextTaskUnblockTime+0x3c>)
 80088fe:	6013      	str	r3, [r2, #0]
}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr
 800890c:	200013c0 	.word	0x200013c0
 8008910:	20001428 	.word	0x20001428

08008914 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800891e:	4b29      	ldr	r3, [pc, #164]	; (80089c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008924:	4b28      	ldr	r3, [pc, #160]	; (80089c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	3304      	adds	r3, #4
 800892a:	4618      	mov	r0, r3
 800892c:	f7ff fbac 	bl	8008088 <uxListRemove>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10b      	bne.n	800894e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008936:	4b24      	ldr	r3, [pc, #144]	; (80089c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893c:	2201      	movs	r2, #1
 800893e:	fa02 f303 	lsl.w	r3, r2, r3
 8008942:	43da      	mvns	r2, r3
 8008944:	4b21      	ldr	r3, [pc, #132]	; (80089cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4013      	ands	r3, r2
 800894a:	4a20      	ldr	r2, [pc, #128]	; (80089cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800894c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008954:	d10a      	bne.n	800896c <prvAddCurrentTaskToDelayedList+0x58>
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d007      	beq.n	800896c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800895c:	4b1a      	ldr	r3, [pc, #104]	; (80089c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3304      	adds	r3, #4
 8008962:	4619      	mov	r1, r3
 8008964:	481a      	ldr	r0, [pc, #104]	; (80089d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008966:	f7ff fb32 	bl	8007fce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800896a:	e026      	b.n	80089ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4413      	add	r3, r2
 8008972:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008974:	4b14      	ldr	r3, [pc, #80]	; (80089c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68ba      	ldr	r2, [r7, #8]
 800897a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	429a      	cmp	r2, r3
 8008982:	d209      	bcs.n	8008998 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008984:	4b13      	ldr	r3, [pc, #76]	; (80089d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	4b0f      	ldr	r3, [pc, #60]	; (80089c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	3304      	adds	r3, #4
 800898e:	4619      	mov	r1, r3
 8008990:	4610      	mov	r0, r2
 8008992:	f7ff fb40 	bl	8008016 <vListInsert>
}
 8008996:	e010      	b.n	80089ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008998:	4b0f      	ldr	r3, [pc, #60]	; (80089d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	4b0a      	ldr	r3, [pc, #40]	; (80089c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	3304      	adds	r3, #4
 80089a2:	4619      	mov	r1, r3
 80089a4:	4610      	mov	r0, r2
 80089a6:	f7ff fb36 	bl	8008016 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80089aa:	4b0c      	ldr	r3, [pc, #48]	; (80089dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d202      	bcs.n	80089ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80089b4:	4a09      	ldr	r2, [pc, #36]	; (80089dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	6013      	str	r3, [r2, #0]
}
 80089ba:	bf00      	nop
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	2000140c 	.word	0x2000140c
 80089c8:	20001308 	.word	0x20001308
 80089cc:	20001410 	.word	0x20001410
 80089d0:	200013f4 	.word	0x200013f4
 80089d4:	200013c4 	.word	0x200013c4
 80089d8:	200013c0 	.word	0x200013c0
 80089dc:	20001428 	.word	0x20001428

080089e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	3b04      	subs	r3, #4
 80089f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80089f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	3b04      	subs	r3, #4
 80089fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	f023 0201 	bic.w	r2, r3, #1
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	3b04      	subs	r3, #4
 8008a0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a10:	4a0c      	ldr	r2, [pc, #48]	; (8008a44 <pxPortInitialiseStack+0x64>)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	3b14      	subs	r3, #20
 8008a1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	3b04      	subs	r3, #4
 8008a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f06f 0202 	mvn.w	r2, #2
 8008a2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	3b20      	subs	r3, #32
 8008a34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a36:	68fb      	ldr	r3, [r7, #12]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr
 8008a44:	08008a49 	.word	0x08008a49

08008a48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a52:	4b11      	ldr	r3, [pc, #68]	; (8008a98 <prvTaskExitError+0x50>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a5a:	d009      	beq.n	8008a70 <prvTaskExitError+0x28>
 8008a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a60:	f383 8811 	msr	BASEPRI, r3
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	60fb      	str	r3, [r7, #12]
 8008a6e:	e7fe      	b.n	8008a6e <prvTaskExitError+0x26>
 8008a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a82:	bf00      	nop
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d0fc      	beq.n	8008a84 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a8a:	bf00      	nop
 8008a8c:	3714      	adds	r7, #20
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	2000000c 	.word	0x2000000c
 8008a9c:	00000000 	.word	0x00000000

08008aa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008aa0:	4b07      	ldr	r3, [pc, #28]	; (8008ac0 <pxCurrentTCBConst2>)
 8008aa2:	6819      	ldr	r1, [r3, #0]
 8008aa4:	6808      	ldr	r0, [r1, #0]
 8008aa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aaa:	f380 8809 	msr	PSP, r0
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f04f 0000 	mov.w	r0, #0
 8008ab6:	f380 8811 	msr	BASEPRI, r0
 8008aba:	4770      	bx	lr
 8008abc:	f3af 8000 	nop.w

08008ac0 <pxCurrentTCBConst2>:
 8008ac0:	20001308 	.word	0x20001308
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ac4:	bf00      	nop
 8008ac6:	bf00      	nop

08008ac8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ac8:	4808      	ldr	r0, [pc, #32]	; (8008aec <prvPortStartFirstTask+0x24>)
 8008aca:	6800      	ldr	r0, [r0, #0]
 8008acc:	6800      	ldr	r0, [r0, #0]
 8008ace:	f380 8808 	msr	MSP, r0
 8008ad2:	f04f 0000 	mov.w	r0, #0
 8008ad6:	f380 8814 	msr	CONTROL, r0
 8008ada:	b662      	cpsie	i
 8008adc:	b661      	cpsie	f
 8008ade:	f3bf 8f4f 	dsb	sy
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	df00      	svc	0
 8008ae8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008aea:	bf00      	nop
 8008aec:	e000ed08 	.word	0xe000ed08

08008af0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b086      	sub	sp, #24
 8008af4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008af6:	4b44      	ldr	r3, [pc, #272]	; (8008c08 <xPortStartScheduler+0x118>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a44      	ldr	r2, [pc, #272]	; (8008c0c <xPortStartScheduler+0x11c>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d109      	bne.n	8008b14 <xPortStartScheduler+0x24>
 8008b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b04:	f383 8811 	msr	BASEPRI, r3
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	613b      	str	r3, [r7, #16]
 8008b12:	e7fe      	b.n	8008b12 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008b14:	4b3c      	ldr	r3, [pc, #240]	; (8008c08 <xPortStartScheduler+0x118>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a3d      	ldr	r2, [pc, #244]	; (8008c10 <xPortStartScheduler+0x120>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d109      	bne.n	8008b32 <xPortStartScheduler+0x42>
 8008b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b22:	f383 8811 	msr	BASEPRI, r3
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	f3bf 8f4f 	dsb	sy
 8008b2e:	60fb      	str	r3, [r7, #12]
 8008b30:	e7fe      	b.n	8008b30 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b32:	4b38      	ldr	r3, [pc, #224]	; (8008c14 <xPortStartScheduler+0x124>)
 8008b34:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	22ff      	movs	r2, #255	; 0xff
 8008b42:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b4c:	78fb      	ldrb	r3, [r7, #3]
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b54:	b2da      	uxtb	r2, r3
 8008b56:	4b30      	ldr	r3, [pc, #192]	; (8008c18 <xPortStartScheduler+0x128>)
 8008b58:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b5a:	4b30      	ldr	r3, [pc, #192]	; (8008c1c <xPortStartScheduler+0x12c>)
 8008b5c:	2207      	movs	r2, #7
 8008b5e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b60:	e009      	b.n	8008b76 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008b62:	4b2e      	ldr	r3, [pc, #184]	; (8008c1c <xPortStartScheduler+0x12c>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	3b01      	subs	r3, #1
 8008b68:	4a2c      	ldr	r2, [pc, #176]	; (8008c1c <xPortStartScheduler+0x12c>)
 8008b6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b6c:	78fb      	ldrb	r3, [r7, #3]
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	005b      	lsls	r3, r3, #1
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b76:	78fb      	ldrb	r3, [r7, #3]
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b7e:	2b80      	cmp	r3, #128	; 0x80
 8008b80:	d0ef      	beq.n	8008b62 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b82:	4b26      	ldr	r3, [pc, #152]	; (8008c1c <xPortStartScheduler+0x12c>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f1c3 0307 	rsb	r3, r3, #7
 8008b8a:	2b04      	cmp	r3, #4
 8008b8c:	d009      	beq.n	8008ba2 <xPortStartScheduler+0xb2>
 8008b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b92:	f383 8811 	msr	BASEPRI, r3
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	60bb      	str	r3, [r7, #8]
 8008ba0:	e7fe      	b.n	8008ba0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ba2:	4b1e      	ldr	r3, [pc, #120]	; (8008c1c <xPortStartScheduler+0x12c>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	021b      	lsls	r3, r3, #8
 8008ba8:	4a1c      	ldr	r2, [pc, #112]	; (8008c1c <xPortStartScheduler+0x12c>)
 8008baa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008bac:	4b1b      	ldr	r3, [pc, #108]	; (8008c1c <xPortStartScheduler+0x12c>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008bb4:	4a19      	ldr	r2, [pc, #100]	; (8008c1c <xPortStartScheduler+0x12c>)
 8008bb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008bc0:	4b17      	ldr	r3, [pc, #92]	; (8008c20 <xPortStartScheduler+0x130>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a16      	ldr	r2, [pc, #88]	; (8008c20 <xPortStartScheduler+0x130>)
 8008bc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008bca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008bcc:	4b14      	ldr	r3, [pc, #80]	; (8008c20 <xPortStartScheduler+0x130>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a13      	ldr	r2, [pc, #76]	; (8008c20 <xPortStartScheduler+0x130>)
 8008bd2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008bd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008bd8:	f000 f8d6 	bl	8008d88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008bdc:	4b11      	ldr	r3, [pc, #68]	; (8008c24 <xPortStartScheduler+0x134>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008be2:	f000 f8f5 	bl	8008dd0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008be6:	4b10      	ldr	r3, [pc, #64]	; (8008c28 <xPortStartScheduler+0x138>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a0f      	ldr	r2, [pc, #60]	; (8008c28 <xPortStartScheduler+0x138>)
 8008bec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008bf0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008bf2:	f7ff ff69 	bl	8008ac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008bf6:	f7ff fd7f 	bl	80086f8 <vTaskSwitchContext>
	prvTaskExitError();
 8008bfa:	f7ff ff25 	bl	8008a48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3718      	adds	r7, #24
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	e000ed00 	.word	0xe000ed00
 8008c0c:	410fc271 	.word	0x410fc271
 8008c10:	410fc270 	.word	0x410fc270
 8008c14:	e000e400 	.word	0xe000e400
 8008c18:	20001434 	.word	0x20001434
 8008c1c:	20001438 	.word	0x20001438
 8008c20:	e000ed20 	.word	0xe000ed20
 8008c24:	2000000c 	.word	0x2000000c
 8008c28:	e000ef34 	.word	0xe000ef34

08008c2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c44:	4b0e      	ldr	r3, [pc, #56]	; (8008c80 <vPortEnterCritical+0x54>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	4a0d      	ldr	r2, [pc, #52]	; (8008c80 <vPortEnterCritical+0x54>)
 8008c4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c4e:	4b0c      	ldr	r3, [pc, #48]	; (8008c80 <vPortEnterCritical+0x54>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d10e      	bne.n	8008c74 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c56:	4b0b      	ldr	r3, [pc, #44]	; (8008c84 <vPortEnterCritical+0x58>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d009      	beq.n	8008c74 <vPortEnterCritical+0x48>
 8008c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c64:	f383 8811 	msr	BASEPRI, r3
 8008c68:	f3bf 8f6f 	isb	sy
 8008c6c:	f3bf 8f4f 	dsb	sy
 8008c70:	603b      	str	r3, [r7, #0]
 8008c72:	e7fe      	b.n	8008c72 <vPortEnterCritical+0x46>
	}
}
 8008c74:	bf00      	nop
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	2000000c 	.word	0x2000000c
 8008c84:	e000ed04 	.word	0xe000ed04

08008c88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c8e:	4b11      	ldr	r3, [pc, #68]	; (8008cd4 <vPortExitCritical+0x4c>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d109      	bne.n	8008caa <vPortExitCritical+0x22>
 8008c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9a:	f383 8811 	msr	BASEPRI, r3
 8008c9e:	f3bf 8f6f 	isb	sy
 8008ca2:	f3bf 8f4f 	dsb	sy
 8008ca6:	607b      	str	r3, [r7, #4]
 8008ca8:	e7fe      	b.n	8008ca8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008caa:	4b0a      	ldr	r3, [pc, #40]	; (8008cd4 <vPortExitCritical+0x4c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	4a08      	ldr	r2, [pc, #32]	; (8008cd4 <vPortExitCritical+0x4c>)
 8008cb2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008cb4:	4b07      	ldr	r3, [pc, #28]	; (8008cd4 <vPortExitCritical+0x4c>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d104      	bne.n	8008cc6 <vPortExitCritical+0x3e>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008cc6:	bf00      	nop
 8008cc8:	370c      	adds	r7, #12
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	2000000c 	.word	0x2000000c
	...

08008ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ce0:	f3ef 8009 	mrs	r0, PSP
 8008ce4:	f3bf 8f6f 	isb	sy
 8008ce8:	4b15      	ldr	r3, [pc, #84]	; (8008d40 <pxCurrentTCBConst>)
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	f01e 0f10 	tst.w	lr, #16
 8008cf0:	bf08      	it	eq
 8008cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cfa:	6010      	str	r0, [r2, #0]
 8008cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008d04:	f380 8811 	msr	BASEPRI, r0
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	f3bf 8f6f 	isb	sy
 8008d10:	f7ff fcf2 	bl	80086f8 <vTaskSwitchContext>
 8008d14:	f04f 0000 	mov.w	r0, #0
 8008d18:	f380 8811 	msr	BASEPRI, r0
 8008d1c:	bc09      	pop	{r0, r3}
 8008d1e:	6819      	ldr	r1, [r3, #0]
 8008d20:	6808      	ldr	r0, [r1, #0]
 8008d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d26:	f01e 0f10 	tst.w	lr, #16
 8008d2a:	bf08      	it	eq
 8008d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d30:	f380 8809 	msr	PSP, r0
 8008d34:	f3bf 8f6f 	isb	sy
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	f3af 8000 	nop.w

08008d40 <pxCurrentTCBConst>:
 8008d40:	20001308 	.word	0x20001308
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d44:	bf00      	nop
 8008d46:	bf00      	nop

08008d48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d52:	f383 8811 	msr	BASEPRI, r3
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d60:	f7ff fc12 	bl	8008588 <xTaskIncrementTick>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d003      	beq.n	8008d72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d6a:	4b06      	ldr	r3, [pc, #24]	; (8008d84 <SysTick_Handler+0x3c>)
 8008d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d70:	601a      	str	r2, [r3, #0]
 8008d72:	2300      	movs	r3, #0
 8008d74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d7c:	bf00      	nop
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	e000ed04 	.word	0xe000ed04

08008d88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d88:	b480      	push	{r7}
 8008d8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d8c:	4b0b      	ldr	r3, [pc, #44]	; (8008dbc <vPortSetupTimerInterrupt+0x34>)
 8008d8e:	2200      	movs	r2, #0
 8008d90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d92:	4b0b      	ldr	r3, [pc, #44]	; (8008dc0 <vPortSetupTimerInterrupt+0x38>)
 8008d94:	2200      	movs	r2, #0
 8008d96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d98:	4b0a      	ldr	r3, [pc, #40]	; (8008dc4 <vPortSetupTimerInterrupt+0x3c>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a0a      	ldr	r2, [pc, #40]	; (8008dc8 <vPortSetupTimerInterrupt+0x40>)
 8008d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008da2:	099b      	lsrs	r3, r3, #6
 8008da4:	4a09      	ldr	r2, [pc, #36]	; (8008dcc <vPortSetupTimerInterrupt+0x44>)
 8008da6:	3b01      	subs	r3, #1
 8008da8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008daa:	4b04      	ldr	r3, [pc, #16]	; (8008dbc <vPortSetupTimerInterrupt+0x34>)
 8008dac:	2207      	movs	r2, #7
 8008dae:	601a      	str	r2, [r3, #0]
}
 8008db0:	bf00      	nop
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	e000e010 	.word	0xe000e010
 8008dc0:	e000e018 	.word	0xe000e018
 8008dc4:	20000000 	.word	0x20000000
 8008dc8:	10624dd3 	.word	0x10624dd3
 8008dcc:	e000e014 	.word	0xe000e014

08008dd0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008dd0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008de0 <vPortEnableVFP+0x10>
 8008dd4:	6801      	ldr	r1, [r0, #0]
 8008dd6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008dda:	6001      	str	r1, [r0, #0]
 8008ddc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008dde:	bf00      	nop
 8008de0:	e000ed88 	.word	0xe000ed88

08008de4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b08a      	sub	sp, #40	; 0x28
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008dec:	2300      	movs	r3, #0
 8008dee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008df0:	f7ff fb20 	bl	8008434 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008df4:	4b57      	ldr	r3, [pc, #348]	; (8008f54 <pvPortMalloc+0x170>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d101      	bne.n	8008e00 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008dfc:	f000 f90c 	bl	8009018 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e00:	4b55      	ldr	r3, [pc, #340]	; (8008f58 <pvPortMalloc+0x174>)
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4013      	ands	r3, r2
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f040 808c 	bne.w	8008f26 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d01c      	beq.n	8008e4e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008e14:	2208      	movs	r2, #8
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4413      	add	r3, r2
 8008e1a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f003 0307 	and.w	r3, r3, #7
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d013      	beq.n	8008e4e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f023 0307 	bic.w	r3, r3, #7
 8008e2c:	3308      	adds	r3, #8
 8008e2e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f003 0307 	and.w	r3, r3, #7
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d009      	beq.n	8008e4e <pvPortMalloc+0x6a>
	__asm volatile
 8008e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3e:	f383 8811 	msr	BASEPRI, r3
 8008e42:	f3bf 8f6f 	isb	sy
 8008e46:	f3bf 8f4f 	dsb	sy
 8008e4a:	617b      	str	r3, [r7, #20]
 8008e4c:	e7fe      	b.n	8008e4c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d068      	beq.n	8008f26 <pvPortMalloc+0x142>
 8008e54:	4b41      	ldr	r3, [pc, #260]	; (8008f5c <pvPortMalloc+0x178>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d863      	bhi.n	8008f26 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e5e:	4b40      	ldr	r3, [pc, #256]	; (8008f60 <pvPortMalloc+0x17c>)
 8008e60:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e62:	4b3f      	ldr	r3, [pc, #252]	; (8008f60 <pvPortMalloc+0x17c>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e68:	e004      	b.n	8008e74 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d903      	bls.n	8008e86 <pvPortMalloc+0xa2>
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1f1      	bne.n	8008e6a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e86:	4b33      	ldr	r3, [pc, #204]	; (8008f54 <pvPortMalloc+0x170>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d04a      	beq.n	8008f26 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e90:	6a3b      	ldr	r3, [r7, #32]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2208      	movs	r2, #8
 8008e96:	4413      	add	r3, r2
 8008e98:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
 8008ea0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea4:	685a      	ldr	r2, [r3, #4]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	1ad2      	subs	r2, r2, r3
 8008eaa:	2308      	movs	r3, #8
 8008eac:	005b      	lsls	r3, r3, #1
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d91e      	bls.n	8008ef0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	f003 0307 	and.w	r3, r3, #7
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d009      	beq.n	8008ed8 <pvPortMalloc+0xf4>
 8008ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec8:	f383 8811 	msr	BASEPRI, r3
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	613b      	str	r3, [r7, #16]
 8008ed6:	e7fe      	b.n	8008ed6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eda:	685a      	ldr	r2, [r3, #4]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	1ad2      	subs	r2, r2, r3
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008eea:	69b8      	ldr	r0, [r7, #24]
 8008eec:	f000 f8f6 	bl	80090dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ef0:	4b1a      	ldr	r3, [pc, #104]	; (8008f5c <pvPortMalloc+0x178>)
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	1ad3      	subs	r3, r2, r3
 8008efa:	4a18      	ldr	r2, [pc, #96]	; (8008f5c <pvPortMalloc+0x178>)
 8008efc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008efe:	4b17      	ldr	r3, [pc, #92]	; (8008f5c <pvPortMalloc+0x178>)
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	4b18      	ldr	r3, [pc, #96]	; (8008f64 <pvPortMalloc+0x180>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d203      	bcs.n	8008f12 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f0a:	4b14      	ldr	r3, [pc, #80]	; (8008f5c <pvPortMalloc+0x178>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a15      	ldr	r2, [pc, #84]	; (8008f64 <pvPortMalloc+0x180>)
 8008f10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f14:	685a      	ldr	r2, [r3, #4]
 8008f16:	4b10      	ldr	r3, [pc, #64]	; (8008f58 <pvPortMalloc+0x174>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	431a      	orrs	r2, r3
 8008f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f22:	2200      	movs	r2, #0
 8008f24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f26:	f7ff fa93 	bl	8008450 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	f003 0307 	and.w	r3, r3, #7
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d009      	beq.n	8008f48 <pvPortMalloc+0x164>
 8008f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	60fb      	str	r3, [r7, #12]
 8008f46:	e7fe      	b.n	8008f46 <pvPortMalloc+0x162>
	return pvReturn;
 8008f48:	69fb      	ldr	r3, [r7, #28]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3728      	adds	r7, #40	; 0x28
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	20002044 	.word	0x20002044
 8008f58:	20002050 	.word	0x20002050
 8008f5c:	20002048 	.word	0x20002048
 8008f60:	2000203c 	.word	0x2000203c
 8008f64:	2000204c 	.word	0x2000204c

08008f68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b086      	sub	sp, #24
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d046      	beq.n	8009008 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f7a:	2308      	movs	r3, #8
 8008f7c:	425b      	negs	r3, r3
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	4413      	add	r3, r2
 8008f82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	4b20      	ldr	r3, [pc, #128]	; (8009010 <vPortFree+0xa8>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4013      	ands	r3, r2
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d109      	bne.n	8008faa <vPortFree+0x42>
 8008f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9a:	f383 8811 	msr	BASEPRI, r3
 8008f9e:	f3bf 8f6f 	isb	sy
 8008fa2:	f3bf 8f4f 	dsb	sy
 8008fa6:	60fb      	str	r3, [r7, #12]
 8008fa8:	e7fe      	b.n	8008fa8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d009      	beq.n	8008fc6 <vPortFree+0x5e>
 8008fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb6:	f383 8811 	msr	BASEPRI, r3
 8008fba:	f3bf 8f6f 	isb	sy
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	60bb      	str	r3, [r7, #8]
 8008fc4:	e7fe      	b.n	8008fc4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	685a      	ldr	r2, [r3, #4]
 8008fca:	4b11      	ldr	r3, [pc, #68]	; (8009010 <vPortFree+0xa8>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4013      	ands	r3, r2
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d019      	beq.n	8009008 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d115      	bne.n	8009008 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	685a      	ldr	r2, [r3, #4]
 8008fe0:	4b0b      	ldr	r3, [pc, #44]	; (8009010 <vPortFree+0xa8>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	43db      	mvns	r3, r3
 8008fe6:	401a      	ands	r2, r3
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008fec:	f7ff fa22 	bl	8008434 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	685a      	ldr	r2, [r3, #4]
 8008ff4:	4b07      	ldr	r3, [pc, #28]	; (8009014 <vPortFree+0xac>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	4a06      	ldr	r2, [pc, #24]	; (8009014 <vPortFree+0xac>)
 8008ffc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008ffe:	6938      	ldr	r0, [r7, #16]
 8009000:	f000 f86c 	bl	80090dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009004:	f7ff fa24 	bl	8008450 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009008:	bf00      	nop
 800900a:	3718      	adds	r7, #24
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	20002050 	.word	0x20002050
 8009014:	20002048 	.word	0x20002048

08009018 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800901e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009022:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009024:	4b27      	ldr	r3, [pc, #156]	; (80090c4 <prvHeapInit+0xac>)
 8009026:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f003 0307 	and.w	r3, r3, #7
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00c      	beq.n	800904c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	3307      	adds	r3, #7
 8009036:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f023 0307 	bic.w	r3, r3, #7
 800903e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	4a1f      	ldr	r2, [pc, #124]	; (80090c4 <prvHeapInit+0xac>)
 8009048:	4413      	add	r3, r2
 800904a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009050:	4a1d      	ldr	r2, [pc, #116]	; (80090c8 <prvHeapInit+0xb0>)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009056:	4b1c      	ldr	r3, [pc, #112]	; (80090c8 <prvHeapInit+0xb0>)
 8009058:	2200      	movs	r2, #0
 800905a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	68ba      	ldr	r2, [r7, #8]
 8009060:	4413      	add	r3, r2
 8009062:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009064:	2208      	movs	r2, #8
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	1a9b      	subs	r3, r3, r2
 800906a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f023 0307 	bic.w	r3, r3, #7
 8009072:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	4a15      	ldr	r2, [pc, #84]	; (80090cc <prvHeapInit+0xb4>)
 8009078:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800907a:	4b14      	ldr	r3, [pc, #80]	; (80090cc <prvHeapInit+0xb4>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2200      	movs	r2, #0
 8009080:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009082:	4b12      	ldr	r3, [pc, #72]	; (80090cc <prvHeapInit+0xb4>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2200      	movs	r2, #0
 8009088:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	1ad2      	subs	r2, r2, r3
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009098:	4b0c      	ldr	r3, [pc, #48]	; (80090cc <prvHeapInit+0xb4>)
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	4a0a      	ldr	r2, [pc, #40]	; (80090d0 <prvHeapInit+0xb8>)
 80090a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	4a09      	ldr	r2, [pc, #36]	; (80090d4 <prvHeapInit+0xbc>)
 80090ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090b0:	4b09      	ldr	r3, [pc, #36]	; (80090d8 <prvHeapInit+0xc0>)
 80090b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80090b6:	601a      	str	r2, [r3, #0]
}
 80090b8:	bf00      	nop
 80090ba:	3714      	adds	r7, #20
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr
 80090c4:	2000143c 	.word	0x2000143c
 80090c8:	2000203c 	.word	0x2000203c
 80090cc:	20002044 	.word	0x20002044
 80090d0:	2000204c 	.word	0x2000204c
 80090d4:	20002048 	.word	0x20002048
 80090d8:	20002050 	.word	0x20002050

080090dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80090e4:	4b28      	ldr	r3, [pc, #160]	; (8009188 <prvInsertBlockIntoFreeList+0xac>)
 80090e6:	60fb      	str	r3, [r7, #12]
 80090e8:	e002      	b.n	80090f0 <prvInsertBlockIntoFreeList+0x14>
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	60fb      	str	r3, [r7, #12]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d8f7      	bhi.n	80090ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	4413      	add	r3, r2
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	429a      	cmp	r2, r3
 800910a:	d108      	bne.n	800911e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	685a      	ldr	r2, [r3, #4]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	441a      	add	r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	441a      	add	r2, r3
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	429a      	cmp	r2, r3
 8009130:	d118      	bne.n	8009164 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	4b15      	ldr	r3, [pc, #84]	; (800918c <prvInsertBlockIntoFreeList+0xb0>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	429a      	cmp	r2, r3
 800913c:	d00d      	beq.n	800915a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	685a      	ldr	r2, [r3, #4]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	441a      	add	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	601a      	str	r2, [r3, #0]
 8009158:	e008      	b.n	800916c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800915a:	4b0c      	ldr	r3, [pc, #48]	; (800918c <prvInsertBlockIntoFreeList+0xb0>)
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	601a      	str	r2, [r3, #0]
 8009162:	e003      	b.n	800916c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	429a      	cmp	r2, r3
 8009172:	d002      	beq.n	800917a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800917a:	bf00      	nop
 800917c:	3714      	adds	r7, #20
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	2000203c 	.word	0x2000203c
 800918c:	20002044 	.word	0x20002044

08009190 <fmod>:
 8009190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009194:	ed2d 8b02 	vpush	{d8}
 8009198:	b08b      	sub	sp, #44	; 0x2c
 800919a:	ec55 4b10 	vmov	r4, r5, d0
 800919e:	ec57 6b11 	vmov	r6, r7, d1
 80091a2:	f000 f859 	bl	8009258 <__ieee754_fmod>
 80091a6:	4b2a      	ldr	r3, [pc, #168]	; (8009250 <fmod+0xc0>)
 80091a8:	eeb0 8a40 	vmov.f32	s16, s0
 80091ac:	eef0 8a60 	vmov.f32	s17, s1
 80091b0:	f993 8000 	ldrsb.w	r8, [r3]
 80091b4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80091b8:	d030      	beq.n	800921c <fmod+0x8c>
 80091ba:	4632      	mov	r2, r6
 80091bc:	463b      	mov	r3, r7
 80091be:	4630      	mov	r0, r6
 80091c0:	4639      	mov	r1, r7
 80091c2:	f7f7 fc83 	bl	8000acc <__aeabi_dcmpun>
 80091c6:	bb48      	cbnz	r0, 800921c <fmod+0x8c>
 80091c8:	4622      	mov	r2, r4
 80091ca:	462b      	mov	r3, r5
 80091cc:	4620      	mov	r0, r4
 80091ce:	4629      	mov	r1, r5
 80091d0:	f7f7 fc7c 	bl	8000acc <__aeabi_dcmpun>
 80091d4:	4681      	mov	r9, r0
 80091d6:	bb08      	cbnz	r0, 800921c <fmod+0x8c>
 80091d8:	2200      	movs	r2, #0
 80091da:	2300      	movs	r3, #0
 80091dc:	4630      	mov	r0, r6
 80091de:	4639      	mov	r1, r7
 80091e0:	f7f7 fc42 	bl	8000a68 <__aeabi_dcmpeq>
 80091e4:	b1d0      	cbz	r0, 800921c <fmod+0x8c>
 80091e6:	2301      	movs	r3, #1
 80091e8:	9300      	str	r3, [sp, #0]
 80091ea:	4b1a      	ldr	r3, [pc, #104]	; (8009254 <fmod+0xc4>)
 80091ec:	9301      	str	r3, [sp, #4]
 80091ee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80091f2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80091f6:	f8cd 9020 	str.w	r9, [sp, #32]
 80091fa:	f1b8 0f00 	cmp.w	r8, #0
 80091fe:	d116      	bne.n	800922e <fmod+0x9e>
 8009200:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009204:	4668      	mov	r0, sp
 8009206:	f000 f939 	bl	800947c <matherr>
 800920a:	b1d8      	cbz	r0, 8009244 <fmod+0xb4>
 800920c:	9b08      	ldr	r3, [sp, #32]
 800920e:	b11b      	cbz	r3, 8009218 <fmod+0x88>
 8009210:	f000 f936 	bl	8009480 <__errno>
 8009214:	9b08      	ldr	r3, [sp, #32]
 8009216:	6003      	str	r3, [r0, #0]
 8009218:	ed9d 8b06 	vldr	d8, [sp, #24]
 800921c:	eeb0 0a48 	vmov.f32	s0, s16
 8009220:	eef0 0a68 	vmov.f32	s1, s17
 8009224:	b00b      	add	sp, #44	; 0x2c
 8009226:	ecbd 8b02 	vpop	{d8}
 800922a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800922e:	2200      	movs	r2, #0
 8009230:	2300      	movs	r3, #0
 8009232:	4610      	mov	r0, r2
 8009234:	4619      	mov	r1, r3
 8009236:	f7f7 fad9 	bl	80007ec <__aeabi_ddiv>
 800923a:	f1b8 0f02 	cmp.w	r8, #2
 800923e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009242:	d1df      	bne.n	8009204 <fmod+0x74>
 8009244:	f000 f91c 	bl	8009480 <__errno>
 8009248:	2321      	movs	r3, #33	; 0x21
 800924a:	6003      	str	r3, [r0, #0]
 800924c:	e7de      	b.n	800920c <fmod+0x7c>
 800924e:	bf00      	nop
 8009250:	20000010 	.word	0x20000010
 8009254:	080097cc 	.word	0x080097cc

08009258 <__ieee754_fmod>:
 8009258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800925c:	ec53 2b11 	vmov	r2, r3, d1
 8009260:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8009264:	ea5e 0402 	orrs.w	r4, lr, r2
 8009268:	ec51 0b10 	vmov	r0, r1, d0
 800926c:	461e      	mov	r6, r3
 800926e:	ee11 5a10 	vmov	r5, s2
 8009272:	4694      	mov	ip, r2
 8009274:	d00c      	beq.n	8009290 <__ieee754_fmod+0x38>
 8009276:	4c7a      	ldr	r4, [pc, #488]	; (8009460 <__ieee754_fmod+0x208>)
 8009278:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800927c:	45a0      	cmp	r8, r4
 800927e:	4689      	mov	r9, r1
 8009280:	dc06      	bgt.n	8009290 <__ieee754_fmod+0x38>
 8009282:	4254      	negs	r4, r2
 8009284:	4314      	orrs	r4, r2
 8009286:	4f77      	ldr	r7, [pc, #476]	; (8009464 <__ieee754_fmod+0x20c>)
 8009288:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800928c:	42bc      	cmp	r4, r7
 800928e:	d909      	bls.n	80092a4 <__ieee754_fmod+0x4c>
 8009290:	f7f7 f982 	bl	8000598 <__aeabi_dmul>
 8009294:	4602      	mov	r2, r0
 8009296:	460b      	mov	r3, r1
 8009298:	f7f7 faa8 	bl	80007ec <__aeabi_ddiv>
 800929c:	ec41 0b10 	vmov	d0, r0, r1
 80092a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092a4:	45f0      	cmp	r8, lr
 80092a6:	ee10 2a10 	vmov	r2, s0
 80092aa:	4607      	mov	r7, r0
 80092ac:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 80092b0:	dc0a      	bgt.n	80092c8 <__ieee754_fmod+0x70>
 80092b2:	dbf3      	blt.n	800929c <__ieee754_fmod+0x44>
 80092b4:	42a8      	cmp	r0, r5
 80092b6:	d3f1      	bcc.n	800929c <__ieee754_fmod+0x44>
 80092b8:	d106      	bne.n	80092c8 <__ieee754_fmod+0x70>
 80092ba:	496b      	ldr	r1, [pc, #428]	; (8009468 <__ieee754_fmod+0x210>)
 80092bc:	0fe4      	lsrs	r4, r4, #31
 80092be:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80092c2:	e9d4 0100 	ldrd	r0, r1, [r4]
 80092c6:	e7e9      	b.n	800929c <__ieee754_fmod+0x44>
 80092c8:	4b68      	ldr	r3, [pc, #416]	; (800946c <__ieee754_fmod+0x214>)
 80092ca:	4598      	cmp	r8, r3
 80092cc:	dc49      	bgt.n	8009362 <__ieee754_fmod+0x10a>
 80092ce:	f1b8 0f00 	cmp.w	r8, #0
 80092d2:	d13d      	bne.n	8009350 <__ieee754_fmod+0xf8>
 80092d4:	4866      	ldr	r0, [pc, #408]	; (8009470 <__ieee754_fmod+0x218>)
 80092d6:	4611      	mov	r1, r2
 80092d8:	2900      	cmp	r1, #0
 80092da:	dc36      	bgt.n	800934a <__ieee754_fmod+0xf2>
 80092dc:	459e      	cmp	lr, r3
 80092de:	dc51      	bgt.n	8009384 <__ieee754_fmod+0x12c>
 80092e0:	f1be 0f00 	cmp.w	lr, #0
 80092e4:	d145      	bne.n	8009372 <__ieee754_fmod+0x11a>
 80092e6:	4b62      	ldr	r3, [pc, #392]	; (8009470 <__ieee754_fmod+0x218>)
 80092e8:	4629      	mov	r1, r5
 80092ea:	2900      	cmp	r1, #0
 80092ec:	dc3e      	bgt.n	800936c <__ieee754_fmod+0x114>
 80092ee:	4961      	ldr	r1, [pc, #388]	; (8009474 <__ieee754_fmod+0x21c>)
 80092f0:	4288      	cmp	r0, r1
 80092f2:	db4c      	blt.n	800938e <__ieee754_fmod+0x136>
 80092f4:	f3c9 0113 	ubfx	r1, r9, #0, #20
 80092f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80092fc:	4a5d      	ldr	r2, [pc, #372]	; (8009474 <__ieee754_fmod+0x21c>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	db59      	blt.n	80093b6 <__ieee754_fmod+0x15e>
 8009302:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8009306:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800930a:	1ac0      	subs	r0, r0, r3
 800930c:	1b8a      	subs	r2, r1, r6
 800930e:	eba7 050c 	sub.w	r5, r7, ip
 8009312:	2800      	cmp	r0, #0
 8009314:	d166      	bne.n	80093e4 <__ieee754_fmod+0x18c>
 8009316:	4567      	cmp	r7, ip
 8009318:	bf38      	it	cc
 800931a:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800931e:	2a00      	cmp	r2, #0
 8009320:	bfbc      	itt	lt
 8009322:	463d      	movlt	r5, r7
 8009324:	460a      	movlt	r2, r1
 8009326:	ea52 0105 	orrs.w	r1, r2, r5
 800932a:	d0c6      	beq.n	80092ba <__ieee754_fmod+0x62>
 800932c:	494f      	ldr	r1, [pc, #316]	; (800946c <__ieee754_fmod+0x214>)
 800932e:	428a      	cmp	r2, r1
 8009330:	dd6d      	ble.n	800940e <__ieee754_fmod+0x1b6>
 8009332:	4950      	ldr	r1, [pc, #320]	; (8009474 <__ieee754_fmod+0x21c>)
 8009334:	428b      	cmp	r3, r1
 8009336:	db70      	blt.n	800941a <__ieee754_fmod+0x1c2>
 8009338:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 800933c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8009340:	4314      	orrs	r4, r2
 8009342:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 8009346:	4628      	mov	r0, r5
 8009348:	e7a8      	b.n	800929c <__ieee754_fmod+0x44>
 800934a:	3801      	subs	r0, #1
 800934c:	0049      	lsls	r1, r1, #1
 800934e:	e7c3      	b.n	80092d8 <__ieee754_fmod+0x80>
 8009350:	4848      	ldr	r0, [pc, #288]	; (8009474 <__ieee754_fmod+0x21c>)
 8009352:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8009356:	0049      	lsls	r1, r1, #1
 8009358:	2900      	cmp	r1, #0
 800935a:	f100 30ff 	add.w	r0, r0, #4294967295
 800935e:	dcfa      	bgt.n	8009356 <__ieee754_fmod+0xfe>
 8009360:	e7bc      	b.n	80092dc <__ieee754_fmod+0x84>
 8009362:	ea4f 5028 	mov.w	r0, r8, asr #20
 8009366:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800936a:	e7b7      	b.n	80092dc <__ieee754_fmod+0x84>
 800936c:	3b01      	subs	r3, #1
 800936e:	0049      	lsls	r1, r1, #1
 8009370:	e7bb      	b.n	80092ea <__ieee754_fmod+0x92>
 8009372:	4b40      	ldr	r3, [pc, #256]	; (8009474 <__ieee754_fmod+0x21c>)
 8009374:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 8009378:	0049      	lsls	r1, r1, #1
 800937a:	2900      	cmp	r1, #0
 800937c:	f103 33ff 	add.w	r3, r3, #4294967295
 8009380:	dcfa      	bgt.n	8009378 <__ieee754_fmod+0x120>
 8009382:	e7b4      	b.n	80092ee <__ieee754_fmod+0x96>
 8009384:	ea4f 532e 	mov.w	r3, lr, asr #20
 8009388:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800938c:	e7af      	b.n	80092ee <__ieee754_fmod+0x96>
 800938e:	1a0f      	subs	r7, r1, r0
 8009390:	2f1f      	cmp	r7, #31
 8009392:	dc0a      	bgt.n	80093aa <__ieee754_fmod+0x152>
 8009394:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8009398:	fa08 f807 	lsl.w	r8, r8, r7
 800939c:	fa22 f101 	lsr.w	r1, r2, r1
 80093a0:	ea41 0108 	orr.w	r1, r1, r8
 80093a4:	fa02 f707 	lsl.w	r7, r2, r7
 80093a8:	e7a8      	b.n	80092fc <__ieee754_fmod+0xa4>
 80093aa:	4933      	ldr	r1, [pc, #204]	; (8009478 <__ieee754_fmod+0x220>)
 80093ac:	1a09      	subs	r1, r1, r0
 80093ae:	fa02 f101 	lsl.w	r1, r2, r1
 80093b2:	2700      	movs	r7, #0
 80093b4:	e7a2      	b.n	80092fc <__ieee754_fmod+0xa4>
 80093b6:	eba2 0c03 	sub.w	ip, r2, r3
 80093ba:	f1bc 0f1f 	cmp.w	ip, #31
 80093be:	dc0a      	bgt.n	80093d6 <__ieee754_fmod+0x17e>
 80093c0:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 80093c4:	fa0e fe0c 	lsl.w	lr, lr, ip
 80093c8:	fa25 f606 	lsr.w	r6, r5, r6
 80093cc:	ea46 060e 	orr.w	r6, r6, lr
 80093d0:	fa05 fc0c 	lsl.w	ip, r5, ip
 80093d4:	e799      	b.n	800930a <__ieee754_fmod+0xb2>
 80093d6:	4e28      	ldr	r6, [pc, #160]	; (8009478 <__ieee754_fmod+0x220>)
 80093d8:	1af6      	subs	r6, r6, r3
 80093da:	fa05 f606 	lsl.w	r6, r5, r6
 80093de:	f04f 0c00 	mov.w	ip, #0
 80093e2:	e792      	b.n	800930a <__ieee754_fmod+0xb2>
 80093e4:	4567      	cmp	r7, ip
 80093e6:	bf38      	it	cc
 80093e8:	f102 32ff 	addcc.w	r2, r2, #4294967295
 80093ec:	2a00      	cmp	r2, #0
 80093ee:	da05      	bge.n	80093fc <__ieee754_fmod+0x1a4>
 80093f0:	0ffa      	lsrs	r2, r7, #31
 80093f2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80093f6:	007f      	lsls	r7, r7, #1
 80093f8:	3801      	subs	r0, #1
 80093fa:	e787      	b.n	800930c <__ieee754_fmod+0xb4>
 80093fc:	ea52 0105 	orrs.w	r1, r2, r5
 8009400:	f43f af5b 	beq.w	80092ba <__ieee754_fmod+0x62>
 8009404:	0fe9      	lsrs	r1, r5, #31
 8009406:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800940a:	006f      	lsls	r7, r5, #1
 800940c:	e7f4      	b.n	80093f8 <__ieee754_fmod+0x1a0>
 800940e:	0fe8      	lsrs	r0, r5, #31
 8009410:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8009414:	006d      	lsls	r5, r5, #1
 8009416:	3b01      	subs	r3, #1
 8009418:	e789      	b.n	800932e <__ieee754_fmod+0xd6>
 800941a:	1ac9      	subs	r1, r1, r3
 800941c:	2914      	cmp	r1, #20
 800941e:	dc0a      	bgt.n	8009436 <__ieee754_fmod+0x1de>
 8009420:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8009424:	fa02 f303 	lsl.w	r3, r2, r3
 8009428:	40cd      	lsrs	r5, r1
 800942a:	432b      	orrs	r3, r5
 800942c:	410a      	asrs	r2, r1
 800942e:	ea42 0104 	orr.w	r1, r2, r4
 8009432:	4618      	mov	r0, r3
 8009434:	e732      	b.n	800929c <__ieee754_fmod+0x44>
 8009436:	291f      	cmp	r1, #31
 8009438:	dc07      	bgt.n	800944a <__ieee754_fmod+0x1f2>
 800943a:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800943e:	40cd      	lsrs	r5, r1
 8009440:	fa02 f303 	lsl.w	r3, r2, r3
 8009444:	432b      	orrs	r3, r5
 8009446:	4622      	mov	r2, r4
 8009448:	e7f1      	b.n	800942e <__ieee754_fmod+0x1d6>
 800944a:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800944e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009452:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8009456:	33e2      	adds	r3, #226	; 0xe2
 8009458:	fa42 f303 	asr.w	r3, r2, r3
 800945c:	e7f3      	b.n	8009446 <__ieee754_fmod+0x1ee>
 800945e:	bf00      	nop
 8009460:	7fefffff 	.word	0x7fefffff
 8009464:	7ff00000 	.word	0x7ff00000
 8009468:	080097d8 	.word	0x080097d8
 800946c:	000fffff 	.word	0x000fffff
 8009470:	fffffbed 	.word	0xfffffbed
 8009474:	fffffc02 	.word	0xfffffc02
 8009478:	fffffbe2 	.word	0xfffffbe2

0800947c <matherr>:
 800947c:	2000      	movs	r0, #0
 800947e:	4770      	bx	lr

08009480 <__errno>:
 8009480:	4b01      	ldr	r3, [pc, #4]	; (8009488 <__errno+0x8>)
 8009482:	6818      	ldr	r0, [r3, #0]
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop
 8009488:	20000014 	.word	0x20000014

0800948c <__libc_init_array>:
 800948c:	b570      	push	{r4, r5, r6, lr}
 800948e:	4e0d      	ldr	r6, [pc, #52]	; (80094c4 <__libc_init_array+0x38>)
 8009490:	4c0d      	ldr	r4, [pc, #52]	; (80094c8 <__libc_init_array+0x3c>)
 8009492:	1ba4      	subs	r4, r4, r6
 8009494:	10a4      	asrs	r4, r4, #2
 8009496:	2500      	movs	r5, #0
 8009498:	42a5      	cmp	r5, r4
 800949a:	d109      	bne.n	80094b0 <__libc_init_array+0x24>
 800949c:	4e0b      	ldr	r6, [pc, #44]	; (80094cc <__libc_init_array+0x40>)
 800949e:	4c0c      	ldr	r4, [pc, #48]	; (80094d0 <__libc_init_array+0x44>)
 80094a0:	f000 f820 	bl	80094e4 <_init>
 80094a4:	1ba4      	subs	r4, r4, r6
 80094a6:	10a4      	asrs	r4, r4, #2
 80094a8:	2500      	movs	r5, #0
 80094aa:	42a5      	cmp	r5, r4
 80094ac:	d105      	bne.n	80094ba <__libc_init_array+0x2e>
 80094ae:	bd70      	pop	{r4, r5, r6, pc}
 80094b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094b4:	4798      	blx	r3
 80094b6:	3501      	adds	r5, #1
 80094b8:	e7ee      	b.n	8009498 <__libc_init_array+0xc>
 80094ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094be:	4798      	blx	r3
 80094c0:	3501      	adds	r5, #1
 80094c2:	e7f2      	b.n	80094aa <__libc_init_array+0x1e>
 80094c4:	080097e8 	.word	0x080097e8
 80094c8:	080097e8 	.word	0x080097e8
 80094cc:	080097e8 	.word	0x080097e8
 80094d0:	080097ec 	.word	0x080097ec

080094d4 <memset>:
 80094d4:	4402      	add	r2, r0
 80094d6:	4603      	mov	r3, r0
 80094d8:	4293      	cmp	r3, r2
 80094da:	d100      	bne.n	80094de <memset+0xa>
 80094dc:	4770      	bx	lr
 80094de:	f803 1b01 	strb.w	r1, [r3], #1
 80094e2:	e7f9      	b.n	80094d8 <memset+0x4>

080094e4 <_init>:
 80094e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e6:	bf00      	nop
 80094e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ea:	bc08      	pop	{r3}
 80094ec:	469e      	mov	lr, r3
 80094ee:	4770      	bx	lr

080094f0 <_fini>:
 80094f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f2:	bf00      	nop
 80094f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094f6:	bc08      	pop	{r3}
 80094f8:	469e      	mov	lr, r3
 80094fa:	4770      	bx	lr
