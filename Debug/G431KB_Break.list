
G431KB_Break.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd44  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  0800cf28  0800cf28  0001cf28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d250  0800d250  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800d250  0800d250  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d250  0800d250  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d250  0800d250  0001d250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d254  0800d254  0001d254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003338  200001e8  0800d440  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003520  0800d440  00023520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028913  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000054cc  00000000  00000000  00048b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c30  00000000  00000000  0004dff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019c8  00000000  00000000  0004fc28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026cbd  00000000  00000000  000515f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f245  00000000  00000000  000782ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2e77  00000000  00000000  000974f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016a369  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007560  00000000  00000000  0016a3e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cf0c 	.word	0x0800cf0c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	0800cf0c 	.word	0x0800cf0c

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b98:	b5b0      	push	{r4, r5, r7, lr}
 8000b9a:	b090      	sub	sp, #64	; 0x40
 8000b9c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Break_Task */
  osThreadDef(Break_Task, StartBreak_Task, osPriorityNormal, 0, 128);
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_FREERTOS_Init+0x70>)
 8000ba0:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000ba4:	461d      	mov	r5, r3
 8000ba6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000baa:	682b      	ldr	r3, [r5, #0]
 8000bac:	6023      	str	r3, [r4, #0]
  Break_TaskHandle = osThreadCreate(osThread(Break_Task), NULL);
 8000bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f00a f9e4 	bl	800af82 <osThreadCreate>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <MX_FREERTOS_Init+0x74>)
 8000bbe:	601a      	str	r2, [r3, #0]

  /* definition and creation of RainBow_Task */
  osThreadDef(RainBow_Task, StartRainBow_Task, osPriorityIdle, 0, 128);
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <MX_FREERTOS_Init+0x78>)
 8000bc2:	f107 0418 	add.w	r4, r7, #24
 8000bc6:	461d      	mov	r5, r3
 8000bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bcc:	682b      	ldr	r3, [r5, #0]
 8000bce:	6023      	str	r3, [r4, #0]
  RainBow_TaskHandle = osThreadCreate(osThread(RainBow_Task), NULL);
 8000bd0:	f107 0318 	add.w	r3, r7, #24
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f00a f9d3 	bl	800af82 <osThreadCreate>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <MX_FREERTOS_Init+0x7c>)
 8000be0:	601a      	str	r2, [r3, #0]

  /* definition and creation of AS504X_Task */
  osThreadDef(AS504X_Task, StartAS504X_Task, osPriorityIdle, 0, 128);
 8000be2:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <MX_FREERTOS_Init+0x80>)
 8000be4:	1d3c      	adds	r4, r7, #4
 8000be6:	461d      	mov	r5, r3
 8000be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bec:	682b      	ldr	r3, [r5, #0]
 8000bee:	6023      	str	r3, [r4, #0]
  AS504X_TaskHandle = osThreadCreate(osThread(AS504X_Task), NULL);
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f00a f9c4 	bl	800af82 <osThreadCreate>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <MX_FREERTOS_Init+0x84>)
 8000bfe:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000c00:	bf00      	nop
 8000c02:	3740      	adds	r7, #64	; 0x40
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bdb0      	pop	{r4, r5, r7, pc}
 8000c08:	0800cf34 	.word	0x0800cf34
 8000c0c:	200023ec 	.word	0x200023ec
 8000c10:	0800cf58 	.word	0x0800cf58
 8000c14:	200023f8 	.word	0x200023f8
 8000c18:	0800cf78 	.word	0x0800cf78
 8000c1c:	200023e8 	.word	0x200023e8

08000c20 <StartBreak_Task>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartBreak_Task */
void StartBreak_Task(void const * argument)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08e      	sub	sp, #56	; 0x38
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBreak_Task */
  /* Infinite loop */

  uint32_t pre_time = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t led_time = 200;
 8000c2c:	23c8      	movs	r3, #200	; 0xc8
 8000c2e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t firstled = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	613b      	str	r3, [r7, #16]
	uint32_t halfled = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
	uint32_t led_index = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t led_mask= 0b1110000111;
 8000c3c:	f240 3387 	movw	r3, #903	; 0x387
 8000c40:	60bb      	str	r3, [r7, #8]


	_Bool led_flg=0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint32_t led_count = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  for(;;)
  {

		if(millis()-pre_time >= led_time)
 8000c4c:	f000 fc01 	bl	8001452 <millis>
 8000c50:	4602      	mov	r2, r0
 8000c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	f200 80b4 	bhi.w	8000dc6 <StartBreak_Task+0x1a6>
		{
			pre_time = millis();
 8000c5e:	f000 fbf8 	bl	8001452 <millis>
 8000c62:	6378      	str	r0, [r7, #52]	; 0x34
			if(g_break_flg == 0) {
 8000c64:	4b5a      	ldr	r3, [pc, #360]	; (8000dd0 <StartBreak_Task+0x1b0>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	f083 0301 	eor.w	r3, r3, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d06e      	beq.n	8000d50 <StartBreak_Task+0x130>
					led_time = 200;
				}
				else {
					led_time = 50;
				}*/
				led_time = g_speed/10;
 8000c72:	4b58      	ldr	r3, [pc, #352]	; (8000dd4 <StartBreak_Task+0x1b4>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a58      	ldr	r2, [pc, #352]	; (8000dd8 <StartBreak_Task+0x1b8>)
 8000c78:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7c:	08db      	lsrs	r3, r3, #3
 8000c7e:	633b      	str	r3, [r7, #48]	; 0x30
				if(led_time < 50)
 8000c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c82:	2b31      	cmp	r3, #49	; 0x31
 8000c84:	d801      	bhi.n	8000c8a <StartBreak_Task+0x6a>
					led_time = 50;
 8000c86:	2332      	movs	r3, #50	; 0x32
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
				led_count = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
				firstled = rotateLeft(led_mask, led_index%B_LED_CNT);
 8000c8e:	68b8      	ldr	r0, [r7, #8]
 8000c90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000c92:	4b51      	ldr	r3, [pc, #324]	; (8000dd8 <StartBreak_Task+0x1b8>)
 8000c94:	fba3 2301 	umull	r2, r3, r3, r1
 8000c98:	091a      	lsrs	r2, r3, #4
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	1aca      	subs	r2, r1, r3
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	f000 fbdb 	bl	8001460 <rotateLeft>
 8000caa:	4603      	mov	r3, r0
 8000cac:	613b      	str	r3, [r7, #16]
				halfled = rotateRight(led_mask, led_index%B_LED_CNT);
 8000cae:	68b8      	ldr	r0, [r7, #8]
 8000cb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000cb2:	4b49      	ldr	r3, [pc, #292]	; (8000dd8 <StartBreak_Task+0x1b8>)
 8000cb4:	fba3 2301 	umull	r2, r3, r3, r1
 8000cb8:	091a      	lsrs	r2, r3, #4
 8000cba:	4613      	mov	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	1aca      	subs	r2, r1, r3
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	f000 fbf5 	bl	80014b4 <rotateRight>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	60fb      	str	r3, [r7, #12]

				led_index++;
 8000cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
				for(uint32_t j=0; j<12; j++) {
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
 8000cd8:	e017      	b.n	8000d0a <StartBreak_Task+0xea>
					if( firstled >> j & 0x01){
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	6a3b      	ldr	r3, [r7, #32]
 8000cde:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d006      	beq.n	8000cf8 <StartBreak_Task+0xd8>
							ws2812SetColor(j, 255, 255, 255);
 8000cea:	23ff      	movs	r3, #255	; 0xff
 8000cec:	22ff      	movs	r2, #255	; 0xff
 8000cee:	21ff      	movs	r1, #255	; 0xff
 8000cf0:	6a38      	ldr	r0, [r7, #32]
 8000cf2:	f000 ffc5 	bl	8001c80 <ws2812SetColor>
 8000cf6:	e005      	b.n	8000d04 <StartBreak_Task+0xe4>
					}else {
						ws2812SetColor(j, 0, 0, 0);
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	6a38      	ldr	r0, [r7, #32]
 8000d00:	f000 ffbe 	bl	8001c80 <ws2812SetColor>
				for(uint32_t j=0; j<12; j++) {
 8000d04:	6a3b      	ldr	r3, [r7, #32]
 8000d06:	3301      	adds	r3, #1
 8000d08:	623b      	str	r3, [r7, #32]
 8000d0a:	6a3b      	ldr	r3, [r7, #32]
 8000d0c:	2b0b      	cmp	r3, #11
 8000d0e:	d9e4      	bls.n	8000cda <StartBreak_Task+0xba>
					}
				}
				for(uint32_t j=20; j>11; j--) {
 8000d10:	2314      	movs	r3, #20
 8000d12:	61fb      	str	r3, [r7, #28]
 8000d14:	e018      	b.n	8000d48 <StartBreak_Task+0x128>
					if( halfled >> (j-11) & 0x01){
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3b0b      	subs	r3, #11
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d006      	beq.n	8000d36 <StartBreak_Task+0x116>
							ws2812SetColor(j, 255, 255, 255);
 8000d28:	23ff      	movs	r3, #255	; 0xff
 8000d2a:	22ff      	movs	r2, #255	; 0xff
 8000d2c:	21ff      	movs	r1, #255	; 0xff
 8000d2e:	69f8      	ldr	r0, [r7, #28]
 8000d30:	f000 ffa6 	bl	8001c80 <ws2812SetColor>
 8000d34:	e005      	b.n	8000d42 <StartBreak_Task+0x122>
					}else {
						ws2812SetColor(j, 0, 0, 0);
 8000d36:	2300      	movs	r3, #0
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	69f8      	ldr	r0, [r7, #28]
 8000d3e:	f000 ff9f 	bl	8001c80 <ws2812SetColor>
				for(uint32_t j=20; j>11; j--) {
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	61fb      	str	r3, [r7, #28]
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	2b0b      	cmp	r3, #11
 8000d4c:	d8e3      	bhi.n	8000d16 <StartBreak_Task+0xf6>
 8000d4e:	e03a      	b.n	8000dc6 <StartBreak_Task+0x1a6>
					}
				}
			}
			else{ // break
				led_count++;
 8000d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d52:	3301      	adds	r3, #1
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
				if(led_count > 30) {
 8000d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d58:	2b1e      	cmp	r3, #30
 8000d5a:	d903      	bls.n	8000d64 <StartBreak_Task+0x144>
					led_time = 500;
 8000d5c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
 8000d62:	e001      	b.n	8000d68 <StartBreak_Task+0x148>
				}else {
					led_time = 50;
 8000d64:	2332      	movs	r3, #50	; 0x32
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if(led_count > 40) {
 8000d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6a:	2b28      	cmp	r3, #40	; 0x28
 8000d6c:	d902      	bls.n	8000d74 <StartBreak_Task+0x154>
						//led_count = 0;
						g_break_flg = 0;
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <StartBreak_Task+0x1b0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
				}

				if(led_flg) {
 8000d74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d012      	beq.n	8000da2 <StartBreak_Task+0x182>
					for(int i = 0; i < B_LED_CNT; i++) {
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61bb      	str	r3, [r7, #24]
 8000d80:	e00b      	b.n	8000d9a <StartBreak_Task+0x17a>
						ws2812SetColor(i, 255, 0, 0);
 8000d82:	69b8      	ldr	r0, [r7, #24]
 8000d84:	2300      	movs	r3, #0
 8000d86:	2200      	movs	r2, #0
 8000d88:	21ff      	movs	r1, #255	; 0xff
 8000d8a:	f000 ff79 	bl	8001c80 <ws2812SetColor>
						led_flg = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					for(int i = 0; i < B_LED_CNT; i++) {
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	3301      	adds	r3, #1
 8000d98:	61bb      	str	r3, [r7, #24]
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	2b13      	cmp	r3, #19
 8000d9e:	ddf0      	ble.n	8000d82 <StartBreak_Task+0x162>
 8000da0:	e011      	b.n	8000dc6 <StartBreak_Task+0x1a6>
					}
				}else {
					for(int i = 0; i < B_LED_CNT; i++) {
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00b      	b.n	8000dc0 <StartBreak_Task+0x1a0>
						ws2812SetColor(i, 0, 0, 0);
 8000da8:	6978      	ldr	r0, [r7, #20]
 8000daa:	2300      	movs	r3, #0
 8000dac:	2200      	movs	r2, #0
 8000dae:	2100      	movs	r1, #0
 8000db0:	f000 ff66 	bl	8001c80 <ws2812SetColor>
						led_flg = 1;
 8000db4:	2301      	movs	r3, #1
 8000db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					for(int i = 0; i < B_LED_CNT; i++) {
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	2b13      	cmp	r3, #19
 8000dc4:	ddf0      	ble.n	8000da8 <StartBreak_Task+0x188>
					}
				}
			}
		}
    osDelay(1);
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f00a f902 	bl	800afd0 <osDelay>
		if(millis()-pre_time >= led_time)
 8000dcc:	e73e      	b.n	8000c4c <StartBreak_Task+0x2c>
 8000dce:	bf00      	nop
 8000dd0:	20000204 	.word	0x20000204
 8000dd4:	20000208 	.word	0x20000208
 8000dd8:	cccccccd 	.word	0xcccccccd

08000ddc <StartRainBow_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRainBow_Task */
void StartRainBow_Task(void const * argument)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRainBow_Task */
  /* Infinite loop */

	uint32_t rainbow_pre_time=0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t rainbow_led_time=10;
 8000de8:	230a      	movs	r3, #10
 8000dea:	623b      	str	r3, [r7, #32]
	_Bool led_flg=0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	77fb      	strb	r3, [r7, #31]
	uint32_t led_count = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		uint16_t i, j;
		for(j=0; j<256*5;) { // 5 cycles of all colors on wheel
 8000df4:	2300      	movs	r3, #0
 8000df6:	837b      	strh	r3, [r7, #26]
 8000df8:	e071      	b.n	8000ede <StartRainBow_Task+0x102>
			if(millis()-rainbow_pre_time >= rainbow_led_time)
 8000dfa:	f000 fb2a 	bl	8001452 <millis>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	6a3a      	ldr	r2, [r7, #32]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d869      	bhi.n	8000ede <StartRainBow_Task+0x102>
			{
				rainbow_pre_time = millis();
 8000e0a:	f000 fb22 	bl	8001452 <millis>
 8000e0e:	6278      	str	r0, [r7, #36]	; 0x24
				j++;
 8000e10:	8b7b      	ldrh	r3, [r7, #26]
 8000e12:	3301      	adds	r3, #1
 8000e14:	837b      	strh	r3, [r7, #26]
				led_count = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
				rainbow_led_time = 10;
 8000e1a:	230a      	movs	r3, #10
 8000e1c:	623b      	str	r3, [r7, #32]
				if(g_break_flg == 0) {
 8000e1e:	4b34      	ldr	r3, [pc, #208]	; (8000ef0 <StartRainBow_Task+0x114>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	f083 0301 	eor.w	r3, r3, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d01f      	beq.n	8000e6c <StartRainBow_Task+0x90>
					led_count = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
					for(i=0; i< R_LED_CNT; i++) {
 8000e30:	2300      	movs	r3, #0
 8000e32:	83bb      	strh	r3, [r7, #28]
 8000e34:	e016      	b.n	8000e64 <StartRainBow_Task+0x88>
						setPixelColor(i, Wheel(((i * 256 / R_LED_CNT) + j) & 255));
 8000e36:	8bbb      	ldrh	r3, [r7, #28]
 8000e38:	021b      	lsls	r3, r3, #8
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	da00      	bge.n	8000e40 <StartRainBow_Task+0x64>
 8000e3e:	337f      	adds	r3, #127	; 0x7f
 8000e40:	11db      	asrs	r3, r3, #7
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	8b7b      	ldrh	r3, [r7, #26]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4413      	add	r3, r2
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f001 f8b7 	bl	8001fc0 <Wheel>
 8000e52:	4602      	mov	r2, r0
 8000e54:	8bbb      	ldrh	r3, [r7, #28]
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f001 f82d 	bl	8001eb8 <setPixelColor>
					for(i=0; i< R_LED_CNT; i++) {
 8000e5e:	8bbb      	ldrh	r3, [r7, #28]
 8000e60:	3301      	adds	r3, #1
 8000e62:	83bb      	strh	r3, [r7, #28]
 8000e64:	8bbb      	ldrh	r3, [r7, #28]
 8000e66:	2b7f      	cmp	r3, #127	; 0x7f
 8000e68:	d9e5      	bls.n	8000e36 <StartRainBow_Task+0x5a>
 8000e6a:	e038      	b.n	8000ede <StartRainBow_Task+0x102>
					}
				}
				else{ // break
					led_count++;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	60fb      	str	r3, [r7, #12]
					if(led_count > 30) {
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	2b1e      	cmp	r3, #30
 8000e76:	d903      	bls.n	8000e80 <StartRainBow_Task+0xa4>
						rainbow_led_time = 500;
 8000e78:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e7c:	623b      	str	r3, [r7, #32]
 8000e7e:	e001      	b.n	8000e84 <StartRainBow_Task+0xa8>
					}else {
						rainbow_led_time = 50;
 8000e80:	2332      	movs	r3, #50	; 0x32
 8000e82:	623b      	str	r3, [r7, #32]
					}
					if(led_count > 40) {
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2b28      	cmp	r3, #40	; 0x28
 8000e88:	d902      	bls.n	8000e90 <StartRainBow_Task+0xb4>
							//led_count = 0;
							g_break_flg = 0;
 8000e8a:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <StartRainBow_Task+0x114>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
					}

					if(led_flg) {
 8000e90:	7ffb      	ldrb	r3, [r7, #31]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d012      	beq.n	8000ebc <StartRainBow_Task+0xe0>
						for(int i = 0; i < B_LED_CNT; i++) {
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	e00b      	b.n	8000eb4 <StartRainBow_Task+0xd8>
							setPixelColor(i, 0xff0000);
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f001 f807 	bl	8001eb8 <setPixelColor>
							led_flg = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	77fb      	strb	r3, [r7, #31]
						for(int i = 0; i < B_LED_CNT; i++) {
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	2b13      	cmp	r3, #19
 8000eb8:	ddf0      	ble.n	8000e9c <StartRainBow_Task+0xc0>
 8000eba:	e010      	b.n	8000ede <StartRainBow_Task+0x102>
						}
					}else {
						for(int i = 0; i < B_LED_CNT; i++) {
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	e00a      	b.n	8000ed8 <StartRainBow_Task+0xfc>
							setPixelColor(i, 0);
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 fff5 	bl	8001eb8 <setPixelColor>
							led_flg = 1;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	77fb      	strb	r3, [r7, #31]
						for(int i = 0; i < B_LED_CNT; i++) {
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	2b13      	cmp	r3, #19
 8000edc:	ddf1      	ble.n	8000ec2 <StartRainBow_Task+0xe6>
		for(j=0; j<256*5;) { // 5 cycles of all colors on wheel
 8000ede:	8b7b      	ldrh	r3, [r7, #26]
 8000ee0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000ee4:	d389      	bcc.n	8000dfa <StartRainBow_Task+0x1e>
						}
					}
				}
			}
		}
		osDelay(1);
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f00a f872 	bl	800afd0 <osDelay>
	{
 8000eec:	e782      	b.n	8000df4 <StartRainBow_Task+0x18>
 8000eee:	bf00      	nop
 8000ef0:	20000204 	.word	0x20000204

08000ef4 <StartAS504X_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAS504X_Task */
void StartAS504X_Task(void const * argument)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAS504X_Task */
  /* Infinite loop */

  uint32_t Task03_pre_time = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t Task03_led_time = 100;
 8000f00:	2364      	movs	r3, #100	; 0x64
 8000f02:	61bb      	str	r3, [r7, #24]
				g_break_flg = 0;
			}
		}
		*/

	  uint16_t current_angle = as504x_getRawRotation();
 8000f04:	f000 f8d8 	bl	80010b8 <as504x_getRawRotation>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	82fb      	strh	r3, [r7, #22]
	  float current_angle_map = as504x_read2angle(current_angle);
 8000f0c:	8afb      	ldrh	r3, [r7, #22]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f928 	bl	8001164 <as504x_read2angle>
 8000f14:	ed87 0a04 	vstr	s0, [r7, #16]

	  float angle = current_angle_map - zero_position_map;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <StartAS504X_Task+0x6c>)
 8000f1a:	edd3 7a00 	vldr	s15, [r3]
 8000f1e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f26:	edc7 7a03 	vstr	s15, [r7, #12]
	  angle = as504x_normalize(angle);
 8000f2a:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f2e:	f000 f8ed 	bl	800110c <as504x_normalize>
 8000f32:	ed87 0a03 	vstr	s0, [r7, #12]
	  if( angle > 180)
 8000f36:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f3a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000f64 <StartAS504X_Task+0x70>
 8000f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f46:	dd03      	ble.n	8000f50 <StartAS504X_Task+0x5c>
	  	g_break_flg = 1;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <StartAS504X_Task+0x74>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
 8000f4e:	e002      	b.n	8000f56 <StartAS504X_Task+0x62>
	  else
	  	g_break_flg = 0;
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <StartAS504X_Task+0x74>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
	  if (as504x_error()) {
		  //printf("ERROR: %d\n", as504x_getErrors());
	  }

*/
    osDelay(1);
 8000f56:	2001      	movs	r0, #1
 8000f58:	f00a f83a 	bl	800afd0 <osDelay>
  {
 8000f5c:	e7d2      	b.n	8000f04 <StartAS504X_Task+0x10>
 8000f5e:	bf00      	nop
 8000f60:	20002468 	.word	0x20002468
 8000f64:	43340000 	.word	0x43340000
 8000f68:	20000204 	.word	0x20000204

08000f6c <as504x_spiCalcEvenParity>:
}

/**
 * Utility function used to calculate even parity of word
 */
uint8_t as504x_spiCalcEvenParity(uint16_t value){
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	80fb      	strh	r3, [r7, #6]
	uint8_t cnt = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	73fb      	strb	r3, [r7, #15]
	uint8_t i;

	for (i = 0; i < 16; i++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	73bb      	strb	r3, [r7, #14]
 8000f7e:	7bbb      	ldrb	r3, [r7, #14]
 8000f80:	2b0f      	cmp	r3, #15
 8000f82:	d80e      	bhi.n	8000fa2 <as504x_spiCalcEvenParity+0x36>
	{
		if (value & 0x1)
 8000f84:	88fb      	ldrh	r3, [r7, #6]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d002      	beq.n	8000f94 <as504x_spiCalcEvenParity+0x28>
		{
			cnt++;
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	3301      	adds	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
		}
		value >>= 1;
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	105b      	asrs	r3, r3, #1
 8000f98:	80fb      	strh	r3, [r7, #6]
	for (i = 0; i < 16; i++)
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	73bb      	strb	r3, [r7, #14]
 8000fa0:	e7ed      	b.n	8000f7e <as504x_spiCalcEvenParity+0x12>
	}
	return cnt & 0x1;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	b2db      	uxtb	r3, r3
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <as504x_read>:
/*
 * Read a register from the sensor
 * Takes the address of the register as a 16 bit word
 * Returns the value of the register
 */
uint16_t as504x_read(uint16_t registerAddress){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80fb      	strh	r3, [r7, #6]

	uint8_t data[2];

	uint16_t command = 0b0100000000000000; // PAR=0 R/W=R
 8000fc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fc6:	81fb      	strh	r3, [r7, #14]
	command = command | registerAddress;
 8000fc8:	89fa      	ldrh	r2, [r7, #14]
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	81fb      	strh	r3, [r7, #14]

	//Add a parity bit on the the MSB
	command |= ((uint16_t)as504x_spiCalcEvenParity(command)<<15);
 8000fd0:	89fb      	ldrh	r3, [r7, #14]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ffca 	bl	8000f6c <as504x_spiCalcEvenParity>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	03db      	lsls	r3, r3, #15
 8000fdc:	b21a      	sxth	r2, r3
 8000fde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	81fb      	strh	r3, [r7, #14]

	//Split the command into two bytes
	data[1] = command & 0xFF;
 8000fe8:	89fb      	ldrh	r3, [r7, #14]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	737b      	strb	r3, [r7, #13]
	data[0] = ( command >> 8 ) & 0xFF;
 8000fee:	89fb      	ldrh	r3, [r7, #14]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	733b      	strb	r3, [r7, #12]

	EN_SPI;
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2110      	movs	r1, #16
 8000ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001000:	f001 ff5e 	bl	8002ec0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&data, 2, 0xFFFF);
 8001004:	f107 010c 	add.w	r1, r7, #12
 8001008:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800100c:	2202      	movs	r2, #2
 800100e:	4828      	ldr	r0, [pc, #160]	; (80010b0 <as504x_read+0xf8>)
 8001010:	f004 fbaa 	bl	8005768 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {}
 8001014:	4826      	ldr	r0, [pc, #152]	; (80010b0 <as504x_read+0xf8>)
 8001016:	f005 f863 	bl	80060e0 <HAL_SPI_GetState>
 800101a:	4603      	mov	r3, r0
 800101c:	2b01      	cmp	r3, #1
 800101e:	bf14      	ite	ne
 8001020:	2301      	movne	r3, #1
 8001022:	2300      	moveq	r3, #0
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d000      	beq.n	800102c <as504x_read+0x74>
 800102a:	e7f3      	b.n	8001014 <as504x_read+0x5c>
	DIS_SPI;
 800102c:	2201      	movs	r2, #1
 800102e:	2110      	movs	r1, #16
 8001030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001034:	f001 ff44 	bl	8002ec0 <HAL_GPIO_WritePin>

	EN_SPI;
 8001038:	2200      	movs	r2, #0
 800103a:	2110      	movs	r1, #16
 800103c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001040:	f001 ff3e 	bl	8002ec0 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)&data, 2, 0xFFFF);
 8001044:	f107 010c 	add.w	r1, r7, #12
 8001048:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800104c:	2202      	movs	r2, #2
 800104e:	4818      	ldr	r0, [pc, #96]	; (80010b0 <as504x_read+0xf8>)
 8001050:	f004 fd00 	bl	8005a54 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {}
 8001054:	4816      	ldr	r0, [pc, #88]	; (80010b0 <as504x_read+0xf8>)
 8001056:	f005 f843 	bl	80060e0 <HAL_SPI_GetState>
 800105a:	4603      	mov	r3, r0
 800105c:	2b01      	cmp	r3, #1
 800105e:	bf14      	ite	ne
 8001060:	2301      	movne	r3, #1
 8001062:	2300      	moveq	r3, #0
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d000      	beq.n	800106c <as504x_read+0xb4>
 800106a:	e7f3      	b.n	8001054 <as504x_read+0x9c>
	DIS_SPI;
 800106c:	2201      	movs	r2, #1
 800106e:	2110      	movs	r1, #16
 8001070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001074:	f001 ff24 	bl	8002ec0 <HAL_GPIO_WritePin>

	if (data[1] & 0x40) {
 8001078:	7b7b      	ldrb	r3, [r7, #13]
 800107a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <as504x_read+0xd2>
		errorFlag = 1;
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <as504x_read+0xfc>)
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	e002      	b.n	8001090 <as504x_read+0xd8>
	} else {
		errorFlag = 0;
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <as504x_read+0xfc>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
	}

	//Return the data, stripping the parity and error bits
	return (( ( data[1] & 0xFF ) << 8 ) | ( data[0] & 0xFF )) & ~0xC000;
 8001090:	7b7b      	ldrb	r3, [r7, #13]
 8001092:	021b      	lsls	r3, r3, #8
 8001094:	b21a      	sxth	r2, r3
 8001096:	7b3b      	ldrb	r3, [r7, #12]
 8001098:	b21b      	sxth	r3, r3
 800109a:	4313      	orrs	r3, r2
 800109c:	b21b      	sxth	r3, r3
 800109e:	b29b      	uxth	r3, r3
 80010a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80010a4:	b29b      	uxth	r3, r3
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20002400 	.word	0x20002400
 80010b4:	2000020c 	.word	0x2000020c

080010b8 <as504x_getRawRotation>:
}

/**
 * Returns the raw angle directly from the sensor
 */
uint16_t as504x_getRawRotation(){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	return as504x_read(AS5048A_ANGLE);
 80010bc:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80010c0:	f7ff ff7a 	bl	8000fb8 <as504x_read>
 80010c4:	4603      	mov	r3, r0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	bd80      	pop	{r7, pc}

080010ca <_ZSt4fmodIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
 80010ca:	b5b0      	push	{r4, r5, r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	ed87 0a01 	vstr	s0, [r7, #4]
 80010d4:	6038      	str	r0, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff fa06 	bl	80004e8 <__aeabi_f2d>
 80010dc:	4604      	mov	r4, r0
 80010de:	460d      	mov	r5, r1
 80010e0:	6838      	ldr	r0, [r7, #0]
 80010e2:	f7ff f9ef 	bl	80004c4 <__aeabi_i2d>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	ec43 2b11 	vmov	d1, r2, r3
 80010ee:	ec45 4b10 	vmov	d0, r4, r5
 80010f2:	f00b fd61 	bl	800cbb8 <fmod>
 80010f6:	eeb0 7a40 	vmov.f32	s14, s0
 80010fa:	eef0 7a60 	vmov.f32	s15, s1
    }
 80010fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001102:	eef0 0a67 	vmov.f32	s1, s15
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bdb0      	pop	{r4, r5, r7, pc}

0800110c <as504x_normalize>:
}

/*
 * Returns normalized angle value
 */
float as504x_normalize(float angle) {
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	ed87 0a01 	vstr	s0, [r7, #4]
	// http://stackoverflow.com/a/11498248/3167294
	#ifdef ANGLE_MODE_1
		angle += 180;
	#endif
	angle = fmod(angle, 360);
 8001116:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800111a:	ed97 0a01 	vldr	s0, [r7, #4]
 800111e:	f7ff ffd4 	bl	80010ca <_ZSt4fmodIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001122:	ec54 3b10 	vmov	r3, r4, d0
 8001126:	4618      	mov	r0, r3
 8001128:	4621      	mov	r1, r4
 800112a:	f7ff fce5 	bl	8000af8 <__aeabi_d2f>
 800112e:	4603      	mov	r3, r0
 8001130:	607b      	str	r3, [r7, #4]
	if (angle < 0) {
 8001132:	edd7 7a01 	vldr	s15, [r7, #4]
 8001136:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800113a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113e:	d507      	bpl.n	8001150 <as504x_normalize+0x44>
		angle += 360;
 8001140:	edd7 7a01 	vldr	s15, [r7, #4]
 8001144:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001160 <as504x_normalize+0x54>
 8001148:	ee77 7a87 	vadd.f32	s15, s15, s14
 800114c:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	#ifdef ANGLE_MODE_1
		angle -= 180;
	#endif
	return angle;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	ee07 3a90 	vmov	s15, r3
}
 8001156:	eeb0 0a67 	vmov.f32	s0, s15
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bd90      	pop	{r4, r7, pc}
 8001160:	43b40000 	.word	0x43b40000

08001164 <as504x_read2angle>:

/*
 * Returns caalculated angle value
 */
float as504x_read2angle(uint16_t angle) {
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	80fb      	strh	r3, [r7, #6]
	 * 14 bits = 2^(14) - 1 = 16.383
	 *
	 * https://www.arduino.cc/en/Reference/Map
	 *
	 */
	return (float)angle * ((float)360 / 16383);
 800116e:	88fb      	ldrh	r3, [r7, #6]
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001178:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001190 <as504x_read2angle+0x2c>
 800117c:	ee67 7a87 	vmul.f32	s15, s15, s14
};
 8001180:	eeb0 0a67 	vmov.f32	s0, s15
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	3cb402d0 	.word	0x3cb402d0

08001194 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <MX_DMA_Init+0x60>)
 800119c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800119e:	4a15      	ldr	r2, [pc, #84]	; (80011f4 <MX_DMA_Init+0x60>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	6493      	str	r3, [r2, #72]	; 0x48
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <MX_DMA_Init+0x60>)
 80011a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <MX_DMA_Init+0x60>)
 80011b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011b6:	4a0f      	ldr	r2, [pc, #60]	; (80011f4 <MX_DMA_Init+0x60>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6493      	str	r3, [r2, #72]	; 0x48
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <MX_DMA_Init+0x60>)
 80011c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2105      	movs	r1, #5
 80011ce:	200d      	movs	r0, #13
 80011d0:	f001 f888 	bl	80022e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80011d4:	200d      	movs	r0, #13
 80011d6:	f001 f8af 	bl	8002338 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2105      	movs	r1, #5
 80011de:	200e      	movs	r0, #14
 80011e0:	f001 f880 	bl	80022e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80011e4:	200e      	movs	r0, #14
 80011e6:	f001 f8a7 	bl	8002338 <HAL_NVIC_EnableIRQ>

}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40021000 	.word	0x40021000

080011f8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800120e:	4b3f      	ldr	r3, [pc, #252]	; (800130c <MX_GPIO_Init+0x114>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	4a3e      	ldr	r2, [pc, #248]	; (800130c <MX_GPIO_Init+0x114>)
 8001214:	f043 0320 	orr.w	r3, r3, #32
 8001218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121a:	4b3c      	ldr	r3, [pc, #240]	; (800130c <MX_GPIO_Init+0x114>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	f003 0320 	and.w	r3, r3, #32
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001226:	4b39      	ldr	r3, [pc, #228]	; (800130c <MX_GPIO_Init+0x114>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	4a38      	ldr	r2, [pc, #224]	; (800130c <MX_GPIO_Init+0x114>)
 800122c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001232:	4b36      	ldr	r3, [pc, #216]	; (800130c <MX_GPIO_Init+0x114>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	4b33      	ldr	r3, [pc, #204]	; (800130c <MX_GPIO_Init+0x114>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	4a32      	ldr	r2, [pc, #200]	; (800130c <MX_GPIO_Init+0x114>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124a:	4b30      	ldr	r3, [pc, #192]	; (800130c <MX_GPIO_Init+0x114>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	4b2d      	ldr	r3, [pc, #180]	; (800130c <MX_GPIO_Init+0x114>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	4a2c      	ldr	r2, [pc, #176]	; (800130c <MX_GPIO_Init+0x114>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001262:	4b2a      	ldr	r3, [pc, #168]	; (800130c <MX_GPIO_Init+0x114>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE0_Pin|LED_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001278:	f001 fe22 	bl	8002ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800127c:	2303      	movs	r3, #3
 800127e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001280:	2303      	movs	r3, #3
 8001282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	4820      	ldr	r0, [pc, #128]	; (8001310 <MX_GPIO_Init+0x118>)
 8001290:	f001 fbbe 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129a:	2303      	movs	r3, #3
 800129c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	481a      	ldr	r0, [pc, #104]	; (8001314 <MX_GPIO_Init+0x11c>)
 80012aa:	f001 fbb1 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA9 
                           PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9 
 80012ae:	f248 630e 	movw	r3, #34318	; 0x860e
 80012b2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b4:	2303      	movs	r3, #3
 80012b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c6:	f001 fba3 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CE0_Pin|LED_Pin;
 80012ca:	f44f 7388 	mov.w	r3, #272	; 0x110
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e6:	f001 fb93 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 PB4 PB6 
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6 
 80012ea:	f240 13d9 	movw	r3, #473	; 0x1d9
 80012ee:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f0:	2303      	movs	r3, #3
 80012f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4619      	mov	r1, r3
 80012fe:	4806      	ldr	r0, [pc, #24]	; (8001318 <MX_GPIO_Init+0x120>)
 8001300:	f001 fb86 	bl	8002a10 <HAL_GPIO_Init>

}
 8001304:	bf00      	nop
 8001306:	3728      	adds	r7, #40	; 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40021000 	.word	0x40021000
 8001310:	48001400 	.word	0x48001400
 8001314:	48001800 	.word	0x48001800
 8001318:	48000400 	.word	0x48000400

0800131c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001320:	f000 fedb 	bl	80020da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001324:	f000 f82e 	bl	8001384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001328:	f7ff ff66 	bl	80011f8 <MX_GPIO_Init>
  MX_DMA_Init();
 800132c:	f7ff ff32 	bl	8001194 <MX_DMA_Init>
  MX_SPI1_Init();
 8001330:	f000 f912 	bl	8001558 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001334:	f000 fa96 	bl	8001864 <MX_TIM2_Init>
  MX_TIM17_Init();
 8001338:	f000 faec 	bl	8001914 <MX_TIM17_Init>
  MX_USB_Device_Init();
 800133c:	f00a ff68 	bl	800c210 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  ws2812Init();
 8001340:	f000 fc50 	bl	8001be4 <ws2812Init>
  ws2812Begin(B_LED_CNT, R_LED_CNT);
 8001344:	2180      	movs	r1, #128	; 0x80
 8001346:	2014      	movs	r0, #20
 8001348:	f000 fc62 	bl	8001c10 <ws2812Begin>
  zero_position = as504x_getRawRotation();
 800134c:	f7ff feb4 	bl	80010b8 <as504x_getRawRotation>
 8001350:	4603      	mov	r3, r0
 8001352:	b29a      	uxth	r2, r3
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <main+0x60>)
 8001356:	801a      	strh	r2, [r3, #0]
  //printf("Zero: %d\n", zero_position);
  zero_position_map = as504x_read2angle(zero_position);
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <main+0x60>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff01 	bl	8001164 <as504x_read2angle>
 8001362:	ee07 0a90 	vmov	s15, r0
 8001366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <main+0x64>)
 800136c:	edc3 7a00 	vstr	s15, [r3]
  //printf("Angle: %f\n", zero_position_map);
	//uint32_t led_index=0;
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8001370:	f7ff fc12 	bl	8000b98 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001374:	f009 fdfe 	bl	800af74 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001378:	e7fe      	b.n	8001378 <main+0x5c>
 800137a:	bf00      	nop
 800137c:	20002464 	.word	0x20002464
 8001380:	20002468 	.word	0x20002468

08001384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b0a4      	sub	sp, #144	; 0x90
 8001388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800138e:	2238      	movs	r2, #56	; 0x38
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f00b fdb2 	bl	800cefc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001398:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a8:	463b      	mov	r3, r7
 80013aa:	2244      	movs	r2, #68	; 0x44
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f00b fda4 	bl	800cefc <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80013b4:	2000      	movs	r0, #0
 80013b6:	f002 fcd7 	bl	8003d68 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80013ba:	2322      	movs	r3, #34	; 0x22
 80013bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c4:	2340      	movs	r3, #64	; 0x40
 80013c6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013c8:	2301      	movs	r3, #1
 80013ca:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013cc:	2302      	movs	r3, #2
 80013ce:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013d0:	2302      	movs	r3, #2
 80013d2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80013d4:	2304      	movs	r3, #4
 80013d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80013d8:	2355      	movs	r3, #85	; 0x55
 80013da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013de:	2302      	movs	r3, #2
 80013e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013e4:	2302      	movs	r3, #2
 80013e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013ea:	2302      	movs	r3, #2
 80013ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013f4:	4618      	mov	r0, r3
 80013f6:	f002 fd6b 	bl	8003ed0 <HAL_RCC_OscConfig>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001400:	f000 f898 	bl	8001534 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001404:	230f      	movs	r3, #15
 8001406:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001408:	2303      	movs	r3, #3
 800140a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001414:	2300      	movs	r3, #0
 8001416:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8001418:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800141c:	2108      	movs	r1, #8
 800141e:	4618      	mov	r0, r3
 8001420:	f003 f968 	bl	80046f4 <HAL_RCC_ClockConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800142a:	f000 f883 	bl	8001534 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800142e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001432:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001434:	2300      	movs	r3, #0
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001438:	463b      	mov	r3, r7
 800143a:	4618      	mov	r0, r3
 800143c:	f003 fc62 	bl	8004d04 <HAL_RCCEx_PeriphCLKConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001446:	f000 f875 	bl	8001534 <Error_Handler>
  }
}
 800144a:	bf00      	nop
 800144c:	3790      	adds	r7, #144	; 0x90
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <millis>:
{
  HAL_Delay(ms);
}

uint32_t millis(void)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001456:	f000 fe6b 	bl	8002130 <HAL_GetTick>
 800145a:	4603      	mov	r3, r0
}
 800145c:	4618      	mov	r0, r3
 800145e:	bd80      	pop	{r7, pc}

08001460 <rotateLeft>:
 *
 * @num         Number to rotate.
 * @rotation    Number of times to rotate left.
 */
int rotateLeft(int num, unsigned int rotation)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
    int DROPPED_MSB;

    // The effective rotation
    rotation %= INT_BITS;
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <rotateLeft+0x50>)
 800146e:	fba3 1302 	umull	r1, r3, r3, r2
 8001472:	0919      	lsrs	r1, r3, #4
 8001474:	460b      	mov	r3, r1
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	603b      	str	r3, [r7, #0]


    // Loop till rotation becomes 0
    while(rotation--)
 8001480:	e009      	b.n	8001496 <rotateLeft+0x36>
    {
        // Get MSB of num before it gets dropped
        DROPPED_MSB = (num >> INT_BITS) & 1;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	151b      	asrs	r3, r3, #20
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60fb      	str	r3, [r7, #12]

        // Left rotate num by 1 and
        // Set its dropped MSB as new LSB
        num = (num << 1) | DROPPED_MSB;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	4313      	orrs	r3, r2
 8001494:	607b      	str	r3, [r7, #4]
    while(rotation--)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	1e5a      	subs	r2, r3, #1
 800149a:	603a      	str	r2, [r7, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1f0      	bne.n	8001482 <rotateLeft+0x22>
    }

    return num;
 80014a0:	687b      	ldr	r3, [r7, #4]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	cccccccd 	.word	0xcccccccd

080014b4 <rotateRight>:
 *
 * @num         Number to rotate.
 * @rotation    Number of times to rotate right.
 */
int rotateRight(int num, unsigned int rotation)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
    int DROPPED_LSB;

    // The effective rotation
    rotation %= INT_BITS;
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <rotateRight+0x58>)
 80014c2:	fba3 1302 	umull	r1, r3, r3, r2
 80014c6:	0919      	lsrs	r1, r3, #4
 80014c8:	460b      	mov	r3, r1
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	440b      	add	r3, r1
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	603b      	str	r3, [r7, #0]


    // Loop till rotation becomes 0
    while(rotation--)
 80014d4:	e00d      	b.n	80014f2 <rotateRight+0x3e>
    {
        // Get LSB of num before it gets dropped
        DROPPED_LSB = num & 1;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	60fb      	str	r3, [r7, #12]

        // Right shift num by 1 and
        // Clear its MSB
        num = (num >> 1) & (~(1 << INT_BITS));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	105b      	asrs	r3, r3, #1
 80014e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014e6:	607b      	str	r3, [r7, #4]

        // Set its dropped LSB as new MSB
        num = num | (DROPPED_LSB << INT_BITS);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	051b      	lsls	r3, r3, #20
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	607b      	str	r3, [r7, #4]
    while(rotation--)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	1e5a      	subs	r2, r3, #1
 80014f6:	603a      	str	r2, [r7, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1ec      	bne.n	80014d6 <rotateRight+0x22>
    }

    return num;
 80014fc:	687b      	ldr	r3, [r7, #4]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	cccccccd 	.word	0xcccccccd

08001510 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a04      	ldr	r2, [pc, #16]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d101      	bne.n	8001526 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001522:	f000 fdf3 	bl	800210c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40012c00 	.word	0x40012c00

08001534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <MX_SPI1_Init+0x74>)
 800155e:	4a1c      	ldr	r2, [pc, #112]	; (80015d0 <MX_SPI1_Init+0x78>)
 8001560:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001562:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <MX_SPI1_Init+0x74>)
 8001564:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001568:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <MX_SPI1_Init+0x74>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001570:	4b16      	ldr	r3, [pc, #88]	; (80015cc <MX_SPI1_Init+0x74>)
 8001572:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001576:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <MX_SPI1_Init+0x74>)
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800157e:	4b13      	ldr	r3, [pc, #76]	; (80015cc <MX_SPI1_Init+0x74>)
 8001580:	2201      	movs	r2, #1
 8001582:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_SPI1_Init+0x74>)
 8001586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800158a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_SPI1_Init+0x74>)
 800158e:	2218      	movs	r2, #24
 8001590:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <MX_SPI1_Init+0x74>)
 8001594:	2200      	movs	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <MX_SPI1_Init+0x74>)
 800159a:	2200      	movs	r2, #0
 800159c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <MX_SPI1_Init+0x74>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_SPI1_Init+0x74>)
 80015a6:	2207      	movs	r2, #7
 80015a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <MX_SPI1_Init+0x74>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <MX_SPI1_Init+0x74>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_SPI1_Init+0x74>)
 80015b8:	f003 ff44 	bl	8005444 <HAL_SPI_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015c2:	f7ff ffb7 	bl	8001534 <Error_Handler>
  }

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20002400 	.word	0x20002400
 80015d0:	40013000 	.word	0x40013000

080015d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a25      	ldr	r2, [pc, #148]	; (8001688 <HAL_SPI_MspInit+0xb4>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d144      	bne.n	8001680 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015f6:	4b25      	ldr	r3, [pc, #148]	; (800168c <HAL_SPI_MspInit+0xb8>)
 80015f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fa:	4a24      	ldr	r2, [pc, #144]	; (800168c <HAL_SPI_MspInit+0xb8>)
 80015fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001600:	6613      	str	r3, [r2, #96]	; 0x60
 8001602:	4b22      	ldr	r3, [pc, #136]	; (800168c <HAL_SPI_MspInit+0xb8>)
 8001604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001606:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	4b1f      	ldr	r3, [pc, #124]	; (800168c <HAL_SPI_MspInit+0xb8>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	4a1e      	ldr	r2, [pc, #120]	; (800168c <HAL_SPI_MspInit+0xb8>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800161a:	4b1c      	ldr	r3, [pc, #112]	; (800168c <HAL_SPI_MspInit+0xb8>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_SPI_MspInit+0xb8>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	4a18      	ldr	r2, [pc, #96]	; (800168c <HAL_SPI_MspInit+0xb8>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <HAL_SPI_MspInit+0xb8>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800163e:	2360      	movs	r3, #96	; 0x60
 8001640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800164e:	2305      	movs	r3, #5
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165c:	f001 f9d8 	bl	8002a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001660:	2320      	movs	r3, #32
 8001662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166c:	2300      	movs	r3, #0
 800166e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001670:	2305      	movs	r3, #5
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4619      	mov	r1, r3
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <HAL_SPI_MspInit+0xbc>)
 800167c:	f001 f9c8 	bl	8002a10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001680:	bf00      	nop
 8001682:	3728      	adds	r7, #40	; 0x28
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40013000 	.word	0x40013000
 800168c:	40021000 	.word	0x40021000
 8001690:	48000400 	.word	0x48000400

08001694 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800169e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a2:	6093      	str	r3, [r2, #8]
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40007000 	.word	0x40007000

080016b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_MspInit+0x50>)
 80016bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016be:	4a11      	ldr	r2, [pc, #68]	; (8001704 <HAL_MspInit+0x50>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6613      	str	r3, [r2, #96]	; 0x60
 80016c6:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <HAL_MspInit+0x50>)
 80016c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <HAL_MspInit+0x50>)
 80016d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d6:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <HAL_MspInit+0x50>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016dc:	6593      	str	r3, [r2, #88]	; 0x58
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_MspInit+0x50>)
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	210f      	movs	r1, #15
 80016ee:	f06f 0001 	mvn.w	r0, #1
 80016f2:	f000 fdf7 	bl	80022e4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80016f6:	f7ff ffcd 	bl	8001694 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000

08001708 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08c      	sub	sp, #48	; 0x30
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8001718:	2200      	movs	r2, #0
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	2019      	movs	r0, #25
 800171e:	f000 fde1 	bl	80022e4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8001722:	2019      	movs	r0, #25
 8001724:	f000 fe08 	bl	8002338 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <HAL_InitTick+0x9c>)
 800172a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172c:	4a1d      	ldr	r2, [pc, #116]	; (80017a4 <HAL_InitTick+0x9c>)
 800172e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001732:	6613      	str	r3, [r2, #96]	; 0x60
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <HAL_InitTick+0x9c>)
 8001736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001740:	f107 0210 	add.w	r2, r7, #16
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4611      	mov	r1, r2
 800174a:	4618      	mov	r0, r3
 800174c:	f003 fa54 	bl	8004bf8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001750:	f003 fa3c 	bl	8004bcc <HAL_RCC_GetPCLK2Freq>
 8001754:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001758:	4a13      	ldr	r2, [pc, #76]	; (80017a8 <HAL_InitTick+0xa0>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	0c9b      	lsrs	r3, r3, #18
 8001760:	3b01      	subs	r3, #1
 8001762:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <HAL_InitTick+0xa4>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <HAL_InitTick+0xa8>)
 8001768:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_InitTick+0xa4>)
 800176c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001770:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001772:	4a0e      	ldr	r2, [pc, #56]	; (80017ac <HAL_InitTick+0xa4>)
 8001774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001776:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <HAL_InitTick+0xa4>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_InitTick+0xa4>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001784:	4809      	ldr	r0, [pc, #36]	; (80017ac <HAL_InitTick+0xa4>)
 8001786:	f004 fe2f 	bl	80063e8 <HAL_TIM_Base_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d104      	bne.n	800179a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001790:	4806      	ldr	r0, [pc, #24]	; (80017ac <HAL_InitTick+0xa4>)
 8001792:	f004 ff05 	bl	80065a0 <HAL_TIM_Base_Start_IT>
 8001796:	4603      	mov	r3, r0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3730      	adds	r7, #48	; 0x30
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40021000 	.word	0x40021000
 80017a8:	431bde83 	.word	0x431bde83
 80017ac:	2000246c 	.word	0x2000246c
 80017b0:	40012c00 	.word	0x40012c00

080017b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <HardFault_Handler+0x4>

080017c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <MemManage_Handler+0x4>

080017ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <BusFault_Handler+0x4>

080017d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <UsageFault_Handler+0x4>

080017da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <DMA1_Channel3_IRQHandler+0x10>)
 80017ee:	f000 ffbf 	bl	8002770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200025b0 	.word	0x200025b0

080017fc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <DMA1_Channel4_IRQHandler+0x10>)
 8001802:	f000 ffb5 	bl	8002770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200024b8 	.word	0x200024b8

08001810 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <USB_LP_IRQHandler+0x10>)
 8001816:	f001 fc6d 	bl	80030f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200032ac 	.word	0x200032ac

08001824 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800182a:	f005 fa89 	bl	8006d40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	2000246c 	.word	0x2000246c

08001838 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <SystemInit+0x28>)
 800183e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001842:	4a07      	ldr	r2, [pc, #28]	; (8001860 <SystemInit+0x28>)
 8001844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <SystemInit+0x28>)
 800184e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001852:	609a      	str	r2, [r3, #8]
#endif
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim2_ch1;
DMA_HandleTypeDef hdma_tim17_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800186a:	f107 031c 	add.w	r3, r7, #28
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001876:	463b      	mov	r3, r7
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
 8001884:	615a      	str	r2, [r3, #20]
 8001886:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001888:	4b21      	ldr	r3, [pc, #132]	; (8001910 <MX_TIM2_Init+0xac>)
 800188a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800188e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001890:	4b1f      	ldr	r3, [pc, #124]	; (8001910 <MX_TIM2_Init+0xac>)
 8001892:	2200      	movs	r2, #0
 8001894:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001896:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <MX_TIM2_Init+0xac>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 212;
 800189c:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <MX_TIM2_Init+0xac>)
 800189e:	22d4      	movs	r2, #212	; 0xd4
 80018a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a2:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <MX_TIM2_Init+0xac>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a8:	4b19      	ldr	r3, [pc, #100]	; (8001910 <MX_TIM2_Init+0xac>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018ae:	4818      	ldr	r0, [pc, #96]	; (8001910 <MX_TIM2_Init+0xac>)
 80018b0:	f004 fef6 	bl	80066a0 <HAL_TIM_PWM_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80018ba:	f7ff fe3b 	bl	8001534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018c6:	f107 031c 	add.w	r3, r7, #28
 80018ca:	4619      	mov	r1, r3
 80018cc:	4810      	ldr	r0, [pc, #64]	; (8001910 <MX_TIM2_Init+0xac>)
 80018ce:	f006 fb93 	bl	8007ff8 <HAL_TIMEx_MasterConfigSynchronization>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80018d8:	f7ff fe2c 	bl	8001534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018dc:	2360      	movs	r3, #96	; 0x60
 80018de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ec:	463b      	mov	r3, r7
 80018ee:	2200      	movs	r2, #0
 80018f0:	4619      	mov	r1, r3
 80018f2:	4807      	ldr	r0, [pc, #28]	; (8001910 <MX_TIM2_Init+0xac>)
 80018f4:	f005 fba4 	bl	8007040 <HAL_TIM_PWM_ConfigChannel>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80018fe:	f7ff fe19 	bl	8001534 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001902:	4803      	ldr	r0, [pc, #12]	; (8001910 <MX_TIM2_Init+0xac>)
 8001904:	f000 f914 	bl	8001b30 <HAL_TIM_MspPostInit>

}
 8001908:	bf00      	nop
 800190a:	3728      	adds	r7, #40	; 0x28
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20002564 	.word	0x20002564

08001914 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b094      	sub	sp, #80	; 0x50
 8001918:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800191a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	615a      	str	r2, [r3, #20]
 800192c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800192e:	463b      	mov	r3, r7
 8001930:	2234      	movs	r2, #52	; 0x34
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f00b fae1 	bl	800cefc <memset>

  htim17.Instance = TIM17;
 800193a:	4b30      	ldr	r3, [pc, #192]	; (80019fc <MX_TIM17_Init+0xe8>)
 800193c:	4a30      	ldr	r2, [pc, #192]	; (8001a00 <MX_TIM17_Init+0xec>)
 800193e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001940:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <MX_TIM17_Init+0xe8>)
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001946:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <MX_TIM17_Init+0xe8>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 212;
 800194c:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <MX_TIM17_Init+0xe8>)
 800194e:	22d4      	movs	r2, #212	; 0xd4
 8001950:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001952:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <MX_TIM17_Init+0xe8>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001958:	4b28      	ldr	r3, [pc, #160]	; (80019fc <MX_TIM17_Init+0xe8>)
 800195a:	2200      	movs	r2, #0
 800195c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195e:	4b27      	ldr	r3, [pc, #156]	; (80019fc <MX_TIM17_Init+0xe8>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001964:	4825      	ldr	r0, [pc, #148]	; (80019fc <MX_TIM17_Init+0xe8>)
 8001966:	f004 fd3f 	bl	80063e8 <HAL_TIM_Base_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001970:	f7ff fde0 	bl	8001534 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001974:	4821      	ldr	r0, [pc, #132]	; (80019fc <MX_TIM17_Init+0xe8>)
 8001976:	f004 fe93 	bl	80066a0 <HAL_TIM_PWM_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8001980:	f7ff fdd8 	bl	8001534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001984:	2360      	movs	r3, #96	; 0x60
 8001986:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800198c:	2300      	movs	r3, #0
 800198e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001990:	2300      	movs	r3, #0
 8001992:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001998:	2300      	movs	r3, #0
 800199a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800199c:	2300      	movs	r3, #0
 800199e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019a4:	2200      	movs	r2, #0
 80019a6:	4619      	mov	r1, r3
 80019a8:	4814      	ldr	r0, [pc, #80]	; (80019fc <MX_TIM17_Init+0xe8>)
 80019aa:	f005 fb49 	bl	8007040 <HAL_TIM_PWM_ConfigChannel>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 80019b4:	f7ff fdbe 	bl	8001534 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80019da:	463b      	mov	r3, r7
 80019dc:	4619      	mov	r1, r3
 80019de:	4807      	ldr	r0, [pc, #28]	; (80019fc <MX_TIM17_Init+0xe8>)
 80019e0:	f006 fc4e 	bl	8008280 <HAL_TIMEx_ConfigBreakDeadTime>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 80019ea:	f7ff fda3 	bl	8001534 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim17);
 80019ee:	4803      	ldr	r0, [pc, #12]	; (80019fc <MX_TIM17_Init+0xe8>)
 80019f0:	f000 f89e 	bl	8001b30 <HAL_TIM_MspPostInit>

}
 80019f4:	bf00      	nop
 80019f6:	3750      	adds	r7, #80	; 0x50
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20002518 	.word	0x20002518
 8001a00:	40014800 	.word	0x40014800

08001a04 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a14:	d135      	bne.n	8001a82 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a16:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <HAL_TIM_PWM_MspInit+0x88>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	4a1c      	ldr	r2, [pc, #112]	; (8001a8c <HAL_TIM_PWM_MspInit+0x88>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6593      	str	r3, [r2, #88]	; 0x58
 8001a22:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <HAL_TIM_PWM_MspInit+0x88>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel4;
 8001a2e:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a30:	4a18      	ldr	r2, [pc, #96]	; (8001a94 <HAL_TIM_PWM_MspInit+0x90>)
 8001a32:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8001a34:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a36:	2238      	movs	r2, #56	; 0x38
 8001a38:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a3c:	2210      	movs	r2, #16
 8001a3e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a40:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a48:	2280      	movs	r2, #128	; 0x80
 8001a4a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a4c:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a52:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a54:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001a66:	480a      	ldr	r0, [pc, #40]	; (8001a90 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a68:	f000 fc7e 	bl	8002368 <HAL_DMA_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_TIM_PWM_MspInit+0x72>
    {
      Error_Handler();
 8001a72:	f7ff fd5f 	bl	8001534 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a7a:	625a      	str	r2, [r3, #36]	; 0x24
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	200024b8 	.word	0x200024b8
 8001a94:	40020044 	.word	0x40020044

08001a98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a1e      	ldr	r2, [pc, #120]	; (8001b20 <HAL_TIM_Base_MspInit+0x88>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d135      	bne.n	8001b16 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <HAL_TIM_Base_MspInit+0x8c>)
 8001aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aae:	4a1d      	ldr	r2, [pc, #116]	; (8001b24 <HAL_TIM_Base_MspInit+0x8c>)
 8001ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <HAL_TIM_Base_MspInit+0x8c>)
 8001ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM17 DMA Init */
    /* TIM17_CH1 Init */
    hdma_tim17_ch1.Instance = DMA1_Channel3;
 8001ac2:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <HAL_TIM_Base_MspInit+0x90>)
 8001ac4:	4a19      	ldr	r2, [pc, #100]	; (8001b2c <HAL_TIM_Base_MspInit+0x94>)
 8001ac6:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
 8001ac8:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <HAL_TIM_Base_MspInit+0x90>)
 8001aca:	2254      	movs	r2, #84	; 0x54
 8001acc:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ace:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <HAL_TIM_Base_MspInit+0x90>)
 8001ad0:	2210      	movs	r2, #16
 8001ad2:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad4:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <HAL_TIM_Base_MspInit+0x90>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <HAL_TIM_Base_MspInit+0x90>)
 8001adc:	2280      	movs	r2, #128	; 0x80
 8001ade:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <HAL_TIM_Base_MspInit+0x90>)
 8001ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae6:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <HAL_TIM_Base_MspInit+0x90>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1.Init.Mode = DMA_CIRCULAR;
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <HAL_TIM_Base_MspInit+0x90>)
 8001af0:	2220      	movs	r2, #32
 8001af2:	61da      	str	r2, [r3, #28]
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <HAL_TIM_Base_MspInit+0x90>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 8001afa:	480b      	ldr	r0, [pc, #44]	; (8001b28 <HAL_TIM_Base_MspInit+0x90>)
 8001afc:	f000 fc34 	bl	8002368 <HAL_DMA_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8001b06:	f7ff fd15 	bl	8001534 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a06      	ldr	r2, [pc, #24]	; (8001b28 <HAL_TIM_Base_MspInit+0x90>)
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24
 8001b10:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <HAL_TIM_Base_MspInit+0x90>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40014800 	.word	0x40014800
 8001b24:	40021000 	.word	0x40021000
 8001b28:	200025b0 	.word	0x200025b0
 8001b2c:	40020030 	.word	0x40020030

08001b30 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	; 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b50:	d11d      	bne.n	8001b8e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <HAL_TIM_MspPostInit+0xac>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	4a21      	ldr	r2, [pc, #132]	; (8001bdc <HAL_TIM_MspPostInit+0xac>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b5e:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <HAL_TIM_MspPostInit+0xac>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = B_NP_Pin;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b76:	2303      	movs	r3, #3
 8001b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(B_NP_GPIO_Port, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b88:	f000 ff42 	bl	8002a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001b8c:	e021      	b.n	8001bd2 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM17)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a13      	ldr	r2, [pc, #76]	; (8001be0 <HAL_TIM_MspPostInit+0xb0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d11c      	bne.n	8001bd2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b98:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <HAL_TIM_MspPostInit+0xac>)
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9c:	4a0f      	ldr	r2, [pc, #60]	; (8001bdc <HAL_TIM_MspPostInit+0xac>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba4:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <HAL_TIM_MspPostInit+0xac>)
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = R_NP_Pin;
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(R_NP_GPIO_Port, &GPIO_InitStruct);
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bce:	f000 ff1f 	bl	8002a10 <HAL_GPIO_Init>
}
 8001bd2:	bf00      	nop
 8001bd4:	3728      	adds	r7, #40	; 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40014800 	.word	0x40014800

08001be4 <ws2812Init>:
extern TIM_HandleTypeDef htim17;



_Bool ws2812Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  memset(led_buf, 0, sizeof(led_buf));
 8001be8:	f240 6232 	movw	r2, #1586	; 0x632
 8001bec:	2100      	movs	r1, #0
 8001bee:	4806      	ldr	r0, [pc, #24]	; (8001c08 <ws2812Init+0x24>)
 8001bf0:	f00b f984 	bl	800cefc <memset>
  memset(led_buf_rainbow, 0, sizeof(led_buf));
 8001bf4:	f240 6232 	movw	r2, #1586	; 0x632
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4804      	ldr	r0, [pc, #16]	; (8001c0c <ws2812Init+0x28>)
 8001bfc:	f00b f97e 	bl	800cefc <memset>

  return 0;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000210 	.word	0x20000210
 8001c0c:	20000844 	.word	0x20000844

08001c10 <ws2812Begin>:

void ws2812Begin(uint32_t break_led_cnt, uint32_t ranbow_led_cnt)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  ws2812.break_led_cnt = break_led_cnt;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <ws2812Begin+0x5c>)
 8001c20:	801a      	strh	r2, [r3, #0]
  ws2812.ranbow_led_cnt = ranbow_led_cnt;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <ws2812Begin+0x5c>)
 8001c28:	805a      	strh	r2, [r3, #2]


  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)led_buf, (50 + 24 *  ws2812.break_led_cnt) * 1);
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <ws2812Begin+0x5c>)
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	0052      	lsls	r2, r2, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3332      	adds	r3, #50	; 0x32
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	4a0c      	ldr	r2, [pc, #48]	; (8001c70 <ws2812Begin+0x60>)
 8001c3e:	2100      	movs	r1, #0
 8001c40:	480c      	ldr	r0, [pc, #48]	; (8001c74 <ws2812Begin+0x64>)
 8001c42:	f004 fe09 	bl	8006858 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t *)led_buf_rainbow, (50 + 24 *  ws2812.ranbow_led_cnt) * 1);
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <ws2812Begin+0x5c>)
 8001c48:	885b      	ldrh	r3, [r3, #2]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	0052      	lsls	r2, r2, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	3332      	adds	r3, #50	; 0x32
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	4a07      	ldr	r2, [pc, #28]	; (8001c78 <ws2812Begin+0x68>)
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4807      	ldr	r0, [pc, #28]	; (8001c7c <ws2812Begin+0x6c>)
 8001c5e:	f004 fdfb 	bl	8006858 <HAL_TIM_PWM_Start_DMA>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20002610 	.word	0x20002610
 8001c70:	20000210 	.word	0x20000210
 8001c74:	20002564 	.word	0x20002564
 8001c78:	20000844 	.word	0x20000844
 8001c7c:	20002518 	.word	0x20002518

08001c80 <ws2812SetColor>:

void ws2812SetColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b08b      	sub	sp, #44	; 0x2c
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	4608      	mov	r0, r1
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4603      	mov	r3, r0
 8001c90:	70fb      	strb	r3, [r7, #3]
 8001c92:	460b      	mov	r3, r1
 8001c94:	70bb      	strb	r3, [r7, #2]
 8001c96:	4613      	mov	r3, r2
 8001c98:	707b      	strb	r3, [r7, #1]
  uint8_t b_bit[8];

  uint32_t offset;


  for (int i=0; i<8; i++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c9e:	e03e      	b.n	8001d1e <ws2812SetColor+0x9e>
  {
    if (red & (1<<7))
 8001ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	da06      	bge.n	8001cb6 <ws2812SetColor+0x36>
    {
      r_bit[i] = BIT_HIGH;
 8001ca8:	f107 0218 	add.w	r2, r7, #24
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	4413      	add	r3, r2
 8001cb0:	2287      	movs	r2, #135	; 0x87
 8001cb2:	701a      	strb	r2, [r3, #0]
 8001cb4:	e005      	b.n	8001cc2 <ws2812SetColor+0x42>
    }
    else
    {
      r_bit[i] = BIT_LOW;
 8001cb6:	f107 0218 	add.w	r2, r7, #24
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	4413      	add	r3, r2
 8001cbe:	2243      	movs	r2, #67	; 0x43
 8001cc0:	701a      	strb	r2, [r3, #0]
    }
    red <<= 1;
 8001cc2:	78fb      	ldrb	r3, [r7, #3]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	70fb      	strb	r3, [r7, #3]

    if (green & (1<<7))
 8001cc8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	da06      	bge.n	8001cde <ws2812SetColor+0x5e>
    {
      g_bit[i] = BIT_HIGH;
 8001cd0:	f107 0210 	add.w	r2, r7, #16
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	4413      	add	r3, r2
 8001cd8:	2287      	movs	r2, #135	; 0x87
 8001cda:	701a      	strb	r2, [r3, #0]
 8001cdc:	e005      	b.n	8001cea <ws2812SetColor+0x6a>
    }
    else
    {
      g_bit[i] = BIT_LOW;
 8001cde:	f107 0210 	add.w	r2, r7, #16
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	4413      	add	r3, r2
 8001ce6:	2243      	movs	r2, #67	; 0x43
 8001ce8:	701a      	strb	r2, [r3, #0]
    }
    green <<= 1;
 8001cea:	78bb      	ldrb	r3, [r7, #2]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	70bb      	strb	r3, [r7, #2]

    if (blue & (1<<7))
 8001cf0:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	da06      	bge.n	8001d06 <ws2812SetColor+0x86>
    {
      b_bit[i] = BIT_HIGH;
 8001cf8:	f107 0208 	add.w	r2, r7, #8
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	4413      	add	r3, r2
 8001d00:	2287      	movs	r2, #135	; 0x87
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	e005      	b.n	8001d12 <ws2812SetColor+0x92>
    }
    else
    {
      b_bit[i] = BIT_LOW;
 8001d06:	f107 0208 	add.w	r2, r7, #8
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	4413      	add	r3, r2
 8001d0e:	2243      	movs	r2, #67	; 0x43
 8001d10:	701a      	strb	r2, [r3, #0]
    }
    blue <<= 1;
 8001d12:	787b      	ldrb	r3, [r7, #1]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	707b      	strb	r3, [r7, #1]
  for (int i=0; i<8; i++)
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	2b07      	cmp	r3, #7
 8001d22:	ddbd      	ble.n	8001ca0 <ws2812SetColor+0x20>
  }

  offset = 50;
 8001d24:	2332      	movs	r3, #50	; 0x32
 8001d26:	623b      	str	r3, [r7, #32]

  memcpy(&led_buf[offset + index*24 + 8*0], g_bit, 8*1);
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	461a      	mov	r2, r3
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	4413      	add	r3, r2
 8001d38:	4a17      	ldr	r2, [pc, #92]	; (8001d98 <ws2812SetColor+0x118>)
 8001d3a:	4413      	add	r3, r2
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	f107 0310 	add.w	r3, r7, #16
 8001d42:	cb03      	ldmia	r3!, {r0, r1}
 8001d44:	6010      	str	r0, [r2, #0]
 8001d46:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf[offset + index*24 + 8*1], r_bit, 8*1);
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	461a      	mov	r2, r3
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	4413      	add	r3, r2
 8001d58:	3308      	adds	r3, #8
 8001d5a:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <ws2812SetColor+0x118>)
 8001d5c:	4413      	add	r3, r2
 8001d5e:	461a      	mov	r2, r3
 8001d60:	f107 0318 	add.w	r3, r7, #24
 8001d64:	cb03      	ldmia	r3!, {r0, r1}
 8001d66:	6010      	str	r0, [r2, #0]
 8001d68:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf[offset + index*24 + 8*2], b_bit, 8*1);
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	461a      	mov	r2, r3
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	4413      	add	r3, r2
 8001d7a:	3310      	adds	r3, #16
 8001d7c:	4a06      	ldr	r2, [pc, #24]	; (8001d98 <ws2812SetColor+0x118>)
 8001d7e:	4413      	add	r3, r2
 8001d80:	461a      	mov	r2, r3
 8001d82:	f107 0308 	add.w	r3, r7, #8
 8001d86:	cb03      	ldmia	r3!, {r0, r1}
 8001d88:	6010      	str	r0, [r2, #0]
 8001d8a:	6051      	str	r1, [r2, #4]
}
 8001d8c:	bf00      	nop
 8001d8e:	372c      	adds	r7, #44	; 0x2c
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	20000210 	.word	0x20000210

08001d9c <ws2812SetRanbowColor>:

void ws2812SetRanbowColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b08b      	sub	sp, #44	; 0x2c
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	4608      	mov	r0, r1
 8001da6:	4611      	mov	r1, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	4603      	mov	r3, r0
 8001dac:	70fb      	strb	r3, [r7, #3]
 8001dae:	460b      	mov	r3, r1
 8001db0:	70bb      	strb	r3, [r7, #2]
 8001db2:	4613      	mov	r3, r2
 8001db4:	707b      	strb	r3, [r7, #1]
  uint8_t b_bit[8];

  uint32_t offset;


  for (int i=0; i<8; i++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dba:	e03e      	b.n	8001e3a <ws2812SetRanbowColor+0x9e>
  {
    if (red & (1<<7))
 8001dbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	da06      	bge.n	8001dd2 <ws2812SetRanbowColor+0x36>
    {
      r_bit[i] = BIT_HIGH;
 8001dc4:	f107 0218 	add.w	r2, r7, #24
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	4413      	add	r3, r2
 8001dcc:	2287      	movs	r2, #135	; 0x87
 8001dce:	701a      	strb	r2, [r3, #0]
 8001dd0:	e005      	b.n	8001dde <ws2812SetRanbowColor+0x42>
    }
    else
    {
      r_bit[i] = BIT_LOW;
 8001dd2:	f107 0218 	add.w	r2, r7, #24
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	4413      	add	r3, r2
 8001dda:	2243      	movs	r2, #67	; 0x43
 8001ddc:	701a      	strb	r2, [r3, #0]
    }
    red <<= 1;
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	70fb      	strb	r3, [r7, #3]

    if (green & (1<<7))
 8001de4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	da06      	bge.n	8001dfa <ws2812SetRanbowColor+0x5e>
    {
      g_bit[i] = BIT_HIGH;
 8001dec:	f107 0210 	add.w	r2, r7, #16
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	4413      	add	r3, r2
 8001df4:	2287      	movs	r2, #135	; 0x87
 8001df6:	701a      	strb	r2, [r3, #0]
 8001df8:	e005      	b.n	8001e06 <ws2812SetRanbowColor+0x6a>
    }
    else
    {
      g_bit[i] = BIT_LOW;
 8001dfa:	f107 0210 	add.w	r2, r7, #16
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	4413      	add	r3, r2
 8001e02:	2243      	movs	r2, #67	; 0x43
 8001e04:	701a      	strb	r2, [r3, #0]
    }
    green <<= 1;
 8001e06:	78bb      	ldrb	r3, [r7, #2]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	70bb      	strb	r3, [r7, #2]

    if (blue & (1<<7))
 8001e0c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	da06      	bge.n	8001e22 <ws2812SetRanbowColor+0x86>
    {
      b_bit[i] = BIT_HIGH;
 8001e14:	f107 0208 	add.w	r2, r7, #8
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	4413      	add	r3, r2
 8001e1c:	2287      	movs	r2, #135	; 0x87
 8001e1e:	701a      	strb	r2, [r3, #0]
 8001e20:	e005      	b.n	8001e2e <ws2812SetRanbowColor+0x92>
    }
    else
    {
      b_bit[i] = BIT_LOW;
 8001e22:	f107 0208 	add.w	r2, r7, #8
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	4413      	add	r3, r2
 8001e2a:	2243      	movs	r2, #67	; 0x43
 8001e2c:	701a      	strb	r2, [r3, #0]
    }
    blue <<= 1;
 8001e2e:	787b      	ldrb	r3, [r7, #1]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	707b      	strb	r3, [r7, #1]
  for (int i=0; i<8; i++)
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	3301      	adds	r3, #1
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	2b07      	cmp	r3, #7
 8001e3e:	ddbd      	ble.n	8001dbc <ws2812SetRanbowColor+0x20>
  }

  offset = 50;
 8001e40:	2332      	movs	r3, #50	; 0x32
 8001e42:	623b      	str	r3, [r7, #32]

  memcpy(&led_buf_rainbow[offset + index*24 + 8*0], g_bit, 8*1);
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	6a3b      	ldr	r3, [r7, #32]
 8001e52:	4413      	add	r3, r2
 8001e54:	4a17      	ldr	r2, [pc, #92]	; (8001eb4 <ws2812SetRanbowColor+0x118>)
 8001e56:	4413      	add	r3, r2
 8001e58:	461a      	mov	r2, r3
 8001e5a:	f107 0310 	add.w	r3, r7, #16
 8001e5e:	cb03      	ldmia	r3!, {r0, r1}
 8001e60:	6010      	str	r0, [r2, #0]
 8001e62:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf_rainbow[offset + index*24 + 8*1], r_bit, 8*1);
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	4413      	add	r3, r2
 8001e74:	3308      	adds	r3, #8
 8001e76:	4a0f      	ldr	r2, [pc, #60]	; (8001eb4 <ws2812SetRanbowColor+0x118>)
 8001e78:	4413      	add	r3, r2
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	f107 0318 	add.w	r3, r7, #24
 8001e80:	cb03      	ldmia	r3!, {r0, r1}
 8001e82:	6010      	str	r0, [r2, #0]
 8001e84:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf_rainbow[offset + index*24 + 8*2], b_bit, 8*1);
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	461a      	mov	r2, r3
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	4413      	add	r3, r2
 8001e96:	3310      	adds	r3, #16
 8001e98:	4a06      	ldr	r2, [pc, #24]	; (8001eb4 <ws2812SetRanbowColor+0x118>)
 8001e9a:	4413      	add	r3, r2
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	f107 0308 	add.w	r3, r7, #8
 8001ea2:	cb03      	ldmia	r3!, {r0, r1}
 8001ea4:	6010      	str	r0, [r2, #0]
 8001ea6:	6051      	str	r1, [r2, #4]
}
 8001ea8:	bf00      	nop
 8001eaa:	372c      	adds	r7, #44	; 0x2c
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	20000844 	.word	0x20000844

08001eb8 <setPixelColor>:
    }
    brightness = newBrightness;
  }
}

void setPixelColor(uint16_t n, uint32_t c) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	80fb      	strh	r3, [r7, #6]
  if(n < ws2812.ranbow_led_cnt) {
 8001ec4:	4b37      	ldr	r3, [pc, #220]	; (8001fa4 <setPixelColor+0xec>)
 8001ec6:	885b      	ldrh	r3, [r3, #2]
 8001ec8:	88fa      	ldrh	r2, [r7, #6]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d266      	bcs.n	8001f9c <setPixelColor+0xe4>
    uint8_t *p,
      r = (uint8_t)(c >> 16),
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	0c1b      	lsrs	r3, r3, #16
 8001ed2:	72fb      	strb	r3, [r7, #11]
      g = (uint8_t)(c >>  8),
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	0a1b      	lsrs	r3, r3, #8
 8001ed8:	72bb      	strb	r3, [r7, #10]
      b = (uint8_t)c;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	727b      	strb	r3, [r7, #9]
    if(brightness) { // See notes in setBrightness()
 8001ede:	4b32      	ldr	r3, [pc, #200]	; (8001fa8 <setPixelColor+0xf0>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d014      	beq.n	8001f10 <setPixelColor+0x58>
      r = (r * brightness) >> 8;
 8001ee6:	7afb      	ldrb	r3, [r7, #11]
 8001ee8:	4a2f      	ldr	r2, [pc, #188]	; (8001fa8 <setPixelColor+0xf0>)
 8001eea:	7812      	ldrb	r2, [r2, #0]
 8001eec:	fb02 f303 	mul.w	r3, r2, r3
 8001ef0:	121b      	asrs	r3, r3, #8
 8001ef2:	72fb      	strb	r3, [r7, #11]
      g = (g * brightness) >> 8;
 8001ef4:	7abb      	ldrb	r3, [r7, #10]
 8001ef6:	4a2c      	ldr	r2, [pc, #176]	; (8001fa8 <setPixelColor+0xf0>)
 8001ef8:	7812      	ldrb	r2, [r2, #0]
 8001efa:	fb02 f303 	mul.w	r3, r2, r3
 8001efe:	121b      	asrs	r3, r3, #8
 8001f00:	72bb      	strb	r3, [r7, #10]
      b = (b * brightness) >> 8;
 8001f02:	7a7b      	ldrb	r3, [r7, #9]
 8001f04:	4a28      	ldr	r2, [pc, #160]	; (8001fa8 <setPixelColor+0xf0>)
 8001f06:	7812      	ldrb	r2, [r2, #0]
 8001f08:	fb02 f303 	mul.w	r3, r2, r3
 8001f0c:	121b      	asrs	r3, r3, #8
 8001f0e:	727b      	strb	r3, [r7, #9]
    }
    if(wOffset == rOffset) {
 8001f10:	4b26      	ldr	r3, [pc, #152]	; (8001fac <setPixelColor+0xf4>)
 8001f12:	781a      	ldrb	r2, [r3, #0]
 8001f14:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <setPixelColor+0xf8>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d108      	bne.n	8001f2e <setPixelColor+0x76>
      p = &pixels[n * 3];
 8001f1c:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <setPixelColor+0xfc>)
 8001f1e:	6819      	ldr	r1, [r3, #0]
 8001f20:	88fa      	ldrh	r2, [r7, #6]
 8001f22:	4613      	mov	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	440b      	add	r3, r1
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	e01b      	b.n	8001f66 <setPixelColor+0xae>
    } else {
      p = &pixels[n * 4];
 8001f2e:	4b21      	ldr	r3, [pc, #132]	; (8001fb4 <setPixelColor+0xfc>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	88fa      	ldrh	r2, [r7, #6]
 8001f34:	0092      	lsls	r2, r2, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
      uint8_t w = (uint8_t)(c >> 24);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	0e1b      	lsrs	r3, r3, #24
 8001f3e:	723b      	strb	r3, [r7, #8]
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <setPixelColor+0xf0>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d007      	beq.n	8001f58 <setPixelColor+0xa0>
 8001f48:	7a3b      	ldrb	r3, [r7, #8]
 8001f4a:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <setPixelColor+0xf0>)
 8001f4c:	7812      	ldrb	r2, [r2, #0]
 8001f4e:	fb02 f303 	mul.w	r3, r2, r3
 8001f52:	121b      	asrs	r3, r3, #8
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	e000      	b.n	8001f5a <setPixelColor+0xa2>
 8001f58:	7a3b      	ldrb	r3, [r7, #8]
 8001f5a:	4a14      	ldr	r2, [pc, #80]	; (8001fac <setPixelColor+0xf4>)
 8001f5c:	7812      	ldrb	r2, [r2, #0]
 8001f5e:	4611      	mov	r1, r2
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	440a      	add	r2, r1
 8001f64:	7013      	strb	r3, [r2, #0]
    }
    p[rOffset] = r;
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <setPixelColor+0xf8>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4413      	add	r3, r2
 8001f70:	7afa      	ldrb	r2, [r7, #11]
 8001f72:	701a      	strb	r2, [r3, #0]
    p[gOffset] = g;
 8001f74:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <setPixelColor+0x100>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	7aba      	ldrb	r2, [r7, #10]
 8001f80:	701a      	strb	r2, [r3, #0]
    p[bOffset] = b;
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <setPixelColor+0x104>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	7a7a      	ldrb	r2, [r7, #9]
 8001f8e:	701a      	strb	r2, [r3, #0]
    ws2812SetRanbowColor(n, r, g , b);
 8001f90:	88f8      	ldrh	r0, [r7, #6]
 8001f92:	7a7b      	ldrb	r3, [r7, #9]
 8001f94:	7aba      	ldrb	r2, [r7, #10]
 8001f96:	7af9      	ldrb	r1, [r7, #11]
 8001f98:	f7ff ff00 	bl	8001d9c <ws2812SetRanbowColor>
  }

}
 8001f9c:	bf00      	nop
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20002610 	.word	0x20002610
 8001fa8:	200023fc 	.word	0x200023fc
 8001fac:	200023f0 	.word	0x200023f0
 8001fb0:	200023fe 	.word	0x200023fe
 8001fb4:	200023e4 	.word	0x200023e4
 8001fb8:	200023f4 	.word	0x200023f4
 8001fbc:	200023fd 	.word	0x200023fd

08001fc0 <Wheel>:

uint32_t Wheel(uint8_t WheelPos) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
  WheelPos = 255 - WheelPos;
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	71fb      	strb	r3, [r7, #7]
  if(WheelPos < 85) {
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	2b54      	cmp	r3, #84	; 0x54
 8001fd4:	d811      	bhi.n	8001ffa <Wheel+0x3a>
    return Color(255 - WheelPos * 3, 0, WheelPos * 3);
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b2d8      	uxtb	r0, r3
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	0052      	lsls	r2, r2, #1
 8001fea:	4413      	add	r3, r2
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	461a      	mov	r2, r3
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	f000 f832 	bl	800205a <Color>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	e02b      	b.n	8002052 <Wheel+0x92>
  }
  if(WheelPos < 170) {
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	2ba9      	cmp	r3, #169	; 0xa9
 8001ffe:	d814      	bhi.n	800202a <Wheel+0x6a>
  		WheelPos -= 85;
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	3b55      	subs	r3, #85	; 0x55
 8002004:	71fb      	strb	r3, [r7, #7]
    return Color(0, WheelPos * 3, 255 - WheelPos * 3);
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	461a      	mov	r2, r3
 800200a:	0052      	lsls	r2, r2, #1
 800200c:	4413      	add	r3, r2
 800200e:	b2d9      	uxtb	r1, r3
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	461a      	mov	r2, r3
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	b2db      	uxtb	r3, r3
 800201a:	3b01      	subs	r3, #1
 800201c:	b2db      	uxtb	r3, r3
 800201e:	461a      	mov	r2, r3
 8002020:	2000      	movs	r0, #0
 8002022:	f000 f81a 	bl	800205a <Color>
 8002026:	4603      	mov	r3, r0
 8002028:	e013      	b.n	8002052 <Wheel+0x92>
  }
  WheelPos -= 170;
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	3356      	adds	r3, #86	; 0x56
 800202e:	71fb      	strb	r3, [r7, #7]
  return Color(WheelPos * 3, 255 - WheelPos * 3, 0);
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	461a      	mov	r2, r3
 8002034:	0052      	lsls	r2, r2, #1
 8002036:	4413      	add	r3, r2
 8002038:	b2d8      	uxtb	r0, r3
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	461a      	mov	r2, r3
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	3b01      	subs	r3, #1
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2200      	movs	r2, #0
 800204a:	4619      	mov	r1, r3
 800204c:	f000 f805 	bl	800205a <Color>
 8002050:	4603      	mov	r3, r0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <Color>:

uint32_t Color(uint8_t r, uint8_t g, uint8_t b) {
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	71fb      	strb	r3, [r7, #7]
 8002064:	460b      	mov	r3, r1
 8002066:	71bb      	strb	r3, [r7, #6]
 8002068:	4613      	mov	r3, r2
 800206a:	717b      	strb	r3, [r7, #5]
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	041a      	lsls	r2, r3, #16
 8002070:	79bb      	ldrb	r3, [r7, #6]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	431a      	orrs	r2, r3
 8002076:	797b      	ldrb	r3, [r7, #5]
 8002078:	4313      	orrs	r3, r2
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002088:	480d      	ldr	r0, [pc, #52]	; (80020c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800208a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800208c:	480d      	ldr	r0, [pc, #52]	; (80020c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800208e:	490e      	ldr	r1, [pc, #56]	; (80020c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002090:	4a0e      	ldr	r2, [pc, #56]	; (80020cc <LoopForever+0xe>)
  movs r3, #0
 8002092:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002094:	e002      	b.n	800209c <LoopCopyDataInit>

08002096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800209a:	3304      	adds	r3, #4

0800209c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800209c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800209e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020a0:	d3f9      	bcc.n	8002096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020a2:	4a0b      	ldr	r2, [pc, #44]	; (80020d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020a4:	4c0b      	ldr	r4, [pc, #44]	; (80020d4 <LoopForever+0x16>)
  movs r3, #0
 80020a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a8:	e001      	b.n	80020ae <LoopFillZerobss>

080020aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020ac:	3204      	adds	r2, #4

080020ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020b0:	d3fb      	bcc.n	80020aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020b2:	f7ff fbc1 	bl	8001838 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020b6:	f00a fefd 	bl	800ceb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020ba:	f7ff f92f 	bl	800131c <main>

080020be <LoopForever>:

LoopForever:
    b LoopForever
 80020be:	e7fe      	b.n	80020be <LoopForever>
  ldr   r0, =_estack
 80020c0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80020c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80020cc:	0800d258 	.word	0x0800d258
  ldr r2, =_sbss
 80020d0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80020d4:	20003520 	.word	0x20003520

080020d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020d8:	e7fe      	b.n	80020d8 <ADC1_2_IRQHandler>

080020da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e4:	2003      	movs	r0, #3
 80020e6:	f000 f8dd 	bl	80022a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020ea:	2000      	movs	r0, #0
 80020ec:	f7ff fb0c 	bl	8001708 <HAL_InitTick>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	71fb      	strb	r3, [r7, #7]
 80020fa:	e001      	b.n	8002100 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020fc:	f7ff fada 	bl	80016b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002100:	79fb      	ldrb	r3, [r7, #7]

}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <HAL_IncTick+0x1c>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <HAL_IncTick+0x20>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4413      	add	r3, r2
 800211a:	4a03      	ldr	r2, [pc, #12]	; (8002128 <HAL_IncTick+0x1c>)
 800211c:	6013      	str	r3, [r2, #0]
}
 800211e:	bf00      	nop
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	20002614 	.word	0x20002614
 800212c:	20000008 	.word	0x20000008

08002130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return uwTick;
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <HAL_GetTick+0x14>)
 8002136:	681b      	ldr	r3, [r3, #0]
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20002614 	.word	0x20002614

08002148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <__NVIC_SetPriorityGrouping+0x44>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002164:	4013      	ands	r3, r2
 8002166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002170:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800217a:	4a04      	ldr	r2, [pc, #16]	; (800218c <__NVIC_SetPriorityGrouping+0x44>)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	60d3      	str	r3, [r2, #12]
}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002194:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	f003 0307 	and.w	r3, r3, #7
}
 800219e:	4618      	mov	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	db0b      	blt.n	80021d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	f003 021f 	and.w	r2, r3, #31
 80021c4:	4907      	ldr	r1, [pc, #28]	; (80021e4 <__NVIC_EnableIRQ+0x38>)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	2001      	movs	r0, #1
 80021ce:	fa00 f202 	lsl.w	r2, r0, r2
 80021d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000e100 	.word	0xe000e100

080021e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	6039      	str	r1, [r7, #0]
 80021f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	db0a      	blt.n	8002212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	490c      	ldr	r1, [pc, #48]	; (8002234 <__NVIC_SetPriority+0x4c>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	0112      	lsls	r2, r2, #4
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	440b      	add	r3, r1
 800220c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002210:	e00a      	b.n	8002228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	b2da      	uxtb	r2, r3
 8002216:	4908      	ldr	r1, [pc, #32]	; (8002238 <__NVIC_SetPriority+0x50>)
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	3b04      	subs	r3, #4
 8002220:	0112      	lsls	r2, r2, #4
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	440b      	add	r3, r1
 8002226:	761a      	strb	r2, [r3, #24]
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000e100 	.word	0xe000e100
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800223c:	b480      	push	{r7}
 800223e:	b089      	sub	sp, #36	; 0x24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f1c3 0307 	rsb	r3, r3, #7
 8002256:	2b04      	cmp	r3, #4
 8002258:	bf28      	it	cs
 800225a:	2304      	movcs	r3, #4
 800225c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3304      	adds	r3, #4
 8002262:	2b06      	cmp	r3, #6
 8002264:	d902      	bls.n	800226c <NVIC_EncodePriority+0x30>
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3b03      	subs	r3, #3
 800226a:	e000      	b.n	800226e <NVIC_EncodePriority+0x32>
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	f04f 32ff 	mov.w	r2, #4294967295
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43da      	mvns	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	401a      	ands	r2, r3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002284:	f04f 31ff 	mov.w	r1, #4294967295
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	fa01 f303 	lsl.w	r3, r1, r3
 800228e:	43d9      	mvns	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	4313      	orrs	r3, r2
         );
}
 8002296:	4618      	mov	r0, r3
 8002298:	3724      	adds	r7, #36	; 0x24
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b07      	cmp	r3, #7
 80022b0:	d00f      	beq.n	80022d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b06      	cmp	r3, #6
 80022b6:	d00c      	beq.n	80022d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b05      	cmp	r3, #5
 80022bc:	d009      	beq.n	80022d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d006      	beq.n	80022d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	d003      	beq.n	80022d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80022ca:	21a7      	movs	r1, #167	; 0xa7
 80022cc:	4804      	ldr	r0, [pc, #16]	; (80022e0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80022ce:	f7ff f938 	bl	8001542 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ff38 	bl	8002148 <__NVIC_SetPriorityGrouping>
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	0800cf8c 	.word	0x0800cf8c

080022e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b0f      	cmp	r3, #15
 80022f6:	d903      	bls.n	8002300 <HAL_NVIC_SetPriority+0x1c>
 80022f8:	21bf      	movs	r1, #191	; 0xbf
 80022fa:	480e      	ldr	r0, [pc, #56]	; (8002334 <HAL_NVIC_SetPriority+0x50>)
 80022fc:	f7ff f921 	bl	8001542 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b0f      	cmp	r3, #15
 8002304:	d903      	bls.n	800230e <HAL_NVIC_SetPriority+0x2a>
 8002306:	21c0      	movs	r1, #192	; 0xc0
 8002308:	480a      	ldr	r0, [pc, #40]	; (8002334 <HAL_NVIC_SetPriority+0x50>)
 800230a:	f7ff f91a 	bl	8001542 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 800230e:	f7ff ff3f 	bl	8002190 <__NVIC_GetPriorityGrouping>
 8002312:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	68b9      	ldr	r1, [r7, #8]
 8002318:	6978      	ldr	r0, [r7, #20]
 800231a:	f7ff ff8f 	bl	800223c <NVIC_EncodePriority>
 800231e:	4602      	mov	r2, r0
 8002320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002324:	4611      	mov	r1, r2
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff ff5e 	bl	80021e8 <__NVIC_SetPriority>
}
 800232c:	bf00      	nop
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	0800cf8c 	.word	0x0800cf8c

08002338 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	2b00      	cmp	r3, #0
 8002348:	da03      	bge.n	8002352 <HAL_NVIC_EnableIRQ+0x1a>
 800234a:	21d3      	movs	r1, #211	; 0xd3
 800234c:	4805      	ldr	r0, [pc, #20]	; (8002364 <HAL_NVIC_EnableIRQ+0x2c>)
 800234e:	f7ff f8f8 	bl	8001542 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff ff28 	bl	80021ac <__NVIC_EnableIRQ>
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	0800cf8c 	.word	0x0800cf8c

08002368 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e16b      	b.n	8002652 <HAL_DMA_Init+0x2ea>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a97      	ldr	r2, [pc, #604]	; (80025dc <HAL_DMA_Init+0x274>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d03a      	beq.n	80023fa <HAL_DMA_Init+0x92>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a95      	ldr	r2, [pc, #596]	; (80025e0 <HAL_DMA_Init+0x278>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d035      	beq.n	80023fa <HAL_DMA_Init+0x92>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a94      	ldr	r2, [pc, #592]	; (80025e4 <HAL_DMA_Init+0x27c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d030      	beq.n	80023fa <HAL_DMA_Init+0x92>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a92      	ldr	r2, [pc, #584]	; (80025e8 <HAL_DMA_Init+0x280>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d02b      	beq.n	80023fa <HAL_DMA_Init+0x92>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a91      	ldr	r2, [pc, #580]	; (80025ec <HAL_DMA_Init+0x284>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d026      	beq.n	80023fa <HAL_DMA_Init+0x92>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a8f      	ldr	r2, [pc, #572]	; (80025f0 <HAL_DMA_Init+0x288>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d021      	beq.n	80023fa <HAL_DMA_Init+0x92>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a8e      	ldr	r2, [pc, #568]	; (80025f4 <HAL_DMA_Init+0x28c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d01c      	beq.n	80023fa <HAL_DMA_Init+0x92>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a8c      	ldr	r2, [pc, #560]	; (80025f8 <HAL_DMA_Init+0x290>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d017      	beq.n	80023fa <HAL_DMA_Init+0x92>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a8b      	ldr	r2, [pc, #556]	; (80025fc <HAL_DMA_Init+0x294>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d012      	beq.n	80023fa <HAL_DMA_Init+0x92>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a89      	ldr	r2, [pc, #548]	; (8002600 <HAL_DMA_Init+0x298>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00d      	beq.n	80023fa <HAL_DMA_Init+0x92>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a88      	ldr	r2, [pc, #544]	; (8002604 <HAL_DMA_Init+0x29c>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d008      	beq.n	80023fa <HAL_DMA_Init+0x92>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a86      	ldr	r2, [pc, #536]	; (8002608 <HAL_DMA_Init+0x2a0>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d003      	beq.n	80023fa <HAL_DMA_Init+0x92>
 80023f2:	21a3      	movs	r1, #163	; 0xa3
 80023f4:	4885      	ldr	r0, [pc, #532]	; (800260c <HAL_DMA_Init+0x2a4>)
 80023f6:	f7ff f8a4 	bl	8001542 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00c      	beq.n	800241c <HAL_DMA_Init+0xb4>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b10      	cmp	r3, #16
 8002408:	d008      	beq.n	800241c <HAL_DMA_Init+0xb4>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002412:	d003      	beq.n	800241c <HAL_DMA_Init+0xb4>
 8002414:	21a4      	movs	r1, #164	; 0xa4
 8002416:	487d      	ldr	r0, [pc, #500]	; (800260c <HAL_DMA_Init+0x2a4>)
 8002418:	f7ff f893 	bl	8001542 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2b40      	cmp	r3, #64	; 0x40
 8002422:	d007      	beq.n	8002434 <HAL_DMA_Init+0xcc>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_DMA_Init+0xcc>
 800242c:	21a5      	movs	r1, #165	; 0xa5
 800242e:	4877      	ldr	r0, [pc, #476]	; (800260c <HAL_DMA_Init+0x2a4>)
 8002430:	f7ff f887 	bl	8001542 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	2b80      	cmp	r3, #128	; 0x80
 800243a:	d007      	beq.n	800244c <HAL_DMA_Init+0xe4>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_DMA_Init+0xe4>
 8002444:	21a6      	movs	r1, #166	; 0xa6
 8002446:	4871      	ldr	r0, [pc, #452]	; (800260c <HAL_DMA_Init+0x2a4>)
 8002448:	f7ff f87b 	bl	8001542 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00d      	beq.n	8002470 <HAL_DMA_Init+0x108>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800245c:	d008      	beq.n	8002470 <HAL_DMA_Init+0x108>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002466:	d003      	beq.n	8002470 <HAL_DMA_Init+0x108>
 8002468:	21a7      	movs	r1, #167	; 0xa7
 800246a:	4868      	ldr	r0, [pc, #416]	; (800260c <HAL_DMA_Init+0x2a4>)
 800246c:	f7ff f869 	bl	8001542 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00d      	beq.n	8002494 <HAL_DMA_Init+0x12c>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002480:	d008      	beq.n	8002494 <HAL_DMA_Init+0x12c>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800248a:	d003      	beq.n	8002494 <HAL_DMA_Init+0x12c>
 800248c:	21a8      	movs	r1, #168	; 0xa8
 800248e:	485f      	ldr	r0, [pc, #380]	; (800260c <HAL_DMA_Init+0x2a4>)
 8002490:	f7ff f857 	bl	8001542 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d007      	beq.n	80024ac <HAL_DMA_Init+0x144>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	d003      	beq.n	80024ac <HAL_DMA_Init+0x144>
 80024a4:	21a9      	movs	r1, #169	; 0xa9
 80024a6:	4859      	ldr	r0, [pc, #356]	; (800260c <HAL_DMA_Init+0x2a4>)
 80024a8:	f7ff f84b 	bl	8001542 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d012      	beq.n	80024da <HAL_DMA_Init+0x172>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024bc:	d00d      	beq.n	80024da <HAL_DMA_Init+0x172>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024c6:	d008      	beq.n	80024da <HAL_DMA_Init+0x172>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80024d0:	d003      	beq.n	80024da <HAL_DMA_Init+0x172>
 80024d2:	21aa      	movs	r1, #170	; 0xaa
 80024d4:	484d      	ldr	r0, [pc, #308]	; (800260c <HAL_DMA_Init+0x2a4>)
 80024d6:	f7ff f834 	bl	8001542 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b73      	cmp	r3, #115	; 0x73
 80024e0:	d903      	bls.n	80024ea <HAL_DMA_Init+0x182>
 80024e2:	21ac      	movs	r1, #172	; 0xac
 80024e4:	4849      	ldr	r0, [pc, #292]	; (800260c <HAL_DMA_Init+0x2a4>)
 80024e6:	f7ff f82c 	bl	8001542 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	4b47      	ldr	r3, [pc, #284]	; (8002610 <HAL_DMA_Init+0x2a8>)
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d80f      	bhi.n	8002516 <HAL_DMA_Init+0x1ae>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	4b45      	ldr	r3, [pc, #276]	; (8002614 <HAL_DMA_Init+0x2ac>)
 80024fe:	4413      	add	r3, r2
 8002500:	4a45      	ldr	r2, [pc, #276]	; (8002618 <HAL_DMA_Init+0x2b0>)
 8002502:	fba2 2303 	umull	r2, r3, r2, r3
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	009a      	lsls	r2, r3, #2
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a42      	ldr	r2, [pc, #264]	; (800261c <HAL_DMA_Init+0x2b4>)
 8002512:	641a      	str	r2, [r3, #64]	; 0x40
 8002514:	e00e      	b.n	8002534 <HAL_DMA_Init+0x1cc>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	4b40      	ldr	r3, [pc, #256]	; (8002620 <HAL_DMA_Init+0x2b8>)
 800251e:	4413      	add	r3, r2
 8002520:	4a3d      	ldr	r2, [pc, #244]	; (8002618 <HAL_DMA_Init+0x2b0>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	091b      	lsrs	r3, r3, #4
 8002528:	009a      	lsls	r2, r3, #2
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a3c      	ldr	r2, [pc, #240]	; (8002624 <HAL_DMA_Init+0x2bc>)
 8002532:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800254a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002558:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002564:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002570:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4313      	orrs	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f9e0 	bl	800294c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002594:	d102      	bne.n	800259c <HAL_DMA_Init+0x234>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80025b0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d036      	beq.n	8002628 <HAL_DMA_Init+0x2c0>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d832      	bhi.n	8002628 <HAL_DMA_Init+0x2c0>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fa00 	bl	80029c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	e02e      	b.n	800263a <HAL_DMA_Init+0x2d2>
 80025dc:	40020008 	.word	0x40020008
 80025e0:	4002001c 	.word	0x4002001c
 80025e4:	40020030 	.word	0x40020030
 80025e8:	40020044 	.word	0x40020044
 80025ec:	40020058 	.word	0x40020058
 80025f0:	4002006c 	.word	0x4002006c
 80025f4:	40020408 	.word	0x40020408
 80025f8:	4002041c 	.word	0x4002041c
 80025fc:	40020430 	.word	0x40020430
 8002600:	40020444 	.word	0x40020444
 8002604:	40020458 	.word	0x40020458
 8002608:	4002046c 	.word	0x4002046c
 800260c:	0800cfc8 	.word	0x0800cfc8
 8002610:	40020407 	.word	0x40020407
 8002614:	bffdfff8 	.word	0xbffdfff8
 8002618:	cccccccd 	.word	0xcccccccd
 800261c:	40020000 	.word	0x40020000
 8002620:	bffdfbf8 	.word	0xbffdfbf8
 8002624:	40020400 	.word	0x40020400
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop

0800265c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_DMA_Start_IT+0x20>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800267a:	d304      	bcc.n	8002686 <HAL_DMA_Start_IT+0x2a>
 800267c:	f240 11ab 	movw	r1, #427	; 0x1ab
 8002680:	483a      	ldr	r0, [pc, #232]	; (800276c <HAL_DMA_Start_IT+0x110>)
 8002682:	f7fe ff5e 	bl	8001542 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_DMA_Start_IT+0x38>
 8002690:	2302      	movs	r3, #2
 8002692:	e066      	b.n	8002762 <HAL_DMA_Start_IT+0x106>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d155      	bne.n	8002754 <HAL_DMA_Start_IT+0xf8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0201 	bic.w	r2, r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f8fe 	bl	80028ce <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d008      	beq.n	80026ec <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 020e 	orr.w	r2, r2, #14
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	e00f      	b.n	800270c <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0204 	bic.w	r2, r2, #4
 80026fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 020a 	orr.w	r2, r2, #10
 800270a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d007      	beq.n	800272a <HAL_DMA_Start_IT+0xce>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002724:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002728:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272e:	2b00      	cmp	r3, #0
 8002730:	d007      	beq.n	8002742 <HAL_DMA_Start_IT+0xe6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002740:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0201 	orr.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	e005      	b.n	8002760 <HAL_DMA_Start_IT+0x104>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800275c:	2302      	movs	r3, #2
 800275e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002760:	7dfb      	ldrb	r3, [r7, #23]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	0800cfc8 	.word	0x0800cfc8

08002770 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278c:	f003 031f 	and.w	r3, r3, #31
 8002790:	2204      	movs	r2, #4
 8002792:	409a      	lsls	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d026      	beq.n	80027ea <HAL_DMA_IRQHandler+0x7a>
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d021      	beq.n	80027ea <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d107      	bne.n	80027c4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0204 	bic.w	r2, r2, #4
 80027c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	f003 021f 	and.w	r2, r3, #31
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	2104      	movs	r1, #4
 80027d2:	fa01 f202 	lsl.w	r2, r1, r2
 80027d6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d071      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80027e8:	e06c      	b.n	80028c4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	2202      	movs	r2, #2
 80027f4:	409a      	lsls	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d02e      	beq.n	800285c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d029      	beq.n	800285c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10b      	bne.n	800282e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 020a 	bic.w	r2, r2, #10
 8002824:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	f003 021f 	and.w	r2, r3, #31
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	2102      	movs	r1, #2
 800283c:	fa01 f202 	lsl.w	r2, r1, r2
 8002840:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	2b00      	cmp	r3, #0
 8002850:	d038      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800285a:	e033      	b.n	80028c4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	2208      	movs	r2, #8
 8002866:	409a      	lsls	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d02a      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d025      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 020e 	bic.w	r2, r2, #14
 8002888:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	f003 021f 	and.w	r2, r3, #31
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	2101      	movs	r1, #1
 8002898:	fa01 f202 	lsl.w	r2, r1, r2
 800289c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d004      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028c4:	bf00      	nop
 80028c6:	bf00      	nop
}
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b085      	sub	sp, #20
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80028e4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d004      	beq.n	80028f8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80028f6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fc:	f003 021f 	and.w	r2, r3, #31
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	2101      	movs	r1, #1
 8002906:	fa01 f202 	lsl.w	r2, r1, r2
 800290a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b10      	cmp	r3, #16
 800291a:	d108      	bne.n	800292e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800292c:	e007      	b.n	800293e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	60da      	str	r2, [r3, #12]
}
 800293e:	bf00      	nop
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	461a      	mov	r2, r3
 800295a:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800295c:	429a      	cmp	r2, r3
 800295e:	d802      	bhi.n	8002966 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002960:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	e001      	b.n	800296a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002968:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	3b08      	subs	r3, #8
 8002976:	4a12      	ldr	r2, [pc, #72]	; (80029c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002978:	fba2 2303 	umull	r2, r3, r2, r3
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002984:	089b      	lsrs	r3, r3, #2
 8002986:	009a      	lsls	r2, r3, #2
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4413      	add	r3, r2
 800298c:	461a      	mov	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a0b      	ldr	r2, [pc, #44]	; (80029c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002996:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	2201      	movs	r2, #1
 80029a0:	409a      	lsls	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80029a6:	bf00      	nop
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40020407 	.word	0x40020407
 80029b8:	40020800 	.word	0x40020800
 80029bc:	40020820 	.word	0x40020820
 80029c0:	cccccccd 	.word	0xcccccccd
 80029c4:	40020880 	.word	0x40020880

080029c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	461a      	mov	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a08      	ldr	r2, [pc, #32]	; (8002a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80029ea:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	f003 031f 	and.w	r3, r3, #31
 80029f4:	2201      	movs	r2, #1
 80029f6:	409a      	lsls	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80029fc:	bf00      	nop
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	1000823f 	.word	0x1000823f
 8002a0c:	40020940 	.word	0x40020940

08002a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a24:	d01b      	beq.n	8002a5e <HAL_GPIO_Init+0x4e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a3b      	ldr	r2, [pc, #236]	; (8002b18 <HAL_GPIO_Init+0x108>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d017      	beq.n	8002a5e <HAL_GPIO_Init+0x4e>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a3a      	ldr	r2, [pc, #232]	; (8002b1c <HAL_GPIO_Init+0x10c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d013      	beq.n	8002a5e <HAL_GPIO_Init+0x4e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a39      	ldr	r2, [pc, #228]	; (8002b20 <HAL_GPIO_Init+0x110>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00f      	beq.n	8002a5e <HAL_GPIO_Init+0x4e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a38      	ldr	r2, [pc, #224]	; (8002b24 <HAL_GPIO_Init+0x114>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d00b      	beq.n	8002a5e <HAL_GPIO_Init+0x4e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a37      	ldr	r2, [pc, #220]	; (8002b28 <HAL_GPIO_Init+0x118>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d007      	beq.n	8002a5e <HAL_GPIO_Init+0x4e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a36      	ldr	r2, [pc, #216]	; (8002b2c <HAL_GPIO_Init+0x11c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_Init+0x4e>
 8002a56:	21b1      	movs	r1, #177	; 0xb1
 8002a58:	4835      	ldr	r0, [pc, #212]	; (8002b30 <HAL_GPIO_Init+0x120>)
 8002a5a:	f7fe fd72 	bl	8001542 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_GPIO_Init+0x64>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	0c1b      	lsrs	r3, r3, #16
 8002a6e:	041b      	lsls	r3, r3, #16
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x6c>
 8002a74:	21b2      	movs	r1, #178	; 0xb2
 8002a76:	482e      	ldr	r0, [pc, #184]	; (8002b30 <HAL_GPIO_Init+0x120>)
 8002a78:	f7fe fd63 	bl	8001542 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d035      	beq.n	8002af0 <HAL_GPIO_Init+0xe0>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d031      	beq.n	8002af0 <HAL_GPIO_Init+0xe0>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b11      	cmp	r3, #17
 8002a92:	d02d      	beq.n	8002af0 <HAL_GPIO_Init+0xe0>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d029      	beq.n	8002af0 <HAL_GPIO_Init+0xe0>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b12      	cmp	r3, #18
 8002aa2:	d025      	beq.n	8002af0 <HAL_GPIO_Init+0xe0>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4a22      	ldr	r2, [pc, #136]	; (8002b34 <HAL_GPIO_Init+0x124>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d020      	beq.n	8002af0 <HAL_GPIO_Init+0xe0>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	4a21      	ldr	r2, [pc, #132]	; (8002b38 <HAL_GPIO_Init+0x128>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d01b      	beq.n	8002af0 <HAL_GPIO_Init+0xe0>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	4a1f      	ldr	r2, [pc, #124]	; (8002b3c <HAL_GPIO_Init+0x12c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d016      	beq.n	8002af0 <HAL_GPIO_Init+0xe0>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	4a1e      	ldr	r2, [pc, #120]	; (8002b40 <HAL_GPIO_Init+0x130>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d011      	beq.n	8002af0 <HAL_GPIO_Init+0xe0>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4a1c      	ldr	r2, [pc, #112]	; (8002b44 <HAL_GPIO_Init+0x134>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00c      	beq.n	8002af0 <HAL_GPIO_Init+0xe0>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	4a1b      	ldr	r2, [pc, #108]	; (8002b48 <HAL_GPIO_Init+0x138>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d007      	beq.n	8002af0 <HAL_GPIO_Init+0xe0>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d003      	beq.n	8002af0 <HAL_GPIO_Init+0xe0>
 8002ae8:	21b3      	movs	r1, #179	; 0xb3
 8002aea:	4811      	ldr	r0, [pc, #68]	; (8002b30 <HAL_GPIO_Init+0x120>)
 8002aec:	f7fe fd29 	bl	8001542 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 81d2 	beq.w	8002e9e <HAL_GPIO_Init+0x48e>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	f000 81cd 	beq.w	8002e9e <HAL_GPIO_Init+0x48e>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	f000 81c8 	beq.w	8002e9e <HAL_GPIO_Init+0x48e>
 8002b0e:	21b4      	movs	r1, #180	; 0xb4
 8002b10:	4807      	ldr	r0, [pc, #28]	; (8002b30 <HAL_GPIO_Init+0x120>)
 8002b12:	f7fe fd16 	bl	8001542 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b16:	e1c2      	b.n	8002e9e <HAL_GPIO_Init+0x48e>
 8002b18:	48000400 	.word	0x48000400
 8002b1c:	48000800 	.word	0x48000800
 8002b20:	48000c00 	.word	0x48000c00
 8002b24:	48001000 	.word	0x48001000
 8002b28:	48001400 	.word	0x48001400
 8002b2c:	48001800 	.word	0x48001800
 8002b30:	0800d000 	.word	0x0800d000
 8002b34:	10110000 	.word	0x10110000
 8002b38:	10210000 	.word	0x10210000
 8002b3c:	10310000 	.word	0x10310000
 8002b40:	10120000 	.word	0x10120000
 8002b44:	10220000 	.word	0x10220000
 8002b48:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	2101      	movs	r1, #1
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	fa01 f303 	lsl.w	r3, r1, r3
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 819a 	beq.w	8002e98 <HAL_GPIO_Init+0x488>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d00b      	beq.n	8002b84 <HAL_GPIO_Init+0x174>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d007      	beq.n	8002b84 <HAL_GPIO_Init+0x174>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b78:	2b11      	cmp	r3, #17
 8002b7a:	d003      	beq.n	8002b84 <HAL_GPIO_Init+0x174>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b12      	cmp	r3, #18
 8002b82:	d144      	bne.n	8002c0e <HAL_GPIO_Init+0x1fe>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00f      	beq.n	8002bac <HAL_GPIO_Init+0x19c>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d00b      	beq.n	8002bac <HAL_GPIO_Init+0x19c>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d007      	beq.n	8002bac <HAL_GPIO_Init+0x19c>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d003      	beq.n	8002bac <HAL_GPIO_Init+0x19c>
 8002ba4:	21c4      	movs	r1, #196	; 0xc4
 8002ba6:	4881      	ldr	r0, [pc, #516]	; (8002dac <HAL_GPIO_Init+0x39c>)
 8002ba8:	f7fe fccb 	bl	8001542 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002be2:	2201      	movs	r2, #1
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43db      	mvns	r3, r3
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	f003 0201 	and.w	r2, r3, #1
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	2203      	movs	r2, #3
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4013      	ands	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x23e>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b12      	cmp	r3, #18
 8002c4c:	d14b      	bne.n	8002ce6 <HAL_GPIO_Init+0x2d6>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c54:	d01b      	beq.n	8002c8e <HAL_GPIO_Init+0x27e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a55      	ldr	r2, [pc, #340]	; (8002db0 <HAL_GPIO_Init+0x3a0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d017      	beq.n	8002c8e <HAL_GPIO_Init+0x27e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a54      	ldr	r2, [pc, #336]	; (8002db4 <HAL_GPIO_Init+0x3a4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <HAL_GPIO_Init+0x27e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a53      	ldr	r2, [pc, #332]	; (8002db8 <HAL_GPIO_Init+0x3a8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00f      	beq.n	8002c8e <HAL_GPIO_Init+0x27e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a52      	ldr	r2, [pc, #328]	; (8002dbc <HAL_GPIO_Init+0x3ac>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d00b      	beq.n	8002c8e <HAL_GPIO_Init+0x27e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a51      	ldr	r2, [pc, #324]	; (8002dc0 <HAL_GPIO_Init+0x3b0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d007      	beq.n	8002c8e <HAL_GPIO_Init+0x27e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a50      	ldr	r2, [pc, #320]	; (8002dc4 <HAL_GPIO_Init+0x3b4>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_Init+0x27e>
 8002c86:	21dc      	movs	r1, #220	; 0xdc
 8002c88:	4848      	ldr	r0, [pc, #288]	; (8002dac <HAL_GPIO_Init+0x39c>)
 8002c8a:	f7fe fc5a 	bl	8001542 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b0f      	cmp	r3, #15
 8002c94:	d903      	bls.n	8002c9e <HAL_GPIO_Init+0x28e>
 8002c96:	21dd      	movs	r1, #221	; 0xdd
 8002c98:	4844      	ldr	r0, [pc, #272]	; (8002dac <HAL_GPIO_Init+0x39c>)
 8002c9a:	f7fe fc52 	bl	8001542 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	08da      	lsrs	r2, r3, #3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3208      	adds	r2, #8
 8002ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002caa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	220f      	movs	r2, #15
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	691a      	ldr	r2, [r3, #16]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	08da      	lsrs	r2, r3, #3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3208      	adds	r2, #8
 8002ce0:	6939      	ldr	r1, [r7, #16]
 8002ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 0203 	and.w	r2, r3, #3
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 80b8 	beq.w	8002e98 <HAL_GPIO_Init+0x488>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d28:	4b27      	ldr	r3, [pc, #156]	; (8002dc8 <HAL_GPIO_Init+0x3b8>)
 8002d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2c:	4a26      	ldr	r2, [pc, #152]	; (8002dc8 <HAL_GPIO_Init+0x3b8>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6613      	str	r3, [r2, #96]	; 0x60
 8002d34:	4b24      	ldr	r3, [pc, #144]	; (8002dc8 <HAL_GPIO_Init+0x3b8>)
 8002d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d40:	4a22      	ldr	r2, [pc, #136]	; (8002dcc <HAL_GPIO_Init+0x3bc>)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	089b      	lsrs	r3, r3, #2
 8002d46:	3302      	adds	r3, #2
 8002d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	220f      	movs	r2, #15
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4013      	ands	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d6a:	d031      	beq.n	8002dd0 <HAL_GPIO_Init+0x3c0>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a10      	ldr	r2, [pc, #64]	; (8002db0 <HAL_GPIO_Init+0x3a0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d019      	beq.n	8002da8 <HAL_GPIO_Init+0x398>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a0f      	ldr	r2, [pc, #60]	; (8002db4 <HAL_GPIO_Init+0x3a4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d013      	beq.n	8002da4 <HAL_GPIO_Init+0x394>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a0e      	ldr	r2, [pc, #56]	; (8002db8 <HAL_GPIO_Init+0x3a8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d00d      	beq.n	8002da0 <HAL_GPIO_Init+0x390>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a0d      	ldr	r2, [pc, #52]	; (8002dbc <HAL_GPIO_Init+0x3ac>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d007      	beq.n	8002d9c <HAL_GPIO_Init+0x38c>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a0c      	ldr	r2, [pc, #48]	; (8002dc0 <HAL_GPIO_Init+0x3b0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d101      	bne.n	8002d98 <HAL_GPIO_Init+0x388>
 8002d94:	2305      	movs	r3, #5
 8002d96:	e01c      	b.n	8002dd2 <HAL_GPIO_Init+0x3c2>
 8002d98:	2306      	movs	r3, #6
 8002d9a:	e01a      	b.n	8002dd2 <HAL_GPIO_Init+0x3c2>
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	e018      	b.n	8002dd2 <HAL_GPIO_Init+0x3c2>
 8002da0:	2303      	movs	r3, #3
 8002da2:	e016      	b.n	8002dd2 <HAL_GPIO_Init+0x3c2>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e014      	b.n	8002dd2 <HAL_GPIO_Init+0x3c2>
 8002da8:	2301      	movs	r3, #1
 8002daa:	e012      	b.n	8002dd2 <HAL_GPIO_Init+0x3c2>
 8002dac:	0800d000 	.word	0x0800d000
 8002db0:	48000400 	.word	0x48000400
 8002db4:	48000800 	.word	0x48000800
 8002db8:	48000c00 	.word	0x48000c00
 8002dbc:	48001000 	.word	0x48001000
 8002dc0:	48001400 	.word	0x48001400
 8002dc4:	48001800 	.word	0x48001800
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40010000 	.word	0x40010000
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	f002 0203 	and.w	r2, r2, #3
 8002dd8:	0092      	lsls	r2, r2, #2
 8002dda:	4093      	lsls	r3, r2
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002de2:	4935      	ldr	r1, [pc, #212]	; (8002eb8 <HAL_GPIO_Init+0x4a8>)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	089b      	lsrs	r3, r3, #2
 8002de8:	3302      	adds	r3, #2
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002df0:	4b32      	ldr	r3, [pc, #200]	; (8002ebc <HAL_GPIO_Init+0x4ac>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_GPIO_Init+0x404>
        {
          temp |= iocurrent;
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e14:	4a29      	ldr	r2, [pc, #164]	; (8002ebc <HAL_GPIO_Init+0x4ac>)
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002e1a:	4b28      	ldr	r3, [pc, #160]	; (8002ebc <HAL_GPIO_Init+0x4ac>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4013      	ands	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_Init+0x42e>
        {
          temp |= iocurrent;
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e3e:	4a1f      	ldr	r2, [pc, #124]	; (8002ebc <HAL_GPIO_Init+0x4ac>)
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e44:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <HAL_GPIO_Init+0x4ac>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4013      	ands	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_GPIO_Init+0x458>
        {
          temp |= iocurrent;
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e68:	4a14      	ldr	r2, [pc, #80]	; (8002ebc <HAL_GPIO_Init+0x4ac>)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e6e:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <HAL_GPIO_Init+0x4ac>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_GPIO_Init+0x482>
        {
          temp |= iocurrent;
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e92:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <HAL_GPIO_Init+0x4ac>)
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f47f ae4f 	bne.w	8002b4c <HAL_GPIO_Init+0x13c>
  }
}
 8002eae:	bf00      	nop
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40010000 	.word	0x40010000
 8002ebc:	40010400 	.word	0x40010400

08002ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	807b      	strh	r3, [r7, #2]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002ed0:	887b      	ldrh	r3, [r7, #2]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d004      	beq.n	8002ee0 <HAL_GPIO_WritePin+0x20>
 8002ed6:	887b      	ldrh	r3, [r7, #2]
 8002ed8:	0c1b      	lsrs	r3, r3, #16
 8002eda:	041b      	lsls	r3, r3, #16
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d004      	beq.n	8002eea <HAL_GPIO_WritePin+0x2a>
 8002ee0:	f240 119d 	movw	r1, #413	; 0x19d
 8002ee4:	480d      	ldr	r0, [pc, #52]	; (8002f1c <HAL_GPIO_WritePin+0x5c>)
 8002ee6:	f7fe fb2c 	bl	8001542 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002eea:	787b      	ldrb	r3, [r7, #1]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d007      	beq.n	8002f00 <HAL_GPIO_WritePin+0x40>
 8002ef0:	787b      	ldrb	r3, [r7, #1]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d004      	beq.n	8002f00 <HAL_GPIO_WritePin+0x40>
 8002ef6:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8002efa:	4808      	ldr	r0, [pc, #32]	; (8002f1c <HAL_GPIO_WritePin+0x5c>)
 8002efc:	f7fe fb21 	bl	8001542 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8002f00:	787b      	ldrb	r3, [r7, #1]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f06:	887a      	ldrh	r2, [r7, #2]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f0c:	e002      	b.n	8002f14 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f0e:	887a      	ldrh	r2, [r7, #2]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f14:	bf00      	nop
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	0800d000 	.word	0x0800d000

08002f20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f22:	b08b      	sub	sp, #44	; 0x2c
 8002f24:	af06      	add	r7, sp, #24
 8002f26:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e0b6      	b.n	80030a0 <HAL_PCD_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a5c      	ldr	r2, [pc, #368]	; (80030a8 <HAL_PCD_Init+0x188>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d003      	beq.n	8002f44 <HAL_PCD_Init+0x24>
 8002f3c:	2183      	movs	r1, #131	; 0x83
 8002f3e:	485b      	ldr	r0, [pc, #364]	; (80030ac <HAL_PCD_Init+0x18c>)
 8002f40:	f7fe faff 	bl	8001542 <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d106      	bne.n	8002f5e <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f009 fb25 	bl	800c5a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2203      	movs	r2, #3
 8002f62:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f005 fb63 	bl	8008636 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f70:	2300      	movs	r3, #0
 8002f72:	73fb      	strb	r3, [r7, #15]
 8002f74:	e035      	b.n	8002fe2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	015b      	lsls	r3, r3, #5
 8002f7c:	4413      	add	r3, r2
 8002f7e:	3329      	adds	r3, #41	; 0x29
 8002f80:	2201      	movs	r2, #1
 8002f82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	015b      	lsls	r3, r3, #5
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3328      	adds	r3, #40	; 0x28
 8002f8e:	7bfa      	ldrb	r2, [r7, #15]
 8002f90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	7bfa      	ldrb	r2, [r7, #15]
 8002f96:	b291      	uxth	r1, r2
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	015b      	lsls	r3, r3, #5
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3336      	adds	r3, #54	; 0x36
 8002fa0:	460a      	mov	r2, r1
 8002fa2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	015b      	lsls	r3, r3, #5
 8002faa:	4413      	add	r3, r2
 8002fac:	332b      	adds	r3, #43	; 0x2b
 8002fae:	2200      	movs	r2, #0
 8002fb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	015b      	lsls	r3, r3, #5
 8002fb8:	4413      	add	r3, r2
 8002fba:	3338      	adds	r3, #56	; 0x38
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	015b      	lsls	r3, r3, #5
 8002fc6:	4413      	add	r3, r2
 8002fc8:	333c      	adds	r3, #60	; 0x3c
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	015b      	lsls	r3, r3, #5
 8002fd6:	4413      	add	r3, r2
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	73fb      	strb	r3, [r7, #15]
 8002fe2:	7bfa      	ldrb	r2, [r7, #15]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d3c4      	bcc.n	8002f76 <HAL_PCD_Init+0x56>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fec:	2300      	movs	r3, #0
 8002fee:	73fb      	strb	r3, [r7, #15]
 8002ff0:	e031      	b.n	8003056 <HAL_PCD_Init+0x136>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	015b      	lsls	r3, r3, #5
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f203 1329 	addw	r3, r3, #297	; 0x129
 8002ffe:	2200      	movs	r2, #0
 8003000:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	015b      	lsls	r3, r3, #5
 8003008:	4413      	add	r3, r2
 800300a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800300e:	7bfa      	ldrb	r2, [r7, #15]
 8003010:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	015b      	lsls	r3, r3, #5
 8003018:	4413      	add	r3, r2
 800301a:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800301e:	2200      	movs	r2, #0
 8003020:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	015b      	lsls	r3, r3, #5
 8003028:	4413      	add	r3, r2
 800302a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	015b      	lsls	r3, r3, #5
 8003038:	4413      	add	r3, r2
 800303a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	330a      	adds	r3, #10
 8003048:	015b      	lsls	r3, r3, #5
 800304a:	4413      	add	r3, r2
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	3301      	adds	r3, #1
 8003054:	73fb      	strb	r3, [r7, #15]
 8003056:	7bfa      	ldrb	r2, [r7, #15]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	429a      	cmp	r2, r3
 800305e:	d3c8      	bcc.n	8002ff2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	603b      	str	r3, [r7, #0]
 8003066:	687e      	ldr	r6, [r7, #4]
 8003068:	466d      	mov	r5, sp
 800306a:	f106 0410 	add.w	r4, r6, #16
 800306e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003070:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003072:	6823      	ldr	r3, [r4, #0]
 8003074:	602b      	str	r3, [r5, #0]
 8003076:	1d33      	adds	r3, r6, #4
 8003078:	cb0e      	ldmia	r3, {r1, r2, r3}
 800307a:	6838      	ldr	r0, [r7, #0]
 800307c:	f005 faf6 	bl	800866c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d102      	bne.n	800309e <HAL_PCD_Init+0x17e>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 fe3a 	bl	8003d12 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030a8:	40005c00 	.word	0x40005c00
 80030ac:	0800d03c 	.word	0x0800d03c

080030b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_PCD_Start+0x16>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e012      	b.n	80030ec <HAL_PCD_Start+0x3c>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f006 fb16 	bl	8009704 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f005 fa91 	bl	8008604 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f006 fb16 	bl	8009732 <USB_ReadInterrupts>
 8003106:	4603      	mov	r3, r0
 8003108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800310c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003110:	d102      	bne.n	8003118 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fb34 	bl	8003780 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f006 fb08 	bl	8009732 <USB_ReadInterrupts>
 8003122:	4603      	mov	r3, r0
 8003124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312c:	d112      	bne.n	8003154 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003136:	b29a      	uxth	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003140:	b292      	uxth	r2, r2
 8003142:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f009 fac5 	bl	800c6d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800314c:	2100      	movs	r1, #0
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f91e 	bl	8003390 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f006 faea 	bl	8009732 <USB_ReadInterrupts>
 800315e:	4603      	mov	r3, r0
 8003160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003168:	d10b      	bne.n	8003182 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003172:	b29a      	uxth	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800317c:	b292      	uxth	r2, r2
 800317e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f006 fad3 	bl	8009732 <USB_ReadInterrupts>
 800318c:	4603      	mov	r3, r0
 800318e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003196:	d10b      	bne.n	80031b0 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031aa:	b292      	uxth	r2, r2
 80031ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f006 fabc 	bl	8009732 <USB_ReadInterrupts>
 80031ba:	4603      	mov	r3, r0
 80031bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c4:	d133      	bne.n	800322e <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0204 	bic.w	r2, r2, #4
 80031d8:	b292      	uxth	r2, r2
 80031da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0208 	bic.w	r2, r2, #8
 80031f0:	b292      	uxth	r2, r2
 80031f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d107      	bne.n	8003210 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003208:	2100      	movs	r1, #0
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f009 fc54 	bl	800cab8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f009 fa99 	bl	800c748 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800321e:	b29a      	uxth	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003228:	b292      	uxth	r2, r2
 800322a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f006 fa7d 	bl	8009732 <USB_ReadInterrupts>
 8003238:	4603      	mov	r3, r0
 800323a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800323e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003242:	d126      	bne.n	8003292 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800324c:	b29a      	uxth	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0208 	orr.w	r2, r2, #8
 8003256:	b292      	uxth	r2, r2
 8003258:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003264:	b29a      	uxth	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800326e:	b292      	uxth	r2, r2
 8003270:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800327c:	b29a      	uxth	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0204 	orr.w	r2, r2, #4
 8003286:	b292      	uxth	r2, r2
 8003288:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f009 fa41 	bl	800c714 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f006 fa4b 	bl	8009732 <USB_ReadInterrupts>
 800329c:	4603      	mov	r3, r0
 800329e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a2:	2b80      	cmp	r3, #128	; 0x80
 80032a4:	d13f      	bne.n	8003326 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032b8:	b292      	uxth	r2, r2
 80032ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d12b      	bne.n	8003320 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0204 	orr.w	r2, r2, #4
 80032da:	b292      	uxth	r2, r2
 80032dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0208 	orr.w	r2, r2, #8
 80032f2:	b292      	uxth	r2, r2
 80032f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003308:	b29b      	uxth	r3, r3
 800330a:	089b      	lsrs	r3, r3, #2
 800330c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003316:	2101      	movs	r1, #1
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f009 fbcd 	bl	800cab8 <HAL_PCDEx_LPM_Callback>
 800331e:	e002      	b.n	8003326 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f009 f9f7 	bl	800c714 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f006 fa01 	bl	8009732 <USB_ReadInterrupts>
 8003330:	4603      	mov	r3, r0
 8003332:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800333a:	d10e      	bne.n	800335a <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003344:	b29a      	uxth	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800334e:	b292      	uxth	r2, r2
 8003350:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f009 f9b0 	bl	800c6ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f006 f9e7 	bl	8009732 <USB_ReadInterrupts>
 8003364:	4603      	mov	r3, r0
 8003366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800336e:	d10b      	bne.n	8003388 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003378:	b29a      	uxth	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003382:	b292      	uxth	r2, r2
 8003384:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_PCD_SetAddress+0x1a>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e013      	b.n	80033d2 <HAL_PCD_SetAddress+0x42>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	78fa      	ldrb	r2, [r7, #3]
 80033b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	78fa      	ldrb	r2, [r7, #3]
 80033c0:	4611      	mov	r1, r2
 80033c2:	4618      	mov	r0, r3
 80033c4:	f006 f98a 	bl	80096dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	4608      	mov	r0, r1
 80033e4:	4611      	mov	r1, r2
 80033e6:	461a      	mov	r2, r3
 80033e8:	4603      	mov	r3, r0
 80033ea:	70fb      	strb	r3, [r7, #3]
 80033ec:	460b      	mov	r3, r1
 80033ee:	803b      	strh	r3, [r7, #0]
 80033f0:	4613      	mov	r3, r2
 80033f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	da0b      	bge.n	8003418 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	015b      	lsls	r3, r3, #5
 8003408:	3328      	adds	r3, #40	; 0x28
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	4413      	add	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	705a      	strb	r2, [r3, #1]
 8003416:	e00b      	b.n	8003430 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	015b      	lsls	r3, r3, #5
 8003420:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	4413      	add	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	b2da      	uxtb	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800343c:	883a      	ldrh	r2, [r7, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	78ba      	ldrb	r2, [r7, #2]
 8003446:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	785b      	ldrb	r3, [r3, #1]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d004      	beq.n	800345a <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800345a:	78bb      	ldrb	r3, [r7, #2]
 800345c:	2b02      	cmp	r3, #2
 800345e:	d102      	bne.n	8003466 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_PCD_EP_Open+0x9a>
 8003470:	2302      	movs	r3, #2
 8003472:	e00e      	b.n	8003492 <HAL_PCD_EP_Open+0xb8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68f9      	ldr	r1, [r7, #12]
 8003482:	4618      	mov	r0, r3
 8003484:	f005 f916 	bl	80086b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8003490:	7afb      	ldrb	r3, [r7, #11]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b084      	sub	sp, #16
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	460b      	mov	r3, r1
 80034a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	da0b      	bge.n	80034c6 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034ae:	78fb      	ldrb	r3, [r7, #3]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	015b      	lsls	r3, r3, #5
 80034b6:	3328      	adds	r3, #40	; 0x28
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	4413      	add	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	705a      	strb	r2, [r3, #1]
 80034c4:	e00b      	b.n	80034de <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034c6:	78fb      	ldrb	r3, [r7, #3]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	015b      	lsls	r3, r3, #5
 80034ce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	4413      	add	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80034de:	78fb      	ldrb	r3, [r7, #3]
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_PCD_EP_Close+0x5e>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e00e      	b.n	8003516 <HAL_PCD_EP_Close+0x7c>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68f9      	ldr	r1, [r7, #12]
 8003506:	4618      	mov	r0, r3
 8003508:	f005 fbc4 	bl	8008c94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b086      	sub	sp, #24
 8003522:	af00      	add	r7, sp, #0
 8003524:	60f8      	str	r0, [r7, #12]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
 800352a:	460b      	mov	r3, r1
 800352c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800352e:	7afb      	ldrb	r3, [r7, #11]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	015b      	lsls	r3, r3, #5
 8003536:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	4413      	add	r3, r2
 800353e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2200      	movs	r2, #0
 8003550:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2200      	movs	r2, #0
 8003556:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003558:	7afb      	ldrb	r3, [r7, #11]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	b2da      	uxtb	r2, r3
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003564:	7afb      	ldrb	r3, [r7, #11]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	2b00      	cmp	r3, #0
 800356c:	d106      	bne.n	800357c <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6979      	ldr	r1, [r7, #20]
 8003574:	4618      	mov	r0, r3
 8003576:	f005 fd23 	bl	8008fc0 <USB_EPStartXfer>
 800357a:	e005      	b.n	8003588 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6979      	ldr	r1, [r7, #20]
 8003582:	4618      	mov	r0, r3
 8003584:	f005 fd1c 	bl	8008fc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	460b      	mov	r3, r1
 800359c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800359e:	78fb      	ldrb	r3, [r7, #3]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	330a      	adds	r3, #10
 80035a8:	015b      	lsls	r3, r3, #5
 80035aa:	4413      	add	r3, r2
 80035ac:	3304      	adds	r3, #4
 80035ae:	681b      	ldr	r3, [r3, #0]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	460b      	mov	r3, r1
 80035ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035cc:	7afb      	ldrb	r3, [r7, #11]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	015b      	lsls	r3, r3, #5
 80035d4:	3328      	adds	r3, #40	; 0x28
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4413      	add	r3, r2
 80035da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2200      	movs	r2, #0
 80035ec:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2201      	movs	r2, #1
 80035f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035f4:	7afb      	ldrb	r3, [r7, #11]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003600:	7afb      	ldrb	r3, [r7, #11]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	2b00      	cmp	r3, #0
 8003608:	d106      	bne.n	8003618 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6979      	ldr	r1, [r7, #20]
 8003610:	4618      	mov	r0, r3
 8003612:	f005 fcd5 	bl	8008fc0 <USB_EPStartXfer>
 8003616:	e005      	b.n	8003624 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6979      	ldr	r1, [r7, #20]
 800361e:	4618      	mov	r0, r3
 8003620:	f005 fcce 	bl	8008fc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b084      	sub	sp, #16
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	460b      	mov	r3, r1
 8003638:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800363a:	78fb      	ldrb	r3, [r7, #3]
 800363c:	f003 0207 	and.w	r2, r3, #7
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	429a      	cmp	r2, r3
 8003646:	d901      	bls.n	800364c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e046      	b.n	80036da <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800364c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003650:	2b00      	cmp	r3, #0
 8003652:	da0b      	bge.n	800366c <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	015b      	lsls	r3, r3, #5
 800365c:	3328      	adds	r3, #40	; 0x28
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	4413      	add	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2201      	movs	r2, #1
 8003668:	705a      	strb	r2, [r3, #1]
 800366a:	e009      	b.n	8003680 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800366c:	78fb      	ldrb	r3, [r7, #3]
 800366e:	015b      	lsls	r3, r3, #5
 8003670:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	4413      	add	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2201      	movs	r2, #1
 8003684:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003686:	78fb      	ldrb	r3, [r7, #3]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	b2da      	uxtb	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_PCD_EP_SetStall+0x72>
 800369c:	2302      	movs	r3, #2
 800369e:	e01c      	b.n	80036da <HAL_PCD_EP_SetStall+0xac>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68f9      	ldr	r1, [r7, #12]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f005 ff3e 	bl	8009530 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d108      	bne.n	80036d0 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80036c8:	4619      	mov	r1, r3
 80036ca:	4610      	mov	r0, r2
 80036cc:	f006 f841 	bl	8009752 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b084      	sub	sp, #16
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	460b      	mov	r3, r1
 80036ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80036ee:	78fb      	ldrb	r3, [r7, #3]
 80036f0:	f003 020f 	and.w	r2, r3, #15
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d901      	bls.n	8003700 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e03a      	b.n	8003776 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003700:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003704:	2b00      	cmp	r3, #0
 8003706:	da0b      	bge.n	8003720 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003708:	78fb      	ldrb	r3, [r7, #3]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	015b      	lsls	r3, r3, #5
 8003710:	3328      	adds	r3, #40	; 0x28
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	4413      	add	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2201      	movs	r2, #1
 800371c:	705a      	strb	r2, [r3, #1]
 800371e:	e00b      	b.n	8003738 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	015b      	lsls	r3, r3, #5
 8003728:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	4413      	add	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800373e:	78fb      	ldrb	r3, [r7, #3]
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	b2da      	uxtb	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_PCD_EP_ClrStall+0x76>
 8003754:	2302      	movs	r3, #2
 8003756:	e00e      	b.n	8003776 <HAL_PCD_EP_ClrStall+0x94>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68f9      	ldr	r1, [r7, #12]
 8003766:	4618      	mov	r0, r3
 8003768:	f005 ff24 	bl	80095b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003780:	b590      	push	{r4, r7, lr}
 8003782:	b089      	sub	sp, #36	; 0x24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003788:	e274      	b.n	8003c74 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003792:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003794:	8afb      	ldrh	r3, [r7, #22]
 8003796:	b2db      	uxtb	r3, r3
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800379e:	7d7b      	ldrb	r3, [r7, #21]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f040 813c 	bne.w	8003a1e <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80037a6:	8afb      	ldrh	r3, [r7, #22]
 80037a8:	f003 0310 	and.w	r3, r3, #16
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d14f      	bne.n	8003850 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80037bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c0:	b29c      	uxth	r4, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80037ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3328      	adds	r3, #40	; 0x28
 80037d6:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	461a      	mov	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	4413      	add	r3, r2
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6812      	ldr	r2, [r2, #0]
 80037f0:	4413      	add	r3, r2
 80037f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	441a      	add	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800380e:	2100      	movs	r1, #0
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f008 ff3b 	bl	800c68c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 8228 	beq.w	8003c74 <PCD_EP_ISR_Handler+0x4f4>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	2b00      	cmp	r3, #0
 800382a:	f040 8223 	bne.w	8003c74 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003834:	b2db      	uxtb	r3, r3
 8003836:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800383a:	b2da      	uxtb	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	b292      	uxth	r2, r2
 8003842:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800384e:	e211      	b.n	8003c74 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003856:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003860:	8a7b      	ldrh	r3, [r7, #18]
 8003862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003866:	2b00      	cmp	r3, #0
 8003868:	d031      	beq.n	80038ce <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003872:	b29b      	uxth	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	4413      	add	r3, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6812      	ldr	r2, [r2, #0]
 8003882:	4413      	add	r3, r2
 8003884:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6818      	ldr	r0, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	f005 ffa1 	bl	80097ec <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80038b6:	4013      	ands	r3, r2
 80038b8:	b29c      	uxth	r4, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80038c2:	b292      	uxth	r2, r2
 80038c4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f008 feb6 	bl	800c638 <HAL_PCD_SetupStageCallback>
 80038cc:	e1d2      	b.n	8003c74 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80038ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f280 81ce 	bge.w	8003c74 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	b29a      	uxth	r2, r3
 80038e0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80038e4:	4013      	ands	r3, r2
 80038e6:	b29c      	uxth	r4, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80038f0:	b292      	uxth	r2, r2
 80038f2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	461a      	mov	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	4413      	add	r3, r2
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6812      	ldr	r2, [r2, #0]
 800390c:	4413      	add	r3, r2
 800390e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d019      	beq.n	8003958 <PCD_EP_ISR_Handler+0x1d8>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d015      	beq.n	8003958 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6818      	ldr	r0, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6959      	ldr	r1, [r3, #20]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800393c:	b29b      	uxth	r3, r3
 800393e:	f005 ff55 	bl	80097ec <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	695a      	ldr	r2, [r3, #20]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	441a      	add	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003950:	2100      	movs	r1, #0
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f008 fe82 	bl	800c65c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	461c      	mov	r4, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003966:	b29b      	uxth	r3, r3
 8003968:	441c      	add	r4, r3
 800396a:	f204 4306 	addw	r3, r4, #1030	; 0x406
 800396e:	461c      	mov	r4, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10e      	bne.n	8003996 <PCD_EP_ISR_Handler+0x216>
 8003978:	8823      	ldrh	r3, [r4, #0]
 800397a:	b29b      	uxth	r3, r3
 800397c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003980:	b29b      	uxth	r3, r3
 8003982:	8023      	strh	r3, [r4, #0]
 8003984:	8823      	ldrh	r3, [r4, #0]
 8003986:	b29b      	uxth	r3, r3
 8003988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800398c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003990:	b29b      	uxth	r3, r3
 8003992:	8023      	strh	r3, [r4, #0]
 8003994:	e02d      	b.n	80039f2 <PCD_EP_ISR_Handler+0x272>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	2b3e      	cmp	r3, #62	; 0x3e
 800399c:	d812      	bhi.n	80039c4 <PCD_EP_ISR_Handler+0x244>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	085b      	lsrs	r3, r3, #1
 80039a4:	61bb      	str	r3, [r7, #24]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <PCD_EP_ISR_Handler+0x238>
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	3301      	adds	r3, #1
 80039b6:	61bb      	str	r3, [r7, #24]
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	029b      	lsls	r3, r3, #10
 80039be:	b29b      	uxth	r3, r3
 80039c0:	8023      	strh	r3, [r4, #0]
 80039c2:	e016      	b.n	80039f2 <PCD_EP_ISR_Handler+0x272>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	095b      	lsrs	r3, r3, #5
 80039ca:	61bb      	str	r3, [r7, #24]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d102      	bne.n	80039de <PCD_EP_ISR_Handler+0x25e>
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	3b01      	subs	r3, #1
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	029b      	lsls	r3, r3, #10
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a02:	b29c      	uxth	r4, r3
 8003a04:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003a08:	b29c      	uxth	r4, r3
 8003a0a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003a0e:	b29c      	uxth	r4, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	4b9e      	ldr	r3, [pc, #632]	; (8003c90 <PCD_EP_ISR_Handler+0x510>)
 8003a16:	4323      	orrs	r3, r4
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	8013      	strh	r3, [r2, #0]
 8003a1c:	e12a      	b.n	8003c74 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	7d7b      	ldrb	r3, [r7, #21]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f280 80cb 	bge.w	8003bce <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	7d7b      	ldrb	r3, [r7, #21]
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	b29c      	uxth	r4, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	7d7b      	ldrb	r3, [r7, #21]
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003a60:	b292      	uxth	r2, r2
 8003a62:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003a64:	7d7b      	ldrb	r3, [r7, #21]
 8003a66:	015b      	lsls	r3, r3, #5
 8003a68:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	4413      	add	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	7b1b      	ldrb	r3, [r3, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d11f      	bne.n	8003aba <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	461a      	mov	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6812      	ldr	r2, [r2, #0]
 8003a92:	4413      	add	r3, r2
 8003a94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a9e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003aa0:	8bfb      	ldrh	r3, [r7, #30]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d06e      	beq.n	8003b84 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6959      	ldr	r1, [r3, #20]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	88da      	ldrh	r2, [r3, #6]
 8003ab2:	8bfb      	ldrh	r3, [r7, #30]
 8003ab4:	f005 fe9a 	bl	80097ec <USB_ReadPMA>
 8003ab8:	e064      	b.n	8003b84 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad4:	b29c      	uxth	r4, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	441a      	add	r2, r3
 8003ae4:	4b6b      	ldr	r3, [pc, #428]	; (8003c94 <PCD_EP_ISR_Handler+0x514>)
 8003ae6:	4323      	orrs	r3, r4
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	461a      	mov	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d01f      	beq.n	8003b46 <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	461a      	mov	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4413      	add	r3, r2
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6812      	ldr	r2, [r2, #0]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b2a:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003b2c:	8bfb      	ldrh	r3, [r7, #30]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d028      	beq.n	8003b84 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6959      	ldr	r1, [r3, #20]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	891a      	ldrh	r2, [r3, #8]
 8003b3e:	8bfb      	ldrh	r3, [r7, #30]
 8003b40:	f005 fe54 	bl	80097ec <USB_ReadPMA>
 8003b44:	e01e      	b.n	8003b84 <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	4413      	add	r3, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6812      	ldr	r2, [r2, #0]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b6a:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003b6c:	8bfb      	ldrh	r3, [r7, #30]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d008      	beq.n	8003b84 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6959      	ldr	r1, [r3, #20]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	895a      	ldrh	r2, [r3, #10]
 8003b7e:	8bfb      	ldrh	r3, [r7, #30]
 8003b80:	f005 fe34 	bl	80097ec <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	69da      	ldr	r2, [r3, #28]
 8003b88:	8bfb      	ldrh	r3, [r7, #30]
 8003b8a:	441a      	add	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	695a      	ldr	r2, [r3, #20]
 8003b94:	8bfb      	ldrh	r3, [r7, #30]
 8003b96:	441a      	add	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d004      	beq.n	8003bae <PCD_EP_ISR_Handler+0x42e>
 8003ba4:	8bfa      	ldrh	r2, [r7, #30]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d206      	bcs.n	8003bbc <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f008 fd51 	bl	800c65c <HAL_PCD_DataOutStageCallback>
 8003bba:	e008      	b.n	8003bce <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	7819      	ldrb	r1, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	695a      	ldr	r2, [r3, #20]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff fca8 	bl	800351e <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003bce:	8a7b      	ldrh	r3, [r7, #18]
 8003bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d04d      	beq.n	8003c74 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003bd8:	7d7b      	ldrb	r3, [r7, #21]
 8003bda:	015b      	lsls	r3, r3, #5
 8003bdc:	3328      	adds	r3, #40	; 0x28
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	4413      	add	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	7d7b      	ldrb	r3, [r7, #21]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfc:	b29c      	uxth	r4, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	7d7b      	ldrb	r3, [r7, #21]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	441a      	add	r2, r3
 8003c0a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	461a      	mov	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4413      	add	r3, r2
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6812      	ldr	r2, [r2, #0]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	695a      	ldr	r2, [r3, #20]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	441a      	add	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d106      	bne.n	8003c62 <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	4619      	mov	r1, r3
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f008 fd16 	bl	800c68c <HAL_PCD_DataInStageCallback>
 8003c60:	e008      	b.n	8003c74 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	7819      	ldrb	r1, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	695a      	ldr	r2, [r3, #20]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff fca4 	bl	80035bc <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	b21b      	sxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f6ff ad82 	blt.w	800378a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3724      	adds	r7, #36	; 0x24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd90      	pop	{r4, r7, pc}
 8003c90:	ffff8080 	.word	0xffff8080
 8003c94:	ffff80c0 	.word	0xffff80c0

08003c98 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	607b      	str	r3, [r7, #4]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	817b      	strh	r3, [r7, #10]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003caa:	897b      	ldrh	r3, [r7, #10]
 8003cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d008      	beq.n	8003cc8 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cb6:	897b      	ldrh	r3, [r7, #10]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	015b      	lsls	r3, r3, #5
 8003cbe:	3328      	adds	r3, #40	; 0x28
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	e006      	b.n	8003cd6 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cc8:	897b      	ldrh	r3, [r7, #10]
 8003cca:	015b      	lsls	r3, r3, #5
 8003ccc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003cd6:	893b      	ldrh	r3, [r7, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d107      	bne.n	8003cec <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	80da      	strh	r2, [r3, #6]
 8003cea:	e00b      	b.n	8003d04 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	0c1b      	lsrs	r3, r3, #16
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	371c      	adds	r7, #28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b085      	sub	sp, #20
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	f043 0302 	orr.w	r3, r3, #2
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
	...

08003d68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00b      	beq.n	8003d8e <HAL_PWREx_ControlVoltageScaling+0x26>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d7c:	d007      	beq.n	8003d8e <HAL_PWREx_ControlVoltageScaling+0x26>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d84:	d003      	beq.n	8003d8e <HAL_PWREx_ControlVoltageScaling+0x26>
 8003d86:	219e      	movs	r1, #158	; 0x9e
 8003d88:	484d      	ldr	r0, [pc, #308]	; (8003ec0 <HAL_PWREx_ControlVoltageScaling+0x158>)
 8003d8a:	f7fd fbda 	bl	8001542 <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d141      	bne.n	8003e18 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d94:	4b4b      	ldr	r3, [pc, #300]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da0:	d131      	bne.n	8003e06 <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003da2:	4b48      	ldr	r3, [pc, #288]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da8:	4a46      	ldr	r2, [pc, #280]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003daa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003db2:	4b44      	ldr	r3, [pc, #272]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dba:	4a42      	ldr	r2, [pc, #264]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003dbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dc0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dc2:	4b41      	ldr	r3, [pc, #260]	; (8003ec8 <HAL_PWREx_ControlVoltageScaling+0x160>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2232      	movs	r2, #50	; 0x32
 8003dc8:	fb02 f303 	mul.w	r3, r2, r3
 8003dcc:	4a3f      	ldr	r2, [pc, #252]	; (8003ecc <HAL_PWREx_ControlVoltageScaling+0x164>)
 8003dce:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd2:	0c9b      	lsrs	r3, r3, #18
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dd8:	e002      	b.n	8003de0 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003de0:	4b38      	ldr	r3, [pc, #224]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dec:	d102      	bne.n	8003df4 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1f2      	bne.n	8003dda <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003df4:	4b33      	ldr	r3, [pc, #204]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e00:	d158      	bne.n	8003eb4 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e057      	b.n	8003eb6 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e06:	4b2f      	ldr	r3, [pc, #188]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e0c:	4a2d      	ldr	r2, [pc, #180]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003e0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e12:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e16:	e04d      	b.n	8003eb4 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e1e:	d141      	bne.n	8003ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e20:	4b28      	ldr	r3, [pc, #160]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2c:	d131      	bne.n	8003e92 <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e2e:	4b25      	ldr	r3, [pc, #148]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e34:	4a23      	ldr	r2, [pc, #140]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e3e:	4b21      	ldr	r3, [pc, #132]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e46:	4a1f      	ldr	r2, [pc, #124]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003e48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e4c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e4e:	4b1e      	ldr	r3, [pc, #120]	; (8003ec8 <HAL_PWREx_ControlVoltageScaling+0x160>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2232      	movs	r2, #50	; 0x32
 8003e54:	fb02 f303 	mul.w	r3, r2, r3
 8003e58:	4a1c      	ldr	r2, [pc, #112]	; (8003ecc <HAL_PWREx_ControlVoltageScaling+0x164>)
 8003e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5e:	0c9b      	lsrs	r3, r3, #18
 8003e60:	3301      	adds	r3, #1
 8003e62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e64:	e002      	b.n	8003e6c <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e6c:	4b15      	ldr	r3, [pc, #84]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e78:	d102      	bne.n	8003e80 <HAL_PWREx_ControlVoltageScaling+0x118>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1f2      	bne.n	8003e66 <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e80:	4b10      	ldr	r3, [pc, #64]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e8c:	d112      	bne.n	8003eb4 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e011      	b.n	8003eb6 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e92:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e98:	4a0a      	ldr	r2, [pc, #40]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e9e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ea2:	e007      	b.n	8003eb4 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ea4:	4b07      	ldr	r3, [pc, #28]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003eac:	4a05      	ldr	r2, [pc, #20]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003eae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003eb2:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	0800d074 	.word	0x0800d074
 8003ec4:	40007000 	.word	0x40007000
 8003ec8:	20000000 	.word	0x20000000
 8003ecc:	431bde83 	.word	0x431bde83

08003ed0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b088      	sub	sp, #32
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d102      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f000 bc03 	b.w	80046ea <HAL_RCC_OscConfig+0x81a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d022      	beq.n	8003f32 <HAL_RCC_OscConfig+0x62>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d11c      	bne.n	8003f32 <HAL_RCC_OscConfig+0x62>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d116      	bne.n	8003f32 <HAL_RCC_OscConfig+0x62>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0320 	and.w	r3, r3, #32
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d110      	bne.n	8003f32 <HAL_RCC_OscConfig+0x62>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10a      	bne.n	8003f32 <HAL_RCC_OscConfig+0x62>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d104      	bne.n	8003f32 <HAL_RCC_OscConfig+0x62>
 8003f28:	f240 114b 	movw	r1, #331	; 0x14b
 8003f2c:	48a4      	ldr	r0, [pc, #656]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 8003f2e:	f7fd fb08 	bl	8001542 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 8089 	beq.w	8004052 <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00e      	beq.n	8003f66 <HAL_RCC_OscConfig+0x96>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f50:	d009      	beq.n	8003f66 <HAL_RCC_OscConfig+0x96>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f5a:	d004      	beq.n	8003f66 <HAL_RCC_OscConfig+0x96>
 8003f5c:	f240 1151 	movw	r1, #337	; 0x151
 8003f60:	4897      	ldr	r0, [pc, #604]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 8003f62:	f7fd faee 	bl	8001542 <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f66:	4b97      	ldr	r3, [pc, #604]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f70:	4b94      	ldr	r3, [pc, #592]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	2b0c      	cmp	r3, #12
 8003f7e:	d102      	bne.n	8003f86 <HAL_RCC_OscConfig+0xb6>
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2b03      	cmp	r3, #3
 8003f84:	d002      	beq.n	8003f8c <HAL_RCC_OscConfig+0xbc>
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d10b      	bne.n	8003fa4 <HAL_RCC_OscConfig+0xd4>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f8c:	4b8d      	ldr	r3, [pc, #564]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d05b      	beq.n	8004050 <HAL_RCC_OscConfig+0x180>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d157      	bne.n	8004050 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e3a2      	b.n	80046ea <HAL_RCC_OscConfig+0x81a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fac:	d106      	bne.n	8003fbc <HAL_RCC_OscConfig+0xec>
 8003fae:	4b85      	ldr	r3, [pc, #532]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a84      	ldr	r2, [pc, #528]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 8003fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	e01d      	b.n	8003ff8 <HAL_RCC_OscConfig+0x128>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fc4:	d10c      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x110>
 8003fc6:	4b7f      	ldr	r3, [pc, #508]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a7e      	ldr	r2, [pc, #504]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 8003fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	4b7c      	ldr	r3, [pc, #496]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a7b      	ldr	r2, [pc, #492]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 8003fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	e00b      	b.n	8003ff8 <HAL_RCC_OscConfig+0x128>
 8003fe0:	4b78      	ldr	r3, [pc, #480]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a77      	ldr	r2, [pc, #476]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 8003fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	4b75      	ldr	r3, [pc, #468]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a74      	ldr	r2, [pc, #464]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 8003ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d013      	beq.n	8004028 <HAL_RCC_OscConfig+0x158>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004000:	f7fe f896 	bl	8002130 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004008:	f7fe f892 	bl	8002130 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b64      	cmp	r3, #100	; 0x64
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e367      	b.n	80046ea <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800401a:	4b6a      	ldr	r3, [pc, #424]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f0      	beq.n	8004008 <HAL_RCC_OscConfig+0x138>
 8004026:	e014      	b.n	8004052 <HAL_RCC_OscConfig+0x182>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fe f882 	bl	8002130 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004030:	f7fe f87e 	bl	8002130 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b64      	cmp	r3, #100	; 0x64
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e353      	b.n	80046ea <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004042:	4b60      	ldr	r3, [pc, #384]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x160>
 800404e:	e000      	b.n	8004052 <HAL_RCC_OscConfig+0x182>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 808d 	beq.w	800417a <HAL_RCC_OscConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d009      	beq.n	800407c <HAL_RCC_OscConfig+0x1ac>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004070:	d004      	beq.n	800407c <HAL_RCC_OscConfig+0x1ac>
 8004072:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8004076:	4852      	ldr	r0, [pc, #328]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 8004078:	f7fd fa63 	bl	8001542 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	2b7f      	cmp	r3, #127	; 0x7f
 8004082:	d904      	bls.n	800408e <HAL_RCC_OscConfig+0x1be>
 8004084:	f240 1187 	movw	r1, #391	; 0x187
 8004088:	484d      	ldr	r0, [pc, #308]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 800408a:	f7fd fa5a 	bl	8001542 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800408e:	4b4d      	ldr	r3, [pc, #308]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 030c 	and.w	r3, r3, #12
 8004096:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004098:	4b4a      	ldr	r3, [pc, #296]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2b0c      	cmp	r3, #12
 80040a6:	d102      	bne.n	80040ae <HAL_RCC_OscConfig+0x1de>
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d002      	beq.n	80040b4 <HAL_RCC_OscConfig+0x1e4>
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d11f      	bne.n	80040f4 <HAL_RCC_OscConfig+0x224>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040b4:	4b43      	ldr	r3, [pc, #268]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_RCC_OscConfig+0x1fc>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_RCC_OscConfig+0x1fc>
      {
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e30e      	b.n	80046ea <HAL_RCC_OscConfig+0x81a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040cc:	4b3d      	ldr	r3, [pc, #244]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	061b      	lsls	r3, r3, #24
 80040da:	493a      	ldr	r1, [pc, #232]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80040e0:	4b39      	ldr	r3, [pc, #228]	; (80041c8 <HAL_RCC_OscConfig+0x2f8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fd fb0f 	bl	8001708 <HAL_InitTick>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d043      	beq.n	8004178 <HAL_RCC_OscConfig+0x2a8>
        {
          return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e2fa      	b.n	80046ea <HAL_RCC_OscConfig+0x81a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d023      	beq.n	8004144 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040fc:	4b31      	ldr	r3, [pc, #196]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a30      	ldr	r2, [pc, #192]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 8004102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004108:	f7fe f812 	bl	8002130 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x252>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004110:	f7fe f80e 	bl	8002130 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x252>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e2e3      	b.n	80046ea <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004122:	4b28      	ldr	r3, [pc, #160]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0f0      	beq.n	8004110 <HAL_RCC_OscConfig+0x240>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800412e:	4b25      	ldr	r3, [pc, #148]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	061b      	lsls	r3, r3, #24
 800413c:	4921      	ldr	r1, [pc, #132]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 800413e:	4313      	orrs	r3, r2
 8004140:	604b      	str	r3, [r1, #4]
 8004142:	e01a      	b.n	800417a <HAL_RCC_OscConfig+0x2aa>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004144:	4b1f      	ldr	r3, [pc, #124]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 800414a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800414e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004150:	f7fd ffee 	bl	8002130 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x29a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004158:	f7fd ffea 	bl	8002130 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e2bf      	b.n	80046ea <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800416a:	4b16      	ldr	r3, [pc, #88]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1f0      	bne.n	8004158 <HAL_RCC_OscConfig+0x288>
 8004176:	e000      	b.n	800417a <HAL_RCC_OscConfig+0x2aa>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004178:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b00      	cmp	r3, #0
 8004184:	d04f      	beq.n	8004226 <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d008      	beq.n	80041a0 <HAL_RCC_OscConfig+0x2d0>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d004      	beq.n	80041a0 <HAL_RCC_OscConfig+0x2d0>
 8004196:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 800419a:	4809      	ldr	r0, [pc, #36]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 800419c:	f7fd f9d1 	bl	8001542 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d022      	beq.n	80041ee <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041a8:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 80041aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ae:	4a05      	ldr	r2, [pc, #20]	; (80041c4 <HAL_RCC_OscConfig+0x2f4>)
 80041b0:	f043 0301 	orr.w	r3, r3, #1
 80041b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b8:	f7fd ffba 	bl	8002130 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041be:	e00e      	b.n	80041de <HAL_RCC_OscConfig+0x30e>
 80041c0:	0800d0b0 	.word	0x0800d0b0
 80041c4:	40021000 	.word	0x40021000
 80041c8:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041cc:	f7fd ffb0 	bl	8002130 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e285      	b.n	80046ea <HAL_RCC_OscConfig+0x81a>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041de:	4b95      	ldr	r3, [pc, #596]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 80041e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0ef      	beq.n	80041cc <HAL_RCC_OscConfig+0x2fc>
 80041ec:	e01b      	b.n	8004226 <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ee:	4b91      	ldr	r3, [pc, #580]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 80041f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f4:	4a8f      	ldr	r2, [pc, #572]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 80041f6:	f023 0301 	bic.w	r3, r3, #1
 80041fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fe:	f7fd ff97 	bl	8002130 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004206:	f7fd ff93 	bl	8002130 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e268      	b.n	80046ea <HAL_RCC_OscConfig+0x81a>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004218:	4b86      	ldr	r3, [pc, #536]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 800421a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1ef      	bne.n	8004206 <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 80b7 	beq.w	80043a2 <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004234:	2300      	movs	r3, #0
 8004236:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00c      	beq.n	800425a <HAL_RCC_OscConfig+0x38a>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d008      	beq.n	800425a <HAL_RCC_OscConfig+0x38a>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b05      	cmp	r3, #5
 800424e:	d004      	beq.n	800425a <HAL_RCC_OscConfig+0x38a>
 8004250:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 8004254:	4878      	ldr	r0, [pc, #480]	; (8004438 <HAL_RCC_OscConfig+0x568>)
 8004256:	f7fd f974 	bl	8001542 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800425a:	4b76      	ldr	r3, [pc, #472]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 800425c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_RCC_OscConfig+0x39a>
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <HAL_RCC_OscConfig+0x39c>
 800426a:	2300      	movs	r3, #0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00d      	beq.n	800428c <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004270:	4b70      	ldr	r3, [pc, #448]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 8004272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004274:	4a6f      	ldr	r2, [pc, #444]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 8004276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800427a:	6593      	str	r3, [r2, #88]	; 0x58
 800427c:	4b6d      	ldr	r3, [pc, #436]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 800427e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004288:	2301      	movs	r3, #1
 800428a:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800428c:	4b6b      	ldr	r3, [pc, #428]	; (800443c <HAL_RCC_OscConfig+0x56c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004294:	2b00      	cmp	r3, #0
 8004296:	d118      	bne.n	80042ca <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004298:	4b68      	ldr	r3, [pc, #416]	; (800443c <HAL_RCC_OscConfig+0x56c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a67      	ldr	r2, [pc, #412]	; (800443c <HAL_RCC_OscConfig+0x56c>)
 800429e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042a4:	f7fd ff44 	bl	8002130 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ac:	f7fd ff40 	bl	8002130 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e215      	b.n	80046ea <HAL_RCC_OscConfig+0x81a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042be:	4b5f      	ldr	r3, [pc, #380]	; (800443c <HAL_RCC_OscConfig+0x56c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d108      	bne.n	80042e4 <HAL_RCC_OscConfig+0x414>
 80042d2:	4b58      	ldr	r3, [pc, #352]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 80042d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d8:	4a56      	ldr	r2, [pc, #344]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042e2:	e024      	b.n	800432e <HAL_RCC_OscConfig+0x45e>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b05      	cmp	r3, #5
 80042ea:	d110      	bne.n	800430e <HAL_RCC_OscConfig+0x43e>
 80042ec:	4b51      	ldr	r3, [pc, #324]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 80042ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f2:	4a50      	ldr	r2, [pc, #320]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 80042f4:	f043 0304 	orr.w	r3, r3, #4
 80042f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042fc:	4b4d      	ldr	r3, [pc, #308]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 80042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004302:	4a4c      	ldr	r2, [pc, #304]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 8004304:	f043 0301 	orr.w	r3, r3, #1
 8004308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800430c:	e00f      	b.n	800432e <HAL_RCC_OscConfig+0x45e>
 800430e:	4b49      	ldr	r3, [pc, #292]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 8004310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004314:	4a47      	ldr	r2, [pc, #284]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 8004316:	f023 0301 	bic.w	r3, r3, #1
 800431a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800431e:	4b45      	ldr	r3, [pc, #276]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 8004320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004324:	4a43      	ldr	r2, [pc, #268]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 8004326:	f023 0304 	bic.w	r3, r3, #4
 800432a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d016      	beq.n	8004364 <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004336:	f7fd fefb 	bl	8002130 <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800433c:	e00a      	b.n	8004354 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433e:	f7fd fef7 	bl	8002130 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	f241 3288 	movw	r2, #5000	; 0x1388
 800434c:	4293      	cmp	r3, r2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e1ca      	b.n	80046ea <HAL_RCC_OscConfig+0x81a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004354:	4b37      	ldr	r3, [pc, #220]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0ed      	beq.n	800433e <HAL_RCC_OscConfig+0x46e>
 8004362:	e015      	b.n	8004390 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004364:	f7fd fee4 	bl	8002130 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800436a:	e00a      	b.n	8004382 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436c:	f7fd fee0 	bl	8002130 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	f241 3288 	movw	r2, #5000	; 0x1388
 800437a:	4293      	cmp	r3, r2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e1b3      	b.n	80046ea <HAL_RCC_OscConfig+0x81a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004382:	4b2c      	ldr	r3, [pc, #176]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 8004384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1ed      	bne.n	800436c <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004390:	7ffb      	ldrb	r3, [r7, #31]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d105      	bne.n	80043a2 <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004396:	4b27      	ldr	r3, [pc, #156]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 8004398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439a:	4a26      	ldr	r2, [pc, #152]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 800439c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0320 	and.w	r3, r3, #32
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d04f      	beq.n	800444e <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d008      	beq.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d004      	beq.n	80043c8 <HAL_RCC_OscConfig+0x4f8>
 80043be:	f240 2141 	movw	r1, #577	; 0x241
 80043c2:	481d      	ldr	r0, [pc, #116]	; (8004438 <HAL_RCC_OscConfig+0x568>)
 80043c4:	f7fd f8bd 	bl	8001542 <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d01c      	beq.n	800440a <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043d0:	4b18      	ldr	r3, [pc, #96]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 80043d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043d6:	4a17      	ldr	r2, [pc, #92]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 80043d8:	f043 0301 	orr.w	r3, r3, #1
 80043dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e0:	f7fd fea6 	bl	8002130 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043e8:	f7fd fea2 	bl	8002130 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e177      	b.n	80046ea <HAL_RCC_OscConfig+0x81a>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043fa:	4b0e      	ldr	r3, [pc, #56]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 80043fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0ef      	beq.n	80043e8 <HAL_RCC_OscConfig+0x518>
 8004408:	e021      	b.n	800444e <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800440a:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 800440c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004410:	4a08      	ldr	r2, [pc, #32]	; (8004434 <HAL_RCC_OscConfig+0x564>)
 8004412:	f023 0301 	bic.w	r3, r3, #1
 8004416:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441a:	f7fd fe89 	bl	8002130 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004420:	e00e      	b.n	8004440 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004422:	f7fd fe85 	bl	8002130 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d907      	bls.n	8004440 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e15a      	b.n	80046ea <HAL_RCC_OscConfig+0x81a>
 8004434:	40021000 	.word	0x40021000
 8004438:	0800d0b0 	.word	0x0800d0b0
 800443c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004440:	4ba6      	ldr	r3, [pc, #664]	; (80046dc <HAL_RCC_OscConfig+0x80c>)
 8004442:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1e9      	bne.n	8004422 <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00c      	beq.n	8004470 <HAL_RCC_OscConfig+0x5a0>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d008      	beq.n	8004470 <HAL_RCC_OscConfig+0x5a0>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d004      	beq.n	8004470 <HAL_RCC_OscConfig+0x5a0>
 8004466:	f240 216a 	movw	r1, #618	; 0x26a
 800446a:	489d      	ldr	r0, [pc, #628]	; (80046e0 <HAL_RCC_OscConfig+0x810>)
 800446c:	f7fd f869 	bl	8001542 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 8137 	beq.w	80046e8 <HAL_RCC_OscConfig+0x818>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800447a:	4b98      	ldr	r3, [pc, #608]	; (80046dc <HAL_RCC_OscConfig+0x80c>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 030c 	and.w	r3, r3, #12
 8004482:	2b0c      	cmp	r3, #12
 8004484:	f000 80ea 	beq.w	800465c <HAL_RCC_OscConfig+0x78c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	2b02      	cmp	r3, #2
 800448e:	f040 80bd 	bne.w	800460c <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00c      	beq.n	80044b4 <HAL_RCC_OscConfig+0x5e4>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d008      	beq.n	80044b4 <HAL_RCC_OscConfig+0x5e4>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d004      	beq.n	80044b4 <HAL_RCC_OscConfig+0x5e4>
 80044aa:	f44f 711d 	mov.w	r1, #628	; 0x274
 80044ae:	488c      	ldr	r0, [pc, #560]	; (80046e0 <HAL_RCC_OscConfig+0x810>)
 80044b0:	f7fd f847 	bl	8001542 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_RCC_OscConfig+0x5f4>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	2b10      	cmp	r3, #16
 80044c2:	d904      	bls.n	80044ce <HAL_RCC_OscConfig+0x5fe>
 80044c4:	f240 2175 	movw	r1, #629	; 0x275
 80044c8:	4885      	ldr	r0, [pc, #532]	; (80046e0 <HAL_RCC_OscConfig+0x810>)
 80044ca:	f7fd f83a 	bl	8001542 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d2:	2b07      	cmp	r3, #7
 80044d4:	d903      	bls.n	80044de <HAL_RCC_OscConfig+0x60e>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044da:	2b7f      	cmp	r3, #127	; 0x7f
 80044dc:	d904      	bls.n	80044e8 <HAL_RCC_OscConfig+0x618>
 80044de:	f240 2176 	movw	r1, #630	; 0x276
 80044e2:	487f      	ldr	r0, [pc, #508]	; (80046e0 <HAL_RCC_OscConfig+0x810>)
 80044e4:	f7fd f82d 	bl	8001542 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d903      	bls.n	80044f8 <HAL_RCC_OscConfig+0x628>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	2b1f      	cmp	r3, #31
 80044f6:	d904      	bls.n	8004502 <HAL_RCC_OscConfig+0x632>
 80044f8:	f240 2177 	movw	r1, #631	; 0x277
 80044fc:	4878      	ldr	r0, [pc, #480]	; (80046e0 <HAL_RCC_OscConfig+0x810>)
 80044fe:	f7fd f820 	bl	8001542 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004506:	2b02      	cmp	r3, #2
 8004508:	d010      	beq.n	800452c <HAL_RCC_OscConfig+0x65c>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	2b04      	cmp	r3, #4
 8004510:	d00c      	beq.n	800452c <HAL_RCC_OscConfig+0x65c>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	2b06      	cmp	r3, #6
 8004518:	d008      	beq.n	800452c <HAL_RCC_OscConfig+0x65c>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	2b08      	cmp	r3, #8
 8004520:	d004      	beq.n	800452c <HAL_RCC_OscConfig+0x65c>
 8004522:	f44f 711e 	mov.w	r1, #632	; 0x278
 8004526:	486e      	ldr	r0, [pc, #440]	; (80046e0 <HAL_RCC_OscConfig+0x810>)
 8004528:	f7fd f80b 	bl	8001542 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004530:	2b02      	cmp	r3, #2
 8004532:	d010      	beq.n	8004556 <HAL_RCC_OscConfig+0x686>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004538:	2b04      	cmp	r3, #4
 800453a:	d00c      	beq.n	8004556 <HAL_RCC_OscConfig+0x686>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004540:	2b06      	cmp	r3, #6
 8004542:	d008      	beq.n	8004556 <HAL_RCC_OscConfig+0x686>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004548:	2b08      	cmp	r3, #8
 800454a:	d004      	beq.n	8004556 <HAL_RCC_OscConfig+0x686>
 800454c:	f240 2179 	movw	r1, #633	; 0x279
 8004550:	4863      	ldr	r0, [pc, #396]	; (80046e0 <HAL_RCC_OscConfig+0x810>)
 8004552:	f7fc fff6 	bl	8001542 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004556:	4b61      	ldr	r3, [pc, #388]	; (80046dc <HAL_RCC_OscConfig+0x80c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a60      	ldr	r2, [pc, #384]	; (80046dc <HAL_RCC_OscConfig+0x80c>)
 800455c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004562:	f7fd fde5 	bl	8002130 <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800456a:	f7fd fde1 	bl	8002130 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e0b6      	b.n	80046ea <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800457c:	4b57      	ldr	r3, [pc, #348]	; (80046dc <HAL_RCC_OscConfig+0x80c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1f0      	bne.n	800456a <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004588:	4b54      	ldr	r3, [pc, #336]	; (80046dc <HAL_RCC_OscConfig+0x80c>)
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	4b55      	ldr	r3, [pc, #340]	; (80046e4 <HAL_RCC_OscConfig+0x814>)
 800458e:	4013      	ands	r3, r2
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6a11      	ldr	r1, [r2, #32]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004598:	3a01      	subs	r2, #1
 800459a:	0112      	lsls	r2, r2, #4
 800459c:	4311      	orrs	r1, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80045a2:	0212      	lsls	r2, r2, #8
 80045a4:	4311      	orrs	r1, r2
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045aa:	0852      	lsrs	r2, r2, #1
 80045ac:	3a01      	subs	r2, #1
 80045ae:	0552      	lsls	r2, r2, #21
 80045b0:	4311      	orrs	r1, r2
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045b6:	0852      	lsrs	r2, r2, #1
 80045b8:	3a01      	subs	r2, #1
 80045ba:	0652      	lsls	r2, r2, #25
 80045bc:	4311      	orrs	r1, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80045c2:	06d2      	lsls	r2, r2, #27
 80045c4:	430a      	orrs	r2, r1
 80045c6:	4945      	ldr	r1, [pc, #276]	; (80046dc <HAL_RCC_OscConfig+0x80c>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045cc:	4b43      	ldr	r3, [pc, #268]	; (80046dc <HAL_RCC_OscConfig+0x80c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a42      	ldr	r2, [pc, #264]	; (80046dc <HAL_RCC_OscConfig+0x80c>)
 80045d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045d8:	4b40      	ldr	r3, [pc, #256]	; (80046dc <HAL_RCC_OscConfig+0x80c>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	4a3f      	ldr	r2, [pc, #252]	; (80046dc <HAL_RCC_OscConfig+0x80c>)
 80045de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fd fda4 	bl	8002130 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ec:	f7fd fda0 	bl	8002130 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e075      	b.n	80046ea <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045fe:	4b37      	ldr	r3, [pc, #220]	; (80046dc <HAL_RCC_OscConfig+0x80c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f0      	beq.n	80045ec <HAL_RCC_OscConfig+0x71c>
 800460a:	e06d      	b.n	80046e8 <HAL_RCC_OscConfig+0x818>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460c:	4b33      	ldr	r3, [pc, #204]	; (80046dc <HAL_RCC_OscConfig+0x80c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a32      	ldr	r2, [pc, #200]	; (80046dc <HAL_RCC_OscConfig+0x80c>)
 8004612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004616:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004618:	4b30      	ldr	r3, [pc, #192]	; (80046dc <HAL_RCC_OscConfig+0x80c>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4a2f      	ldr	r2, [pc, #188]	; (80046dc <HAL_RCC_OscConfig+0x80c>)
 800461e:	f023 0303 	bic.w	r3, r3, #3
 8004622:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004624:	4b2d      	ldr	r3, [pc, #180]	; (80046dc <HAL_RCC_OscConfig+0x80c>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	4a2c      	ldr	r2, [pc, #176]	; (80046dc <HAL_RCC_OscConfig+0x80c>)
 800462a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800462e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004632:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004634:	f7fd fd7c 	bl	8002130 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x77e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800463c:	f7fd fd78 	bl	8002130 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x77e>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e04d      	b.n	80046ea <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800464e:	4b23      	ldr	r3, [pc, #140]	; (80046dc <HAL_RCC_OscConfig+0x80c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0x76c>
 800465a:	e045      	b.n	80046e8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <HAL_RCC_OscConfig+0x798>
      {
        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e040      	b.n	80046ea <HAL_RCC_OscConfig+0x81a>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004668:	4b1c      	ldr	r3, [pc, #112]	; (80046dc <HAL_RCC_OscConfig+0x80c>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f003 0203 	and.w	r2, r3, #3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	429a      	cmp	r2, r3
 800467a:	d12c      	bne.n	80046d6 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	3b01      	subs	r3, #1
 8004688:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d123      	bne.n	80046d6 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004698:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800469a:	429a      	cmp	r2, r3
 800469c:	d11b      	bne.n	80046d6 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d113      	bne.n	80046d6 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b8:	085b      	lsrs	r3, r3, #1
 80046ba:	3b01      	subs	r3, #1
 80046bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046be:	429a      	cmp	r2, r3
 80046c0:	d109      	bne.n	80046d6 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046cc:	085b      	lsrs	r3, r3, #1
 80046ce:	3b01      	subs	r3, #1
 80046d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d008      	beq.n	80046e8 <HAL_RCC_OscConfig+0x818>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e007      	b.n	80046ea <HAL_RCC_OscConfig+0x81a>
 80046da:	bf00      	nop
 80046dc:	40021000 	.word	0x40021000
 80046e0:	0800d0b0 	.word	0x0800d0b0
 80046e4:	019f800c 	.word	0x019f800c
      }
    }
  }
  }

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3720      	adds	r7, #32
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop

080046f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80046fe:	2300      	movs	r3, #0
 8004700:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e1e2      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x3de>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 030f 	and.w	r3, r3, #15
 8004714:	2b00      	cmp	r3, #0
 8004716:	d005      	beq.n	8004724 <HAL_RCC_ClockConfig+0x30>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f023 030f 	bic.w	r3, r3, #15
 8004720:	2b00      	cmp	r3, #0
 8004722:	d004      	beq.n	800472e <HAL_RCC_ClockConfig+0x3a>
 8004724:	f240 3112 	movw	r1, #786	; 0x312
 8004728:	4897      	ldr	r0, [pc, #604]	; (8004988 <HAL_RCC_ClockConfig+0x294>)
 800472a:	f7fc ff0a 	bl	8001542 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d031      	beq.n	8004798 <HAL_RCC_ClockConfig+0xa4>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d02e      	beq.n	8004798 <HAL_RCC_ClockConfig+0xa4>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b02      	cmp	r3, #2
 800473e:	d02b      	beq.n	8004798 <HAL_RCC_ClockConfig+0xa4>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b03      	cmp	r3, #3
 8004744:	d028      	beq.n	8004798 <HAL_RCC_ClockConfig+0xa4>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b04      	cmp	r3, #4
 800474a:	d025      	beq.n	8004798 <HAL_RCC_ClockConfig+0xa4>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b05      	cmp	r3, #5
 8004750:	d022      	beq.n	8004798 <HAL_RCC_ClockConfig+0xa4>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b06      	cmp	r3, #6
 8004756:	d01f      	beq.n	8004798 <HAL_RCC_ClockConfig+0xa4>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2b07      	cmp	r3, #7
 800475c:	d01c      	beq.n	8004798 <HAL_RCC_ClockConfig+0xa4>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b08      	cmp	r3, #8
 8004762:	d019      	beq.n	8004798 <HAL_RCC_ClockConfig+0xa4>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b09      	cmp	r3, #9
 8004768:	d016      	beq.n	8004798 <HAL_RCC_ClockConfig+0xa4>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b0a      	cmp	r3, #10
 800476e:	d013      	beq.n	8004798 <HAL_RCC_ClockConfig+0xa4>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2b0b      	cmp	r3, #11
 8004774:	d010      	beq.n	8004798 <HAL_RCC_ClockConfig+0xa4>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b0c      	cmp	r3, #12
 800477a:	d00d      	beq.n	8004798 <HAL_RCC_ClockConfig+0xa4>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2b0d      	cmp	r3, #13
 8004780:	d00a      	beq.n	8004798 <HAL_RCC_ClockConfig+0xa4>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b0e      	cmp	r3, #14
 8004786:	d007      	beq.n	8004798 <HAL_RCC_ClockConfig+0xa4>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2b0f      	cmp	r3, #15
 800478c:	d004      	beq.n	8004798 <HAL_RCC_ClockConfig+0xa4>
 800478e:	f240 3113 	movw	r1, #787	; 0x313
 8004792:	487d      	ldr	r0, [pc, #500]	; (8004988 <HAL_RCC_ClockConfig+0x294>)
 8004794:	f7fc fed5 	bl	8001542 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004798:	4b7c      	ldr	r3, [pc, #496]	; (800498c <HAL_RCC_ClockConfig+0x298>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d910      	bls.n	80047c8 <HAL_RCC_ClockConfig+0xd4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a6:	4b79      	ldr	r3, [pc, #484]	; (800498c <HAL_RCC_ClockConfig+0x298>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f023 020f 	bic.w	r2, r3, #15
 80047ae:	4977      	ldr	r1, [pc, #476]	; (800498c <HAL_RCC_ClockConfig+0x298>)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b6:	4b75      	ldr	r3, [pc, #468]	; (800498c <HAL_RCC_ClockConfig+0x298>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d001      	beq.n	80047c8 <HAL_RCC_ClockConfig+0xd4>
    {
      return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e184      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x3de>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 8085 	beq.w	80048e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d00c      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x104>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d008      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x104>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	2b03      	cmp	r3, #3
 80047ec:	d004      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x104>
 80047ee:	f240 312a 	movw	r1, #810	; 0x32a
 80047f2:	4865      	ldr	r0, [pc, #404]	; (8004988 <HAL_RCC_ClockConfig+0x294>)
 80047f4:	f7fc fea5 	bl	8001542 <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d129      	bne.n	8004854 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004800:	4b63      	ldr	r3, [pc, #396]	; (8004990 <HAL_RCC_ClockConfig+0x29c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_RCC_ClockConfig+0x11c>
      {
        return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e160      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x3de>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004810:	f000 fa34 	bl	8004c7c <RCC_GetSysClockFreqFromPLLSource>
 8004814:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	4a5e      	ldr	r2, [pc, #376]	; (8004994 <HAL_RCC_ClockConfig+0x2a0>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d93f      	bls.n	800489e <HAL_RCC_ClockConfig+0x1aa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800481e:	4b5c      	ldr	r3, [pc, #368]	; (8004990 <HAL_RCC_ClockConfig+0x29c>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d009      	beq.n	800483e <HAL_RCC_ClockConfig+0x14a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004832:	2b00      	cmp	r3, #0
 8004834:	d033      	beq.n	800489e <HAL_RCC_ClockConfig+0x1aa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800483a:	2b00      	cmp	r3, #0
 800483c:	d12f      	bne.n	800489e <HAL_RCC_ClockConfig+0x1aa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800483e:	4b54      	ldr	r3, [pc, #336]	; (8004990 <HAL_RCC_ClockConfig+0x29c>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004846:	4a52      	ldr	r2, [pc, #328]	; (8004990 <HAL_RCC_ClockConfig+0x29c>)
 8004848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800484c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800484e:	2380      	movs	r3, #128	; 0x80
 8004850:	617b      	str	r3, [r7, #20]
 8004852:	e024      	b.n	800489e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2b02      	cmp	r3, #2
 800485a:	d107      	bne.n	800486c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800485c:	4b4c      	ldr	r3, [pc, #304]	; (8004990 <HAL_RCC_ClockConfig+0x29c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d109      	bne.n	800487c <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e132      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x3de>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800486c:	4b48      	ldr	r3, [pc, #288]	; (8004990 <HAL_RCC_ClockConfig+0x29c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e12a      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x3de>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800487c:	f000 f93a 	bl	8004af4 <HAL_RCC_GetSysClockFreq>
 8004880:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	4a43      	ldr	r2, [pc, #268]	; (8004994 <HAL_RCC_ClockConfig+0x2a0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d909      	bls.n	800489e <HAL_RCC_ClockConfig+0x1aa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800488a:	4b41      	ldr	r3, [pc, #260]	; (8004990 <HAL_RCC_ClockConfig+0x29c>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004892:	4a3f      	ldr	r2, [pc, #252]	; (8004990 <HAL_RCC_ClockConfig+0x29c>)
 8004894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004898:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800489a:	2380      	movs	r3, #128	; 0x80
 800489c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800489e:	4b3c      	ldr	r3, [pc, #240]	; (8004990 <HAL_RCC_ClockConfig+0x29c>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f023 0203 	bic.w	r2, r3, #3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	4939      	ldr	r1, [pc, #228]	; (8004990 <HAL_RCC_ClockConfig+0x29c>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b0:	f7fd fc3e 	bl	8002130 <HAL_GetTick>
 80048b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b6:	e00a      	b.n	80048ce <HAL_RCC_ClockConfig+0x1da>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b8:	f7fd fc3a 	bl	8002130 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e101      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x3de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ce:	4b30      	ldr	r3, [pc, #192]	; (8004990 <HAL_RCC_ClockConfig+0x29c>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 020c 	and.w	r2, r3, #12
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	429a      	cmp	r2, r3
 80048de:	d1eb      	bne.n	80048b8 <HAL_RCC_ClockConfig+0x1c4>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d055      	beq.n	8004998 <HAL_RCC_ClockConfig+0x2a4>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d005      	beq.n	8004904 <HAL_RCC_ClockConfig+0x210>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048f8:	4b25      	ldr	r3, [pc, #148]	; (8004990 <HAL_RCC_ClockConfig+0x29c>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	4a24      	ldr	r2, [pc, #144]	; (8004990 <HAL_RCC_ClockConfig+0x29c>)
 80048fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004902:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0308 	and.w	r3, r3, #8
 800490c:	2b00      	cmp	r3, #0
 800490e:	d007      	beq.n	8004920 <HAL_RCC_ClockConfig+0x22c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004910:	4b1f      	ldr	r3, [pc, #124]	; (8004990 <HAL_RCC_ClockConfig+0x29c>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004918:	4a1d      	ldr	r2, [pc, #116]	; (8004990 <HAL_RCC_ClockConfig+0x29c>)
 800491a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800491e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d024      	beq.n	8004972 <HAL_RCC_ClockConfig+0x27e>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	2b80      	cmp	r3, #128	; 0x80
 800492e:	d020      	beq.n	8004972 <HAL_RCC_ClockConfig+0x27e>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	2b90      	cmp	r3, #144	; 0x90
 8004936:	d01c      	beq.n	8004972 <HAL_RCC_ClockConfig+0x27e>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	2ba0      	cmp	r3, #160	; 0xa0
 800493e:	d018      	beq.n	8004972 <HAL_RCC_ClockConfig+0x27e>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2bb0      	cmp	r3, #176	; 0xb0
 8004946:	d014      	beq.n	8004972 <HAL_RCC_ClockConfig+0x27e>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	2bc0      	cmp	r3, #192	; 0xc0
 800494e:	d010      	beq.n	8004972 <HAL_RCC_ClockConfig+0x27e>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	2bd0      	cmp	r3, #208	; 0xd0
 8004956:	d00c      	beq.n	8004972 <HAL_RCC_ClockConfig+0x27e>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	2be0      	cmp	r3, #224	; 0xe0
 800495e:	d008      	beq.n	8004972 <HAL_RCC_ClockConfig+0x27e>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	2bf0      	cmp	r3, #240	; 0xf0
 8004966:	d004      	beq.n	8004972 <HAL_RCC_ClockConfig+0x27e>
 8004968:	f240 3181 	movw	r1, #897	; 0x381
 800496c:	4806      	ldr	r0, [pc, #24]	; (8004988 <HAL_RCC_ClockConfig+0x294>)
 800496e:	f7fc fde8 	bl	8001542 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004972:	4b07      	ldr	r3, [pc, #28]	; (8004990 <HAL_RCC_ClockConfig+0x29c>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	4904      	ldr	r1, [pc, #16]	; (8004990 <HAL_RCC_ClockConfig+0x29c>)
 8004980:	4313      	orrs	r3, r2
 8004982:	608b      	str	r3, [r1, #8]
 8004984:	e011      	b.n	80049aa <HAL_RCC_ClockConfig+0x2b6>
 8004986:	bf00      	nop
 8004988:	0800d0b0 	.word	0x0800d0b0
 800498c:	40022000 	.word	0x40022000
 8004990:	40021000 	.word	0x40021000
 8004994:	04c4b400 	.word	0x04c4b400
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	2b80      	cmp	r3, #128	; 0x80
 800499c:	d105      	bne.n	80049aa <HAL_RCC_ClockConfig+0x2b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800499e:	4b4f      	ldr	r3, [pc, #316]	; (8004adc <HAL_RCC_ClockConfig+0x3e8>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	4a4e      	ldr	r2, [pc, #312]	; (8004adc <HAL_RCC_ClockConfig+0x3e8>)
 80049a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049aa:	4b4d      	ldr	r3, [pc, #308]	; (8004ae0 <HAL_RCC_ClockConfig+0x3ec>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d21d      	bcs.n	80049f4 <HAL_RCC_ClockConfig+0x300>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b8:	4b49      	ldr	r3, [pc, #292]	; (8004ae0 <HAL_RCC_ClockConfig+0x3ec>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f023 020f 	bic.w	r2, r3, #15
 80049c0:	4947      	ldr	r1, [pc, #284]	; (8004ae0 <HAL_RCC_ClockConfig+0x3ec>)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049c8:	f7fd fbb2 	bl	8002130 <HAL_GetTick>
 80049cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ce:	e00a      	b.n	80049e6 <HAL_RCC_ClockConfig+0x2f2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d0:	f7fd fbae 	bl	8002130 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	f241 3288 	movw	r2, #5000	; 0x1388
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_ClockConfig+0x2f2>
      {
        return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e075      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x3de>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e6:	4b3e      	ldr	r3, [pc, #248]	; (8004ae0 <HAL_RCC_ClockConfig+0x3ec>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d1ed      	bne.n	80049d0 <HAL_RCC_ClockConfig+0x2dc>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d025      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x358>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d018      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x346>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a10:	d013      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x346>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004a1a:	d00e      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x346>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a24:	d009      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x346>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a2e:	d004      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x346>
 8004a30:	f240 31a3 	movw	r1, #931	; 0x3a3
 8004a34:	482b      	ldr	r0, [pc, #172]	; (8004ae4 <HAL_RCC_ClockConfig+0x3f0>)
 8004a36:	f7fc fd84 	bl	8001542 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a3a:	4b28      	ldr	r3, [pc, #160]	; (8004adc <HAL_RCC_ClockConfig+0x3e8>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	4925      	ldr	r1, [pc, #148]	; (8004adc <HAL_RCC_ClockConfig+0x3e8>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0308 	and.w	r3, r3, #8
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d026      	beq.n	8004aa6 <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d018      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x39e>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a68:	d013      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x39e>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004a72:	d00e      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x39e>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a7c:	d009      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x39e>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a86:	d004      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x39e>
 8004a88:	f240 31aa 	movw	r1, #938	; 0x3aa
 8004a8c:	4815      	ldr	r0, [pc, #84]	; (8004ae4 <HAL_RCC_ClockConfig+0x3f0>)
 8004a8e:	f7fc fd58 	bl	8001542 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a92:	4b12      	ldr	r3, [pc, #72]	; (8004adc <HAL_RCC_ClockConfig+0x3e8>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	490e      	ldr	r1, [pc, #56]	; (8004adc <HAL_RCC_ClockConfig+0x3e8>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004aa6:	f000 f825 	bl	8004af4 <HAL_RCC_GetSysClockFreq>
 8004aaa:	4601      	mov	r1, r0
 8004aac:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <HAL_RCC_ClockConfig+0x3e8>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	091b      	lsrs	r3, r3, #4
 8004ab2:	f003 030f 	and.w	r3, r3, #15
 8004ab6:	4a0c      	ldr	r2, [pc, #48]	; (8004ae8 <HAL_RCC_ClockConfig+0x3f4>)
 8004ab8:	5cd3      	ldrb	r3, [r2, r3]
 8004aba:	f003 031f 	and.w	r3, r3, #31
 8004abe:	fa21 f303 	lsr.w	r3, r1, r3
 8004ac2:	4a0a      	ldr	r2, [pc, #40]	; (8004aec <HAL_RCC_ClockConfig+0x3f8>)
 8004ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004ac6:	4b0a      	ldr	r3, [pc, #40]	; (8004af0 <HAL_RCC_ClockConfig+0x3fc>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fc fe1c 	bl	8001708 <HAL_InitTick>
 8004ad0:	4603      	mov	r3, r0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	40022000 	.word	0x40022000
 8004ae4:	0800d0b0 	.word	0x0800d0b0
 8004ae8:	0800d220 	.word	0x0800d220
 8004aec:	20000000 	.word	0x20000000
 8004af0:	20000004 	.word	0x20000004

08004af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004afa:	4b2c      	ldr	r3, [pc, #176]	; (8004bac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 030c 	and.w	r3, r3, #12
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d102      	bne.n	8004b0c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b06:	4b2a      	ldr	r3, [pc, #168]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b08:	613b      	str	r3, [r7, #16]
 8004b0a:	e047      	b.n	8004b9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004b0c:	4b27      	ldr	r3, [pc, #156]	; (8004bac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f003 030c 	and.w	r3, r3, #12
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d102      	bne.n	8004b1e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b18:	4b25      	ldr	r3, [pc, #148]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	e03e      	b.n	8004b9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004b1e:	4b23      	ldr	r3, [pc, #140]	; (8004bac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
 8004b26:	2b0c      	cmp	r3, #12
 8004b28:	d136      	bne.n	8004b98 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b2a:	4b20      	ldr	r3, [pc, #128]	; (8004bac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b34:	4b1d      	ldr	r3, [pc, #116]	; (8004bac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	091b      	lsrs	r3, r3, #4
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	3301      	adds	r3, #1
 8004b40:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d10c      	bne.n	8004b62 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b48:	4a19      	ldr	r2, [pc, #100]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b50:	4a16      	ldr	r2, [pc, #88]	; (8004bac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b52:	68d2      	ldr	r2, [r2, #12]
 8004b54:	0a12      	lsrs	r2, r2, #8
 8004b56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b5a:	fb02 f303 	mul.w	r3, r2, r3
 8004b5e:	617b      	str	r3, [r7, #20]
      break;
 8004b60:	e00c      	b.n	8004b7c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b62:	4a13      	ldr	r2, [pc, #76]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6a:	4a10      	ldr	r2, [pc, #64]	; (8004bac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b6c:	68d2      	ldr	r2, [r2, #12]
 8004b6e:	0a12      	lsrs	r2, r2, #8
 8004b70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b74:	fb02 f303 	mul.w	r3, r2, r3
 8004b78:	617b      	str	r3, [r7, #20]
      break;
 8004b7a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b7c:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	0e5b      	lsrs	r3, r3, #25
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	3301      	adds	r3, #1
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b94:	613b      	str	r3, [r7, #16]
 8004b96:	e001      	b.n	8004b9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b9c:	693b      	ldr	r3, [r7, #16]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	371c      	adds	r7, #28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	00f42400 	.word	0x00f42400

08004bb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bb8:	4b03      	ldr	r3, [pc, #12]	; (8004bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bba:	681b      	ldr	r3, [r3, #0]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	20000000 	.word	0x20000000

08004bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bd0:	f7ff fff0 	bl	8004bb4 <HAL_RCC_GetHCLKFreq>
 8004bd4:	4601      	mov	r1, r0
 8004bd6:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	0adb      	lsrs	r3, r3, #11
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	4a04      	ldr	r2, [pc, #16]	; (8004bf4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004be2:	5cd3      	ldrb	r3, [r2, r3]
 8004be4:	f003 031f 	and.w	r3, r3, #31
 8004be8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	0800d230 	.word	0x0800d230

08004bf8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d104      	bne.n	8004c12 <HAL_RCC_GetClockConfig+0x1a>
 8004c08:	f240 41d9 	movw	r1, #1241	; 0x4d9
 8004c0c:	4818      	ldr	r0, [pc, #96]	; (8004c70 <HAL_RCC_GetClockConfig+0x78>)
 8004c0e:	f7fc fc98 	bl	8001542 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d104      	bne.n	8004c22 <HAL_RCC_GetClockConfig+0x2a>
 8004c18:	f240 41da 	movw	r1, #1242	; 0x4da
 8004c1c:	4814      	ldr	r0, [pc, #80]	; (8004c70 <HAL_RCC_GetClockConfig+0x78>)
 8004c1e:	f7fc fc90 	bl	8001542 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	220f      	movs	r2, #15
 8004c26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004c28:	4b12      	ldr	r3, [pc, #72]	; (8004c74 <HAL_RCC_GetClockConfig+0x7c>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 0203 	and.w	r2, r3, #3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004c34:	4b0f      	ldr	r3, [pc, #60]	; (8004c74 <HAL_RCC_GetClockConfig+0x7c>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004c40:	4b0c      	ldr	r3, [pc, #48]	; (8004c74 <HAL_RCC_GetClockConfig+0x7c>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004c4c:	4b09      	ldr	r3, [pc, #36]	; (8004c74 <HAL_RCC_GetClockConfig+0x7c>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	08db      	lsrs	r3, r3, #3
 8004c52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004c5a:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <HAL_RCC_GetClockConfig+0x80>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 020f 	and.w	r2, r3, #15
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	601a      	str	r2, [r3, #0]
}
 8004c66:	bf00      	nop
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	0800d0b0 	.word	0x0800d0b0
 8004c74:	40021000 	.word	0x40021000
 8004c78:	40022000 	.word	0x40022000

08004c7c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c82:	4b1e      	ldr	r3, [pc, #120]	; (8004cfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c8c:	4b1b      	ldr	r3, [pc, #108]	; (8004cfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	091b      	lsrs	r3, r3, #4
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	3301      	adds	r3, #1
 8004c98:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d10c      	bne.n	8004cba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ca0:	4a17      	ldr	r2, [pc, #92]	; (8004d00 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca8:	4a14      	ldr	r2, [pc, #80]	; (8004cfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004caa:	68d2      	ldr	r2, [r2, #12]
 8004cac:	0a12      	lsrs	r2, r2, #8
 8004cae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004cb2:	fb02 f303 	mul.w	r3, r2, r3
 8004cb6:	617b      	str	r3, [r7, #20]
    break;
 8004cb8:	e00c      	b.n	8004cd4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cba:	4a11      	ldr	r2, [pc, #68]	; (8004d00 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc2:	4a0e      	ldr	r2, [pc, #56]	; (8004cfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cc4:	68d2      	ldr	r2, [r2, #12]
 8004cc6:	0a12      	lsrs	r2, r2, #8
 8004cc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ccc:	fb02 f303 	mul.w	r3, r2, r3
 8004cd0:	617b      	str	r3, [r7, #20]
    break;
 8004cd2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cd4:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	0e5b      	lsrs	r3, r3, #25
 8004cda:	f003 0303 	and.w	r3, r3, #3
 8004cde:	3301      	adds	r3, #1
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004cee:	687b      	ldr	r3, [r7, #4]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	371c      	adds	r7, #28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	00f42400 	.word	0x00f42400

08004d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d10:	2300      	movs	r3, #0
 8004d12:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d15d      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d157      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d151      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0308 	and.w	r3, r3, #8
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d14b      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d145      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d13f      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d139      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d133      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d12d      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d127      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d121      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d11b      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d115      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10f      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d109      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d103      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004dd4:	2185      	movs	r1, #133	; 0x85
 8004dd6:	4855      	ldr	r0, [pc, #340]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004dd8:	f7fc fbb3 	bl	8001542 <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 80b2 	beq.w	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dea:	2300      	movs	r3, #0
 8004dec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d012      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x118>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dfe:	d00d      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x118>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e08:	d008      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x118>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e12:	d003      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x118>
 8004e14:	218d      	movs	r1, #141	; 0x8d
 8004e16:	4845      	ldr	r0, [pc, #276]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004e18:	f7fc fb93 	bl	8001542 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e1c:	4b44      	ldr	r3, [pc, #272]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10d      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x140>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e28:	4b41      	ldr	r3, [pc, #260]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2c:	4a40      	ldr	r2, [pc, #256]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e32:	6593      	str	r3, [r2, #88]	; 0x58
 8004e34:	4b3e      	ldr	r3, [pc, #248]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e40:	2301      	movs	r3, #1
 8004e42:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e44:	4b3b      	ldr	r3, [pc, #236]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a3a      	ldr	r2, [pc, #232]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e50:	f7fd f96e 	bl	8002130 <HAL_GetTick>
 8004e54:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e56:	e009      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e58:	f7fd f96a 	bl	8002130 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d902      	bls.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        ret = HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	74fb      	strb	r3, [r7, #19]
        break;
 8004e6a:	e005      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x174>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e6c:	4b31      	ldr	r3, [pc, #196]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0ef      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x154>
      }
    }

    if(ret == HAL_OK)
 8004e78:	7cfb      	ldrb	r3, [r7, #19]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d15c      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x234>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e7e:	4b2c      	ldr	r3, [pc, #176]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e88:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d01e      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d019      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e9a:	4b25      	ldr	r3, [pc, #148]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ea6:	4b22      	ldr	r3, [pc, #136]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eac:	4a20      	ldr	r2, [pc, #128]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004eb6:	4b1e      	ldr	r3, [pc, #120]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ebc:	4a1c      	ldr	r2, [pc, #112]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ec6:	4a1a      	ldr	r2, [pc, #104]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d016      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x202>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed8:	f7fd f92a 	bl	8002130 <HAL_GetTick>
 8004edc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ede:	e00b      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee0:	f7fd f926 	bl	8002130 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d902      	bls.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
          {
            ret = HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	74fb      	strb	r3, [r7, #19]
            break;
 8004ef6:	e006      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x202>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ef8:	4b0d      	ldr	r3, [pc, #52]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0ec      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004f06:	7cfb      	ldrb	r3, [r7, #19]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10b      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x220>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f0c:	4b08      	ldr	r3, [pc, #32]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	4905      	ldr	r1, [pc, #20]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f22:	e00b      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x238>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f24:	7cfb      	ldrb	r3, [r7, #19]
 8004f26:	74bb      	strb	r3, [r7, #18]
 8004f28:	e008      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004f2a:	bf00      	nop
 8004f2c:	0800d0e8 	.word	0x0800d0e8
 8004f30:	40021000 	.word	0x40021000
 8004f34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f38:	7cfb      	ldrb	r3, [r7, #19]
 8004f3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f3c:	7c7b      	ldrb	r3, [r7, #17]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d105      	bne.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f42:	4ba7      	ldr	r3, [pc, #668]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f46:	4aa6      	ldr	r2, [pc, #664]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004f48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d01e      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00f      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d00b      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	d007      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d003      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004f7a:	21e2      	movs	r1, #226	; 0xe2
 8004f7c:	4899      	ldr	r0, [pc, #612]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004f7e:	f7fc fae0 	bl	8001542 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f82:	4b97      	ldr	r3, [pc, #604]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f88:	f023 0203 	bic.w	r2, r3, #3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	4993      	ldr	r1, [pc, #588]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01e      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00f      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d00b      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	2b0c      	cmp	r3, #12
 8004fba:	d007      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2b08      	cmp	r3, #8
 8004fc2:	d003      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004fc4:	21ec      	movs	r1, #236	; 0xec
 8004fc6:	4887      	ldr	r0, [pc, #540]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004fc8:	f7fc fabb 	bl	8001542 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fcc:	4b84      	ldr	r3, [pc, #528]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd2:	f023 020c 	bic.w	r2, r3, #12
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	4981      	ldr	r1, [pc, #516]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0304 	and.w	r3, r3, #4
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d01e      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00f      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	2b10      	cmp	r3, #16
 8004ffc:	d00b      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	2b30      	cmp	r3, #48	; 0x30
 8005004:	d007      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	2b20      	cmp	r3, #32
 800500c:	d003      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800500e:	21f6      	movs	r1, #246	; 0xf6
 8005010:	4874      	ldr	r0, [pc, #464]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8005012:	f7fc fa96 	bl	8001542 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005016:	4b72      	ldr	r3, [pc, #456]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8005018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	496e      	ldr	r1, [pc, #440]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01f      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d010      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	2b40      	cmp	r3, #64	; 0x40
 8005046:	d00c      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	2bc0      	cmp	r3, #192	; 0xc0
 800504e:	d008      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	2b80      	cmp	r3, #128	; 0x80
 8005056:	d004      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8005058:	f240 1101 	movw	r1, #257	; 0x101
 800505c:	4861      	ldr	r0, [pc, #388]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800505e:	f7fc fa70 	bl	8001542 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005062:	4b5f      	ldr	r3, [pc, #380]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8005064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005068:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	495b      	ldr	r1, [pc, #364]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0320 	and.w	r3, r3, #32
 8005080:	2b00      	cmp	r3, #0
 8005082:	d022      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d013      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005094:	d00e      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800509e:	d009      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050a8:	d004      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80050aa:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80050ae:	484d      	ldr	r0, [pc, #308]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80050b0:	f7fc fa47 	bl	8001542 <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050b4:	4b4a      	ldr	r3, [pc, #296]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80050b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	4947      	ldr	r1, [pc, #284]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d01d      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00e      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e6:	d009      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f0:	d004      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80050f2:	f44f 7192 	mov.w	r1, #292	; 0x124
 80050f6:	483b      	ldr	r0, [pc, #236]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80050f8:	f7fc fa23 	bl	8001542 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050fc:	4b38      	ldr	r3, [pc, #224]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80050fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005102:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	4935      	ldr	r1, [pc, #212]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800510c:	4313      	orrs	r3, r2
 800510e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511a:	2b00      	cmp	r3, #0
 800511c:	d01d      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00e      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800512e:	d009      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005138:	d004      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800513a:	f44f 7197 	mov.w	r1, #302	; 0x12e
 800513e:	4829      	ldr	r0, [pc, #164]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8005140:	f7fc f9ff 	bl	8001542 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005144:	4b26      	ldr	r3, [pc, #152]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8005146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	4923      	ldr	r1, [pc, #140]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8005154:	4313      	orrs	r3, r2
 8005156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005162:	2b00      	cmp	r3, #0
 8005164:	d01d      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x49e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00e      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x488>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005176:	d009      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005180:	d004      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005182:	f44f 719c 	mov.w	r1, #312	; 0x138
 8005186:	4817      	ldr	r0, [pc, #92]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8005188:	f7fc f9db 	bl	8001542 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800518c:	4b14      	ldr	r3, [pc, #80]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800518e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005192:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	4911      	ldr	r1, [pc, #68]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800519c:	4313      	orrs	r3, r2
 800519e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d027      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x4fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d018      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051be:	d013      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051c8:	d00e      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80051d2:	d009      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80051d4:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80051d8:	4802      	ldr	r0, [pc, #8]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80051da:	f7fc f9b2 	bl	8001542 <assert_failed>
 80051de:	e003      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80051e0:	40021000 	.word	0x40021000
 80051e4:	0800d0e8 	.word	0x0800d0e8

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051e8:	4b94      	ldr	r3, [pc, #592]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ee:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	4991      	ldr	r1, [pc, #580]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005206:	2b00      	cmp	r3, #0
 8005208:	d02d      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520e:	2b00      	cmp	r3, #0
 8005210:	d013      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x536>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800521a:	d00e      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x536>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005220:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005224:	d009      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x536>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800522e:	d004      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x536>
 8005230:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8005234:	4882      	ldr	r0, [pc, #520]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8005236:	f7fc f984 	bl	8001542 <assert_failed>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800523a:	4b80      	ldr	r3, [pc, #512]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800523c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005240:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005248:	497c      	ldr	r1, [pc, #496]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005254:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005258:	d105      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800525a:	4b78      	ldr	r3, [pc, #480]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	4a77      	ldr	r2, [pc, #476]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8005260:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005264:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800526e:	2b00      	cmp	r3, #0
 8005270:	d02d      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x5ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005276:	2b00      	cmp	r3, #0
 8005278:	d013      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005282:	d00e      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005288:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800528c:	d009      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005292:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005296:	d004      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005298:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 800529c:	4868      	ldr	r0, [pc, #416]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800529e:	f7fc f950 	bl	8001542 <assert_failed>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052a2:	4b66      	ldr	r3, [pc, #408]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80052a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b0:	4962      	ldr	r1, [pc, #392]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052c0:	d105      	bne.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052c2:	4b5e      	ldr	r3, [pc, #376]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	4a5d      	ldr	r2, [pc, #372]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80052c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052cc:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d028      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00e      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052ea:	d009      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052f4:	d004      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 80052f6:	f240 117b 	movw	r1, #379	; 0x17b
 80052fa:	4851      	ldr	r0, [pc, #324]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80052fc:	f7fc f921 	bl	8001542 <assert_failed>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005300:	4b4e      	ldr	r3, [pc, #312]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8005302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005306:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530e:	494b      	ldr	r1, [pc, #300]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8005310:	4313      	orrs	r3, r2
 8005312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800531e:	d105      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005320:	4b46      	ldr	r3, [pc, #280]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	4a45      	ldr	r2, [pc, #276]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8005326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800532a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d023      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533c:	2b00      	cmp	r3, #0
 800533e:	d009      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005344:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005348:	d004      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800534a:	f240 118d 	movw	r1, #397	; 0x18d
 800534e:	483c      	ldr	r0, [pc, #240]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8005350:	f7fc f8f7 	bl	8001542 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005354:	4b39      	ldr	r3, [pc, #228]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8005356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005362:	4936      	ldr	r1, [pc, #216]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8005364:	4313      	orrs	r3, r2
 8005366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800536e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005372:	d105      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005374:	4b31      	ldr	r3, [pc, #196]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	4a30      	ldr	r2, [pc, #192]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800537a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800537e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d023      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005390:	2b00      	cmp	r3, #0
 8005392:	d009      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005398:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800539c:	d004      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 800539e:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80053a2:	4827      	ldr	r0, [pc, #156]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80053a4:	f7fc f8cd 	bl	8001542 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053a8:	4b24      	ldr	r3, [pc, #144]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80053aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b6:	4921      	ldr	r1, [pc, #132]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053c6:	d105      	bne.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053c8:	4b1c      	ldr	r3, [pc, #112]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	4a1b      	ldr	r2, [pc, #108]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80053ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d028      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x72e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00e      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x702>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053f0:	d009      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x702>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053fa:	d004      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x702>
 80053fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005400:	480f      	ldr	r0, [pc, #60]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8005402:	f7fc f89e 	bl	8001542 <assert_failed>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005406:	4b0d      	ldr	r3, [pc, #52]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8005408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005414:	4909      	ldr	r1, [pc, #36]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8005416:	4313      	orrs	r3, r2
 8005418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005420:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005424:	d105      	bne.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x72e>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005426:	4b05      	ldr	r3, [pc, #20]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	4a04      	ldr	r2, [pc, #16]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800542c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005430:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005432:	7cbb      	ldrb	r3, [r7, #18]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3718      	adds	r7, #24
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	40021000 	.word	0x40021000
 8005440:	0800d0e8 	.word	0x0800d0e8

08005444 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e184      	b.n	8005760 <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a9b      	ldr	r2, [pc, #620]	; (80056c8 <HAL_SPI_Init+0x284>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d00e      	beq.n	800547e <HAL_SPI_Init+0x3a>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a99      	ldr	r2, [pc, #612]	; (80056cc <HAL_SPI_Init+0x288>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d009      	beq.n	800547e <HAL_SPI_Init+0x3a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a98      	ldr	r2, [pc, #608]	; (80056d0 <HAL_SPI_Init+0x28c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d004      	beq.n	800547e <HAL_SPI_Init+0x3a>
 8005474:	f240 1147 	movw	r1, #327	; 0x147
 8005478:	4896      	ldr	r0, [pc, #600]	; (80056d4 <HAL_SPI_Init+0x290>)
 800547a:	f7fc f862 	bl	8001542 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d009      	beq.n	800549a <HAL_SPI_Init+0x56>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800548e:	d004      	beq.n	800549a <HAL_SPI_Init+0x56>
 8005490:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005494:	488f      	ldr	r0, [pc, #572]	; (80056d4 <HAL_SPI_Init+0x290>)
 8005496:	f7fc f854 	bl	8001542 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00e      	beq.n	80054c0 <HAL_SPI_Init+0x7c>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054aa:	d009      	beq.n	80054c0 <HAL_SPI_Init+0x7c>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b4:	d004      	beq.n	80054c0 <HAL_SPI_Init+0x7c>
 80054b6:	f240 1149 	movw	r1, #329	; 0x149
 80054ba:	4886      	ldr	r0, [pc, #536]	; (80056d4 <HAL_SPI_Init+0x290>)
 80054bc:	f7fc f841 	bl	8001542 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80054c8:	d040      	beq.n	800554c <HAL_SPI_Init+0x108>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80054d2:	d03b      	beq.n	800554c <HAL_SPI_Init+0x108>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 80054dc:	d036      	beq.n	800554c <HAL_SPI_Init+0x108>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054e6:	d031      	beq.n	800554c <HAL_SPI_Init+0x108>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 80054f0:	d02c      	beq.n	800554c <HAL_SPI_Init+0x108>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80054fa:	d027      	beq.n	800554c <HAL_SPI_Init+0x108>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8005504:	d022      	beq.n	800554c <HAL_SPI_Init+0x108>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800550e:	d01d      	beq.n	800554c <HAL_SPI_Init+0x108>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005518:	d018      	beq.n	800554c <HAL_SPI_Init+0x108>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005522:	d013      	beq.n	800554c <HAL_SPI_Init+0x108>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800552c:	d00e      	beq.n	800554c <HAL_SPI_Init+0x108>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005536:	d009      	beq.n	800554c <HAL_SPI_Init+0x108>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005540:	d004      	beq.n	800554c <HAL_SPI_Init+0x108>
 8005542:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8005546:	4863      	ldr	r0, [pc, #396]	; (80056d4 <HAL_SPI_Init+0x290>)
 8005548:	f7fb fffb 	bl	8001542 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005554:	d00d      	beq.n	8005572 <HAL_SPI_Init+0x12e>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d009      	beq.n	8005572 <HAL_SPI_Init+0x12e>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005566:	d004      	beq.n	8005572 <HAL_SPI_Init+0x12e>
 8005568:	f240 114b 	movw	r1, #331	; 0x14b
 800556c:	4859      	ldr	r0, [pc, #356]	; (80056d4 <HAL_SPI_Init+0x290>)
 800556e:	f7fb ffe8 	bl	8001542 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005576:	2b08      	cmp	r3, #8
 8005578:	d008      	beq.n	800558c <HAL_SPI_Init+0x148>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557e:	2b00      	cmp	r3, #0
 8005580:	d004      	beq.n	800558c <HAL_SPI_Init+0x148>
 8005582:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8005586:	4853      	ldr	r0, [pc, #332]	; (80056d4 <HAL_SPI_Init+0x290>)
 8005588:	f7fb ffdb 	bl	8001542 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	69db      	ldr	r3, [r3, #28]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d020      	beq.n	80055d6 <HAL_SPI_Init+0x192>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	2b08      	cmp	r3, #8
 800559a:	d01c      	beq.n	80055d6 <HAL_SPI_Init+0x192>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	2b10      	cmp	r3, #16
 80055a2:	d018      	beq.n	80055d6 <HAL_SPI_Init+0x192>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	2b18      	cmp	r3, #24
 80055aa:	d014      	beq.n	80055d6 <HAL_SPI_Init+0x192>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	2b20      	cmp	r3, #32
 80055b2:	d010      	beq.n	80055d6 <HAL_SPI_Init+0x192>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	2b28      	cmp	r3, #40	; 0x28
 80055ba:	d00c      	beq.n	80055d6 <HAL_SPI_Init+0x192>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	2b30      	cmp	r3, #48	; 0x30
 80055c2:	d008      	beq.n	80055d6 <HAL_SPI_Init+0x192>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	2b38      	cmp	r3, #56	; 0x38
 80055ca:	d004      	beq.n	80055d6 <HAL_SPI_Init+0x192>
 80055cc:	f240 114d 	movw	r1, #333	; 0x14d
 80055d0:	4840      	ldr	r0, [pc, #256]	; (80056d4 <HAL_SPI_Init+0x290>)
 80055d2:	f7fb ffb6 	bl	8001542 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d008      	beq.n	80055f0 <HAL_SPI_Init+0x1ac>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	2b80      	cmp	r3, #128	; 0x80
 80055e4:	d004      	beq.n	80055f0 <HAL_SPI_Init+0x1ac>
 80055e6:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 80055ea:	483a      	ldr	r0, [pc, #232]	; (80056d4 <HAL_SPI_Init+0x290>)
 80055ec:	f7fb ffa9 	bl	8001542 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d008      	beq.n	800560a <HAL_SPI_Init+0x1c6>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	2b10      	cmp	r3, #16
 80055fe:	d004      	beq.n	800560a <HAL_SPI_Init+0x1c6>
 8005600:	f240 114f 	movw	r1, #335	; 0x14f
 8005604:	4833      	ldr	r0, [pc, #204]	; (80056d4 <HAL_SPI_Init+0x290>)
 8005606:	f7fb ff9c 	bl	8001542 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	2b00      	cmp	r3, #0
 8005610:	d119      	bne.n	8005646 <HAL_SPI_Init+0x202>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d008      	beq.n	800562c <HAL_SPI_Init+0x1e8>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	2b02      	cmp	r3, #2
 8005620:	d004      	beq.n	800562c <HAL_SPI_Init+0x1e8>
 8005622:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8005626:	482b      	ldr	r0, [pc, #172]	; (80056d4 <HAL_SPI_Init+0x290>)
 8005628:	f7fb ff8b 	bl	8001542 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d008      	beq.n	8005646 <HAL_SPI_Init+0x202>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d004      	beq.n	8005646 <HAL_SPI_Init+0x202>
 800563c:	f240 1153 	movw	r1, #339	; 0x153
 8005640:	4824      	ldr	r0, [pc, #144]	; (80056d4 <HAL_SPI_Init+0x290>)
 8005642:	f7fb ff7e 	bl	8001542 <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	d106      	bne.n	8005666 <HAL_SPI_Init+0x222>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7fb ffb7 	bl	80015d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2202      	movs	r2, #2
 800566a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800567c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005686:	d902      	bls.n	800568e <HAL_SPI_Init+0x24a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005688:	2300      	movs	r3, #0
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	e002      	b.n	8005694 <HAL_SPI_Init+0x250>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800568e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005692:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800569c:	d007      	beq.n	80056ae <HAL_SPI_Init+0x26a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056a6:	d002      	beq.n	80056ae <HAL_SPI_Init+0x26a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d113      	bne.n	80056de <HAL_SPI_Init+0x29a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056be:	d90b      	bls.n	80056d8 <HAL_SPI_Init+0x294>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	631a      	str	r2, [r3, #48]	; 0x30
 80056c6:	e00a      	b.n	80056de <HAL_SPI_Init+0x29a>
 80056c8:	40013000 	.word	0x40013000
 80056cc:	40003800 	.word	0x40003800
 80056d0:	40003c00 	.word	0x40003c00
 80056d4:	0800d124 	.word	0x0800d124
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	431a      	orrs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	431a      	orrs	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	ea42 0103 	orr.w	r1, r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	0c1b      	lsrs	r3, r3, #16
 800571e:	f003 0204 	and.w	r2, r3, #4
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	431a      	orrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	ea42 0103 	orr.w	r1, r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	430a      	orrs	r2, r1
 800573e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	69da      	ldr	r2, [r3, #28]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800574e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	603b      	str	r3, [r7, #0]
 8005774:	4613      	mov	r3, r2
 8005776:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005778:	2300      	movs	r3, #0
 800577a:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d009      	beq.n	8005798 <HAL_SPI_Transmit+0x30>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800578c:	d004      	beq.n	8005798 <HAL_SPI_Transmit+0x30>
 800578e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005792:	4895      	ldr	r0, [pc, #596]	; (80059e8 <HAL_SPI_Transmit+0x280>)
 8005794:	f7fb fed5 	bl	8001542 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d101      	bne.n	80057a6 <HAL_SPI_Transmit+0x3e>
 80057a2:	2302      	movs	r3, #2
 80057a4:	e152      	b.n	8005a4c <HAL_SPI_Transmit+0x2e4>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057ae:	f7fc fcbf 	bl	8002130 <HAL_GetTick>
 80057b2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80057b4:	88fb      	ldrh	r3, [r7, #6]
 80057b6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d002      	beq.n	80057ca <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 80057c4:	2302      	movs	r3, #2
 80057c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057c8:	e137      	b.n	8005a3a <HAL_SPI_Transmit+0x2d2>
  }

  if ((pData == NULL) || (Size == 0U))
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <HAL_SPI_Transmit+0x6e>
 80057d0:	88fb      	ldrh	r3, [r7, #6]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d102      	bne.n	80057dc <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057da:	e12e      	b.n	8005a3a <HAL_SPI_Transmit+0x2d2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2203      	movs	r2, #3
 80057e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	88fa      	ldrh	r2, [r7, #6]
 80057f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	88fa      	ldrh	r2, [r7, #6]
 80057fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005826:	d107      	bne.n	8005838 <HAL_SPI_Transmit+0xd0>
  {
    SPI_1LINE_TX(hspi);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005836:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005842:	2b40      	cmp	r3, #64	; 0x40
 8005844:	d007      	beq.n	8005856 <HAL_SPI_Transmit+0xee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005854:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800585e:	d94b      	bls.n	80058f8 <HAL_SPI_Transmit+0x190>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <HAL_SPI_Transmit+0x106>
 8005868:	8afb      	ldrh	r3, [r7, #22]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d13e      	bne.n	80058ec <HAL_SPI_Transmit+0x184>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005872:	881a      	ldrh	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587e:	1c9a      	adds	r2, r3, #2
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005888:	b29b      	uxth	r3, r3
 800588a:	3b01      	subs	r3, #1
 800588c:	b29a      	uxth	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005892:	e02b      	b.n	80058ec <HAL_SPI_Transmit+0x184>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d112      	bne.n	80058c8 <HAL_SPI_Transmit+0x160>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a6:	881a      	ldrh	r2, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b2:	1c9a      	adds	r2, r3, #2
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058bc:	b29b      	uxth	r3, r3
 80058be:	3b01      	subs	r3, #1
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058c6:	e011      	b.n	80058ec <HAL_SPI_Transmit+0x184>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058c8:	f7fc fc32 	bl	8002130 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d803      	bhi.n	80058e0 <HAL_SPI_Transmit+0x178>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058de:	d102      	bne.n	80058e6 <HAL_SPI_Transmit+0x17e>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d102      	bne.n	80058ec <HAL_SPI_Transmit+0x184>
        {
          errorcode = HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80058ea:	e0a6      	b.n	8005a3a <HAL_SPI_Transmit+0x2d2>
    while (hspi->TxXferCount > 0U)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1ce      	bne.n	8005894 <HAL_SPI_Transmit+0x12c>
 80058f6:	e07e      	b.n	80059f6 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d002      	beq.n	8005906 <HAL_SPI_Transmit+0x19e>
 8005900:	8afb      	ldrh	r3, [r7, #22]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d172      	bne.n	80059ec <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800590a:	b29b      	uxth	r3, r3
 800590c:	2b01      	cmp	r3, #1
 800590e:	d912      	bls.n	8005936 <HAL_SPI_Transmit+0x1ce>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005914:	881a      	ldrh	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005920:	1c9a      	adds	r2, r3, #2
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b02      	subs	r3, #2
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005934:	e05a      	b.n	80059ec <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	330c      	adds	r3, #12
 8005940:	7812      	ldrb	r2, [r2, #0]
 8005942:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	1c5a      	adds	r2, r3, #1
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005952:	b29b      	uxth	r3, r3
 8005954:	3b01      	subs	r3, #1
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800595c:	e046      	b.n	80059ec <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b02      	cmp	r3, #2
 800596a:	d12b      	bne.n	80059c4 <HAL_SPI_Transmit+0x25c>
      {
        if (hspi->TxXferCount > 1U)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b01      	cmp	r3, #1
 8005974:	d912      	bls.n	800599c <HAL_SPI_Transmit+0x234>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597a:	881a      	ldrh	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005986:	1c9a      	adds	r2, r3, #2
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005990:	b29b      	uxth	r3, r3
 8005992:	3b02      	subs	r3, #2
 8005994:	b29a      	uxth	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	87da      	strh	r2, [r3, #62]	; 0x3e
 800599a:	e027      	b.n	80059ec <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	330c      	adds	r3, #12
 80059a6:	7812      	ldrb	r2, [r2, #0]
 80059a8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29a      	uxth	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059c2:	e013      	b.n	80059ec <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059c4:	f7fc fbb4 	bl	8002130 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d803      	bhi.n	80059dc <HAL_SPI_Transmit+0x274>
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059da:	d102      	bne.n	80059e2 <HAL_SPI_Transmit+0x27a>
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d104      	bne.n	80059ec <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059e6:	e028      	b.n	8005a3a <HAL_SPI_Transmit+0x2d2>
 80059e8:	0800d124 	.word	0x0800d124
    while (hspi->TxXferCount > 0U)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1b3      	bne.n	800595e <HAL_SPI_Transmit+0x1f6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	6839      	ldr	r1, [r7, #0]
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 fcad 	bl	800635a <SPI_EndRxTxTransaction>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10a      	bne.n	8005a2a <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a14:	2300      	movs	r3, #0
 8005a16:	613b      	str	r3, [r7, #16]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	613b      	str	r3, [r7, #16]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	613b      	str	r3, [r7, #16]
 8005a28:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	77fb      	strb	r3, [r7, #31]
 8005a36:	e000      	b.n	8005a3a <HAL_SPI_Transmit+0x2d2>
  }

error:
 8005a38:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3720      	adds	r7, #32
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b088      	sub	sp, #32
 8005a58:	af02      	add	r7, sp, #8
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	603b      	str	r3, [r7, #0]
 8005a60:	4613      	mov	r3, r2
 8005a62:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a64:	2300      	movs	r3, #0
 8005a66:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a70:	d112      	bne.n	8005a98 <HAL_SPI_Receive+0x44>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10e      	bne.n	8005a98 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2204      	movs	r2, #4
 8005a7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005a82:	88fa      	ldrh	r2, [r7, #6]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 f908 	bl	8005ca4 <HAL_SPI_TransmitReceive>
 8005a94:	4603      	mov	r3, r0
 8005a96:	e101      	b.n	8005c9c <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d101      	bne.n	8005aa6 <HAL_SPI_Receive+0x52>
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	e0fa      	b.n	8005c9c <HAL_SPI_Receive+0x248>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005aae:	f7fc fb3f 	bl	8002130 <HAL_GetTick>
 8005ab2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d002      	beq.n	8005ac6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ac4:	e0e1      	b.n	8005c8a <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <HAL_SPI_Receive+0x7e>
 8005acc:	88fb      	ldrh	r3, [r7, #6]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d102      	bne.n	8005ad8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ad6:	e0d8      	b.n	8005c8a <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2204      	movs	r2, #4
 8005adc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	88fa      	ldrh	r2, [r7, #6]
 8005af0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	88fa      	ldrh	r2, [r7, #6]
 8005af8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b22:	d908      	bls.n	8005b36 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b32:	605a      	str	r2, [r3, #4]
 8005b34:	e007      	b.n	8005b46 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b44:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b4e:	d107      	bne.n	8005b60 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b5e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6a:	2b40      	cmp	r3, #64	; 0x40
 8005b6c:	d007      	beq.n	8005b7e <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b7c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b86:	d867      	bhi.n	8005c58 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005b88:	e030      	b.n	8005bec <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d117      	bne.n	8005bc8 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f103 020c 	add.w	r2, r3, #12
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba4:	7812      	ldrb	r2, [r2, #0]
 8005ba6:	b2d2      	uxtb	r2, r2
 8005ba8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	1c5a      	adds	r2, r3, #1
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005bc6:	e011      	b.n	8005bec <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bc8:	f7fc fab2 	bl	8002130 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d803      	bhi.n	8005be0 <HAL_SPI_Receive+0x18c>
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bde:	d102      	bne.n	8005be6 <HAL_SPI_Receive+0x192>
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d102      	bne.n	8005bec <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005bea:	e04e      	b.n	8005c8a <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1c8      	bne.n	8005b8a <HAL_SPI_Receive+0x136>
 8005bf8:	e034      	b.n	8005c64 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d115      	bne.n	8005c34 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	b292      	uxth	r2, r2
 8005c14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	1c9a      	adds	r2, r3, #2
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005c32:	e011      	b.n	8005c58 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c34:	f7fc fa7c 	bl	8002130 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d803      	bhi.n	8005c4c <HAL_SPI_Receive+0x1f8>
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4a:	d102      	bne.n	8005c52 <HAL_SPI_Receive+0x1fe>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d102      	bne.n	8005c58 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005c56:	e018      	b.n	8005c8a <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1ca      	bne.n	8005bfa <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	6839      	ldr	r1, [r7, #0]
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 fb1e 	bl	80062aa <SPI_EndRxTransaction>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2220      	movs	r2, #32
 8005c78:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	75fb      	strb	r3, [r7, #23]
 8005c86:	e000      	b.n	8005c8a <HAL_SPI_Receive+0x236>
  }

error :
 8005c88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b08a      	sub	sp, #40	; 0x28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d004      	beq.n	8005cce <HAL_SPI_TransmitReceive+0x2a>
 8005cc4:	f240 41c3 	movw	r1, #1219	; 0x4c3
 8005cc8:	4895      	ldr	r0, [pc, #596]	; (8005f20 <HAL_SPI_TransmitReceive+0x27c>)
 8005cca:	f7fb fc3a 	bl	8001542 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d101      	bne.n	8005cdc <HAL_SPI_TransmitReceive+0x38>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e1fd      	b.n	80060d8 <HAL_SPI_TransmitReceive+0x434>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ce4:	f7fc fa24 	bl	8002130 <HAL_GetTick>
 8005ce8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cf0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005cf8:	887b      	ldrh	r3, [r7, #2]
 8005cfa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005cfc:	887b      	ldrh	r3, [r7, #2]
 8005cfe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d00:	7efb      	ldrb	r3, [r7, #27]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d00e      	beq.n	8005d24 <HAL_SPI_TransmitReceive+0x80>
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d0c:	d106      	bne.n	8005d1c <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d102      	bne.n	8005d1c <HAL_SPI_TransmitReceive+0x78>
 8005d16:	7efb      	ldrb	r3, [r7, #27]
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	d003      	beq.n	8005d24 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005d22:	e1cf      	b.n	80060c4 <HAL_SPI_TransmitReceive+0x420>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d005      	beq.n	8005d36 <HAL_SPI_TransmitReceive+0x92>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <HAL_SPI_TransmitReceive+0x92>
 8005d30:	887b      	ldrh	r3, [r7, #2]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d103      	bne.n	8005d3e <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005d3c:	e1c2      	b.n	80060c4 <HAL_SPI_TransmitReceive+0x420>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b04      	cmp	r3, #4
 8005d48:	d003      	beq.n	8005d52 <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2205      	movs	r2, #5
 8005d4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	887a      	ldrh	r2, [r7, #2]
 8005d62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	887a      	ldrh	r2, [r7, #2]
 8005d6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	887a      	ldrh	r2, [r7, #2]
 8005d78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	887a      	ldrh	r2, [r7, #2]
 8005d7e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d94:	d802      	bhi.n	8005d9c <HAL_SPI_TransmitReceive+0xf8>
 8005d96:	8a3b      	ldrh	r3, [r7, #16]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d908      	bls.n	8005dae <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005daa:	605a      	str	r2, [r3, #4]
 8005dac:	e007      	b.n	8005dbe <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005dbc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc8:	2b40      	cmp	r3, #64	; 0x40
 8005dca:	d007      	beq.n	8005ddc <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005de4:	d97c      	bls.n	8005ee0 <HAL_SPI_TransmitReceive+0x23c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d002      	beq.n	8005df4 <HAL_SPI_TransmitReceive+0x150>
 8005dee:	8a7b      	ldrh	r3, [r7, #18]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d169      	bne.n	8005ec8 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df8:	881a      	ldrh	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e04:	1c9a      	adds	r2, r3, #2
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e18:	e056      	b.n	8005ec8 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d11b      	bne.n	8005e60 <HAL_SPI_TransmitReceive+0x1bc>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d016      	beq.n	8005e60 <HAL_SPI_TransmitReceive+0x1bc>
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d113      	bne.n	8005e60 <HAL_SPI_TransmitReceive+0x1bc>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3c:	881a      	ldrh	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e48:	1c9a      	adds	r2, r3, #2
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	3b01      	subs	r3, #1
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d11c      	bne.n	8005ea8 <HAL_SPI_TransmitReceive+0x204>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d016      	beq.n	8005ea8 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68da      	ldr	r2, [r3, #12]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e84:	b292      	uxth	r2, r2
 8005e86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8c:	1c9a      	adds	r2, r3, #2
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ea8:	f7fc f942 	bl	8002130 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d807      	bhi.n	8005ec8 <HAL_SPI_TransmitReceive+0x224>
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebe:	d003      	beq.n	8005ec8 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005ec6:	e0fd      	b.n	80060c4 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1a3      	bne.n	8005e1a <HAL_SPI_TransmitReceive+0x176>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d19d      	bne.n	8005e1a <HAL_SPI_TransmitReceive+0x176>
 8005ede:	e0e1      	b.n	80060a4 <HAL_SPI_TransmitReceive+0x400>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <HAL_SPI_TransmitReceive+0x24c>
 8005ee8:	8a7b      	ldrh	r3, [r7, #18]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	f040 80cd 	bne.w	800608a <HAL_SPI_TransmitReceive+0x3e6>
    {
      if (hspi->TxXferCount > 1U)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d914      	bls.n	8005f24 <HAL_SPI_TransmitReceive+0x280>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efe:	881a      	ldrh	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0a:	1c9a      	adds	r2, r3, #2
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	3b02      	subs	r3, #2
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f1e:	e0b4      	b.n	800608a <HAL_SPI_TransmitReceive+0x3e6>
 8005f20:	0800d124 	.word	0x0800d124
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	330c      	adds	r3, #12
 8005f2e:	7812      	ldrb	r2, [r2, #0]
 8005f30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	3b01      	subs	r3, #1
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f4a:	e09e      	b.n	800608a <HAL_SPI_TransmitReceive+0x3e6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d134      	bne.n	8005fc4 <HAL_SPI_TransmitReceive+0x320>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d02f      	beq.n	8005fc4 <HAL_SPI_TransmitReceive+0x320>
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d12c      	bne.n	8005fc4 <HAL_SPI_TransmitReceive+0x320>
      {
        if (hspi->TxXferCount > 1U)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d912      	bls.n	8005f9a <HAL_SPI_TransmitReceive+0x2f6>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f78:	881a      	ldrh	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f84:	1c9a      	adds	r2, r3, #2
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	3b02      	subs	r3, #2
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f98:	e012      	b.n	8005fc0 <HAL_SPI_TransmitReceive+0x31c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	330c      	adds	r3, #12
 8005fa4:	7812      	ldrb	r2, [r2, #0]
 8005fa6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d148      	bne.n	8006064 <HAL_SPI_TransmitReceive+0x3c0>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d042      	beq.n	8006064 <HAL_SPI_TransmitReceive+0x3c0>
      {
        if (hspi->RxXferCount > 1U)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d923      	bls.n	8006032 <HAL_SPI_TransmitReceive+0x38e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68da      	ldr	r2, [r3, #12]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff4:	b292      	uxth	r2, r2
 8005ff6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffc:	1c9a      	adds	r2, r3, #2
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006008:	b29b      	uxth	r3, r3
 800600a:	3b02      	subs	r3, #2
 800600c:	b29a      	uxth	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800601a:	b29b      	uxth	r3, r3
 800601c:	2b01      	cmp	r3, #1
 800601e:	d81f      	bhi.n	8006060 <HAL_SPI_TransmitReceive+0x3bc>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800602e:	605a      	str	r2, [r3, #4]
 8006030:	e016      	b.n	8006060 <HAL_SPI_TransmitReceive+0x3bc>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f103 020c 	add.w	r2, r3, #12
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	7812      	ldrb	r2, [r2, #0]
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006054:	b29b      	uxth	r3, r3
 8006056:	3b01      	subs	r3, #1
 8006058:	b29a      	uxth	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006060:	2301      	movs	r3, #1
 8006062:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006064:	f7fc f864 	bl	8002130 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006070:	429a      	cmp	r2, r3
 8006072:	d803      	bhi.n	800607c <HAL_SPI_TransmitReceive+0x3d8>
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607a:	d102      	bne.n	8006082 <HAL_SPI_TransmitReceive+0x3de>
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	2b00      	cmp	r3, #0
 8006080:	d103      	bne.n	800608a <HAL_SPI_TransmitReceive+0x3e6>
      {
        errorcode = HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006088:	e01c      	b.n	80060c4 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800608e:	b29b      	uxth	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	f47f af5b 	bne.w	8005f4c <HAL_SPI_TransmitReceive+0x2a8>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800609c:	b29b      	uxth	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f47f af54 	bne.w	8005f4c <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060a4:	69fa      	ldr	r2, [r7, #28]
 80060a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 f956 	bl	800635a <SPI_EndRxTxTransaction>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d006      	beq.n	80060c2 <HAL_SPI_TransmitReceive+0x41e>
  {
    errorcode = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2220      	movs	r2, #32
 80060be:	661a      	str	r2, [r3, #96]	; 0x60
 80060c0:	e000      	b.n	80060c4 <HAL_SPI_TransmitReceive+0x420>
  }

error :
 80060c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80060d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3728      	adds	r7, #40	; 0x28
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060ee:	b2db      	uxtb	r3, r3
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	603b      	str	r3, [r7, #0]
 8006108:	4613      	mov	r3, r2
 800610a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800610c:	e04c      	b.n	80061a8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006114:	d048      	beq.n	80061a8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006116:	f7fc f80b 	bl	8002130 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d902      	bls.n	800612c <SPI_WaitFlagStateUntilTimeout+0x30>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d13d      	bne.n	80061a8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800613a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006144:	d111      	bne.n	800616a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800614e:	d004      	beq.n	800615a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006158:	d107      	bne.n	800616a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006168:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006172:	d10f      	bne.n	8006194 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006192:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e00f      	b.n	80061c8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	4013      	ands	r3, r2
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	bf0c      	ite	eq
 80061b8:	2301      	moveq	r3, #1
 80061ba:	2300      	movne	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	461a      	mov	r2, r3
 80061c0:	79fb      	ldrb	r3, [r7, #7]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d1a3      	bne.n	800610e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
 80061dc:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80061de:	e057      	b.n	8006290 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80061e6:	d106      	bne.n	80061f6 <SPI_WaitFifoStateUntilTimeout+0x26>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d103      	bne.n	80061f6 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	330c      	adds	r3, #12
 80061f4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fc:	d048      	beq.n	8006290 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80061fe:	f7fb ff97 	bl	8002130 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	429a      	cmp	r2, r3
 800620c:	d902      	bls.n	8006214 <SPI_WaitFifoStateUntilTimeout+0x44>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d13d      	bne.n	8006290 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006222:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800622c:	d111      	bne.n	8006252 <SPI_WaitFifoStateUntilTimeout+0x82>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006236:	d004      	beq.n	8006242 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006240:	d107      	bne.n	8006252 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006250:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800625a:	d10f      	bne.n	800627c <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800627a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e008      	b.n	80062a2 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689a      	ldr	r2, [r3, #8]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	4013      	ands	r3, r2
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	429a      	cmp	r2, r3
 800629e:	d19f      	bne.n	80061e0 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b086      	sub	sp, #24
 80062ae:	af02      	add	r7, sp, #8
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062be:	d111      	bne.n	80062e4 <SPI_EndRxTransaction+0x3a>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062c8:	d004      	beq.n	80062d4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062d2:	d107      	bne.n	80062e4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062e2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2200      	movs	r2, #0
 80062ec:	2180      	movs	r1, #128	; 0x80
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f7ff ff04 	bl	80060fc <SPI_WaitFlagStateUntilTimeout>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d007      	beq.n	800630a <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062fe:	f043 0220 	orr.w	r2, r3, #32
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e023      	b.n	8006352 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006312:	d11d      	bne.n	8006350 <SPI_EndRxTransaction+0xa6>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800631c:	d004      	beq.n	8006328 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006326:	d113      	bne.n	8006350 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	2200      	movs	r2, #0
 8006330:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f7ff ff4b 	bl	80061d0 <SPI_WaitFifoStateUntilTimeout>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d007      	beq.n	8006350 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006344:	f043 0220 	orr.w	r2, r3, #32
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e000      	b.n	8006352 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b086      	sub	sp, #24
 800635e:	af02      	add	r7, sp, #8
 8006360:	60f8      	str	r0, [r7, #12]
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2200      	movs	r2, #0
 800636e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f7ff ff2c 	bl	80061d0 <SPI_WaitFifoStateUntilTimeout>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d007      	beq.n	800638e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006382:	f043 0220 	orr.w	r2, r3, #32
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e027      	b.n	80063de <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2200      	movs	r2, #0
 8006396:	2180      	movs	r1, #128	; 0x80
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f7ff feaf 	bl	80060fc <SPI_WaitFlagStateUntilTimeout>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d007      	beq.n	80063b4 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063a8:	f043 0220 	orr.w	r2, r3, #32
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e014      	b.n	80063de <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f7ff ff05 	bl	80061d0 <SPI_WaitFifoStateUntilTimeout>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d007      	beq.n	80063dc <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063d0:	f043 0220 	orr.w	r2, r3, #32
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e000      	b.n	80063de <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
	...

080063e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e0b9      	b.n	800656e <HAL_TIM_Base_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a5e      	ldr	r2, [pc, #376]	; (8006578 <HAL_TIM_Base_Init+0x190>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d031      	beq.n	8006468 <HAL_TIM_Base_Init+0x80>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640c:	d02c      	beq.n	8006468 <HAL_TIM_Base_Init+0x80>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a5a      	ldr	r2, [pc, #360]	; (800657c <HAL_TIM_Base_Init+0x194>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d027      	beq.n	8006468 <HAL_TIM_Base_Init+0x80>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a58      	ldr	r2, [pc, #352]	; (8006580 <HAL_TIM_Base_Init+0x198>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d022      	beq.n	8006468 <HAL_TIM_Base_Init+0x80>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a57      	ldr	r2, [pc, #348]	; (8006584 <HAL_TIM_Base_Init+0x19c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d01d      	beq.n	8006468 <HAL_TIM_Base_Init+0x80>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a55      	ldr	r2, [pc, #340]	; (8006588 <HAL_TIM_Base_Init+0x1a0>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d018      	beq.n	8006468 <HAL_TIM_Base_Init+0x80>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a54      	ldr	r2, [pc, #336]	; (800658c <HAL_TIM_Base_Init+0x1a4>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d013      	beq.n	8006468 <HAL_TIM_Base_Init+0x80>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a52      	ldr	r2, [pc, #328]	; (8006590 <HAL_TIM_Base_Init+0x1a8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d00e      	beq.n	8006468 <HAL_TIM_Base_Init+0x80>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a51      	ldr	r2, [pc, #324]	; (8006594 <HAL_TIM_Base_Init+0x1ac>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d009      	beq.n	8006468 <HAL_TIM_Base_Init+0x80>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a4f      	ldr	r2, [pc, #316]	; (8006598 <HAL_TIM_Base_Init+0x1b0>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d004      	beq.n	8006468 <HAL_TIM_Base_Init+0x80>
 800645e:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8006462:	484e      	ldr	r0, [pc, #312]	; (800659c <HAL_TIM_Base_Init+0x1b4>)
 8006464:	f7fb f86d 	bl	8001542 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d014      	beq.n	800649a <HAL_TIM_Base_Init+0xb2>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	2b10      	cmp	r3, #16
 8006476:	d010      	beq.n	800649a <HAL_TIM_Base_Init+0xb2>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	2b20      	cmp	r3, #32
 800647e:	d00c      	beq.n	800649a <HAL_TIM_Base_Init+0xb2>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	2b40      	cmp	r3, #64	; 0x40
 8006486:	d008      	beq.n	800649a <HAL_TIM_Base_Init+0xb2>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	2b60      	cmp	r3, #96	; 0x60
 800648e:	d004      	beq.n	800649a <HAL_TIM_Base_Init+0xb2>
 8006490:	f240 111d 	movw	r1, #285	; 0x11d
 8006494:	4841      	ldr	r0, [pc, #260]	; (800659c <HAL_TIM_Base_Init+0x1b4>)
 8006496:	f7fb f854 	bl	8001542 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00e      	beq.n	80064c0 <HAL_TIM_Base_Init+0xd8>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064aa:	d009      	beq.n	80064c0 <HAL_TIM_Base_Init+0xd8>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064b4:	d004      	beq.n	80064c0 <HAL_TIM_Base_Init+0xd8>
 80064b6:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80064ba:	4838      	ldr	r0, [pc, #224]	; (800659c <HAL_TIM_Base_Init+0x1b4>)
 80064bc:	f7fb f841 	bl	8001542 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d008      	beq.n	80064da <HAL_TIM_Base_Init+0xf2>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	2b80      	cmp	r3, #128	; 0x80
 80064ce:	d004      	beq.n	80064da <HAL_TIM_Base_Init+0xf2>
 80064d0:	f240 111f 	movw	r1, #287	; 0x11f
 80064d4:	4831      	ldr	r0, [pc, #196]	; (800659c <HAL_TIM_Base_Init+0x1b4>)
 80064d6:	f7fb f834 	bl	8001542 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d106      	bne.n	80064f4 <HAL_TIM_Base_Init+0x10c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7fb fad2 	bl	8001a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2202      	movs	r2, #2
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3304      	adds	r3, #4
 8006504:	4619      	mov	r1, r3
 8006506:	4610      	mov	r0, r2
 8006508:	f001 f8da 	bl	80076c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	40012c00 	.word	0x40012c00
 800657c:	40000400 	.word	0x40000400
 8006580:	40000800 	.word	0x40000800
 8006584:	40001000 	.word	0x40001000
 8006588:	40001400 	.word	0x40001400
 800658c:	40013400 	.word	0x40013400
 8006590:	40014000 	.word	0x40014000
 8006594:	40014400 	.word	0x40014400
 8006598:	40014800 	.word	0x40014800
 800659c:	0800d15c 	.word	0x0800d15c

080065a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a31      	ldr	r2, [pc, #196]	; (8006674 <HAL_TIM_Base_Start_IT+0xd4>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d031      	beq.n	8006616 <HAL_TIM_Base_Start_IT+0x76>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ba:	d02c      	beq.n	8006616 <HAL_TIM_Base_Start_IT+0x76>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a2d      	ldr	r2, [pc, #180]	; (8006678 <HAL_TIM_Base_Start_IT+0xd8>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d027      	beq.n	8006616 <HAL_TIM_Base_Start_IT+0x76>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a2c      	ldr	r2, [pc, #176]	; (800667c <HAL_TIM_Base_Start_IT+0xdc>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d022      	beq.n	8006616 <HAL_TIM_Base_Start_IT+0x76>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a2a      	ldr	r2, [pc, #168]	; (8006680 <HAL_TIM_Base_Start_IT+0xe0>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d01d      	beq.n	8006616 <HAL_TIM_Base_Start_IT+0x76>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a29      	ldr	r2, [pc, #164]	; (8006684 <HAL_TIM_Base_Start_IT+0xe4>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d018      	beq.n	8006616 <HAL_TIM_Base_Start_IT+0x76>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a27      	ldr	r2, [pc, #156]	; (8006688 <HAL_TIM_Base_Start_IT+0xe8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d013      	beq.n	8006616 <HAL_TIM_Base_Start_IT+0x76>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a26      	ldr	r2, [pc, #152]	; (800668c <HAL_TIM_Base_Start_IT+0xec>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d00e      	beq.n	8006616 <HAL_TIM_Base_Start_IT+0x76>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a24      	ldr	r2, [pc, #144]	; (8006690 <HAL_TIM_Base_Start_IT+0xf0>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d009      	beq.n	8006616 <HAL_TIM_Base_Start_IT+0x76>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a23      	ldr	r2, [pc, #140]	; (8006694 <HAL_TIM_Base_Start_IT+0xf4>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d004      	beq.n	8006616 <HAL_TIM_Base_Start_IT+0x76>
 800660c:	f240 11d1 	movw	r1, #465	; 0x1d1
 8006610:	4821      	ldr	r0, [pc, #132]	; (8006698 <HAL_TIM_Base_Start_IT+0xf8>)
 8006612:	f7fa ff96 	bl	8001542 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b01      	cmp	r3, #1
 8006620:	d001      	beq.n	8006626 <HAL_TIM_Base_Start_IT+0x86>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e021      	b.n	800666a <HAL_TIM_Base_Start_IT+0xca>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2202      	movs	r2, #2
 800662a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f042 0201 	orr.w	r2, r2, #1
 800663c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	4b15      	ldr	r3, [pc, #84]	; (800669c <HAL_TIM_Base_Start_IT+0xfc>)
 8006646:	4013      	ands	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2b06      	cmp	r3, #6
 800664e:	d00b      	beq.n	8006668 <HAL_TIM_Base_Start_IT+0xc8>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006656:	d007      	beq.n	8006668 <HAL_TIM_Base_Start_IT+0xc8>
  {
    __HAL_TIM_ENABLE(htim);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f042 0201 	orr.w	r2, r2, #1
 8006666:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	40012c00 	.word	0x40012c00
 8006678:	40000400 	.word	0x40000400
 800667c:	40000800 	.word	0x40000800
 8006680:	40001000 	.word	0x40001000
 8006684:	40001400 	.word	0x40001400
 8006688:	40013400 	.word	0x40013400
 800668c:	40014000 	.word	0x40014000
 8006690:	40014400 	.word	0x40014400
 8006694:	40014800 	.word	0x40014800
 8006698:	0800d15c 	.word	0x0800d15c
 800669c:	00010007 	.word	0x00010007

080066a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e0b9      	b.n	8006826 <HAL_TIM_PWM_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a5e      	ldr	r2, [pc, #376]	; (8006830 <HAL_TIM_PWM_Init+0x190>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d031      	beq.n	8006720 <HAL_TIM_PWM_Init+0x80>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c4:	d02c      	beq.n	8006720 <HAL_TIM_PWM_Init+0x80>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a5a      	ldr	r2, [pc, #360]	; (8006834 <HAL_TIM_PWM_Init+0x194>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d027      	beq.n	8006720 <HAL_TIM_PWM_Init+0x80>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a58      	ldr	r2, [pc, #352]	; (8006838 <HAL_TIM_PWM_Init+0x198>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d022      	beq.n	8006720 <HAL_TIM_PWM_Init+0x80>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a57      	ldr	r2, [pc, #348]	; (800683c <HAL_TIM_PWM_Init+0x19c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d01d      	beq.n	8006720 <HAL_TIM_PWM_Init+0x80>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a55      	ldr	r2, [pc, #340]	; (8006840 <HAL_TIM_PWM_Init+0x1a0>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d018      	beq.n	8006720 <HAL_TIM_PWM_Init+0x80>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a54      	ldr	r2, [pc, #336]	; (8006844 <HAL_TIM_PWM_Init+0x1a4>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d013      	beq.n	8006720 <HAL_TIM_PWM_Init+0x80>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a52      	ldr	r2, [pc, #328]	; (8006848 <HAL_TIM_PWM_Init+0x1a8>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d00e      	beq.n	8006720 <HAL_TIM_PWM_Init+0x80>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a51      	ldr	r2, [pc, #324]	; (800684c <HAL_TIM_PWM_Init+0x1ac>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d009      	beq.n	8006720 <HAL_TIM_PWM_Init+0x80>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a4f      	ldr	r2, [pc, #316]	; (8006850 <HAL_TIM_PWM_Init+0x1b0>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d004      	beq.n	8006720 <HAL_TIM_PWM_Init+0x80>
 8006716:	f240 41ec 	movw	r1, #1260	; 0x4ec
 800671a:	484e      	ldr	r0, [pc, #312]	; (8006854 <HAL_TIM_PWM_Init+0x1b4>)
 800671c:	f7fa ff11 	bl	8001542 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d014      	beq.n	8006752 <HAL_TIM_PWM_Init+0xb2>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	2b10      	cmp	r3, #16
 800672e:	d010      	beq.n	8006752 <HAL_TIM_PWM_Init+0xb2>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	2b20      	cmp	r3, #32
 8006736:	d00c      	beq.n	8006752 <HAL_TIM_PWM_Init+0xb2>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	2b40      	cmp	r3, #64	; 0x40
 800673e:	d008      	beq.n	8006752 <HAL_TIM_PWM_Init+0xb2>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	2b60      	cmp	r3, #96	; 0x60
 8006746:	d004      	beq.n	8006752 <HAL_TIM_PWM_Init+0xb2>
 8006748:	f240 41ed 	movw	r1, #1261	; 0x4ed
 800674c:	4841      	ldr	r0, [pc, #260]	; (8006854 <HAL_TIM_PWM_Init+0x1b4>)
 800674e:	f7fa fef8 	bl	8001542 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00e      	beq.n	8006778 <HAL_TIM_PWM_Init+0xd8>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006762:	d009      	beq.n	8006778 <HAL_TIM_PWM_Init+0xd8>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800676c:	d004      	beq.n	8006778 <HAL_TIM_PWM_Init+0xd8>
 800676e:	f240 41ee 	movw	r1, #1262	; 0x4ee
 8006772:	4838      	ldr	r0, [pc, #224]	; (8006854 <HAL_TIM_PWM_Init+0x1b4>)
 8006774:	f7fa fee5 	bl	8001542 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d008      	beq.n	8006792 <HAL_TIM_PWM_Init+0xf2>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	2b80      	cmp	r3, #128	; 0x80
 8006786:	d004      	beq.n	8006792 <HAL_TIM_PWM_Init+0xf2>
 8006788:	f240 41ef 	movw	r1, #1263	; 0x4ef
 800678c:	4831      	ldr	r0, [pc, #196]	; (8006854 <HAL_TIM_PWM_Init+0x1b4>)
 800678e:	f7fa fed8 	bl	8001542 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d106      	bne.n	80067ac <HAL_TIM_PWM_Init+0x10c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7fb f92c 	bl	8001a04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	3304      	adds	r3, #4
 80067bc:	4619      	mov	r1, r3
 80067be:	4610      	mov	r0, r2
 80067c0:	f000 ff7e 	bl	80076c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	40012c00 	.word	0x40012c00
 8006834:	40000400 	.word	0x40000400
 8006838:	40000800 	.word	0x40000800
 800683c:	40001000 	.word	0x40001000
 8006840:	40001400 	.word	0x40001400
 8006844:	40013400 	.word	0x40013400
 8006848:	40014000 	.word	0x40014000
 800684c:	40014400 	.word	0x40014400
 8006850:	40014800 	.word	0x40014800
 8006854:	0800d15c 	.word	0x0800d15c

08006858 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
 8006864:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a94      	ldr	r2, [pc, #592]	; (8006abc <HAL_TIM_PWM_Start_DMA+0x264>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d111      	bne.n	8006894 <HAL_TIM_PWM_Start_DMA+0x3c>
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d078      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	2b04      	cmp	r3, #4
 800687a:	d075      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2b08      	cmp	r3, #8
 8006880:	d072      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	2b0c      	cmp	r3, #12
 8006886:	d06f      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2b10      	cmp	r3, #16
 800688c:	d06c      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2b14      	cmp	r3, #20
 8006892:	d069      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800689c:	d10b      	bne.n	80068b6 <HAL_TIM_PWM_Start_DMA+0x5e>
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d061      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2b04      	cmp	r3, #4
 80068a8:	d05e      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2b08      	cmp	r3, #8
 80068ae:	d05b      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2b0c      	cmp	r3, #12
 80068b4:	d058      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a81      	ldr	r2, [pc, #516]	; (8006ac0 <HAL_TIM_PWM_Start_DMA+0x268>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d10b      	bne.n	80068d8 <HAL_TIM_PWM_Start_DMA+0x80>
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d050      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	2b04      	cmp	r3, #4
 80068ca:	d04d      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2b08      	cmp	r3, #8
 80068d0:	d04a      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2b0c      	cmp	r3, #12
 80068d6:	d047      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a79      	ldr	r2, [pc, #484]	; (8006ac4 <HAL_TIM_PWM_Start_DMA+0x26c>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d10b      	bne.n	80068fa <HAL_TIM_PWM_Start_DMA+0xa2>
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d03f      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	d03c      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	2b08      	cmp	r3, #8
 80068f2:	d039      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	2b0c      	cmp	r3, #12
 80068f8:	d036      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a72      	ldr	r2, [pc, #456]	; (8006ac8 <HAL_TIM_PWM_Start_DMA+0x270>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d111      	bne.n	8006928 <HAL_TIM_PWM_Start_DMA+0xd0>
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d02e      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2b04      	cmp	r3, #4
 800690e:	d02b      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2b08      	cmp	r3, #8
 8006914:	d028      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2b0c      	cmp	r3, #12
 800691a:	d025      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2b10      	cmp	r3, #16
 8006920:	d022      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b14      	cmp	r3, #20
 8006926:	d01f      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a67      	ldr	r2, [pc, #412]	; (8006acc <HAL_TIM_PWM_Start_DMA+0x274>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d105      	bne.n	800693e <HAL_TIM_PWM_Start_DMA+0xe6>
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d017      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2b04      	cmp	r3, #4
 800693c:	d014      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a63      	ldr	r2, [pc, #396]	; (8006ad0 <HAL_TIM_PWM_Start_DMA+0x278>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d102      	bne.n	800694e <HAL_TIM_PWM_Start_DMA+0xf6>
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00c      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a60      	ldr	r2, [pc, #384]	; (8006ad4 <HAL_TIM_PWM_Start_DMA+0x27c>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d102      	bne.n	800695e <HAL_TIM_PWM_Start_DMA+0x106>
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d004      	beq.n	8006968 <HAL_TIM_PWM_Start_DMA+0x110>
 800695e:	f240 615f 	movw	r1, #1631	; 0x65f
 8006962:	485d      	ldr	r0, [pc, #372]	; (8006ad8 <HAL_TIM_PWM_Start_DMA+0x280>)
 8006964:	f7fa fded 	bl	8001542 <assert_failed>

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d109      	bne.n	8006982 <HAL_TIM_PWM_Start_DMA+0x12a>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	bf0c      	ite	eq
 800697a:	2301      	moveq	r3, #1
 800697c:	2300      	movne	r3, #0
 800697e:	b2db      	uxtb	r3, r3
 8006980:	e03c      	b.n	80069fc <HAL_TIM_PWM_Start_DMA+0x1a4>
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2b04      	cmp	r3, #4
 8006986:	d109      	bne.n	800699c <HAL_TIM_PWM_Start_DMA+0x144>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b02      	cmp	r3, #2
 8006992:	bf0c      	ite	eq
 8006994:	2301      	moveq	r3, #1
 8006996:	2300      	movne	r3, #0
 8006998:	b2db      	uxtb	r3, r3
 800699a:	e02f      	b.n	80069fc <HAL_TIM_PWM_Start_DMA+0x1a4>
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2b08      	cmp	r3, #8
 80069a0:	d109      	bne.n	80069b6 <HAL_TIM_PWM_Start_DMA+0x15e>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	bf0c      	ite	eq
 80069ae:	2301      	moveq	r3, #1
 80069b0:	2300      	movne	r3, #0
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	e022      	b.n	80069fc <HAL_TIM_PWM_Start_DMA+0x1a4>
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	2b0c      	cmp	r3, #12
 80069ba:	d109      	bne.n	80069d0 <HAL_TIM_PWM_Start_DMA+0x178>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	bf0c      	ite	eq
 80069c8:	2301      	moveq	r3, #1
 80069ca:	2300      	movne	r3, #0
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	e015      	b.n	80069fc <HAL_TIM_PWM_Start_DMA+0x1a4>
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2b10      	cmp	r3, #16
 80069d4:	d109      	bne.n	80069ea <HAL_TIM_PWM_Start_DMA+0x192>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b02      	cmp	r3, #2
 80069e0:	bf0c      	ite	eq
 80069e2:	2301      	moveq	r3, #1
 80069e4:	2300      	movne	r3, #0
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	e008      	b.n	80069fc <HAL_TIM_PWM_Start_DMA+0x1a4>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	bf0c      	ite	eq
 80069f6:	2301      	moveq	r3, #1
 80069f8:	2300      	movne	r3, #0
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    return HAL_BUSY;
 8006a00:	2302      	movs	r3, #2
 8006a02:	e187      	b.n	8006d14 <HAL_TIM_PWM_Start_DMA+0x4bc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d109      	bne.n	8006a1e <HAL_TIM_PWM_Start_DMA+0x1c6>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	bf0c      	ite	eq
 8006a16:	2301      	moveq	r3, #1
 8006a18:	2300      	movne	r3, #0
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	e03c      	b.n	8006a98 <HAL_TIM_PWM_Start_DMA+0x240>
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2b04      	cmp	r3, #4
 8006a22:	d109      	bne.n	8006a38 <HAL_TIM_PWM_Start_DMA+0x1e0>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	bf0c      	ite	eq
 8006a30:	2301      	moveq	r3, #1
 8006a32:	2300      	movne	r3, #0
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	e02f      	b.n	8006a98 <HAL_TIM_PWM_Start_DMA+0x240>
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2b08      	cmp	r3, #8
 8006a3c:	d109      	bne.n	8006a52 <HAL_TIM_PWM_Start_DMA+0x1fa>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	bf0c      	ite	eq
 8006a4a:	2301      	moveq	r3, #1
 8006a4c:	2300      	movne	r3, #0
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	e022      	b.n	8006a98 <HAL_TIM_PWM_Start_DMA+0x240>
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2b0c      	cmp	r3, #12
 8006a56:	d109      	bne.n	8006a6c <HAL_TIM_PWM_Start_DMA+0x214>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	bf0c      	ite	eq
 8006a64:	2301      	moveq	r3, #1
 8006a66:	2300      	movne	r3, #0
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	e015      	b.n	8006a98 <HAL_TIM_PWM_Start_DMA+0x240>
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2b10      	cmp	r3, #16
 8006a70:	d109      	bne.n	8006a86 <HAL_TIM_PWM_Start_DMA+0x22e>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	bf0c      	ite	eq
 8006a7e:	2301      	moveq	r3, #1
 8006a80:	2300      	movne	r3, #0
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	e008      	b.n	8006a98 <HAL_TIM_PWM_Start_DMA+0x240>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	bf0c      	ite	eq
 8006a92:	2301      	moveq	r3, #1
 8006a94:	2300      	movne	r3, #0
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d044      	beq.n	8006b26 <HAL_TIM_PWM_Start_DMA+0x2ce>
  {
    if ((pData == NULL) && (Length > 0U))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d104      	bne.n	8006aac <HAL_TIM_PWM_Start_DMA+0x254>
 8006aa2:	887b      	ldrh	r3, [r7, #2]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <HAL_TIM_PWM_Start_DMA+0x254>
    {
      return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e133      	b.n	8006d14 <HAL_TIM_PWM_Start_DMA+0x4bc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d114      	bne.n	8006adc <HAL_TIM_PWM_Start_DMA+0x284>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aba:	e036      	b.n	8006b2a <HAL_TIM_PWM_Start_DMA+0x2d2>
 8006abc:	40012c00 	.word	0x40012c00
 8006ac0:	40000400 	.word	0x40000400
 8006ac4:	40000800 	.word	0x40000800
 8006ac8:	40013400 	.word	0x40013400
 8006acc:	40014000 	.word	0x40014000
 8006ad0:	40014400 	.word	0x40014400
 8006ad4:	40014800 	.word	0x40014800
 8006ad8:	0800d15c 	.word	0x0800d15c
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2b04      	cmp	r3, #4
 8006ae0:	d104      	bne.n	8006aec <HAL_TIM_PWM_Start_DMA+0x294>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2202      	movs	r2, #2
 8006ae6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006aea:	e01e      	b.n	8006b2a <HAL_TIM_PWM_Start_DMA+0x2d2>
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2b08      	cmp	r3, #8
 8006af0:	d104      	bne.n	8006afc <HAL_TIM_PWM_Start_DMA+0x2a4>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2202      	movs	r2, #2
 8006af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006afa:	e016      	b.n	8006b2a <HAL_TIM_PWM_Start_DMA+0x2d2>
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	2b0c      	cmp	r3, #12
 8006b00:	d104      	bne.n	8006b0c <HAL_TIM_PWM_Start_DMA+0x2b4>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2202      	movs	r2, #2
 8006b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b0a:	e00e      	b.n	8006b2a <HAL_TIM_PWM_Start_DMA+0x2d2>
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2b10      	cmp	r3, #16
 8006b10:	d104      	bne.n	8006b1c <HAL_TIM_PWM_Start_DMA+0x2c4>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2202      	movs	r2, #2
 8006b16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b1a:	e006      	b.n	8006b2a <HAL_TIM_PWM_Start_DMA+0x2d2>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b24:	e001      	b.n	8006b2a <HAL_TIM_PWM_Start_DMA+0x2d2>
    }
  }
  else
  {
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e0f4      	b.n	8006d14 <HAL_TIM_PWM_Start_DMA+0x4bc>
  }

  switch (Channel)
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	2b0c      	cmp	r3, #12
 8006b2e:	f200 80ad 	bhi.w	8006c8c <HAL_TIM_PWM_Start_DMA+0x434>
 8006b32:	a201      	add	r2, pc, #4	; (adr r2, 8006b38 <HAL_TIM_PWM_Start_DMA+0x2e0>)
 8006b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b38:	08006b6d 	.word	0x08006b6d
 8006b3c:	08006c8d 	.word	0x08006c8d
 8006b40:	08006c8d 	.word	0x08006c8d
 8006b44:	08006c8d 	.word	0x08006c8d
 8006b48:	08006bb5 	.word	0x08006bb5
 8006b4c:	08006c8d 	.word	0x08006c8d
 8006b50:	08006c8d 	.word	0x08006c8d
 8006b54:	08006c8d 	.word	0x08006c8d
 8006b58:	08006bfd 	.word	0x08006bfd
 8006b5c:	08006c8d 	.word	0x08006c8d
 8006b60:	08006c8d 	.word	0x08006c8d
 8006b64:	08006c8d 	.word	0x08006c8d
 8006b68:	08006c45 	.word	0x08006c45
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b70:	4a6a      	ldr	r2, [pc, #424]	; (8006d1c <HAL_TIM_PWM_Start_DMA+0x4c4>)
 8006b72:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b78:	4a69      	ldr	r2, [pc, #420]	; (8006d20 <HAL_TIM_PWM_Start_DMA+0x4c8>)
 8006b7a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b80:	4a68      	ldr	r2, [pc, #416]	; (8006d24 <HAL_TIM_PWM_Start_DMA+0x4cc>)
 8006b82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006b88:	6879      	ldr	r1, [r7, #4]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3334      	adds	r3, #52	; 0x34
 8006b90:	461a      	mov	r2, r3
 8006b92:	887b      	ldrh	r3, [r7, #2]
 8006b94:	f7fb fd62 	bl	800265c <HAL_DMA_Start_IT>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <HAL_TIM_PWM_Start_DMA+0x34a>
      {
        return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e0b8      	b.n	8006d14 <HAL_TIM_PWM_Start_DMA+0x4bc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68da      	ldr	r2, [r3, #12]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bb0:	60da      	str	r2, [r3, #12]
      break;
 8006bb2:	e06c      	b.n	8006c8e <HAL_TIM_PWM_Start_DMA+0x436>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb8:	4a58      	ldr	r2, [pc, #352]	; (8006d1c <HAL_TIM_PWM_Start_DMA+0x4c4>)
 8006bba:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc0:	4a57      	ldr	r2, [pc, #348]	; (8006d20 <HAL_TIM_PWM_Start_DMA+0x4c8>)
 8006bc2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc8:	4a56      	ldr	r2, [pc, #344]	; (8006d24 <HAL_TIM_PWM_Start_DMA+0x4cc>)
 8006bca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006bd0:	6879      	ldr	r1, [r7, #4]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3338      	adds	r3, #56	; 0x38
 8006bd8:	461a      	mov	r2, r3
 8006bda:	887b      	ldrh	r3, [r7, #2]
 8006bdc:	f7fb fd3e 	bl	800265c <HAL_DMA_Start_IT>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d001      	beq.n	8006bea <HAL_TIM_PWM_Start_DMA+0x392>
      {
        return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e094      	b.n	8006d14 <HAL_TIM_PWM_Start_DMA+0x4bc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68da      	ldr	r2, [r3, #12]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006bf8:	60da      	str	r2, [r3, #12]
      break;
 8006bfa:	e048      	b.n	8006c8e <HAL_TIM_PWM_Start_DMA+0x436>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	4a46      	ldr	r2, [pc, #280]	; (8006d1c <HAL_TIM_PWM_Start_DMA+0x4c4>)
 8006c02:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c08:	4a45      	ldr	r2, [pc, #276]	; (8006d20 <HAL_TIM_PWM_Start_DMA+0x4c8>)
 8006c0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c10:	4a44      	ldr	r2, [pc, #272]	; (8006d24 <HAL_TIM_PWM_Start_DMA+0x4cc>)
 8006c12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006c18:	6879      	ldr	r1, [r7, #4]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	333c      	adds	r3, #60	; 0x3c
 8006c20:	461a      	mov	r2, r3
 8006c22:	887b      	ldrh	r3, [r7, #2]
 8006c24:	f7fb fd1a 	bl	800265c <HAL_DMA_Start_IT>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <HAL_TIM_PWM_Start_DMA+0x3da>
      {
        return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e070      	b.n	8006d14 <HAL_TIM_PWM_Start_DMA+0x4bc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68da      	ldr	r2, [r3, #12]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c40:	60da      	str	r2, [r3, #12]
      break;
 8006c42:	e024      	b.n	8006c8e <HAL_TIM_PWM_Start_DMA+0x436>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c48:	4a34      	ldr	r2, [pc, #208]	; (8006d1c <HAL_TIM_PWM_Start_DMA+0x4c4>)
 8006c4a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c50:	4a33      	ldr	r2, [pc, #204]	; (8006d20 <HAL_TIM_PWM_Start_DMA+0x4c8>)
 8006c52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c58:	4a32      	ldr	r2, [pc, #200]	; (8006d24 <HAL_TIM_PWM_Start_DMA+0x4cc>)
 8006c5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c60:	6879      	ldr	r1, [r7, #4]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3340      	adds	r3, #64	; 0x40
 8006c68:	461a      	mov	r2, r3
 8006c6a:	887b      	ldrh	r3, [r7, #2]
 8006c6c:	f7fb fcf6 	bl	800265c <HAL_DMA_Start_IT>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <HAL_TIM_PWM_Start_DMA+0x422>
      {
        return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e04c      	b.n	8006d14 <HAL_TIM_PWM_Start_DMA+0x4bc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68da      	ldr	r2, [r3, #12]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c88:	60da      	str	r2, [r3, #12]
      break;
 8006c8a:	e000      	b.n	8006c8e <HAL_TIM_PWM_Start_DMA+0x436>
    }

    default:
      break;
 8006c8c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2201      	movs	r2, #1
 8006c94:	68b9      	ldr	r1, [r7, #8]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f001 f93c 	bl	8007f14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a21      	ldr	r2, [pc, #132]	; (8006d28 <HAL_TIM_PWM_Start_DMA+0x4d0>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d013      	beq.n	8006cce <HAL_TIM_PWM_Start_DMA+0x476>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a20      	ldr	r2, [pc, #128]	; (8006d2c <HAL_TIM_PWM_Start_DMA+0x4d4>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d00e      	beq.n	8006cce <HAL_TIM_PWM_Start_DMA+0x476>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a1e      	ldr	r2, [pc, #120]	; (8006d30 <HAL_TIM_PWM_Start_DMA+0x4d8>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d009      	beq.n	8006cce <HAL_TIM_PWM_Start_DMA+0x476>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a1d      	ldr	r2, [pc, #116]	; (8006d34 <HAL_TIM_PWM_Start_DMA+0x4dc>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d004      	beq.n	8006cce <HAL_TIM_PWM_Start_DMA+0x476>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a1b      	ldr	r2, [pc, #108]	; (8006d38 <HAL_TIM_PWM_Start_DMA+0x4e0>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d101      	bne.n	8006cd2 <HAL_TIM_PWM_Start_DMA+0x47a>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e000      	b.n	8006cd4 <HAL_TIM_PWM_Start_DMA+0x47c>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d007      	beq.n	8006ce8 <HAL_TIM_PWM_Start_DMA+0x490>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ce6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689a      	ldr	r2, [r3, #8]
 8006cee:	4b13      	ldr	r3, [pc, #76]	; (8006d3c <HAL_TIM_PWM_Start_DMA+0x4e4>)
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2b06      	cmp	r3, #6
 8006cf8:	d00b      	beq.n	8006d12 <HAL_TIM_PWM_Start_DMA+0x4ba>
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d00:	d007      	beq.n	8006d12 <HAL_TIM_PWM_Start_DMA+0x4ba>
  {
    __HAL_TIM_ENABLE(htim);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f042 0201 	orr.w	r2, r2, #1
 8006d10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	080075af 	.word	0x080075af
 8006d20:	08007657 	.word	0x08007657
 8006d24:	0800751d 	.word	0x0800751d
 8006d28:	40012c00 	.word	0x40012c00
 8006d2c:	40013400 	.word	0x40013400
 8006d30:	40014000 	.word	0x40014000
 8006d34:	40014400 	.word	0x40014400
 8006d38:	40014800 	.word	0x40014800
 8006d3c:	00010007 	.word	0x00010007

08006d40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d122      	bne.n	8006d9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	f003 0302 	and.w	r3, r3, #2
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d11b      	bne.n	8006d9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f06f 0202 	mvn.w	r2, #2
 8006d6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	f003 0303 	and.w	r3, r3, #3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d003      	beq.n	8006d8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fb98 	bl	80074b8 <HAL_TIM_IC_CaptureCallback>
 8006d88:	e005      	b.n	8006d96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fb8a 	bl	80074a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fb9b 	bl	80074cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	f003 0304 	and.w	r3, r3, #4
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	d122      	bne.n	8006df0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	f003 0304 	and.w	r3, r3, #4
 8006db4:	2b04      	cmp	r3, #4
 8006db6:	d11b      	bne.n	8006df0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f06f 0204 	mvn.w	r2, #4
 8006dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d003      	beq.n	8006dde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fb6e 	bl	80074b8 <HAL_TIM_IC_CaptureCallback>
 8006ddc:	e005      	b.n	8006dea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fb60 	bl	80074a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fb71 	bl	80074cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	f003 0308 	and.w	r3, r3, #8
 8006dfa:	2b08      	cmp	r3, #8
 8006dfc:	d122      	bne.n	8006e44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	f003 0308 	and.w	r3, r3, #8
 8006e08:	2b08      	cmp	r3, #8
 8006e0a:	d11b      	bne.n	8006e44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f06f 0208 	mvn.w	r2, #8
 8006e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2204      	movs	r2, #4
 8006e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	f003 0303 	and.w	r3, r3, #3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fb44 	bl	80074b8 <HAL_TIM_IC_CaptureCallback>
 8006e30:	e005      	b.n	8006e3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fb36 	bl	80074a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fb47 	bl	80074cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	f003 0310 	and.w	r3, r3, #16
 8006e4e:	2b10      	cmp	r3, #16
 8006e50:	d122      	bne.n	8006e98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	f003 0310 	and.w	r3, r3, #16
 8006e5c:	2b10      	cmp	r3, #16
 8006e5e:	d11b      	bne.n	8006e98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f06f 0210 	mvn.w	r2, #16
 8006e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2208      	movs	r2, #8
 8006e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fb1a 	bl	80074b8 <HAL_TIM_IC_CaptureCallback>
 8006e84:	e005      	b.n	8006e92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fb0c 	bl	80074a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fb1d 	bl	80074cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d10e      	bne.n	8006ec4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d107      	bne.n	8006ec4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f06f 0201 	mvn.w	r2, #1
 8006ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7fa fb26 	bl	8001510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ece:	2b80      	cmp	r3, #128	; 0x80
 8006ed0:	d10e      	bne.n	8006ef0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006edc:	2b80      	cmp	r3, #128	; 0x80
 8006ede:	d107      	bne.n	8006ef0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f001 fb4e 	bl	800858c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006efe:	d10e      	bne.n	8006f1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f0a:	2b80      	cmp	r3, #128	; 0x80
 8006f0c:	d107      	bne.n	8006f1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f001 fb41 	bl	80085a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f28:	2b40      	cmp	r3, #64	; 0x40
 8006f2a:	d10e      	bne.n	8006f4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f36:	2b40      	cmp	r3, #64	; 0x40
 8006f38:	d107      	bne.n	8006f4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fad5 	bl	80074f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	f003 0320 	and.w	r3, r3, #32
 8006f54:	2b20      	cmp	r3, #32
 8006f56:	d10e      	bne.n	8006f76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	f003 0320 	and.w	r3, r3, #32
 8006f62:	2b20      	cmp	r3, #32
 8006f64:	d107      	bne.n	8006f76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f06f 0220 	mvn.w	r2, #32
 8006f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f001 fb01 	bl	8008578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f84:	d10f      	bne.n	8006fa6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f94:	d107      	bne.n	8006fa6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f001 fb07 	bl	80085b4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fb4:	d10f      	bne.n	8006fd6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fc4:	d107      	bne.n	8006fd6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f001 faf9 	bl	80085c8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fe0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fe4:	d10f      	bne.n	8007006 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ff0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ff4:	d107      	bne.n	8007006 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f001 faeb 	bl	80085dc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007010:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007014:	d10f      	bne.n	8007036 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007020:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007024:	d107      	bne.n	8007036 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800702e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f001 fadd 	bl	80085f0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007036:	bf00      	nop
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
	...

08007040 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d016      	beq.n	8007080 <HAL_TIM_PWM_ConfigChannel+0x40>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2b04      	cmp	r3, #4
 8007056:	d013      	beq.n	8007080 <HAL_TIM_PWM_ConfigChannel+0x40>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b08      	cmp	r3, #8
 800705c:	d010      	beq.n	8007080 <HAL_TIM_PWM_ConfigChannel+0x40>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b0c      	cmp	r3, #12
 8007062:	d00d      	beq.n	8007080 <HAL_TIM_PWM_ConfigChannel+0x40>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b10      	cmp	r3, #16
 8007068:	d00a      	beq.n	8007080 <HAL_TIM_PWM_ConfigChannel+0x40>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b14      	cmp	r3, #20
 800706e:	d007      	beq.n	8007080 <HAL_TIM_PWM_ConfigChannel+0x40>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b3c      	cmp	r3, #60	; 0x3c
 8007074:	d004      	beq.n	8007080 <HAL_TIM_PWM_ConfigChannel+0x40>
 8007076:	f241 0118 	movw	r1, #4120	; 0x1018
 800707a:	4886      	ldr	r0, [pc, #536]	; (8007294 <HAL_TIM_PWM_ConfigChannel+0x254>)
 800707c:	f7fa fa61 	bl	8001542 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2b60      	cmp	r3, #96	; 0x60
 8007086:	d01c      	beq.n	80070c2 <HAL_TIM_PWM_ConfigChannel+0x82>
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b70      	cmp	r3, #112	; 0x70
 800708e:	d018      	beq.n	80070c2 <HAL_TIM_PWM_ConfigChannel+0x82>
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a80      	ldr	r2, [pc, #512]	; (8007298 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d013      	beq.n	80070c2 <HAL_TIM_PWM_ConfigChannel+0x82>
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a7f      	ldr	r2, [pc, #508]	; (800729c <HAL_TIM_PWM_ConfigChannel+0x25c>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d00e      	beq.n	80070c2 <HAL_TIM_PWM_ConfigChannel+0x82>
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a7d      	ldr	r2, [pc, #500]	; (80072a0 <HAL_TIM_PWM_ConfigChannel+0x260>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d009      	beq.n	80070c2 <HAL_TIM_PWM_ConfigChannel+0x82>
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a7c      	ldr	r2, [pc, #496]	; (80072a4 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d004      	beq.n	80070c2 <HAL_TIM_PWM_ConfigChannel+0x82>
 80070b8:	f241 0119 	movw	r1, #4121	; 0x1019
 80070bc:	4875      	ldr	r0, [pc, #468]	; (8007294 <HAL_TIM_PWM_ConfigChannel+0x254>)
 80070be:	f7fa fa40 	bl	8001542 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d008      	beq.n	80070dc <HAL_TIM_PWM_ConfigChannel+0x9c>
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d004      	beq.n	80070dc <HAL_TIM_PWM_ConfigChannel+0x9c>
 80070d2:	f241 011a 	movw	r1, #4122	; 0x101a
 80070d6:	486f      	ldr	r0, [pc, #444]	; (8007294 <HAL_TIM_PWM_ConfigChannel+0x254>)
 80070d8:	f7fa fa33 	bl	8001542 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d008      	beq.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0xb6>
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	2b04      	cmp	r3, #4
 80070ea:	d004      	beq.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0xb6>
 80070ec:	f241 011b 	movw	r1, #4123	; 0x101b
 80070f0:	4868      	ldr	r0, [pc, #416]	; (8007294 <HAL_TIM_PWM_ConfigChannel+0x254>)
 80070f2:	f7fa fa26 	bl	8001542 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d101      	bne.n	8007104 <HAL_TIM_PWM_ConfigChannel+0xc4>
 8007100:	2302      	movs	r3, #2
 8007102:	e1c1      	b.n	8007488 <HAL_TIM_PWM_ConfigChannel+0x448>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b14      	cmp	r3, #20
 8007110:	f200 81b4 	bhi.w	800747c <HAL_TIM_PWM_ConfigChannel+0x43c>
 8007114:	a201      	add	r2, pc, #4	; (adr r2, 800711c <HAL_TIM_PWM_ConfigChannel+0xdc>)
 8007116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711a:	bf00      	nop
 800711c:	08007171 	.word	0x08007171
 8007120:	0800747d 	.word	0x0800747d
 8007124:	0800747d 	.word	0x0800747d
 8007128:	0800747d 	.word	0x0800747d
 800712c:	0800720b 	.word	0x0800720b
 8007130:	0800747d 	.word	0x0800747d
 8007134:	0800747d 	.word	0x0800747d
 8007138:	0800747d 	.word	0x0800747d
 800713c:	080072c5 	.word	0x080072c5
 8007140:	0800747d 	.word	0x0800747d
 8007144:	0800747d 	.word	0x0800747d
 8007148:	0800747d 	.word	0x0800747d
 800714c:	08007341 	.word	0x08007341
 8007150:	0800747d 	.word	0x0800747d
 8007154:	0800747d 	.word	0x0800747d
 8007158:	0800747d 	.word	0x0800747d
 800715c:	080073bf 	.word	0x080073bf
 8007160:	0800747d 	.word	0x0800747d
 8007164:	0800747d 	.word	0x0800747d
 8007168:	0800747d 	.word	0x0800747d
 800716c:	0800741d 	.word	0x0800741d
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a4c      	ldr	r2, [pc, #304]	; (80072a8 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d027      	beq.n	80071ca <HAL_TIM_PWM_ConfigChannel+0x18a>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007182:	d022      	beq.n	80071ca <HAL_TIM_PWM_ConfigChannel+0x18a>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a48      	ldr	r2, [pc, #288]	; (80072ac <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d01d      	beq.n	80071ca <HAL_TIM_PWM_ConfigChannel+0x18a>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a47      	ldr	r2, [pc, #284]	; (80072b0 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d018      	beq.n	80071ca <HAL_TIM_PWM_ConfigChannel+0x18a>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a45      	ldr	r2, [pc, #276]	; (80072b4 <HAL_TIM_PWM_ConfigChannel+0x274>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d013      	beq.n	80071ca <HAL_TIM_PWM_ConfigChannel+0x18a>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a44      	ldr	r2, [pc, #272]	; (80072b8 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d00e      	beq.n	80071ca <HAL_TIM_PWM_ConfigChannel+0x18a>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a42      	ldr	r2, [pc, #264]	; (80072bc <HAL_TIM_PWM_ConfigChannel+0x27c>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d009      	beq.n	80071ca <HAL_TIM_PWM_ConfigChannel+0x18a>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a41      	ldr	r2, [pc, #260]	; (80072c0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d004      	beq.n	80071ca <HAL_TIM_PWM_ConfigChannel+0x18a>
 80071c0:	f241 0125 	movw	r1, #4133	; 0x1025
 80071c4:	4833      	ldr	r0, [pc, #204]	; (8007294 <HAL_TIM_PWM_ConfigChannel+0x254>)
 80071c6:	f7fa f9bc 	bl	8001542 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68b9      	ldr	r1, [r7, #8]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f000 fb05 	bl	80077e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	699a      	ldr	r2, [r3, #24]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f042 0208 	orr.w	r2, r2, #8
 80071e4:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	699a      	ldr	r2, [r3, #24]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f022 0204 	bic.w	r2, r2, #4
 80071f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	6999      	ldr	r1, [r3, #24]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	691a      	ldr	r2, [r3, #16]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	430a      	orrs	r2, r1
 8007206:	619a      	str	r2, [r3, #24]
      break;
 8007208:	e139      	b.n	800747e <HAL_TIM_PWM_ConfigChannel+0x43e>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a26      	ldr	r2, [pc, #152]	; (80072a8 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d01d      	beq.n	8007250 <HAL_TIM_PWM_ConfigChannel+0x210>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800721c:	d018      	beq.n	8007250 <HAL_TIM_PWM_ConfigChannel+0x210>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a22      	ldr	r2, [pc, #136]	; (80072ac <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d013      	beq.n	8007250 <HAL_TIM_PWM_ConfigChannel+0x210>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a20      	ldr	r2, [pc, #128]	; (80072b0 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d00e      	beq.n	8007250 <HAL_TIM_PWM_ConfigChannel+0x210>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a1f      	ldr	r2, [pc, #124]	; (80072b4 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d009      	beq.n	8007250 <HAL_TIM_PWM_ConfigChannel+0x210>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a1d      	ldr	r2, [pc, #116]	; (80072b8 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d004      	beq.n	8007250 <HAL_TIM_PWM_ConfigChannel+0x210>
 8007246:	f241 0136 	movw	r1, #4150	; 0x1036
 800724a:	4812      	ldr	r0, [pc, #72]	; (8007294 <HAL_TIM_PWM_ConfigChannel+0x254>)
 800724c:	f7fa f979 	bl	8001542 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68b9      	ldr	r1, [r7, #8]
 8007256:	4618      	mov	r0, r3
 8007258:	f000 fb7c 	bl	8007954 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	699a      	ldr	r2, [r3, #24]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800726a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	699a      	ldr	r2, [r3, #24]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800727a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6999      	ldr	r1, [r3, #24]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	021a      	lsls	r2, r3, #8
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	619a      	str	r2, [r3, #24]
      break;
 8007290:	e0f5      	b.n	800747e <HAL_TIM_PWM_ConfigChannel+0x43e>
 8007292:	bf00      	nop
 8007294:	0800d15c 	.word	0x0800d15c
 8007298:	00010040 	.word	0x00010040
 800729c:	00010050 	.word	0x00010050
 80072a0:	00010060 	.word	0x00010060
 80072a4:	00010070 	.word	0x00010070
 80072a8:	40012c00 	.word	0x40012c00
 80072ac:	40000400 	.word	0x40000400
 80072b0:	40000800 	.word	0x40000800
 80072b4:	40013400 	.word	0x40013400
 80072b8:	40014000 	.word	0x40014000
 80072bc:	40014400 	.word	0x40014400
 80072c0:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a71      	ldr	r2, [pc, #452]	; (8007490 <HAL_TIM_PWM_ConfigChannel+0x450>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d018      	beq.n	8007300 <HAL_TIM_PWM_ConfigChannel+0x2c0>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072d6:	d013      	beq.n	8007300 <HAL_TIM_PWM_ConfigChannel+0x2c0>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a6d      	ldr	r2, [pc, #436]	; (8007494 <HAL_TIM_PWM_ConfigChannel+0x454>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d00e      	beq.n	8007300 <HAL_TIM_PWM_ConfigChannel+0x2c0>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a6c      	ldr	r2, [pc, #432]	; (8007498 <HAL_TIM_PWM_ConfigChannel+0x458>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d009      	beq.n	8007300 <HAL_TIM_PWM_ConfigChannel+0x2c0>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a6a      	ldr	r2, [pc, #424]	; (800749c <HAL_TIM_PWM_ConfigChannel+0x45c>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d004      	beq.n	8007300 <HAL_TIM_PWM_ConfigChannel+0x2c0>
 80072f6:	f241 0147 	movw	r1, #4167	; 0x1047
 80072fa:	4869      	ldr	r0, [pc, #420]	; (80074a0 <HAL_TIM_PWM_ConfigChannel+0x460>)
 80072fc:	f7fa f921 	bl	8001542 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68b9      	ldr	r1, [r7, #8]
 8007306:	4618      	mov	r0, r3
 8007308:	f000 fbd6 	bl	8007ab8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	69da      	ldr	r2, [r3, #28]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f042 0208 	orr.w	r2, r2, #8
 800731a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	69da      	ldr	r2, [r3, #28]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f022 0204 	bic.w	r2, r2, #4
 800732a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	69d9      	ldr	r1, [r3, #28]
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	691a      	ldr	r2, [r3, #16]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	61da      	str	r2, [r3, #28]
      break;
 800733e:	e09e      	b.n	800747e <HAL_TIM_PWM_ConfigChannel+0x43e>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a52      	ldr	r2, [pc, #328]	; (8007490 <HAL_TIM_PWM_ConfigChannel+0x450>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d018      	beq.n	800737c <HAL_TIM_PWM_ConfigChannel+0x33c>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007352:	d013      	beq.n	800737c <HAL_TIM_PWM_ConfigChannel+0x33c>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a4e      	ldr	r2, [pc, #312]	; (8007494 <HAL_TIM_PWM_ConfigChannel+0x454>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d00e      	beq.n	800737c <HAL_TIM_PWM_ConfigChannel+0x33c>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a4d      	ldr	r2, [pc, #308]	; (8007498 <HAL_TIM_PWM_ConfigChannel+0x458>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d009      	beq.n	800737c <HAL_TIM_PWM_ConfigChannel+0x33c>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a4b      	ldr	r2, [pc, #300]	; (800749c <HAL_TIM_PWM_ConfigChannel+0x45c>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d004      	beq.n	800737c <HAL_TIM_PWM_ConfigChannel+0x33c>
 8007372:	f241 0158 	movw	r1, #4184	; 0x1058
 8007376:	484a      	ldr	r0, [pc, #296]	; (80074a0 <HAL_TIM_PWM_ConfigChannel+0x460>)
 8007378:	f7fa f8e3 	bl	8001542 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68b9      	ldr	r1, [r7, #8]
 8007382:	4618      	mov	r0, r3
 8007384:	f000 fc4a 	bl	8007c1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	69da      	ldr	r2, [r3, #28]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007396:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	69da      	ldr	r2, [r3, #28]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	69d9      	ldr	r1, [r3, #28]
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	021a      	lsls	r2, r3, #8
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	61da      	str	r2, [r3, #28]
      break;
 80073bc:	e05f      	b.n	800747e <HAL_TIM_PWM_ConfigChannel+0x43e>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a33      	ldr	r2, [pc, #204]	; (8007490 <HAL_TIM_PWM_ConfigChannel+0x450>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d009      	beq.n	80073dc <HAL_TIM_PWM_ConfigChannel+0x39c>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a33      	ldr	r2, [pc, #204]	; (800749c <HAL_TIM_PWM_ConfigChannel+0x45c>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d004      	beq.n	80073dc <HAL_TIM_PWM_ConfigChannel+0x39c>
 80073d2:	f241 0169 	movw	r1, #4201	; 0x1069
 80073d6:	4832      	ldr	r0, [pc, #200]	; (80074a0 <HAL_TIM_PWM_ConfigChannel+0x460>)
 80073d8:	f7fa f8b3 	bl	8001542 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68b9      	ldr	r1, [r7, #8]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 fccc 	bl	8007d80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f042 0208 	orr.w	r2, r2, #8
 80073f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f022 0204 	bic.w	r2, r2, #4
 8007406:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	691a      	ldr	r2, [r3, #16]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800741a:	e030      	b.n	800747e <HAL_TIM_PWM_ConfigChannel+0x43e>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a1b      	ldr	r2, [pc, #108]	; (8007490 <HAL_TIM_PWM_ConfigChannel+0x450>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d009      	beq.n	800743a <HAL_TIM_PWM_ConfigChannel+0x3fa>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a1c      	ldr	r2, [pc, #112]	; (800749c <HAL_TIM_PWM_ConfigChannel+0x45c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d004      	beq.n	800743a <HAL_TIM_PWM_ConfigChannel+0x3fa>
 8007430:	f241 017a 	movw	r1, #4218	; 0x107a
 8007434:	481a      	ldr	r0, [pc, #104]	; (80074a0 <HAL_TIM_PWM_ConfigChannel+0x460>)
 8007436:	f7fa f884 	bl	8001542 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68b9      	ldr	r1, [r7, #8]
 8007440:	4618      	mov	r0, r3
 8007442:	f000 fd01 	bl	8007e48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007454:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007464:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	021a      	lsls	r2, r3, #8
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800747a:	e000      	b.n	800747e <HAL_TIM_PWM_ConfigChannel+0x43e>
    }

    default:
      break;
 800747c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	40012c00 	.word	0x40012c00
 8007494:	40000400 	.word	0x40000400
 8007498:	40000800 	.word	0x40000800
 800749c:	40013400 	.word	0x40013400
 80074a0:	0800d15c 	.word	0x0800d15c

080074a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007528:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	429a      	cmp	r2, r3
 8007532:	d107      	bne.n	8007544 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2201      	movs	r2, #1
 8007538:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007542:	e02a      	b.n	800759a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	429a      	cmp	r2, r3
 800754c:	d107      	bne.n	800755e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2202      	movs	r2, #2
 8007552:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800755c:	e01d      	b.n	800759a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	429a      	cmp	r2, r3
 8007566:	d107      	bne.n	8007578 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2204      	movs	r2, #4
 800756c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007576:	e010      	b.n	800759a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	429a      	cmp	r2, r3
 8007580:	d107      	bne.n	8007592 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2208      	movs	r2, #8
 8007586:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007590:	e003      	b.n	800759a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f7ff ffb4 	bl	8007508 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	771a      	strb	r2, [r3, #28]
}
 80075a6:	bf00      	nop
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b084      	sub	sp, #16
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ba:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d10b      	bne.n	80075de <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2201      	movs	r2, #1
 80075ca:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	69db      	ldr	r3, [r3, #28]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d136      	bne.n	8007642 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075dc:	e031      	b.n	8007642 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d10b      	bne.n	8007600 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2202      	movs	r2, #2
 80075ec:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	69db      	ldr	r3, [r3, #28]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d125      	bne.n	8007642 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075fe:	e020      	b.n	8007642 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	429a      	cmp	r2, r3
 8007608:	d10b      	bne.n	8007622 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2204      	movs	r2, #4
 800760e:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d114      	bne.n	8007642 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007620:	e00f      	b.n	8007642 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	429a      	cmp	r2, r3
 800762a:	d10a      	bne.n	8007642 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2208      	movs	r2, #8
 8007630:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	69db      	ldr	r3, [r3, #28]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d103      	bne.n	8007642 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f7ff ff42 	bl	80074cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	771a      	strb	r2, [r3, #28]
}
 800764e:	bf00      	nop
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b084      	sub	sp, #16
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007662:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	429a      	cmp	r2, r3
 800766c:	d103      	bne.n	8007676 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2201      	movs	r2, #1
 8007672:	771a      	strb	r2, [r3, #28]
 8007674:	e019      	b.n	80076aa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	429a      	cmp	r2, r3
 800767e:	d103      	bne.n	8007688 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2202      	movs	r2, #2
 8007684:	771a      	strb	r2, [r3, #28]
 8007686:	e010      	b.n	80076aa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	429a      	cmp	r2, r3
 8007690:	d103      	bne.n	800769a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2204      	movs	r2, #4
 8007696:	771a      	strb	r2, [r3, #28]
 8007698:	e007      	b.n	80076aa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d102      	bne.n	80076aa <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2208      	movs	r2, #8
 80076a8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f7ff ff18 	bl	80074e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	771a      	strb	r2, [r3, #28]
}
 80076b6:	bf00      	nop
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
	...

080076c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a3c      	ldr	r2, [pc, #240]	; (80077c4 <TIM_Base_SetConfig+0x104>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d00f      	beq.n	80076f8 <TIM_Base_SetConfig+0x38>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076de:	d00b      	beq.n	80076f8 <TIM_Base_SetConfig+0x38>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a39      	ldr	r2, [pc, #228]	; (80077c8 <TIM_Base_SetConfig+0x108>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d007      	beq.n	80076f8 <TIM_Base_SetConfig+0x38>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a38      	ldr	r2, [pc, #224]	; (80077cc <TIM_Base_SetConfig+0x10c>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d003      	beq.n	80076f8 <TIM_Base_SetConfig+0x38>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a37      	ldr	r2, [pc, #220]	; (80077d0 <TIM_Base_SetConfig+0x110>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d108      	bne.n	800770a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	4313      	orrs	r3, r2
 8007708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a2d      	ldr	r2, [pc, #180]	; (80077c4 <TIM_Base_SetConfig+0x104>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d01b      	beq.n	800774a <TIM_Base_SetConfig+0x8a>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007718:	d017      	beq.n	800774a <TIM_Base_SetConfig+0x8a>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a2a      	ldr	r2, [pc, #168]	; (80077c8 <TIM_Base_SetConfig+0x108>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d013      	beq.n	800774a <TIM_Base_SetConfig+0x8a>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a29      	ldr	r2, [pc, #164]	; (80077cc <TIM_Base_SetConfig+0x10c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d00f      	beq.n	800774a <TIM_Base_SetConfig+0x8a>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a28      	ldr	r2, [pc, #160]	; (80077d0 <TIM_Base_SetConfig+0x110>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d00b      	beq.n	800774a <TIM_Base_SetConfig+0x8a>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a27      	ldr	r2, [pc, #156]	; (80077d4 <TIM_Base_SetConfig+0x114>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d007      	beq.n	800774a <TIM_Base_SetConfig+0x8a>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a26      	ldr	r2, [pc, #152]	; (80077d8 <TIM_Base_SetConfig+0x118>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d003      	beq.n	800774a <TIM_Base_SetConfig+0x8a>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a25      	ldr	r2, [pc, #148]	; (80077dc <TIM_Base_SetConfig+0x11c>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d108      	bne.n	800775c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	4313      	orrs	r3, r2
 800775a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	4313      	orrs	r3, r2
 8007768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	689a      	ldr	r2, [r3, #8]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a10      	ldr	r2, [pc, #64]	; (80077c4 <TIM_Base_SetConfig+0x104>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d00f      	beq.n	80077a8 <TIM_Base_SetConfig+0xe8>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a11      	ldr	r2, [pc, #68]	; (80077d0 <TIM_Base_SetConfig+0x110>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d00b      	beq.n	80077a8 <TIM_Base_SetConfig+0xe8>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a10      	ldr	r2, [pc, #64]	; (80077d4 <TIM_Base_SetConfig+0x114>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d007      	beq.n	80077a8 <TIM_Base_SetConfig+0xe8>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a0f      	ldr	r2, [pc, #60]	; (80077d8 <TIM_Base_SetConfig+0x118>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d003      	beq.n	80077a8 <TIM_Base_SetConfig+0xe8>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a0e      	ldr	r2, [pc, #56]	; (80077dc <TIM_Base_SetConfig+0x11c>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d103      	bne.n	80077b0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	691a      	ldr	r2, [r3, #16]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	615a      	str	r2, [r3, #20]
}
 80077b6:	bf00      	nop
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	40012c00 	.word	0x40012c00
 80077c8:	40000400 	.word	0x40000400
 80077cc:	40000800 	.word	0x40000800
 80077d0:	40013400 	.word	0x40013400
 80077d4:	40014000 	.word	0x40014000
 80077d8:	40014400 	.word	0x40014400
 80077dc:	40014800 	.word	0x40014800

080077e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	f023 0201 	bic.w	r2, r3, #1
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800780e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f023 0303 	bic.w	r3, r3, #3
 800781a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	4313      	orrs	r3, r2
 8007824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	f023 0302 	bic.w	r3, r3, #2
 800782c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	4313      	orrs	r3, r2
 8007836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a40      	ldr	r2, [pc, #256]	; (800793c <TIM_OC1_SetConfig+0x15c>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d00f      	beq.n	8007860 <TIM_OC1_SetConfig+0x80>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a3f      	ldr	r2, [pc, #252]	; (8007940 <TIM_OC1_SetConfig+0x160>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d00b      	beq.n	8007860 <TIM_OC1_SetConfig+0x80>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a3e      	ldr	r2, [pc, #248]	; (8007944 <TIM_OC1_SetConfig+0x164>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d007      	beq.n	8007860 <TIM_OC1_SetConfig+0x80>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a3d      	ldr	r2, [pc, #244]	; (8007948 <TIM_OC1_SetConfig+0x168>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d003      	beq.n	8007860 <TIM_OC1_SetConfig+0x80>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a3c      	ldr	r2, [pc, #240]	; (800794c <TIM_OC1_SetConfig+0x16c>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d119      	bne.n	8007894 <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d008      	beq.n	800787a <TIM_OC1_SetConfig+0x9a>
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	2b08      	cmp	r3, #8
 800786e:	d004      	beq.n	800787a <TIM_OC1_SetConfig+0x9a>
 8007870:	f641 21d6 	movw	r1, #6870	; 0x1ad6
 8007874:	4836      	ldr	r0, [pc, #216]	; (8007950 <TIM_OC1_SetConfig+0x170>)
 8007876:	f7f9 fe64 	bl	8001542 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f023 0308 	bic.w	r3, r3, #8
 8007880:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	4313      	orrs	r3, r2
 800788a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f023 0304 	bic.w	r3, r3, #4
 8007892:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a29      	ldr	r2, [pc, #164]	; (800793c <TIM_OC1_SetConfig+0x15c>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d00f      	beq.n	80078bc <TIM_OC1_SetConfig+0xdc>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a28      	ldr	r2, [pc, #160]	; (8007940 <TIM_OC1_SetConfig+0x160>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d00b      	beq.n	80078bc <TIM_OC1_SetConfig+0xdc>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a27      	ldr	r2, [pc, #156]	; (8007944 <TIM_OC1_SetConfig+0x164>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d007      	beq.n	80078bc <TIM_OC1_SetConfig+0xdc>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a26      	ldr	r2, [pc, #152]	; (8007948 <TIM_OC1_SetConfig+0x168>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d003      	beq.n	80078bc <TIM_OC1_SetConfig+0xdc>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a25      	ldr	r2, [pc, #148]	; (800794c <TIM_OC1_SetConfig+0x16c>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d12d      	bne.n	8007918 <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078c4:	d008      	beq.n	80078d8 <TIM_OC1_SetConfig+0xf8>
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d004      	beq.n	80078d8 <TIM_OC1_SetConfig+0xf8>
 80078ce:	f641 21e3 	movw	r1, #6883	; 0x1ae3
 80078d2:	481f      	ldr	r0, [pc, #124]	; (8007950 <TIM_OC1_SetConfig+0x170>)
 80078d4:	f7f9 fe35 	bl	8001542 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078e0:	d008      	beq.n	80078f4 <TIM_OC1_SetConfig+0x114>
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d004      	beq.n	80078f4 <TIM_OC1_SetConfig+0x114>
 80078ea:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 80078ee:	4818      	ldr	r0, [pc, #96]	; (8007950 <TIM_OC1_SetConfig+0x170>)
 80078f0:	f7f9 fe27 	bl	8001542 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007902:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	4313      	orrs	r3, r2
 800790c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	4313      	orrs	r3, r2
 8007916:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	685a      	ldr	r2, [r3, #4]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	621a      	str	r2, [r3, #32]
}
 8007932:	bf00      	nop
 8007934:	3718      	adds	r7, #24
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	40012c00 	.word	0x40012c00
 8007940:	40013400 	.word	0x40013400
 8007944:	40014000 	.word	0x40014000
 8007948:	40014400 	.word	0x40014400
 800794c:	40014800 	.word	0x40014800
 8007950:	0800d15c 	.word	0x0800d15c

08007954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	f023 0210 	bic.w	r2, r3, #16
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800798e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	021b      	lsls	r3, r3, #8
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	4313      	orrs	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	f023 0320 	bic.w	r3, r3, #32
 80079a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	011b      	lsls	r3, r3, #4
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a3b      	ldr	r2, [pc, #236]	; (8007aa0 <TIM_OC2_SetConfig+0x14c>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d003      	beq.n	80079c0 <TIM_OC2_SetConfig+0x6c>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a3a      	ldr	r2, [pc, #232]	; (8007aa4 <TIM_OC2_SetConfig+0x150>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d11a      	bne.n	80079f6 <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d008      	beq.n	80079da <TIM_OC2_SetConfig+0x86>
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	2b08      	cmp	r3, #8
 80079ce:	d004      	beq.n	80079da <TIM_OC2_SetConfig+0x86>
 80079d0:	f641 3121 	movw	r1, #6945	; 0x1b21
 80079d4:	4834      	ldr	r0, [pc, #208]	; (8007aa8 <TIM_OC2_SetConfig+0x154>)
 80079d6:	f7f9 fdb4 	bl	8001542 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	011b      	lsls	r3, r3, #4
 80079e8:	697a      	ldr	r2, [r7, #20]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079f4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a29      	ldr	r2, [pc, #164]	; (8007aa0 <TIM_OC2_SetConfig+0x14c>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d00f      	beq.n	8007a1e <TIM_OC2_SetConfig+0xca>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a28      	ldr	r2, [pc, #160]	; (8007aa4 <TIM_OC2_SetConfig+0x150>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d00b      	beq.n	8007a1e <TIM_OC2_SetConfig+0xca>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a28      	ldr	r2, [pc, #160]	; (8007aac <TIM_OC2_SetConfig+0x158>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d007      	beq.n	8007a1e <TIM_OC2_SetConfig+0xca>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a27      	ldr	r2, [pc, #156]	; (8007ab0 <TIM_OC2_SetConfig+0x15c>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d003      	beq.n	8007a1e <TIM_OC2_SetConfig+0xca>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a26      	ldr	r2, [pc, #152]	; (8007ab4 <TIM_OC2_SetConfig+0x160>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d12f      	bne.n	8007a7e <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a26:	d008      	beq.n	8007a3a <TIM_OC2_SetConfig+0xe6>
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d004      	beq.n	8007a3a <TIM_OC2_SetConfig+0xe6>
 8007a30:	f641 312f 	movw	r1, #6959	; 0x1b2f
 8007a34:	481c      	ldr	r0, [pc, #112]	; (8007aa8 <TIM_OC2_SetConfig+0x154>)
 8007a36:	f7f9 fd84 	bl	8001542 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a42:	d008      	beq.n	8007a56 <TIM_OC2_SetConfig+0x102>
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d004      	beq.n	8007a56 <TIM_OC2_SetConfig+0x102>
 8007a4c:	f641 3130 	movw	r1, #6960	; 0x1b30
 8007a50:	4815      	ldr	r0, [pc, #84]	; (8007aa8 <TIM_OC2_SetConfig+0x154>)
 8007a52:	f7f9 fd76 	bl	8001542 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	693a      	ldr	r2, [r7, #16]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	685a      	ldr	r2, [r3, #4]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	621a      	str	r2, [r3, #32]
}
 8007a98:	bf00      	nop
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	40012c00 	.word	0x40012c00
 8007aa4:	40013400 	.word	0x40013400
 8007aa8:	0800d15c 	.word	0x0800d15c
 8007aac:	40014000 	.word	0x40014000
 8007ab0:	40014400 	.word	0x40014400
 8007ab4:	40014800 	.word	0x40014800

08007ab8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f023 0303 	bic.w	r3, r3, #3
 8007af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	021b      	lsls	r3, r3, #8
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a3b      	ldr	r2, [pc, #236]	; (8007c04 <TIM_OC3_SetConfig+0x14c>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d003      	beq.n	8007b22 <TIM_OC3_SetConfig+0x6a>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a3a      	ldr	r2, [pc, #232]	; (8007c08 <TIM_OC3_SetConfig+0x150>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d11a      	bne.n	8007b58 <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d008      	beq.n	8007b3c <TIM_OC3_SetConfig+0x84>
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	2b08      	cmp	r3, #8
 8007b30:	d004      	beq.n	8007b3c <TIM_OC3_SetConfig+0x84>
 8007b32:	f641 316c 	movw	r1, #7020	; 0x1b6c
 8007b36:	4835      	ldr	r0, [pc, #212]	; (8007c0c <TIM_OC3_SetConfig+0x154>)
 8007b38:	f7f9 fd03 	bl	8001542 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	021b      	lsls	r3, r3, #8
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a2a      	ldr	r2, [pc, #168]	; (8007c04 <TIM_OC3_SetConfig+0x14c>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d00f      	beq.n	8007b80 <TIM_OC3_SetConfig+0xc8>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a29      	ldr	r2, [pc, #164]	; (8007c08 <TIM_OC3_SetConfig+0x150>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d00b      	beq.n	8007b80 <TIM_OC3_SetConfig+0xc8>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a29      	ldr	r2, [pc, #164]	; (8007c10 <TIM_OC3_SetConfig+0x158>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d007      	beq.n	8007b80 <TIM_OC3_SetConfig+0xc8>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a28      	ldr	r2, [pc, #160]	; (8007c14 <TIM_OC3_SetConfig+0x15c>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d003      	beq.n	8007b80 <TIM_OC3_SetConfig+0xc8>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a27      	ldr	r2, [pc, #156]	; (8007c18 <TIM_OC3_SetConfig+0x160>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d12f      	bne.n	8007be0 <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b88:	d008      	beq.n	8007b9c <TIM_OC3_SetConfig+0xe4>
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d004      	beq.n	8007b9c <TIM_OC3_SetConfig+0xe4>
 8007b92:	f641 3179 	movw	r1, #7033	; 0x1b79
 8007b96:	481d      	ldr	r0, [pc, #116]	; (8007c0c <TIM_OC3_SetConfig+0x154>)
 8007b98:	f7f9 fcd3 	bl	8001542 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	695b      	ldr	r3, [r3, #20]
 8007ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ba4:	d008      	beq.n	8007bb8 <TIM_OC3_SetConfig+0x100>
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d004      	beq.n	8007bb8 <TIM_OC3_SetConfig+0x100>
 8007bae:	f641 317a 	movw	r1, #7034	; 0x1b7a
 8007bb2:	4816      	ldr	r0, [pc, #88]	; (8007c0c <TIM_OC3_SetConfig+0x154>)
 8007bb4:	f7f9 fcc5 	bl	8001542 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	695b      	ldr	r3, [r3, #20]
 8007bcc:	011b      	lsls	r3, r3, #4
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	011b      	lsls	r3, r3, #4
 8007bda:	693a      	ldr	r2, [r7, #16]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685a      	ldr	r2, [r3, #4]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	621a      	str	r2, [r3, #32]
}
 8007bfa:	bf00      	nop
 8007bfc:	3718      	adds	r7, #24
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	40012c00 	.word	0x40012c00
 8007c08:	40013400 	.word	0x40013400
 8007c0c:	0800d15c 	.word	0x0800d15c
 8007c10:	40014000 	.word	0x40014000
 8007c14:	40014400 	.word	0x40014400
 8007c18:	40014800 	.word	0x40014800

08007c1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	021b      	lsls	r3, r3, #8
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	031b      	lsls	r3, r3, #12
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a3b      	ldr	r2, [pc, #236]	; (8007d68 <TIM_OC4_SetConfig+0x14c>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d003      	beq.n	8007c88 <TIM_OC4_SetConfig+0x6c>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a3a      	ldr	r2, [pc, #232]	; (8007d6c <TIM_OC4_SetConfig+0x150>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d11a      	bne.n	8007cbe <TIM_OC4_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d008      	beq.n	8007ca2 <TIM_OC4_SetConfig+0x86>
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	2b08      	cmp	r3, #8
 8007c96:	d004      	beq.n	8007ca2 <TIM_OC4_SetConfig+0x86>
 8007c98:	f641 31b7 	movw	r1, #7095	; 0x1bb7
 8007c9c:	4834      	ldr	r0, [pc, #208]	; (8007d70 <TIM_OC4_SetConfig+0x154>)
 8007c9e:	f7f9 fc50 	bl	8001542 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ca8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	031b      	lsls	r3, r3, #12
 8007cb0:	697a      	ldr	r2, [r7, #20]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a29      	ldr	r2, [pc, #164]	; (8007d68 <TIM_OC4_SetConfig+0x14c>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d00f      	beq.n	8007ce6 <TIM_OC4_SetConfig+0xca>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a28      	ldr	r2, [pc, #160]	; (8007d6c <TIM_OC4_SetConfig+0x150>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d00b      	beq.n	8007ce6 <TIM_OC4_SetConfig+0xca>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a28      	ldr	r2, [pc, #160]	; (8007d74 <TIM_OC4_SetConfig+0x158>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d007      	beq.n	8007ce6 <TIM_OC4_SetConfig+0xca>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a27      	ldr	r2, [pc, #156]	; (8007d78 <TIM_OC4_SetConfig+0x15c>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d003      	beq.n	8007ce6 <TIM_OC4_SetConfig+0xca>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a26      	ldr	r2, [pc, #152]	; (8007d7c <TIM_OC4_SetConfig+0x160>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d12f      	bne.n	8007d46 <TIM_OC4_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cee:	d008      	beq.n	8007d02 <TIM_OC4_SetConfig+0xe6>
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d004      	beq.n	8007d02 <TIM_OC4_SetConfig+0xe6>
 8007cf8:	f641 31c4 	movw	r1, #7108	; 0x1bc4
 8007cfc:	481c      	ldr	r0, [pc, #112]	; (8007d70 <TIM_OC4_SetConfig+0x154>)
 8007cfe:	f7f9 fc20 	bl	8001542 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	695b      	ldr	r3, [r3, #20]
 8007d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d0a:	d008      	beq.n	8007d1e <TIM_OC4_SetConfig+0x102>
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d004      	beq.n	8007d1e <TIM_OC4_SetConfig+0x102>
 8007d14:	f641 31c5 	movw	r1, #7109	; 0x1bc5
 8007d18:	4815      	ldr	r0, [pc, #84]	; (8007d70 <TIM_OC4_SetConfig+0x154>)
 8007d1a:	f7f9 fc12 	bl	8001542 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d24:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d2c:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	019b      	lsls	r3, r3, #6
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	019b      	lsls	r3, r3, #6
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	621a      	str	r2, [r3, #32]
}
 8007d60:	bf00      	nop
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	40012c00 	.word	0x40012c00
 8007d6c:	40013400 	.word	0x40013400
 8007d70:	0800d15c 	.word	0x0800d15c
 8007d74:	40014000 	.word	0x40014000
 8007d78:	40014400 	.word	0x40014400
 8007d7c:	40014800 	.word	0x40014800

08007d80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b087      	sub	sp, #28
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a1b      	ldr	r3, [r3, #32]
 8007d8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007dc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	041b      	lsls	r3, r3, #16
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a17      	ldr	r2, [pc, #92]	; (8007e34 <TIM_OC5_SetConfig+0xb4>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d00f      	beq.n	8007dfa <TIM_OC5_SetConfig+0x7a>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a16      	ldr	r2, [pc, #88]	; (8007e38 <TIM_OC5_SetConfig+0xb8>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d00b      	beq.n	8007dfa <TIM_OC5_SetConfig+0x7a>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a15      	ldr	r2, [pc, #84]	; (8007e3c <TIM_OC5_SetConfig+0xbc>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d007      	beq.n	8007dfa <TIM_OC5_SetConfig+0x7a>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a14      	ldr	r2, [pc, #80]	; (8007e40 <TIM_OC5_SetConfig+0xc0>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d003      	beq.n	8007dfa <TIM_OC5_SetConfig+0x7a>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a13      	ldr	r2, [pc, #76]	; (8007e44 <TIM_OC5_SetConfig+0xc4>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d109      	bne.n	8007e0e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	021b      	lsls	r3, r3, #8
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	621a      	str	r2, [r3, #32]
}
 8007e28:	bf00      	nop
 8007e2a:	371c      	adds	r7, #28
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	40012c00 	.word	0x40012c00
 8007e38:	40013400 	.word	0x40013400
 8007e3c:	40014000 	.word	0x40014000
 8007e40:	40014400 	.word	0x40014400
 8007e44:	40014800 	.word	0x40014800

08007e48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	021b      	lsls	r3, r3, #8
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	051b      	lsls	r3, r3, #20
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a18      	ldr	r2, [pc, #96]	; (8007f00 <TIM_OC6_SetConfig+0xb8>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d00f      	beq.n	8007ec4 <TIM_OC6_SetConfig+0x7c>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a17      	ldr	r2, [pc, #92]	; (8007f04 <TIM_OC6_SetConfig+0xbc>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d00b      	beq.n	8007ec4 <TIM_OC6_SetConfig+0x7c>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a16      	ldr	r2, [pc, #88]	; (8007f08 <TIM_OC6_SetConfig+0xc0>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d007      	beq.n	8007ec4 <TIM_OC6_SetConfig+0x7c>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a15      	ldr	r2, [pc, #84]	; (8007f0c <TIM_OC6_SetConfig+0xc4>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d003      	beq.n	8007ec4 <TIM_OC6_SetConfig+0x7c>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a14      	ldr	r2, [pc, #80]	; (8007f10 <TIM_OC6_SetConfig+0xc8>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d109      	bne.n	8007ed8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007eca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	029b      	lsls	r3, r3, #10
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	621a      	str	r2, [r3, #32]
}
 8007ef2:	bf00      	nop
 8007ef4:	371c      	adds	r7, #28
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	40012c00 	.word	0x40012c00
 8007f04:	40013400 	.word	0x40013400
 8007f08:	40014000 	.word	0x40014000
 8007f0c:	40014400 	.word	0x40014400
 8007f10:	40014800 	.word	0x40014800

08007f14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	4a2d      	ldr	r2, [pc, #180]	; (8007fd8 <TIM_CCxChannelCmd+0xc4>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d020      	beq.n	8007f6a <TIM_CCxChannelCmd+0x56>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f2e:	d01c      	beq.n	8007f6a <TIM_CCxChannelCmd+0x56>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4a2a      	ldr	r2, [pc, #168]	; (8007fdc <TIM_CCxChannelCmd+0xc8>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d018      	beq.n	8007f6a <TIM_CCxChannelCmd+0x56>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4a29      	ldr	r2, [pc, #164]	; (8007fe0 <TIM_CCxChannelCmd+0xcc>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d014      	beq.n	8007f6a <TIM_CCxChannelCmd+0x56>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	4a28      	ldr	r2, [pc, #160]	; (8007fe4 <TIM_CCxChannelCmd+0xd0>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d010      	beq.n	8007f6a <TIM_CCxChannelCmd+0x56>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	4a27      	ldr	r2, [pc, #156]	; (8007fe8 <TIM_CCxChannelCmd+0xd4>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d00c      	beq.n	8007f6a <TIM_CCxChannelCmd+0x56>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4a26      	ldr	r2, [pc, #152]	; (8007fec <TIM_CCxChannelCmd+0xd8>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d008      	beq.n	8007f6a <TIM_CCxChannelCmd+0x56>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	4a25      	ldr	r2, [pc, #148]	; (8007ff0 <TIM_CCxChannelCmd+0xdc>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d004      	beq.n	8007f6a <TIM_CCxChannelCmd+0x56>
 8007f60:	f641 6135 	movw	r1, #7733	; 0x1e35
 8007f64:	4823      	ldr	r0, [pc, #140]	; (8007ff4 <TIM_CCxChannelCmd+0xe0>)
 8007f66:	f7f9 faec 	bl	8001542 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d016      	beq.n	8007f9e <TIM_CCxChannelCmd+0x8a>
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2b04      	cmp	r3, #4
 8007f74:	d013      	beq.n	8007f9e <TIM_CCxChannelCmd+0x8a>
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	2b08      	cmp	r3, #8
 8007f7a:	d010      	beq.n	8007f9e <TIM_CCxChannelCmd+0x8a>
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2b0c      	cmp	r3, #12
 8007f80:	d00d      	beq.n	8007f9e <TIM_CCxChannelCmd+0x8a>
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	2b10      	cmp	r3, #16
 8007f86:	d00a      	beq.n	8007f9e <TIM_CCxChannelCmd+0x8a>
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	2b14      	cmp	r3, #20
 8007f8c:	d007      	beq.n	8007f9e <TIM_CCxChannelCmd+0x8a>
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	2b3c      	cmp	r3, #60	; 0x3c
 8007f92:	d004      	beq.n	8007f9e <TIM_CCxChannelCmd+0x8a>
 8007f94:	f641 6136 	movw	r1, #7734	; 0x1e36
 8007f98:	4816      	ldr	r0, [pc, #88]	; (8007ff4 <TIM_CCxChannelCmd+0xe0>)
 8007f9a:	f7f9 fad2 	bl	8001542 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	f003 031f 	and.w	r3, r3, #31
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8007faa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6a1a      	ldr	r2, [r3, #32]
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	43db      	mvns	r3, r3
 8007fb4:	401a      	ands	r2, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6a1a      	ldr	r2, [r3, #32]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	f003 031f 	and.w	r3, r3, #31
 8007fc4:	6879      	ldr	r1, [r7, #4]
 8007fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8007fca:	431a      	orrs	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	621a      	str	r2, [r3, #32]
}
 8007fd0:	bf00      	nop
 8007fd2:	3718      	adds	r7, #24
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	40012c00 	.word	0x40012c00
 8007fdc:	40000400 	.word	0x40000400
 8007fe0:	40000800 	.word	0x40000800
 8007fe4:	40013400 	.word	0x40013400
 8007fe8:	40014000 	.word	0x40014000
 8007fec:	40014400 	.word	0x40014400
 8007ff0:	40014800 	.word	0x40014800
 8007ff4:	0800d15c 	.word	0x0800d15c

08007ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a96      	ldr	r2, [pc, #600]	; (8008260 <HAL_TIMEx_MasterConfigSynchronization+0x268>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d027      	beq.n	800805c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008014:	d022      	beq.n	800805c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a92      	ldr	r2, [pc, #584]	; (8008264 <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d01d      	beq.n	800805c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a90      	ldr	r2, [pc, #576]	; (8008268 <HAL_TIMEx_MasterConfigSynchronization+0x270>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d018      	beq.n	800805c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a8f      	ldr	r2, [pc, #572]	; (800826c <HAL_TIMEx_MasterConfigSynchronization+0x274>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d013      	beq.n	800805c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a8d      	ldr	r2, [pc, #564]	; (8008270 <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d00e      	beq.n	800805c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a8c      	ldr	r2, [pc, #560]	; (8008274 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d009      	beq.n	800805c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a8a      	ldr	r2, [pc, #552]	; (8008278 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d004      	beq.n	800805c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008052:	f44f 61fd 	mov.w	r1, #2024	; 0x7e8
 8008056:	4889      	ldr	r0, [pc, #548]	; (800827c <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 8008058:	f7f9 fa73 	bl	8001542 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d025      	beq.n	80080b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b10      	cmp	r3, #16
 800806a:	d021      	beq.n	80080b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b20      	cmp	r3, #32
 8008072:	d01d      	beq.n	80080b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b30      	cmp	r3, #48	; 0x30
 800807a:	d019      	beq.n	80080b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b40      	cmp	r3, #64	; 0x40
 8008082:	d015      	beq.n	80080b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b50      	cmp	r3, #80	; 0x50
 800808a:	d011      	beq.n	80080b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b60      	cmp	r3, #96	; 0x60
 8008092:	d00d      	beq.n	80080b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b70      	cmp	r3, #112	; 0x70
 800809a:	d009      	beq.n	80080b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080a4:	d004      	beq.n	80080b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80080a6:	f240 71e9 	movw	r1, #2025	; 0x7e9
 80080aa:	4874      	ldr	r0, [pc, #464]	; (800827c <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 80080ac:	f7f9 fa49 	bl	8001542 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	2b80      	cmp	r3, #128	; 0x80
 80080b6:	d008      	beq.n	80080ca <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d004      	beq.n	80080ca <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 80080c0:	f240 71ea 	movw	r1, #2026	; 0x7ea
 80080c4:	486d      	ldr	r0, [pc, #436]	; (800827c <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 80080c6:	f7f9 fa3c 	bl	8001542 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d101      	bne.n	80080d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80080d4:	2302      	movs	r3, #2
 80080d6:	e0be      	b.n	8008256 <HAL_TIMEx_MasterConfigSynchronization+0x25e>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2202      	movs	r2, #2
 80080e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a58      	ldr	r2, [pc, #352]	; (8008260 <HAL_TIMEx_MasterConfigSynchronization+0x268>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d004      	beq.n	800810c <HAL_TIMEx_MasterConfigSynchronization+0x114>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a5b      	ldr	r2, [pc, #364]	; (8008274 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d161      	bne.n	80081d0 <HAL_TIMEx_MasterConfigSynchronization+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d054      	beq.n	80081be <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800811c:	d04f      	beq.n	80081be <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008126:	d04a      	beq.n	80081be <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008130:	d045      	beq.n	80081be <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800813a:	d040      	beq.n	80081be <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8008144:	d03b      	beq.n	80081be <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800814e:	d036      	beq.n	80081be <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008158:	d031      	beq.n	80081be <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8008162:	d02c      	beq.n	80081be <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800816c:	d027      	beq.n	80081be <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8008176:	d022      	beq.n	80081be <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008180:	d01d      	beq.n	80081be <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 800818a:	d018      	beq.n	80081be <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008194:	d013      	beq.n	80081be <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 800819e:	d00e      	beq.n	80081be <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 80081a8:	d009      	beq.n	80081be <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 80081b2:	d004      	beq.n	80081be <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80081b4:	f240 71fc 	movw	r1, #2044	; 0x7fc
 80081b8:	4830      	ldr	r0, [pc, #192]	; (800827c <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 80081ba:	f7f9 f9c2 	bl	8001542 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80081c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80081d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a1b      	ldr	r2, [pc, #108]	; (8008260 <HAL_TIMEx_MasterConfigSynchronization+0x268>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d018      	beq.n	800822a <HAL_TIMEx_MasterConfigSynchronization+0x232>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008200:	d013      	beq.n	800822a <HAL_TIMEx_MasterConfigSynchronization+0x232>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a17      	ldr	r2, [pc, #92]	; (8008264 <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d00e      	beq.n	800822a <HAL_TIMEx_MasterConfigSynchronization+0x232>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a15      	ldr	r2, [pc, #84]	; (8008268 <HAL_TIMEx_MasterConfigSynchronization+0x270>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d009      	beq.n	800822a <HAL_TIMEx_MasterConfigSynchronization+0x232>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a16      	ldr	r2, [pc, #88]	; (8008274 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d004      	beq.n	800822a <HAL_TIMEx_MasterConfigSynchronization+0x232>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a14      	ldr	r2, [pc, #80]	; (8008278 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d10c      	bne.n	8008244 <HAL_TIMEx_MasterConfigSynchronization+0x24c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008230:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	4313      	orrs	r3, r2
 800823a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	40012c00 	.word	0x40012c00
 8008264:	40000400 	.word	0x40000400
 8008268:	40000800 	.word	0x40000800
 800826c:	40001000 	.word	0x40001000
 8008270:	40001400 	.word	0x40001400
 8008274:	40013400 	.word	0x40013400
 8008278:	40014000 	.word	0x40014000
 800827c:	0800d194 	.word	0x0800d194

08008280 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800828a:	2300      	movs	r3, #0
 800828c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a49      	ldr	r2, [pc, #292]	; (80083b8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d018      	beq.n	80082ca <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a47      	ldr	r2, [pc, #284]	; (80083bc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d013      	beq.n	80082ca <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a46      	ldr	r2, [pc, #280]	; (80083c0 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d00e      	beq.n	80082ca <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a44      	ldr	r2, [pc, #272]	; (80083c4 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d009      	beq.n	80082ca <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a43      	ldr	r2, [pc, #268]	; (80083c8 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d004      	beq.n	80082ca <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 80082c0:	f640 0131 	movw	r1, #2097	; 0x831
 80082c4:	4841      	ldr	r0, [pc, #260]	; (80083cc <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 80082c6:	f7f9 f93c 	bl	8001542 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082d2:	d008      	beq.n	80082e6 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d004      	beq.n	80082e6 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 80082dc:	f640 0132 	movw	r1, #2098	; 0x832
 80082e0:	483a      	ldr	r0, [pc, #232]	; (80083cc <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 80082e2:	f7f9 f92e 	bl	8001542 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082ee:	d008      	beq.n	8008302 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d004      	beq.n	8008302 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 80082f8:	f640 0133 	movw	r1, #2099	; 0x833
 80082fc:	4833      	ldr	r0, [pc, #204]	; (80083cc <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 80082fe:	f7f9 f920 	bl	8001542 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d013      	beq.n	8008332 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008312:	d00e      	beq.n	8008332 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800831c:	d009      	beq.n	8008332 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008326:	d004      	beq.n	8008332 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8008328:	f640 0134 	movw	r1, #2100	; 0x834
 800832c:	4827      	ldr	r0, [pc, #156]	; (80083cc <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 800832e:	f7f9 f908 	bl	8001542 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	2bff      	cmp	r3, #255	; 0xff
 8008338:	d904      	bls.n	8008344 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>
 800833a:	f640 0135 	movw	r1, #2101	; 0x835
 800833e:	4823      	ldr	r0, [pc, #140]	; (80083cc <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8008340:	f7f9 f8ff 	bl	8001542 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800834c:	d008      	beq.n	8008360 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d004      	beq.n	8008360 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8008356:	f640 0136 	movw	r1, #2102	; 0x836
 800835a:	481c      	ldr	r0, [pc, #112]	; (80083cc <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 800835c:	f7f9 f8f1 	bl	8001542 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	695b      	ldr	r3, [r3, #20]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d009      	beq.n	800837c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	695b      	ldr	r3, [r3, #20]
 800836c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008370:	d004      	beq.n	800837c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8008372:	f640 0137 	movw	r1, #2103	; 0x837
 8008376:	4815      	ldr	r0, [pc, #84]	; (80083cc <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8008378:	f7f9 f8e3 	bl	8001542 <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	2b0f      	cmp	r3, #15
 8008382:	d904      	bls.n	800838e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008384:	f640 0138 	movw	r1, #2104	; 0x838
 8008388:	4810      	ldr	r0, [pc, #64]	; (80083cc <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 800838a:	f7f9 f8da 	bl	8001542 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008392:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008396:	d008      	beq.n	80083aa <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800839c:	2b00      	cmp	r3, #0
 800839e:	d004      	beq.n	80083aa <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80083a0:	f640 0139 	movw	r1, #2105	; 0x839
 80083a4:	4809      	ldr	r0, [pc, #36]	; (80083cc <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 80083a6:	f7f9 f8cc 	bl	8001542 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d10d      	bne.n	80083d0 <HAL_TIMEx_ConfigBreakDeadTime+0x150>
 80083b4:	2302      	movs	r3, #2
 80083b6:	e0d4      	b.n	8008562 <HAL_TIMEx_ConfigBreakDeadTime+0x2e2>
 80083b8:	40012c00 	.word	0x40012c00
 80083bc:	40013400 	.word	0x40013400
 80083c0:	40014000 	.word	0x40014000
 80083c4:	40014400 	.word	0x40014400
 80083c8:	40014800 	.word	0x40014800
 80083cc:	0800d194 	.word	0x0800d194
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	4313      	orrs	r3, r2
 8008400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4313      	orrs	r3, r2
 800840e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	4313      	orrs	r3, r2
 800841c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	695b      	ldr	r3, [r3, #20]
 8008428:	4313      	orrs	r3, r2
 800842a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008436:	4313      	orrs	r3, r2
 8008438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	041b      	lsls	r3, r3, #16
 8008446:	4313      	orrs	r3, r2
 8008448:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a47      	ldr	r2, [pc, #284]	; (800856c <HAL_TIMEx_ConfigBreakDeadTime+0x2ec>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d004      	beq.n	800845e <HAL_TIMEx_ConfigBreakDeadTime+0x1de>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a45      	ldr	r2, [pc, #276]	; (8008570 <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d114      	bne.n	8008488 <HAL_TIMEx_ConfigBreakDeadTime+0x208>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	69db      	ldr	r3, [r3, #28]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d009      	beq.n	800847a <HAL_TIMEx_ConfigBreakDeadTime+0x1fa>
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	69db      	ldr	r3, [r3, #28]
 800846a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800846e:	d004      	beq.n	800847a <HAL_TIMEx_ConfigBreakDeadTime+0x1fa>
 8008470:	f640 014e 	movw	r1, #2126	; 0x84e
 8008474:	483f      	ldr	r0, [pc, #252]	; (8008574 <HAL_TIMEx_ConfigBreakDeadTime+0x2f4>)
 8008476:	f7f9 f864 	bl	8001542 <assert_failed>

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	69db      	ldr	r3, [r3, #28]
 8008484:	4313      	orrs	r3, r2
 8008486:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a37      	ldr	r2, [pc, #220]	; (800856c <HAL_TIMEx_ConfigBreakDeadTime+0x2ec>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d004      	beq.n	800849c <HAL_TIMEx_ConfigBreakDeadTime+0x21c>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a36      	ldr	r2, [pc, #216]	; (8008570 <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d159      	bne.n	8008550 <HAL_TIMEx_ConfigBreakDeadTime+0x2d0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	6a1b      	ldr	r3, [r3, #32]
 80084a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80084a4:	d008      	beq.n	80084b8 <HAL_TIMEx_ConfigBreakDeadTime+0x238>
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d004      	beq.n	80084b8 <HAL_TIMEx_ConfigBreakDeadTime+0x238>
 80084ae:	f640 0157 	movw	r1, #2135	; 0x857
 80084b2:	4830      	ldr	r0, [pc, #192]	; (8008574 <HAL_TIMEx_ConfigBreakDeadTime+0x2f4>)
 80084b4:	f7f9 f845 	bl	8001542 <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d009      	beq.n	80084d4 <HAL_TIMEx_ConfigBreakDeadTime+0x254>
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084c8:	d004      	beq.n	80084d4 <HAL_TIMEx_ConfigBreakDeadTime+0x254>
 80084ca:	f640 0158 	movw	r1, #2136	; 0x858
 80084ce:	4829      	ldr	r0, [pc, #164]	; (8008574 <HAL_TIMEx_ConfigBreakDeadTime+0x2f4>)
 80084d0:	f7f9 f837 	bl	8001542 <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d8:	2b0f      	cmp	r3, #15
 80084da:	d904      	bls.n	80084e6 <HAL_TIMEx_ConfigBreakDeadTime+0x266>
 80084dc:	f640 0159 	movw	r1, #2137	; 0x859
 80084e0:	4824      	ldr	r0, [pc, #144]	; (8008574 <HAL_TIMEx_ConfigBreakDeadTime+0x2f4>)
 80084e2:	f7f9 f82e 	bl	8001542 <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f0:	051b      	lsls	r3, r3, #20
 80084f2:	4313      	orrs	r3, r2
 80084f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	6a1b      	ldr	r3, [r3, #32]
 8008500:	4313      	orrs	r3, r2
 8008502:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850e:	4313      	orrs	r3, r2
 8008510:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a15      	ldr	r2, [pc, #84]	; (800856c <HAL_TIMEx_ConfigBreakDeadTime+0x2ec>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d004      	beq.n	8008526 <HAL_TIMEx_ConfigBreakDeadTime+0x2a6>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a13      	ldr	r2, [pc, #76]	; (8008570 <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d114      	bne.n	8008550 <HAL_TIMEx_ConfigBreakDeadTime+0x2d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852a:	2b00      	cmp	r3, #0
 800852c:	d009      	beq.n	8008542 <HAL_TIMEx_ConfigBreakDeadTime+0x2c2>
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008536:	d004      	beq.n	8008542 <HAL_TIMEx_ConfigBreakDeadTime+0x2c2>
 8008538:	f640 0163 	movw	r1, #2147	; 0x863
 800853c:	480d      	ldr	r0, [pc, #52]	; (8008574 <HAL_TIMEx_ConfigBreakDeadTime+0x2f4>)
 800853e:	f7f9 f800 	bl	8001542 <assert_failed>

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854c:	4313      	orrs	r3, r2
 800854e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	40012c00 	.word	0x40012c00
 8008570:	40013400 	.word	0x40013400
 8008574:	0800d194 	.word	0x0800d194

08008578 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800860c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008610:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008618:	b29a      	uxth	r2, r3
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	b29b      	uxth	r3, r3
 800861e:	4313      	orrs	r3, r2
 8008620:	b29a      	uxth	r2, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr

08008636 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008636:	b480      	push	{r7}
 8008638:	b085      	sub	sp, #20
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800863e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008642:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800864a:	b29a      	uxth	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	b29b      	uxth	r3, r3
 8008650:	43db      	mvns	r3, r3
 8008652:	b29b      	uxth	r3, r3
 8008654:	4013      	ands	r3, r2
 8008656:	b29a      	uxth	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	3714      	adds	r7, #20
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800866c:	b084      	sub	sp, #16
 800866e:	b580      	push	{r7, lr}
 8008670:	b082      	sub	sp, #8
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	f107 0014 	add.w	r0, r7, #20
 800867a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2201      	movs	r2, #1
 8008682:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7ff ffb0 	bl	8008604 <USB_EnableGlobalInt>

  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3708      	adds	r7, #8
 80086aa:	46bd      	mov	sp, r7
 80086ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086b0:	b004      	add	sp, #16
 80086b2:	4770      	bx	lr

080086b4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80086b4:	b490      	push	{r4, r7}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80086be:	2300      	movs	r3, #0
 80086c0:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4413      	add	r3, r2
 80086cc:	881b      	ldrh	r3, [r3, #0]
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80086d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d8:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	78db      	ldrb	r3, [r3, #3]
 80086de:	2b03      	cmp	r3, #3
 80086e0:	d819      	bhi.n	8008716 <USB_ActivateEndpoint+0x62>
 80086e2:	a201      	add	r2, pc, #4	; (adr r2, 80086e8 <USB_ActivateEndpoint+0x34>)
 80086e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e8:	080086f9 	.word	0x080086f9
 80086ec:	0800870d 	.word	0x0800870d
 80086f0:	0800871d 	.word	0x0800871d
 80086f4:	08008703 	.word	0x08008703
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80086f8:	89bb      	ldrh	r3, [r7, #12]
 80086fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80086fe:	81bb      	strh	r3, [r7, #12]
      break;
 8008700:	e00d      	b.n	800871e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008702:	89bb      	ldrh	r3, [r7, #12]
 8008704:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008708:	81bb      	strh	r3, [r7, #12]
      break;
 800870a:	e008      	b.n	800871e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800870c:	89bb      	ldrh	r3, [r7, #12]
 800870e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008712:	81bb      	strh	r3, [r7, #12]
      break;
 8008714:	e003      	b.n	800871e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	73fb      	strb	r3, [r7, #15]
      break;
 800871a:	e000      	b.n	800871e <USB_ActivateEndpoint+0x6a>
      break;
 800871c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	441a      	add	r2, r3
 8008728:	89bb      	ldrh	r3, [r7, #12]
 800872a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800872e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800873a:	b29b      	uxth	r3, r3
 800873c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	881b      	ldrh	r3, [r3, #0]
 800874a:	b29b      	uxth	r3, r3
 800874c:	b21b      	sxth	r3, r3
 800874e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008756:	b21a      	sxth	r2, r3
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	b21b      	sxth	r3, r3
 800875e:	4313      	orrs	r3, r2
 8008760:	b21b      	sxth	r3, r3
 8008762:	b29c      	uxth	r4, r3
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	441a      	add	r2, r3
 800876e:	4b8a      	ldr	r3, [pc, #552]	; (8008998 <USB_ActivateEndpoint+0x2e4>)
 8008770:	4323      	orrs	r3, r4
 8008772:	b29b      	uxth	r3, r3
 8008774:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	7b1b      	ldrb	r3, [r3, #12]
 800877a:	2b00      	cmp	r3, #0
 800877c:	f040 8112 	bne.w	80089a4 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	785b      	ldrb	r3, [r3, #1]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d067      	beq.n	8008858 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008788:	687c      	ldr	r4, [r7, #4]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008790:	b29b      	uxth	r3, r3
 8008792:	441c      	add	r4, r3
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	00db      	lsls	r3, r3, #3
 800879a:	4423      	add	r3, r4
 800879c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087a0:	461c      	mov	r4, r3
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	88db      	ldrh	r3, [r3, #6]
 80087a6:	085b      	lsrs	r3, r3, #1
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	005b      	lsls	r3, r3, #1
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	4413      	add	r3, r2
 80087ba:	881b      	ldrh	r3, [r3, #0]
 80087bc:	b29c      	uxth	r4, r3
 80087be:	4623      	mov	r3, r4
 80087c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d014      	beq.n	80087f2 <USB_ActivateEndpoint+0x13e>
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4413      	add	r3, r2
 80087d2:	881b      	ldrh	r3, [r3, #0]
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087de:	b29c      	uxth	r4, r3
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	441a      	add	r2, r3
 80087ea:	4b6c      	ldr	r3, [pc, #432]	; (800899c <USB_ActivateEndpoint+0x2e8>)
 80087ec:	4323      	orrs	r3, r4
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	78db      	ldrb	r3, [r3, #3]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d018      	beq.n	800882c <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	881b      	ldrh	r3, [r3, #0]
 8008806:	b29b      	uxth	r3, r3
 8008808:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800880c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008810:	b29c      	uxth	r4, r3
 8008812:	f084 0320 	eor.w	r3, r4, #32
 8008816:	b29c      	uxth	r4, r3
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	441a      	add	r2, r3
 8008822:	4b5d      	ldr	r3, [pc, #372]	; (8008998 <USB_ActivateEndpoint+0x2e4>)
 8008824:	4323      	orrs	r3, r4
 8008826:	b29b      	uxth	r3, r3
 8008828:	8013      	strh	r3, [r2, #0]
 800882a:	e22b      	b.n	8008c84 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	4413      	add	r3, r2
 8008836:	881b      	ldrh	r3, [r3, #0]
 8008838:	b29b      	uxth	r3, r3
 800883a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800883e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008842:	b29c      	uxth	r4, r3
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	441a      	add	r2, r3
 800884e:	4b52      	ldr	r3, [pc, #328]	; (8008998 <USB_ActivateEndpoint+0x2e4>)
 8008850:	4323      	orrs	r3, r4
 8008852:	b29b      	uxth	r3, r3
 8008854:	8013      	strh	r3, [r2, #0]
 8008856:	e215      	b.n	8008c84 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008858:	687c      	ldr	r4, [r7, #4]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008860:	b29b      	uxth	r3, r3
 8008862:	441c      	add	r4, r3
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	00db      	lsls	r3, r3, #3
 800886a:	4423      	add	r3, r4
 800886c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008870:	461c      	mov	r4, r3
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	88db      	ldrh	r3, [r3, #6]
 8008876:	085b      	lsrs	r3, r3, #1
 8008878:	b29b      	uxth	r3, r3
 800887a:	005b      	lsls	r3, r3, #1
 800887c:	b29b      	uxth	r3, r3
 800887e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008880:	687c      	ldr	r4, [r7, #4]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008888:	b29b      	uxth	r3, r3
 800888a:	441c      	add	r4, r3
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	00db      	lsls	r3, r3, #3
 8008892:	4423      	add	r3, r4
 8008894:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008898:	461c      	mov	r4, r3
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d10e      	bne.n	80088c0 <USB_ActivateEndpoint+0x20c>
 80088a2:	8823      	ldrh	r3, [r4, #0]
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	8023      	strh	r3, [r4, #0]
 80088ae:	8823      	ldrh	r3, [r4, #0]
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	8023      	strh	r3, [r4, #0]
 80088be:	e02d      	b.n	800891c <USB_ActivateEndpoint+0x268>
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	2b3e      	cmp	r3, #62	; 0x3e
 80088c6:	d812      	bhi.n	80088ee <USB_ActivateEndpoint+0x23a>
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	085b      	lsrs	r3, r3, #1
 80088ce:	60bb      	str	r3, [r7, #8]
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	f003 0301 	and.w	r3, r3, #1
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d002      	beq.n	80088e2 <USB_ActivateEndpoint+0x22e>
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	3301      	adds	r3, #1
 80088e0:	60bb      	str	r3, [r7, #8]
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	029b      	lsls	r3, r3, #10
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	8023      	strh	r3, [r4, #0]
 80088ec:	e016      	b.n	800891c <USB_ActivateEndpoint+0x268>
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	095b      	lsrs	r3, r3, #5
 80088f4:	60bb      	str	r3, [r7, #8]
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	f003 031f 	and.w	r3, r3, #31
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d102      	bne.n	8008908 <USB_ActivateEndpoint+0x254>
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	3b01      	subs	r3, #1
 8008906:	60bb      	str	r3, [r7, #8]
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	b29b      	uxth	r3, r3
 800890c:	029b      	lsls	r3, r3, #10
 800890e:	b29b      	uxth	r3, r3
 8008910:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008914:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008918:	b29b      	uxth	r3, r3
 800891a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	4413      	add	r3, r2
 8008926:	881b      	ldrh	r3, [r3, #0]
 8008928:	b29c      	uxth	r4, r3
 800892a:	4623      	mov	r3, r4
 800892c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008930:	2b00      	cmp	r3, #0
 8008932:	d014      	beq.n	800895e <USB_ActivateEndpoint+0x2aa>
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4413      	add	r3, r2
 800893e:	881b      	ldrh	r3, [r3, #0]
 8008940:	b29b      	uxth	r3, r3
 8008942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800894a:	b29c      	uxth	r4, r3
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	441a      	add	r2, r3
 8008956:	4b12      	ldr	r3, [pc, #72]	; (80089a0 <USB_ActivateEndpoint+0x2ec>)
 8008958:	4323      	orrs	r3, r4
 800895a:	b29b      	uxth	r3, r3
 800895c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	4413      	add	r3, r2
 8008968:	881b      	ldrh	r3, [r3, #0]
 800896a:	b29b      	uxth	r3, r3
 800896c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008974:	b29c      	uxth	r4, r3
 8008976:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800897a:	b29c      	uxth	r4, r3
 800897c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008980:	b29c      	uxth	r4, r3
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	441a      	add	r2, r3
 800898c:	4b02      	ldr	r3, [pc, #8]	; (8008998 <USB_ActivateEndpoint+0x2e4>)
 800898e:	4323      	orrs	r3, r4
 8008990:	b29b      	uxth	r3, r3
 8008992:	8013      	strh	r3, [r2, #0]
 8008994:	e176      	b.n	8008c84 <USB_ActivateEndpoint+0x5d0>
 8008996:	bf00      	nop
 8008998:	ffff8080 	.word	0xffff8080
 800899c:	ffff80c0 	.word	0xffff80c0
 80089a0:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4413      	add	r3, r2
 80089ae:	881b      	ldrh	r3, [r3, #0]
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ba:	b29c      	uxth	r4, r3
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	441a      	add	r2, r3
 80089c6:	4b96      	ldr	r3, [pc, #600]	; (8008c20 <USB_ActivateEndpoint+0x56c>)
 80089c8:	4323      	orrs	r3, r4
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80089ce:	687c      	ldr	r4, [r7, #4]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	441c      	add	r4, r3
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	00db      	lsls	r3, r3, #3
 80089e0:	4423      	add	r3, r4
 80089e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089e6:	461c      	mov	r4, r3
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	891b      	ldrh	r3, [r3, #8]
 80089ec:	085b      	lsrs	r3, r3, #1
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	005b      	lsls	r3, r3, #1
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	8023      	strh	r3, [r4, #0]
 80089f6:	687c      	ldr	r4, [r7, #4]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	441c      	add	r4, r3
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	00db      	lsls	r3, r3, #3
 8008a08:	4423      	add	r3, r4
 8008a0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a0e:	461c      	mov	r4, r3
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	895b      	ldrh	r3, [r3, #10]
 8008a14:	085b      	lsrs	r3, r3, #1
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	005b      	lsls	r3, r3, #1
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	785b      	ldrb	r3, [r3, #1]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f040 8088 	bne.w	8008b38 <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4413      	add	r3, r2
 8008a32:	881b      	ldrh	r3, [r3, #0]
 8008a34:	b29c      	uxth	r4, r3
 8008a36:	4623      	mov	r3, r4
 8008a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d014      	beq.n	8008a6a <USB_ActivateEndpoint+0x3b6>
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4413      	add	r3, r2
 8008a4a:	881b      	ldrh	r3, [r3, #0]
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a56:	b29c      	uxth	r4, r3
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	441a      	add	r2, r3
 8008a62:	4b70      	ldr	r3, [pc, #448]	; (8008c24 <USB_ActivateEndpoint+0x570>)
 8008a64:	4323      	orrs	r3, r4
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4413      	add	r3, r2
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	b29c      	uxth	r4, r3
 8008a78:	4623      	mov	r3, r4
 8008a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d014      	beq.n	8008aac <USB_ActivateEndpoint+0x3f8>
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4413      	add	r3, r2
 8008a8c:	881b      	ldrh	r3, [r3, #0]
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a98:	b29c      	uxth	r4, r3
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	441a      	add	r2, r3
 8008aa4:	4b60      	ldr	r3, [pc, #384]	; (8008c28 <USB_ActivateEndpoint+0x574>)
 8008aa6:	4323      	orrs	r3, r4
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	4413      	add	r3, r2
 8008ab6:	881b      	ldrh	r3, [r3, #0]
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ac2:	b29c      	uxth	r4, r3
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	441a      	add	r2, r3
 8008ace:	4b56      	ldr	r3, [pc, #344]	; (8008c28 <USB_ActivateEndpoint+0x574>)
 8008ad0:	4323      	orrs	r3, r4
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4413      	add	r3, r2
 8008ae0:	881b      	ldrh	r3, [r3, #0]
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aec:	b29c      	uxth	r4, r3
 8008aee:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008af2:	b29c      	uxth	r4, r3
 8008af4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008af8:	b29c      	uxth	r4, r3
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	441a      	add	r2, r3
 8008b04:	4b49      	ldr	r3, [pc, #292]	; (8008c2c <USB_ActivateEndpoint+0x578>)
 8008b06:	4323      	orrs	r3, r4
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	881b      	ldrh	r3, [r3, #0]
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b22:	b29c      	uxth	r4, r3
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	441a      	add	r2, r3
 8008b2e:	4b3f      	ldr	r3, [pc, #252]	; (8008c2c <USB_ActivateEndpoint+0x578>)
 8008b30:	4323      	orrs	r3, r4
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	8013      	strh	r3, [r2, #0]
 8008b36:	e0a5      	b.n	8008c84 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	4413      	add	r3, r2
 8008b42:	881b      	ldrh	r3, [r3, #0]
 8008b44:	b29c      	uxth	r4, r3
 8008b46:	4623      	mov	r3, r4
 8008b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d014      	beq.n	8008b7a <USB_ActivateEndpoint+0x4c6>
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b66:	b29c      	uxth	r4, r3
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	441a      	add	r2, r3
 8008b72:	4b2c      	ldr	r3, [pc, #176]	; (8008c24 <USB_ActivateEndpoint+0x570>)
 8008b74:	4323      	orrs	r3, r4
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4413      	add	r3, r2
 8008b84:	881b      	ldrh	r3, [r3, #0]
 8008b86:	b29c      	uxth	r4, r3
 8008b88:	4623      	mov	r3, r4
 8008b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d014      	beq.n	8008bbc <USB_ActivateEndpoint+0x508>
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	4413      	add	r3, r2
 8008b9c:	881b      	ldrh	r3, [r3, #0]
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ba8:	b29c      	uxth	r4, r3
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	441a      	add	r2, r3
 8008bb4:	4b1c      	ldr	r3, [pc, #112]	; (8008c28 <USB_ActivateEndpoint+0x574>)
 8008bb6:	4323      	orrs	r3, r4
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	4413      	add	r3, r2
 8008bc6:	881b      	ldrh	r3, [r3, #0]
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bd2:	b29c      	uxth	r4, r3
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	441a      	add	r2, r3
 8008bde:	4b11      	ldr	r3, [pc, #68]	; (8008c24 <USB_ActivateEndpoint+0x570>)
 8008be0:	4323      	orrs	r3, r4
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	78db      	ldrb	r3, [r3, #3]
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d020      	beq.n	8008c30 <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4413      	add	r3, r2
 8008bf8:	881b      	ldrh	r3, [r3, #0]
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c04:	b29c      	uxth	r4, r3
 8008c06:	f084 0320 	eor.w	r3, r4, #32
 8008c0a:	b29c      	uxth	r4, r3
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	441a      	add	r2, r3
 8008c16:	4b05      	ldr	r3, [pc, #20]	; (8008c2c <USB_ActivateEndpoint+0x578>)
 8008c18:	4323      	orrs	r3, r4
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	8013      	strh	r3, [r2, #0]
 8008c1e:	e01c      	b.n	8008c5a <USB_ActivateEndpoint+0x5a6>
 8008c20:	ffff8180 	.word	0xffff8180
 8008c24:	ffffc080 	.word	0xffffc080
 8008c28:	ffff80c0 	.word	0xffff80c0
 8008c2c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4413      	add	r3, r2
 8008c3a:	881b      	ldrh	r3, [r3, #0]
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c46:	b29c      	uxth	r4, r3
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	441a      	add	r2, r3
 8008c52:	4b0f      	ldr	r3, [pc, #60]	; (8008c90 <USB_ActivateEndpoint+0x5dc>)
 8008c54:	4323      	orrs	r3, r4
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4413      	add	r3, r2
 8008c64:	881b      	ldrh	r3, [r3, #0]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c70:	b29c      	uxth	r4, r3
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	441a      	add	r2, r3
 8008c7c:	4b04      	ldr	r3, [pc, #16]	; (8008c90 <USB_ActivateEndpoint+0x5dc>)
 8008c7e:	4323      	orrs	r3, r4
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bc90      	pop	{r4, r7}
 8008c8e:	4770      	bx	lr
 8008c90:	ffff8080 	.word	0xffff8080

08008c94 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c94:	b490      	push	{r4, r7}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	7b1b      	ldrb	r3, [r3, #12]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d171      	bne.n	8008d8a <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	785b      	ldrb	r3, [r3, #1]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d036      	beq.n	8008d1c <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4413      	add	r3, r2
 8008cb8:	881b      	ldrh	r3, [r3, #0]
 8008cba:	b29c      	uxth	r4, r3
 8008cbc:	4623      	mov	r3, r4
 8008cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d014      	beq.n	8008cf0 <USB_DeactivateEndpoint+0x5c>
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	4413      	add	r3, r2
 8008cd0:	881b      	ldrh	r3, [r3, #0]
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cdc:	b29c      	uxth	r4, r3
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	441a      	add	r2, r3
 8008ce8:	4b6b      	ldr	r3, [pc, #428]	; (8008e98 <USB_DeactivateEndpoint+0x204>)
 8008cea:	4323      	orrs	r3, r4
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4413      	add	r3, r2
 8008cfa:	881b      	ldrh	r3, [r3, #0]
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d06:	b29c      	uxth	r4, r3
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	441a      	add	r2, r3
 8008d12:	4b62      	ldr	r3, [pc, #392]	; (8008e9c <USB_DeactivateEndpoint+0x208>)
 8008d14:	4323      	orrs	r3, r4
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	8013      	strh	r3, [r2, #0]
 8008d1a:	e144      	b.n	8008fa6 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4413      	add	r3, r2
 8008d26:	881b      	ldrh	r3, [r3, #0]
 8008d28:	b29c      	uxth	r4, r3
 8008d2a:	4623      	mov	r3, r4
 8008d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d014      	beq.n	8008d5e <USB_DeactivateEndpoint+0xca>
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	4413      	add	r3, r2
 8008d3e:	881b      	ldrh	r3, [r3, #0]
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d4a:	b29c      	uxth	r4, r3
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	441a      	add	r2, r3
 8008d56:	4b52      	ldr	r3, [pc, #328]	; (8008ea0 <USB_DeactivateEndpoint+0x20c>)
 8008d58:	4323      	orrs	r3, r4
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	4413      	add	r3, r2
 8008d68:	881b      	ldrh	r3, [r3, #0]
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d74:	b29c      	uxth	r4, r3
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	441a      	add	r2, r3
 8008d80:	4b46      	ldr	r3, [pc, #280]	; (8008e9c <USB_DeactivateEndpoint+0x208>)
 8008d82:	4323      	orrs	r3, r4
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	8013      	strh	r3, [r2, #0]
 8008d88:	e10d      	b.n	8008fa6 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	785b      	ldrb	r3, [r3, #1]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f040 8088 	bne.w	8008ea4 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	4413      	add	r3, r2
 8008d9e:	881b      	ldrh	r3, [r3, #0]
 8008da0:	b29c      	uxth	r4, r3
 8008da2:	4623      	mov	r3, r4
 8008da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d014      	beq.n	8008dd6 <USB_DeactivateEndpoint+0x142>
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4413      	add	r3, r2
 8008db6:	881b      	ldrh	r3, [r3, #0]
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dc2:	b29c      	uxth	r4, r3
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	441a      	add	r2, r3
 8008dce:	4b34      	ldr	r3, [pc, #208]	; (8008ea0 <USB_DeactivateEndpoint+0x20c>)
 8008dd0:	4323      	orrs	r3, r4
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	881b      	ldrh	r3, [r3, #0]
 8008de2:	b29c      	uxth	r4, r3
 8008de4:	4623      	mov	r3, r4
 8008de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d014      	beq.n	8008e18 <USB_DeactivateEndpoint+0x184>
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4413      	add	r3, r2
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e04:	b29c      	uxth	r4, r3
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	441a      	add	r2, r3
 8008e10:	4b21      	ldr	r3, [pc, #132]	; (8008e98 <USB_DeactivateEndpoint+0x204>)
 8008e12:	4323      	orrs	r3, r4
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	4413      	add	r3, r2
 8008e22:	881b      	ldrh	r3, [r3, #0]
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e2e:	b29c      	uxth	r4, r3
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	441a      	add	r2, r3
 8008e3a:	4b17      	ldr	r3, [pc, #92]	; (8008e98 <USB_DeactivateEndpoint+0x204>)
 8008e3c:	4323      	orrs	r3, r4
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	4413      	add	r3, r2
 8008e4c:	881b      	ldrh	r3, [r3, #0]
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e58:	b29c      	uxth	r4, r3
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	441a      	add	r2, r3
 8008e64:	4b0d      	ldr	r3, [pc, #52]	; (8008e9c <USB_DeactivateEndpoint+0x208>)
 8008e66:	4323      	orrs	r3, r4
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4413      	add	r3, r2
 8008e76:	881b      	ldrh	r3, [r3, #0]
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e82:	b29c      	uxth	r4, r3
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	441a      	add	r2, r3
 8008e8e:	4b03      	ldr	r3, [pc, #12]	; (8008e9c <USB_DeactivateEndpoint+0x208>)
 8008e90:	4323      	orrs	r3, r4
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	8013      	strh	r3, [r2, #0]
 8008e96:	e086      	b.n	8008fa6 <USB_DeactivateEndpoint+0x312>
 8008e98:	ffff80c0 	.word	0xffff80c0
 8008e9c:	ffff8080 	.word	0xffff8080
 8008ea0:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	4413      	add	r3, r2
 8008eae:	881b      	ldrh	r3, [r3, #0]
 8008eb0:	b29c      	uxth	r4, r3
 8008eb2:	4623      	mov	r3, r4
 8008eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d014      	beq.n	8008ee6 <USB_DeactivateEndpoint+0x252>
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	4413      	add	r3, r2
 8008ec6:	881b      	ldrh	r3, [r3, #0]
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ed2:	b29c      	uxth	r4, r3
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	441a      	add	r2, r3
 8008ede:	4b35      	ldr	r3, [pc, #212]	; (8008fb4 <USB_DeactivateEndpoint+0x320>)
 8008ee0:	4323      	orrs	r3, r4
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4413      	add	r3, r2
 8008ef0:	881b      	ldrh	r3, [r3, #0]
 8008ef2:	b29c      	uxth	r4, r3
 8008ef4:	4623      	mov	r3, r4
 8008ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d014      	beq.n	8008f28 <USB_DeactivateEndpoint+0x294>
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	4413      	add	r3, r2
 8008f08:	881b      	ldrh	r3, [r3, #0]
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f14:	b29c      	uxth	r4, r3
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	441a      	add	r2, r3
 8008f20:	4b25      	ldr	r3, [pc, #148]	; (8008fb8 <USB_DeactivateEndpoint+0x324>)
 8008f22:	4323      	orrs	r3, r4
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	4413      	add	r3, r2
 8008f32:	881b      	ldrh	r3, [r3, #0]
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f3e:	b29c      	uxth	r4, r3
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	441a      	add	r2, r3
 8008f4a:	4b1a      	ldr	r3, [pc, #104]	; (8008fb4 <USB_DeactivateEndpoint+0x320>)
 8008f4c:	4323      	orrs	r3, r4
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4413      	add	r3, r2
 8008f5c:	881b      	ldrh	r3, [r3, #0]
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f68:	b29c      	uxth	r4, r3
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	441a      	add	r2, r3
 8008f74:	4b11      	ldr	r3, [pc, #68]	; (8008fbc <USB_DeactivateEndpoint+0x328>)
 8008f76:	4323      	orrs	r3, r4
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	4413      	add	r3, r2
 8008f86:	881b      	ldrh	r3, [r3, #0]
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f92:	b29c      	uxth	r4, r3
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	441a      	add	r2, r3
 8008f9e:	4b07      	ldr	r3, [pc, #28]	; (8008fbc <USB_DeactivateEndpoint+0x328>)
 8008fa0:	4323      	orrs	r3, r4
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bc90      	pop	{r4, r7}
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	ffffc080 	.word	0xffffc080
 8008fb8:	ffff80c0 	.word	0xffff80c0
 8008fbc:	ffff8080 	.word	0xffff8080

08008fc0 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008fc0:	b590      	push	{r4, r7, lr}
 8008fc2:	b08d      	sub	sp, #52	; 0x34
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	785b      	ldrb	r3, [r3, #1]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	f040 8160 	bne.w	8009294 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	699a      	ldr	r2, [r3, #24]
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d909      	bls.n	8008ff4 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	699a      	ldr	r2, [r3, #24]
 8008fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fec:	1ad2      	subs	r2, r2, r3
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	619a      	str	r2, [r3, #24]
 8008ff2:	e005      	b.n	8009000 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	699b      	ldr	r3, [r3, #24]
 8008ff8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	7b1b      	ldrb	r3, [r3, #12]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d119      	bne.n	800903c <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	6959      	ldr	r1, [r3, #20]
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	88da      	ldrh	r2, [r3, #6]
 8009010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009012:	b29b      	uxth	r3, r3
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 fba8 	bl	800976a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800901a:	687c      	ldr	r4, [r7, #4]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009022:	b29b      	uxth	r3, r3
 8009024:	441c      	add	r4, r3
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	00db      	lsls	r3, r3, #3
 800902c:	4423      	add	r3, r4
 800902e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009032:	461c      	mov	r4, r3
 8009034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009036:	b29b      	uxth	r3, r3
 8009038:	8023      	strh	r3, [r4, #0]
 800903a:	e10f      	b.n	800925c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	4413      	add	r3, r2
 8009046:	881b      	ldrh	r3, [r3, #0]
 8009048:	b29b      	uxth	r3, r3
 800904a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800904e:	2b00      	cmp	r3, #0
 8009050:	d065      	beq.n	800911e <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009052:	687c      	ldr	r4, [r7, #4]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	785b      	ldrb	r3, [r3, #1]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d148      	bne.n	80090ee <USB_EPStartXfer+0x12e>
 800905c:	687c      	ldr	r4, [r7, #4]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009064:	b29b      	uxth	r3, r3
 8009066:	441c      	add	r4, r3
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	00db      	lsls	r3, r3, #3
 800906e:	4423      	add	r3, r4
 8009070:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009074:	461c      	mov	r4, r3
 8009076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10e      	bne.n	800909a <USB_EPStartXfer+0xda>
 800907c:	8823      	ldrh	r3, [r4, #0]
 800907e:	b29b      	uxth	r3, r3
 8009080:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009084:	b29b      	uxth	r3, r3
 8009086:	8023      	strh	r3, [r4, #0]
 8009088:	8823      	ldrh	r3, [r4, #0]
 800908a:	b29b      	uxth	r3, r3
 800908c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009094:	b29b      	uxth	r3, r3
 8009096:	8023      	strh	r3, [r4, #0]
 8009098:	e03d      	b.n	8009116 <USB_EPStartXfer+0x156>
 800909a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909c:	2b3e      	cmp	r3, #62	; 0x3e
 800909e:	d810      	bhi.n	80090c2 <USB_EPStartXfer+0x102>
 80090a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a2:	085b      	lsrs	r3, r3, #1
 80090a4:	627b      	str	r3, [r7, #36]	; 0x24
 80090a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d002      	beq.n	80090b6 <USB_EPStartXfer+0xf6>
 80090b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b2:	3301      	adds	r3, #1
 80090b4:	627b      	str	r3, [r7, #36]	; 0x24
 80090b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	029b      	lsls	r3, r3, #10
 80090bc:	b29b      	uxth	r3, r3
 80090be:	8023      	strh	r3, [r4, #0]
 80090c0:	e029      	b.n	8009116 <USB_EPStartXfer+0x156>
 80090c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c4:	095b      	lsrs	r3, r3, #5
 80090c6:	627b      	str	r3, [r7, #36]	; 0x24
 80090c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ca:	f003 031f 	and.w	r3, r3, #31
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d102      	bne.n	80090d8 <USB_EPStartXfer+0x118>
 80090d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d4:	3b01      	subs	r3, #1
 80090d6:	627b      	str	r3, [r7, #36]	; 0x24
 80090d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090da:	b29b      	uxth	r3, r3
 80090dc:	029b      	lsls	r3, r3, #10
 80090de:	b29b      	uxth	r3, r3
 80090e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	8023      	strh	r3, [r4, #0]
 80090ec:	e013      	b.n	8009116 <USB_EPStartXfer+0x156>
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	785b      	ldrb	r3, [r3, #1]
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d10f      	bne.n	8009116 <USB_EPStartXfer+0x156>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	441c      	add	r4, r3
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	00db      	lsls	r3, r3, #3
 8009106:	4423      	add	r3, r4
 8009108:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800910c:	60fb      	str	r3, [r7, #12]
 800910e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009110:	b29a      	uxth	r2, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	895b      	ldrh	r3, [r3, #10]
 800911a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800911c:	e063      	b.n	80091e6 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	785b      	ldrb	r3, [r3, #1]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d148      	bne.n	80091b8 <USB_EPStartXfer+0x1f8>
 8009126:	687c      	ldr	r4, [r7, #4]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800912e:	b29b      	uxth	r3, r3
 8009130:	441c      	add	r4, r3
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	00db      	lsls	r3, r3, #3
 8009138:	4423      	add	r3, r4
 800913a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800913e:	461c      	mov	r4, r3
 8009140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009142:	2b00      	cmp	r3, #0
 8009144:	d10e      	bne.n	8009164 <USB_EPStartXfer+0x1a4>
 8009146:	8823      	ldrh	r3, [r4, #0]
 8009148:	b29b      	uxth	r3, r3
 800914a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800914e:	b29b      	uxth	r3, r3
 8009150:	8023      	strh	r3, [r4, #0]
 8009152:	8823      	ldrh	r3, [r4, #0]
 8009154:	b29b      	uxth	r3, r3
 8009156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800915a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800915e:	b29b      	uxth	r3, r3
 8009160:	8023      	strh	r3, [r4, #0]
 8009162:	e03d      	b.n	80091e0 <USB_EPStartXfer+0x220>
 8009164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009166:	2b3e      	cmp	r3, #62	; 0x3e
 8009168:	d810      	bhi.n	800918c <USB_EPStartXfer+0x1cc>
 800916a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916c:	085b      	lsrs	r3, r3, #1
 800916e:	623b      	str	r3, [r7, #32]
 8009170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009172:	f003 0301 	and.w	r3, r3, #1
 8009176:	2b00      	cmp	r3, #0
 8009178:	d002      	beq.n	8009180 <USB_EPStartXfer+0x1c0>
 800917a:	6a3b      	ldr	r3, [r7, #32]
 800917c:	3301      	adds	r3, #1
 800917e:	623b      	str	r3, [r7, #32]
 8009180:	6a3b      	ldr	r3, [r7, #32]
 8009182:	b29b      	uxth	r3, r3
 8009184:	029b      	lsls	r3, r3, #10
 8009186:	b29b      	uxth	r3, r3
 8009188:	8023      	strh	r3, [r4, #0]
 800918a:	e029      	b.n	80091e0 <USB_EPStartXfer+0x220>
 800918c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918e:	095b      	lsrs	r3, r3, #5
 8009190:	623b      	str	r3, [r7, #32]
 8009192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009194:	f003 031f 	and.w	r3, r3, #31
 8009198:	2b00      	cmp	r3, #0
 800919a:	d102      	bne.n	80091a2 <USB_EPStartXfer+0x1e2>
 800919c:	6a3b      	ldr	r3, [r7, #32]
 800919e:	3b01      	subs	r3, #1
 80091a0:	623b      	str	r3, [r7, #32]
 80091a2:	6a3b      	ldr	r3, [r7, #32]
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	029b      	lsls	r3, r3, #10
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	8023      	strh	r3, [r4, #0]
 80091b6:	e013      	b.n	80091e0 <USB_EPStartXfer+0x220>
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	785b      	ldrb	r3, [r3, #1]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d10f      	bne.n	80091e0 <USB_EPStartXfer+0x220>
 80091c0:	687c      	ldr	r4, [r7, #4]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	441c      	add	r4, r3
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	00db      	lsls	r3, r3, #3
 80091d2:	4423      	add	r3, r4
 80091d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80091d8:	461c      	mov	r4, r3
 80091da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091dc:	b29b      	uxth	r3, r3
 80091de:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	891b      	ldrh	r3, [r3, #8]
 80091e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	6959      	ldr	r1, [r3, #20]
 80091ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 faba 	bl	800976a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	785b      	ldrb	r3, [r3, #1]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d115      	bne.n	800922a <USB_EPStartXfer+0x26a>
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4413      	add	r3, r2
 8009208:	881b      	ldrh	r3, [r3, #0]
 800920a:	b29b      	uxth	r3, r3
 800920c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009214:	b29c      	uxth	r4, r3
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	441a      	add	r2, r3
 8009220:	4b9a      	ldr	r3, [pc, #616]	; (800948c <USB_EPStartXfer+0x4cc>)
 8009222:	4323      	orrs	r3, r4
 8009224:	b29b      	uxth	r3, r3
 8009226:	8013      	strh	r3, [r2, #0]
 8009228:	e018      	b.n	800925c <USB_EPStartXfer+0x29c>
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	785b      	ldrb	r3, [r3, #1]
 800922e:	2b01      	cmp	r3, #1
 8009230:	d114      	bne.n	800925c <USB_EPStartXfer+0x29c>
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	4413      	add	r3, r2
 800923c:	881b      	ldrh	r3, [r3, #0]
 800923e:	b29b      	uxth	r3, r3
 8009240:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009248:	b29c      	uxth	r4, r3
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	441a      	add	r2, r3
 8009254:	4b8e      	ldr	r3, [pc, #568]	; (8009490 <USB_EPStartXfer+0x4d0>)
 8009256:	4323      	orrs	r3, r4
 8009258:	b29b      	uxth	r3, r3
 800925a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	4413      	add	r3, r2
 8009266:	881b      	ldrh	r3, [r3, #0]
 8009268:	b29b      	uxth	r3, r3
 800926a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800926e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009272:	b29c      	uxth	r4, r3
 8009274:	f084 0310 	eor.w	r3, r4, #16
 8009278:	b29c      	uxth	r4, r3
 800927a:	f084 0320 	eor.w	r3, r4, #32
 800927e:	b29c      	uxth	r4, r3
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	441a      	add	r2, r3
 800928a:	4b82      	ldr	r3, [pc, #520]	; (8009494 <USB_EPStartXfer+0x4d4>)
 800928c:	4323      	orrs	r3, r4
 800928e:	b29b      	uxth	r3, r3
 8009290:	8013      	strh	r3, [r2, #0]
 8009292:	e146      	b.n	8009522 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	699a      	ldr	r2, [r3, #24]
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	429a      	cmp	r2, r3
 800929e:	d909      	bls.n	80092b4 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	699a      	ldr	r2, [r3, #24]
 80092aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ac:	1ad2      	subs	r2, r2, r3
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	619a      	str	r2, [r3, #24]
 80092b2:	e005      	b.n	80092c0 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	699b      	ldr	r3, [r3, #24]
 80092b8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	2200      	movs	r2, #0
 80092be:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	7b1b      	ldrb	r3, [r3, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d148      	bne.n	800935a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80092c8:	687c      	ldr	r4, [r7, #4]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	441c      	add	r4, r3
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	00db      	lsls	r3, r3, #3
 80092da:	4423      	add	r3, r4
 80092dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80092e0:	461c      	mov	r4, r3
 80092e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10e      	bne.n	8009306 <USB_EPStartXfer+0x346>
 80092e8:	8823      	ldrh	r3, [r4, #0]
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	8023      	strh	r3, [r4, #0]
 80092f4:	8823      	ldrh	r3, [r4, #0]
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009300:	b29b      	uxth	r3, r3
 8009302:	8023      	strh	r3, [r4, #0]
 8009304:	e0f2      	b.n	80094ec <USB_EPStartXfer+0x52c>
 8009306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009308:	2b3e      	cmp	r3, #62	; 0x3e
 800930a:	d810      	bhi.n	800932e <USB_EPStartXfer+0x36e>
 800930c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930e:	085b      	lsrs	r3, r3, #1
 8009310:	61fb      	str	r3, [r7, #28]
 8009312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009314:	f003 0301 	and.w	r3, r3, #1
 8009318:	2b00      	cmp	r3, #0
 800931a:	d002      	beq.n	8009322 <USB_EPStartXfer+0x362>
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	3301      	adds	r3, #1
 8009320:	61fb      	str	r3, [r7, #28]
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	b29b      	uxth	r3, r3
 8009326:	029b      	lsls	r3, r3, #10
 8009328:	b29b      	uxth	r3, r3
 800932a:	8023      	strh	r3, [r4, #0]
 800932c:	e0de      	b.n	80094ec <USB_EPStartXfer+0x52c>
 800932e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009330:	095b      	lsrs	r3, r3, #5
 8009332:	61fb      	str	r3, [r7, #28]
 8009334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009336:	f003 031f 	and.w	r3, r3, #31
 800933a:	2b00      	cmp	r3, #0
 800933c:	d102      	bne.n	8009344 <USB_EPStartXfer+0x384>
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	3b01      	subs	r3, #1
 8009342:	61fb      	str	r3, [r7, #28]
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	b29b      	uxth	r3, r3
 8009348:	029b      	lsls	r3, r3, #10
 800934a:	b29b      	uxth	r3, r3
 800934c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009354:	b29b      	uxth	r3, r3
 8009356:	8023      	strh	r3, [r4, #0]
 8009358:	e0c8      	b.n	80094ec <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	785b      	ldrb	r3, [r3, #1]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d148      	bne.n	80093f4 <USB_EPStartXfer+0x434>
 8009362:	687c      	ldr	r4, [r7, #4]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800936a:	b29b      	uxth	r3, r3
 800936c:	441c      	add	r4, r3
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	00db      	lsls	r3, r3, #3
 8009374:	4423      	add	r3, r4
 8009376:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800937a:	461c      	mov	r4, r3
 800937c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937e:	2b00      	cmp	r3, #0
 8009380:	d10e      	bne.n	80093a0 <USB_EPStartXfer+0x3e0>
 8009382:	8823      	ldrh	r3, [r4, #0]
 8009384:	b29b      	uxth	r3, r3
 8009386:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800938a:	b29b      	uxth	r3, r3
 800938c:	8023      	strh	r3, [r4, #0]
 800938e:	8823      	ldrh	r3, [r4, #0]
 8009390:	b29b      	uxth	r3, r3
 8009392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800939a:	b29b      	uxth	r3, r3
 800939c:	8023      	strh	r3, [r4, #0]
 800939e:	e03d      	b.n	800941c <USB_EPStartXfer+0x45c>
 80093a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a2:	2b3e      	cmp	r3, #62	; 0x3e
 80093a4:	d810      	bhi.n	80093c8 <USB_EPStartXfer+0x408>
 80093a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a8:	085b      	lsrs	r3, r3, #1
 80093aa:	61bb      	str	r3, [r7, #24]
 80093ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d002      	beq.n	80093bc <USB_EPStartXfer+0x3fc>
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	3301      	adds	r3, #1
 80093ba:	61bb      	str	r3, [r7, #24]
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	b29b      	uxth	r3, r3
 80093c0:	029b      	lsls	r3, r3, #10
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	8023      	strh	r3, [r4, #0]
 80093c6:	e029      	b.n	800941c <USB_EPStartXfer+0x45c>
 80093c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ca:	095b      	lsrs	r3, r3, #5
 80093cc:	61bb      	str	r3, [r7, #24]
 80093ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d0:	f003 031f 	and.w	r3, r3, #31
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d102      	bne.n	80093de <USB_EPStartXfer+0x41e>
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	3b01      	subs	r3, #1
 80093dc:	61bb      	str	r3, [r7, #24]
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	029b      	lsls	r3, r3, #10
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	8023      	strh	r3, [r4, #0]
 80093f2:	e013      	b.n	800941c <USB_EPStartXfer+0x45c>
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	785b      	ldrb	r3, [r3, #1]
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d10f      	bne.n	800941c <USB_EPStartXfer+0x45c>
 80093fc:	687c      	ldr	r4, [r7, #4]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009404:	b29b      	uxth	r3, r3
 8009406:	441c      	add	r4, r3
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	00db      	lsls	r3, r3, #3
 800940e:	4423      	add	r3, r4
 8009410:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009414:	461c      	mov	r4, r3
 8009416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009418:	b29b      	uxth	r3, r3
 800941a:	8023      	strh	r3, [r4, #0]
 800941c:	687c      	ldr	r4, [r7, #4]
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	785b      	ldrb	r3, [r3, #1]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d14e      	bne.n	80094c4 <USB_EPStartXfer+0x504>
 8009426:	687c      	ldr	r4, [r7, #4]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800942e:	b29b      	uxth	r3, r3
 8009430:	441c      	add	r4, r3
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	00db      	lsls	r3, r3, #3
 8009438:	4423      	add	r3, r4
 800943a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800943e:	461c      	mov	r4, r3
 8009440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10e      	bne.n	8009464 <USB_EPStartXfer+0x4a4>
 8009446:	8823      	ldrh	r3, [r4, #0]
 8009448:	b29b      	uxth	r3, r3
 800944a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800944e:	b29b      	uxth	r3, r3
 8009450:	8023      	strh	r3, [r4, #0]
 8009452:	8823      	ldrh	r3, [r4, #0]
 8009454:	b29b      	uxth	r3, r3
 8009456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800945a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800945e:	b29b      	uxth	r3, r3
 8009460:	8023      	strh	r3, [r4, #0]
 8009462:	e043      	b.n	80094ec <USB_EPStartXfer+0x52c>
 8009464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009466:	2b3e      	cmp	r3, #62	; 0x3e
 8009468:	d816      	bhi.n	8009498 <USB_EPStartXfer+0x4d8>
 800946a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946c:	085b      	lsrs	r3, r3, #1
 800946e:	617b      	str	r3, [r7, #20]
 8009470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	2b00      	cmp	r3, #0
 8009478:	d002      	beq.n	8009480 <USB_EPStartXfer+0x4c0>
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	3301      	adds	r3, #1
 800947e:	617b      	str	r3, [r7, #20]
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	b29b      	uxth	r3, r3
 8009484:	029b      	lsls	r3, r3, #10
 8009486:	b29b      	uxth	r3, r3
 8009488:	8023      	strh	r3, [r4, #0]
 800948a:	e02f      	b.n	80094ec <USB_EPStartXfer+0x52c>
 800948c:	ffff80c0 	.word	0xffff80c0
 8009490:	ffffc080 	.word	0xffffc080
 8009494:	ffff8080 	.word	0xffff8080
 8009498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949a:	095b      	lsrs	r3, r3, #5
 800949c:	617b      	str	r3, [r7, #20]
 800949e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a0:	f003 031f 	and.w	r3, r3, #31
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d102      	bne.n	80094ae <USB_EPStartXfer+0x4ee>
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	3b01      	subs	r3, #1
 80094ac:	617b      	str	r3, [r7, #20]
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	029b      	lsls	r3, r3, #10
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094be:	b29b      	uxth	r3, r3
 80094c0:	8023      	strh	r3, [r4, #0]
 80094c2:	e013      	b.n	80094ec <USB_EPStartXfer+0x52c>
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	785b      	ldrb	r3, [r3, #1]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d10f      	bne.n	80094ec <USB_EPStartXfer+0x52c>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	441c      	add	r4, r3
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	00db      	lsls	r3, r3, #3
 80094dc:	4423      	add	r3, r4
 80094de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80094e2:	613b      	str	r3, [r7, #16]
 80094e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	881b      	ldrh	r3, [r3, #0]
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009502:	b29c      	uxth	r4, r3
 8009504:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8009508:	b29c      	uxth	r4, r3
 800950a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800950e:	b29c      	uxth	r4, r3
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	441a      	add	r2, r3
 800951a:	4b04      	ldr	r3, [pc, #16]	; (800952c <USB_EPStartXfer+0x56c>)
 800951c:	4323      	orrs	r3, r4
 800951e:	b29b      	uxth	r3, r3
 8009520:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3734      	adds	r7, #52	; 0x34
 8009528:	46bd      	mov	sp, r7
 800952a:	bd90      	pop	{r4, r7, pc}
 800952c:	ffff8080 	.word	0xffff8080

08009530 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009530:	b490      	push	{r4, r7}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	785b      	ldrb	r3, [r3, #1]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d018      	beq.n	8009574 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4413      	add	r3, r2
 800954c:	881b      	ldrh	r3, [r3, #0]
 800954e:	b29b      	uxth	r3, r3
 8009550:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009558:	b29c      	uxth	r4, r3
 800955a:	f084 0310 	eor.w	r3, r4, #16
 800955e:	b29c      	uxth	r4, r3
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	441a      	add	r2, r3
 800956a:	4b11      	ldr	r3, [pc, #68]	; (80095b0 <USB_EPSetStall+0x80>)
 800956c:	4323      	orrs	r3, r4
 800956e:	b29b      	uxth	r3, r3
 8009570:	8013      	strh	r3, [r2, #0]
 8009572:	e017      	b.n	80095a4 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4413      	add	r3, r2
 800957e:	881b      	ldrh	r3, [r3, #0]
 8009580:	b29b      	uxth	r3, r3
 8009582:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800958a:	b29c      	uxth	r4, r3
 800958c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8009590:	b29c      	uxth	r4, r3
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	441a      	add	r2, r3
 800959c:	4b04      	ldr	r3, [pc, #16]	; (80095b0 <USB_EPSetStall+0x80>)
 800959e:	4323      	orrs	r3, r4
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3708      	adds	r7, #8
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bc90      	pop	{r4, r7}
 80095ae:	4770      	bx	lr
 80095b0:	ffff8080 	.word	0xffff8080

080095b4 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80095b4:	b490      	push	{r4, r7}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	7b1b      	ldrb	r3, [r3, #12]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d17d      	bne.n	80096c2 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	785b      	ldrb	r3, [r3, #1]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d03d      	beq.n	800964a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	4413      	add	r3, r2
 80095d8:	881b      	ldrh	r3, [r3, #0]
 80095da:	b29c      	uxth	r4, r3
 80095dc:	4623      	mov	r3, r4
 80095de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d014      	beq.n	8009610 <USB_EPClearStall+0x5c>
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	4413      	add	r3, r2
 80095f0:	881b      	ldrh	r3, [r3, #0]
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095fc:	b29c      	uxth	r4, r3
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	441a      	add	r2, r3
 8009608:	4b31      	ldr	r3, [pc, #196]	; (80096d0 <USB_EPClearStall+0x11c>)
 800960a:	4323      	orrs	r3, r4
 800960c:	b29b      	uxth	r3, r3
 800960e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	78db      	ldrb	r3, [r3, #3]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d054      	beq.n	80096c2 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	4413      	add	r3, r2
 8009622:	881b      	ldrh	r3, [r3, #0]
 8009624:	b29b      	uxth	r3, r3
 8009626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800962a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800962e:	b29c      	uxth	r4, r3
 8009630:	f084 0320 	eor.w	r3, r4, #32
 8009634:	b29c      	uxth	r4, r3
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	441a      	add	r2, r3
 8009640:	4b24      	ldr	r3, [pc, #144]	; (80096d4 <USB_EPClearStall+0x120>)
 8009642:	4323      	orrs	r3, r4
 8009644:	b29b      	uxth	r3, r3
 8009646:	8013      	strh	r3, [r2, #0]
 8009648:	e03b      	b.n	80096c2 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	4413      	add	r3, r2
 8009654:	881b      	ldrh	r3, [r3, #0]
 8009656:	b29c      	uxth	r4, r3
 8009658:	4623      	mov	r3, r4
 800965a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800965e:	2b00      	cmp	r3, #0
 8009660:	d014      	beq.n	800968c <USB_EPClearStall+0xd8>
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	4413      	add	r3, r2
 800966c:	881b      	ldrh	r3, [r3, #0]
 800966e:	b29b      	uxth	r3, r3
 8009670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009678:	b29c      	uxth	r4, r3
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	441a      	add	r2, r3
 8009684:	4b14      	ldr	r3, [pc, #80]	; (80096d8 <USB_EPClearStall+0x124>)
 8009686:	4323      	orrs	r3, r4
 8009688:	b29b      	uxth	r3, r3
 800968a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	4413      	add	r3, r2
 8009696:	881b      	ldrh	r3, [r3, #0]
 8009698:	b29b      	uxth	r3, r3
 800969a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800969e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096a2:	b29c      	uxth	r4, r3
 80096a4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80096a8:	b29c      	uxth	r4, r3
 80096aa:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80096ae:	b29c      	uxth	r4, r3
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	441a      	add	r2, r3
 80096ba:	4b06      	ldr	r3, [pc, #24]	; (80096d4 <USB_EPClearStall+0x120>)
 80096bc:	4323      	orrs	r3, r4
 80096be:	b29b      	uxth	r3, r3
 80096c0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bc90      	pop	{r4, r7}
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	ffff80c0 	.word	0xffff80c0
 80096d4:	ffff8080 	.word	0xffff8080
 80096d8:	ffffc080 	.word	0xffffc080

080096dc <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	460b      	mov	r3, r1
 80096e6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80096e8:	78fb      	ldrb	r3, [r7, #3]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d103      	bne.n	80096f6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2280      	movs	r2, #128	; 0x80
 80096f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80096f6:	2300      	movs	r3, #0
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009712:	b29b      	uxth	r3, r3
 8009714:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009718:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800971c:	b29a      	uxth	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009732:	b480      	push	{r7}
 8009734:	b085      	sub	sp, #20
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009740:	b29b      	uxth	r3, r3
 8009742:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009744:	68fb      	ldr	r3, [r7, #12]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3714      	adds	r7, #20
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr

08009752 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009752:	b480      	push	{r7}
 8009754:	b083      	sub	sp, #12
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
 800975a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	370c      	adds	r7, #12
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr

0800976a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800976a:	b480      	push	{r7}
 800976c:	b08d      	sub	sp, #52	; 0x34
 800976e:	af00      	add	r7, sp, #0
 8009770:	60f8      	str	r0, [r7, #12]
 8009772:	60b9      	str	r1, [r7, #8]
 8009774:	4611      	mov	r1, r2
 8009776:	461a      	mov	r2, r3
 8009778:	460b      	mov	r3, r1
 800977a:	80fb      	strh	r3, [r7, #6]
 800977c:	4613      	mov	r3, r2
 800977e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009780:	88bb      	ldrh	r3, [r7, #4]
 8009782:	3301      	adds	r3, #1
 8009784:	085b      	lsrs	r3, r3, #1
 8009786:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009790:	88fa      	ldrh	r2, [r7, #6]
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	4413      	add	r3, r2
 8009796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800979a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800979c:	6a3b      	ldr	r3, [r7, #32]
 800979e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097a0:	e01b      	b.n	80097da <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80097a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80097a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097aa:	3301      	adds	r3, #1
 80097ac:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80097ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	021b      	lsls	r3, r3, #8
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	461a      	mov	r2, r3
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	4313      	orrs	r3, r2
 80097be:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80097c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ca:	3302      	adds	r3, #2
 80097cc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80097ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d0:	3301      	adds	r3, #1
 80097d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80097d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d6:	3b01      	subs	r3, #1
 80097d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d1e0      	bne.n	80097a2 <USB_WritePMA+0x38>
  }
}
 80097e0:	bf00      	nop
 80097e2:	3734      	adds	r7, #52	; 0x34
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b08b      	sub	sp, #44	; 0x2c
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	4611      	mov	r1, r2
 80097f8:	461a      	mov	r2, r3
 80097fa:	460b      	mov	r3, r1
 80097fc:	80fb      	strh	r3, [r7, #6]
 80097fe:	4613      	mov	r3, r2
 8009800:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009802:	88bb      	ldrh	r3, [r7, #4]
 8009804:	085b      	lsrs	r3, r3, #1
 8009806:	b29b      	uxth	r3, r3
 8009808:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009812:	88fa      	ldrh	r2, [r7, #6]
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800981c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	627b      	str	r3, [r7, #36]	; 0x24
 8009822:	e018      	b.n	8009856 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009824:	6a3b      	ldr	r3, [r7, #32]
 8009826:	881b      	ldrh	r3, [r3, #0]
 8009828:	b29b      	uxth	r3, r3
 800982a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800982c:	6a3b      	ldr	r3, [r7, #32]
 800982e:	3302      	adds	r3, #2
 8009830:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	b2da      	uxtb	r2, r3
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	3301      	adds	r3, #1
 800983e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	0a1b      	lsrs	r3, r3, #8
 8009844:	b2da      	uxtb	r2, r3
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	3301      	adds	r3, #1
 800984e:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8009850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009852:	3b01      	subs	r3, #1
 8009854:	627b      	str	r3, [r7, #36]	; 0x24
 8009856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1e3      	bne.n	8009824 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800985c:	88bb      	ldrh	r3, [r7, #4]
 800985e:	f003 0301 	and.w	r3, r3, #1
 8009862:	b29b      	uxth	r3, r3
 8009864:	2b00      	cmp	r3, #0
 8009866:	d007      	beq.n	8009878 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8009868:	6a3b      	ldr	r3, [r7, #32]
 800986a:	881b      	ldrh	r3, [r3, #0]
 800986c:	b29b      	uxth	r3, r3
 800986e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	b2da      	uxtb	r2, r3
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	701a      	strb	r2, [r3, #0]
  }
}
 8009878:	bf00      	nop
 800987a:	372c      	adds	r7, #44	; 0x2c
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	460b      	mov	r3, r1
 800988e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009890:	2300      	movs	r3, #0
 8009892:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	7c1b      	ldrb	r3, [r3, #16]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d115      	bne.n	80098c8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800989c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098a0:	2202      	movs	r2, #2
 80098a2:	2181      	movs	r1, #129	; 0x81
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f002 ffe6 	bl	800c876 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2201      	movs	r2, #1
 80098ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80098b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098b4:	2202      	movs	r2, #2
 80098b6:	2101      	movs	r1, #1
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f002 ffdc 	bl	800c876 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80098c6:	e012      	b.n	80098ee <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80098c8:	2340      	movs	r3, #64	; 0x40
 80098ca:	2202      	movs	r2, #2
 80098cc:	2181      	movs	r1, #129	; 0x81
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f002 ffd1 	bl	800c876 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80098da:	2340      	movs	r3, #64	; 0x40
 80098dc:	2202      	movs	r2, #2
 80098de:	2101      	movs	r1, #1
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f002 ffc8 	bl	800c876 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80098ee:	2308      	movs	r3, #8
 80098f0:	2203      	movs	r2, #3
 80098f2:	2182      	movs	r1, #130	; 0x82
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f002 ffbe 	bl	800c876 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2201      	movs	r2, #1
 80098fe:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009900:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009904:	f003 f90e 	bl	800cb24 <USBD_static_malloc>
 8009908:	4602      	mov	r2, r0
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009916:	2b00      	cmp	r3, #0
 8009918:	d102      	bne.n	8009920 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800991a:	2301      	movs	r3, #1
 800991c:	73fb      	strb	r3, [r7, #15]
 800991e:	e026      	b.n	800996e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009926:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	2200      	movs	r2, #0
 8009936:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	2200      	movs	r2, #0
 800993e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	7c1b      	ldrb	r3, [r3, #16]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d109      	bne.n	800995e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009950:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009954:	2101      	movs	r1, #1
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f003 f878 	bl	800ca4c <USBD_LL_PrepareReceive>
 800995c:	e007      	b.n	800996e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009964:	2340      	movs	r3, #64	; 0x40
 8009966:	2101      	movs	r1, #1
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f003 f86f 	bl	800ca4c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800996e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009970:	4618      	mov	r0, r3
 8009972:	3710      	adds	r7, #16
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	460b      	mov	r3, r1
 8009982:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009984:	2300      	movs	r3, #0
 8009986:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009988:	2181      	movs	r1, #129	; 0x81
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f002 ff99 	bl	800c8c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009996:	2101      	movs	r1, #1
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f002 ff92 	bl	800c8c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80099a6:	2182      	movs	r1, #130	; 0x82
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f002 ff8a 	bl	800c8c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00e      	beq.n	80099dc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099ce:	4618      	mov	r0, r3
 80099d0:	f003 f8b6 	bl	800cb40 <USBD_static_free>
    pdev->pClassData = NULL;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b086      	sub	sp, #24
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099f6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80099f8:	2300      	movs	r3, #0
 80099fa:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80099fc:	2300      	movs	r3, #0
 80099fe:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009a00:	2300      	movs	r3, #0
 8009a02:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d039      	beq.n	8009a84 <USBD_CDC_Setup+0x9e>
 8009a10:	2b20      	cmp	r3, #32
 8009a12:	d17c      	bne.n	8009b0e <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	88db      	ldrh	r3, [r3, #6]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d029      	beq.n	8009a70 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	b25b      	sxtb	r3, r3
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	da11      	bge.n	8009a4a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	683a      	ldr	r2, [r7, #0]
 8009a30:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009a32:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009a34:	683a      	ldr	r2, [r7, #0]
 8009a36:	88d2      	ldrh	r2, [r2, #6]
 8009a38:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009a3a:	6939      	ldr	r1, [r7, #16]
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	88db      	ldrh	r3, [r3, #6]
 8009a40:	461a      	mov	r2, r3
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f001 f9fa 	bl	800ae3c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009a48:	e068      	b.n	8009b1c <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	785a      	ldrb	r2, [r3, #1]
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	88db      	ldrh	r3, [r3, #6]
 8009a58:	b2da      	uxtb	r2, r3
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009a60:	6939      	ldr	r1, [r7, #16]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	88db      	ldrh	r3, [r3, #6]
 8009a66:	461a      	mov	r2, r3
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f001 fa15 	bl	800ae98 <USBD_CtlPrepareRx>
      break;
 8009a6e:	e055      	b.n	8009b1c <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	683a      	ldr	r2, [r7, #0]
 8009a7a:	7850      	ldrb	r0, [r2, #1]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	6839      	ldr	r1, [r7, #0]
 8009a80:	4798      	blx	r3
      break;
 8009a82:	e04b      	b.n	8009b1c <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	785b      	ldrb	r3, [r3, #1]
 8009a88:	2b0a      	cmp	r3, #10
 8009a8a:	d017      	beq.n	8009abc <USBD_CDC_Setup+0xd6>
 8009a8c:	2b0b      	cmp	r3, #11
 8009a8e:	d029      	beq.n	8009ae4 <USBD_CDC_Setup+0xfe>
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d133      	bne.n	8009afc <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a9a:	2b03      	cmp	r3, #3
 8009a9c:	d107      	bne.n	8009aae <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009a9e:	f107 030c 	add.w	r3, r7, #12
 8009aa2:	2202      	movs	r2, #2
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f001 f9c8 	bl	800ae3c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009aac:	e02e      	b.n	8009b0c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f001 f958 	bl	800ad66 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ab6:	2302      	movs	r3, #2
 8009ab8:	75fb      	strb	r3, [r7, #23]
          break;
 8009aba:	e027      	b.n	8009b0c <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ac2:	2b03      	cmp	r3, #3
 8009ac4:	d107      	bne.n	8009ad6 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009ac6:	f107 030f 	add.w	r3, r7, #15
 8009aca:	2201      	movs	r2, #1
 8009acc:	4619      	mov	r1, r3
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f001 f9b4 	bl	800ae3c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ad4:	e01a      	b.n	8009b0c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8009ad6:	6839      	ldr	r1, [r7, #0]
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f001 f944 	bl	800ad66 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ade:	2302      	movs	r3, #2
 8009ae0:	75fb      	strb	r3, [r7, #23]
          break;
 8009ae2:	e013      	b.n	8009b0c <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aea:	2b03      	cmp	r3, #3
 8009aec:	d00d      	beq.n	8009b0a <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8009aee:	6839      	ldr	r1, [r7, #0]
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f001 f938 	bl	800ad66 <USBD_CtlError>
            ret = USBD_FAIL;
 8009af6:	2302      	movs	r3, #2
 8009af8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009afa:	e006      	b.n	8009b0a <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8009afc:	6839      	ldr	r1, [r7, #0]
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f001 f931 	bl	800ad66 <USBD_CtlError>
          ret = USBD_FAIL;
 8009b04:	2302      	movs	r3, #2
 8009b06:	75fb      	strb	r3, [r7, #23]
          break;
 8009b08:	e000      	b.n	8009b0c <USBD_CDC_Setup+0x126>
          break;
 8009b0a:	bf00      	nop
      }
      break;
 8009b0c:	e006      	b.n	8009b1c <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8009b0e:	6839      	ldr	r1, [r7, #0]
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f001 f928 	bl	800ad66 <USBD_CtlError>
      ret = USBD_FAIL;
 8009b16:	2302      	movs	r3, #2
 8009b18:	75fb      	strb	r3, [r7, #23]
      break;
 8009b1a:	bf00      	nop
  }

  return ret;
 8009b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3718      	adds	r7, #24
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b084      	sub	sp, #16
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
 8009b2e:	460b      	mov	r3, r1
 8009b30:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b38:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b40:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d037      	beq.n	8009bbc <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009b4c:	78fa      	ldrb	r2, [r7, #3]
 8009b4e:	6879      	ldr	r1, [r7, #4]
 8009b50:	4613      	mov	r3, r2
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	4413      	add	r3, r2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	440b      	add	r3, r1
 8009b5a:	331c      	adds	r3, #28
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d026      	beq.n	8009bb0 <USBD_CDC_DataIn+0x8a>
 8009b62:	78fa      	ldrb	r2, [r7, #3]
 8009b64:	6879      	ldr	r1, [r7, #4]
 8009b66:	4613      	mov	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	4413      	add	r3, r2
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	440b      	add	r3, r1
 8009b70:	331c      	adds	r3, #28
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	78fa      	ldrb	r2, [r7, #3]
 8009b76:	68b9      	ldr	r1, [r7, #8]
 8009b78:	0152      	lsls	r2, r2, #5
 8009b7a:	440a      	add	r2, r1
 8009b7c:	3238      	adds	r2, #56	; 0x38
 8009b7e:	6812      	ldr	r2, [r2, #0]
 8009b80:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b84:	fb02 f201 	mul.w	r2, r2, r1
 8009b88:	1a9b      	subs	r3, r3, r2
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d110      	bne.n	8009bb0 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009b8e:	78fa      	ldrb	r2, [r7, #3]
 8009b90:	6879      	ldr	r1, [r7, #4]
 8009b92:	4613      	mov	r3, r2
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	4413      	add	r3, r2
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	440b      	add	r3, r1
 8009b9c:	331c      	adds	r3, #28
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009ba2:	78f9      	ldrb	r1, [r7, #3]
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f002 ff2c 	bl	800ca06 <USBD_LL_Transmit>
 8009bae:	e003      	b.n	8009bb8 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	e000      	b.n	8009bbe <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8009bbc:	2302      	movs	r3, #2
  }
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b084      	sub	sp, #16
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	460b      	mov	r3, r1
 8009bd0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bd8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009bda:	78fb      	ldrb	r3, [r7, #3]
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f002 ff57 	bl	800ca92 <USBD_LL_GetRxDataSize>
 8009be4:	4602      	mov	r2, r0
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00d      	beq.n	8009c12 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	68fa      	ldr	r2, [r7, #12]
 8009c00:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009c0a:	4611      	mov	r1, r2
 8009c0c:	4798      	blx	r3

    return USBD_OK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	e000      	b.n	8009c14 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009c12:	2302      	movs	r3, #2
  }
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3710      	adds	r7, #16
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c2a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d015      	beq.n	8009c62 <USBD_CDC_EP0_RxReady+0x46>
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009c3c:	2bff      	cmp	r3, #255	; 0xff
 8009c3e:	d010      	beq.n	8009c62 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	68fa      	ldr	r2, [r7, #12]
 8009c4a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009c4e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009c56:	b292      	uxth	r2, r2
 8009c58:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	22ff      	movs	r2, #255	; 0xff
 8009c5e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3710      	adds	r7, #16
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2243      	movs	r2, #67	; 0x43
 8009c78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009c7a:	4b03      	ldr	r3, [pc, #12]	; (8009c88 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr
 8009c88:	20000094 	.word	0x20000094

08009c8c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2243      	movs	r2, #67	; 0x43
 8009c98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009c9a:	4b03      	ldr	r3, [pc, #12]	; (8009ca8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	20000050 	.word	0x20000050

08009cac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2243      	movs	r2, #67	; 0x43
 8009cb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009cba:	4b03      	ldr	r3, [pc, #12]	; (8009cc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr
 8009cc8:	200000d8 	.word	0x200000d8

08009ccc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	220a      	movs	r2, #10
 8009cd8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009cda:	4b03      	ldr	r3, [pc, #12]	; (8009ce8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr
 8009ce8:	2000000c 	.word	0x2000000c

08009cec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009cf6:	2302      	movs	r3, #2
 8009cf8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d005      	beq.n	8009d0c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	683a      	ldr	r2, [r7, #0]
 8009d04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3714      	adds	r7, #20
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr

08009d1a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b087      	sub	sp, #28
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	60f8      	str	r0, [r7, #12]
 8009d22:	60b9      	str	r1, [r7, #8]
 8009d24:	4613      	mov	r3, r2
 8009d26:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d2e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009d38:	88fa      	ldrh	r2, [r7, #6]
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	371c      	adds	r7, #28
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr

08009d4e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009d4e:	b480      	push	{r7}
 8009d50:	b085      	sub	sp, #20
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
 8009d56:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d5e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3714      	adds	r7, #20
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr

08009d76 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b084      	sub	sp, #16
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d84:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d017      	beq.n	8009dc0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	7c1b      	ldrb	r3, [r3, #16]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d109      	bne.n	8009dac <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009da2:	2101      	movs	r1, #1
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f002 fe51 	bl	800ca4c <USBD_LL_PrepareReceive>
 8009daa:	e007      	b.n	8009dbc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009db2:	2340      	movs	r3, #64	; 0x40
 8009db4:	2101      	movs	r1, #1
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f002 fe48 	bl	800ca4c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	e000      	b.n	8009dc2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009dc0:	2302      	movs	r3, #2
  }
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b084      	sub	sp, #16
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	60f8      	str	r0, [r7, #12]
 8009dd2:	60b9      	str	r1, [r7, #8]
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d101      	bne.n	8009de2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009dde:	2302      	movs	r3, #2
 8009de0:	e01a      	b.n	8009e18 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d003      	beq.n	8009df4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d003      	beq.n	8009e02 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	79fa      	ldrb	r2, [r7, #7]
 8009e0e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009e10:	68f8      	ldr	r0, [r7, #12]
 8009e12:	f002 fcb5 	bl	800c780 <USBD_LL_Init>

  return USBD_OK;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d006      	beq.n	8009e42 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	683a      	ldr	r2, [r7, #0]
 8009e38:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	73fb      	strb	r3, [r7, #15]
 8009e40:	e001      	b.n	8009e46 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009e42:	2302      	movs	r3, #2
 8009e44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3714      	adds	r7, #20
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f002 fcef 	bl	800c840 <USBD_LL_Start>

  return USBD_OK;
 8009e62:	2300      	movs	r3, #0
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	370c      	adds	r7, #12
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr

08009e82 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009e82:	b580      	push	{r7, lr}
 8009e84:	b084      	sub	sp, #16
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009e8e:	2302      	movs	r3, #2
 8009e90:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00c      	beq.n	8009eb6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	78fa      	ldrb	r2, [r7, #3]
 8009ea6:	4611      	mov	r1, r2
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	4798      	blx	r3
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d101      	bne.n	8009eb6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	460b      	mov	r3, r1
 8009eca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	78fa      	ldrb	r2, [r7, #3]
 8009ed6:	4611      	mov	r1, r2
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	4798      	blx	r3

  return USBD_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b082      	sub	sp, #8
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
 8009eee:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009ef6:	6839      	ldr	r1, [r7, #0]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f000 fef7 	bl	800acec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2201      	movs	r2, #1
 8009f02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009f1a:	f003 031f 	and.w	r3, r3, #31
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d00c      	beq.n	8009f3c <USBD_LL_SetupStage+0x56>
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d302      	bcc.n	8009f2c <USBD_LL_SetupStage+0x46>
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	d010      	beq.n	8009f4c <USBD_LL_SetupStage+0x66>
 8009f2a:	e017      	b.n	8009f5c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 f9cd 	bl	800a2d4 <USBD_StdDevReq>
      break;
 8009f3a:	e01a      	b.n	8009f72 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009f42:	4619      	mov	r1, r3
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 fa2f 	bl	800a3a8 <USBD_StdItfReq>
      break;
 8009f4a:	e012      	b.n	8009f72 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009f52:	4619      	mov	r1, r3
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 fa6d 	bl	800a434 <USBD_StdEPReq>
      break;
 8009f5a:	e00a      	b.n	8009f72 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009f62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	4619      	mov	r1, r3
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f002 fcc8 	bl	800c900 <USBD_LL_StallEP>
      break;
 8009f70:	bf00      	nop
  }

  return USBD_OK;
 8009f72:	2300      	movs	r3, #0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3708      	adds	r7, #8
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b086      	sub	sp, #24
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	460b      	mov	r3, r1
 8009f86:	607a      	str	r2, [r7, #4]
 8009f88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009f8a:	7afb      	ldrb	r3, [r7, #11]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d14b      	bne.n	800a028 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009f96:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f9e:	2b03      	cmp	r3, #3
 8009fa0:	d134      	bne.n	800a00c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	68da      	ldr	r2, [r3, #12]
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	691b      	ldr	r3, [r3, #16]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d919      	bls.n	8009fe2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	68da      	ldr	r2, [r3, #12]
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	1ad2      	subs	r2, r2, r3
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	68da      	ldr	r2, [r3, #12]
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d203      	bcs.n	8009fd0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	e002      	b.n	8009fd6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	6879      	ldr	r1, [r7, #4]
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	f000 ff7a 	bl	800aed4 <USBD_CtlContinueRx>
 8009fe0:	e038      	b.n	800a054 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00a      	beq.n	800a004 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009ff4:	2b03      	cmp	r3, #3
 8009ff6:	d105      	bne.n	800a004 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f000 ff77 	bl	800aef8 <USBD_CtlSendStatus>
 800a00a:	e023      	b.n	800a054 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a012:	2b05      	cmp	r3, #5
 800a014:	d11e      	bne.n	800a054 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2200      	movs	r2, #0
 800a01a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a01e:	2100      	movs	r1, #0
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f002 fc6d 	bl	800c900 <USBD_LL_StallEP>
 800a026:	e015      	b.n	800a054 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a02e:	699b      	ldr	r3, [r3, #24]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00d      	beq.n	800a050 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a03a:	2b03      	cmp	r3, #3
 800a03c:	d108      	bne.n	800a050 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a044:	699b      	ldr	r3, [r3, #24]
 800a046:	7afa      	ldrb	r2, [r7, #11]
 800a048:	4611      	mov	r1, r2
 800a04a:	68f8      	ldr	r0, [r7, #12]
 800a04c:	4798      	blx	r3
 800a04e:	e001      	b.n	800a054 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a050:	2302      	movs	r3, #2
 800a052:	e000      	b.n	800a056 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3718      	adds	r7, #24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b086      	sub	sp, #24
 800a062:	af00      	add	r7, sp, #0
 800a064:	60f8      	str	r0, [r7, #12]
 800a066:	460b      	mov	r3, r1
 800a068:	607a      	str	r2, [r7, #4]
 800a06a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a06c:	7afb      	ldrb	r3, [r7, #11]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d17f      	bne.n	800a172 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	3314      	adds	r3, #20
 800a076:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a07e:	2b02      	cmp	r3, #2
 800a080:	d15c      	bne.n	800a13c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	68da      	ldr	r2, [r3, #12]
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d915      	bls.n	800a0ba <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	68da      	ldr	r2, [r3, #12]
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	691b      	ldr	r3, [r3, #16]
 800a096:	1ad2      	subs	r2, r2, r3
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	6879      	ldr	r1, [r7, #4]
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f000 fee4 	bl	800ae74 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	f002 fcca 	bl	800ca4c <USBD_LL_PrepareReceive>
 800a0b8:	e04e      	b.n	800a158 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	697a      	ldr	r2, [r7, #20]
 800a0c0:	6912      	ldr	r2, [r2, #16]
 800a0c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0c6:	fb02 f201 	mul.w	r2, r2, r1
 800a0ca:	1a9b      	subs	r3, r3, r2
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d11c      	bne.n	800a10a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	689a      	ldr	r2, [r3, #8]
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d316      	bcc.n	800a10a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	689a      	ldr	r2, [r3, #8]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d20f      	bcs.n	800a10a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	2100      	movs	r1, #0
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f000 fec0 	bl	800ae74 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	2200      	movs	r2, #0
 800a100:	2100      	movs	r1, #0
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f002 fca2 	bl	800ca4c <USBD_LL_PrepareReceive>
 800a108:	e026      	b.n	800a158 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a110:	68db      	ldr	r3, [r3, #12]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00a      	beq.n	800a12c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a11c:	2b03      	cmp	r3, #3
 800a11e:	d105      	bne.n	800a12c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a12c:	2180      	movs	r1, #128	; 0x80
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f002 fbe6 	bl	800c900 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f000 fef2 	bl	800af1e <USBD_CtlReceiveStatus>
 800a13a:	e00d      	b.n	800a158 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a142:	2b04      	cmp	r3, #4
 800a144:	d004      	beq.n	800a150 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d103      	bne.n	800a158 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a150:	2180      	movs	r1, #128	; 0x80
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f002 fbd4 	bl	800c900 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d11d      	bne.n	800a19e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f7ff fe82 	bl	8009e6c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a170:	e015      	b.n	800a19e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a178:	695b      	ldr	r3, [r3, #20]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00d      	beq.n	800a19a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a184:	2b03      	cmp	r3, #3
 800a186:	d108      	bne.n	800a19a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a18e:	695b      	ldr	r3, [r3, #20]
 800a190:	7afa      	ldrb	r2, [r7, #11]
 800a192:	4611      	mov	r1, r2
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	4798      	blx	r3
 800a198:	e001      	b.n	800a19e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a19a:	2302      	movs	r3, #2
 800a19c:	e000      	b.n	800a1a0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3718      	adds	r7, #24
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a1b0:	2340      	movs	r3, #64	; 0x40
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f002 fb5d 	bl	800c876 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2240      	movs	r2, #64	; 0x40
 800a1c8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a1cc:	2340      	movs	r3, #64	; 0x40
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	2180      	movs	r1, #128	; 0x80
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f002 fb4f 	bl	800c876 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2240      	movs	r2, #64	; 0x40
 800a1e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d009      	beq.n	800a220 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	6852      	ldr	r2, [r2, #4]
 800a218:	b2d2      	uxtb	r2, r2
 800a21a:	4611      	mov	r1, r2
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	4798      	blx	r3
  }

  return USBD_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3708      	adds	r7, #8
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a22a:	b480      	push	{r7}
 800a22c:	b083      	sub	sp, #12
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	460b      	mov	r3, r1
 800a234:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	78fa      	ldrb	r2, [r7, #3]
 800a23a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a23c:	2300      	movs	r3, #0
}
 800a23e:	4618      	mov	r0, r3
 800a240:	370c      	adds	r7, #12
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr

0800a24a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a24a:	b480      	push	{r7}
 800a24c:	b083      	sub	sp, #12
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2204      	movs	r2, #4
 800a262:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a282:	2b04      	cmp	r3, #4
 800a284:	d105      	bne.n	800a292 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a292:	2300      	movs	r3, #0
}
 800a294:	4618      	mov	r0, r3
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2ae:	2b03      	cmp	r3, #3
 800a2b0:	d10b      	bne.n	800a2ca <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2b8:	69db      	ldr	r3, [r3, #28]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d005      	beq.n	800a2ca <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2c4:	69db      	ldr	r3, [r3, #28]
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a2ca:	2300      	movs	r3, #0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3708      	adds	r7, #8
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a2ea:	2b20      	cmp	r3, #32
 800a2ec:	d004      	beq.n	800a2f8 <USBD_StdDevReq+0x24>
 800a2ee:	2b40      	cmp	r3, #64	; 0x40
 800a2f0:	d002      	beq.n	800a2f8 <USBD_StdDevReq+0x24>
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d008      	beq.n	800a308 <USBD_StdDevReq+0x34>
 800a2f6:	e04c      	b.n	800a392 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2fe:	689b      	ldr	r3, [r3, #8]
 800a300:	6839      	ldr	r1, [r7, #0]
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	4798      	blx	r3
      break;
 800a306:	e049      	b.n	800a39c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	785b      	ldrb	r3, [r3, #1]
 800a30c:	2b09      	cmp	r3, #9
 800a30e:	d83a      	bhi.n	800a386 <USBD_StdDevReq+0xb2>
 800a310:	a201      	add	r2, pc, #4	; (adr r2, 800a318 <USBD_StdDevReq+0x44>)
 800a312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a316:	bf00      	nop
 800a318:	0800a369 	.word	0x0800a369
 800a31c:	0800a37d 	.word	0x0800a37d
 800a320:	0800a387 	.word	0x0800a387
 800a324:	0800a373 	.word	0x0800a373
 800a328:	0800a387 	.word	0x0800a387
 800a32c:	0800a34b 	.word	0x0800a34b
 800a330:	0800a341 	.word	0x0800a341
 800a334:	0800a387 	.word	0x0800a387
 800a338:	0800a35f 	.word	0x0800a35f
 800a33c:	0800a355 	.word	0x0800a355
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 f9d4 	bl	800a6f0 <USBD_GetDescriptor>
          break;
 800a348:	e022      	b.n	800a390 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a34a:	6839      	ldr	r1, [r7, #0]
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 fb61 	bl	800aa14 <USBD_SetAddress>
          break;
 800a352:	e01d      	b.n	800a390 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a354:	6839      	ldr	r1, [r7, #0]
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 fb9e 	bl	800aa98 <USBD_SetConfig>
          break;
 800a35c:	e018      	b.n	800a390 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a35e:	6839      	ldr	r1, [r7, #0]
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 fc27 	bl	800abb4 <USBD_GetConfig>
          break;
 800a366:	e013      	b.n	800a390 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a368:	6839      	ldr	r1, [r7, #0]
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 fc56 	bl	800ac1c <USBD_GetStatus>
          break;
 800a370:	e00e      	b.n	800a390 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a372:	6839      	ldr	r1, [r7, #0]
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 fc84 	bl	800ac82 <USBD_SetFeature>
          break;
 800a37a:	e009      	b.n	800a390 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a37c:	6839      	ldr	r1, [r7, #0]
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 fc93 	bl	800acaa <USBD_ClrFeature>
          break;
 800a384:	e004      	b.n	800a390 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a386:	6839      	ldr	r1, [r7, #0]
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 fcec 	bl	800ad66 <USBD_CtlError>
          break;
 800a38e:	bf00      	nop
      }
      break;
 800a390:	e004      	b.n	800a39c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a392:	6839      	ldr	r1, [r7, #0]
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 fce6 	bl	800ad66 <USBD_CtlError>
      break;
 800a39a:	bf00      	nop
  }

  return ret;
 800a39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop

0800a3a8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3be:	2b20      	cmp	r3, #32
 800a3c0:	d003      	beq.n	800a3ca <USBD_StdItfReq+0x22>
 800a3c2:	2b40      	cmp	r3, #64	; 0x40
 800a3c4:	d001      	beq.n	800a3ca <USBD_StdItfReq+0x22>
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d12a      	bne.n	800a420 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	d81d      	bhi.n	800a412 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	889b      	ldrh	r3, [r3, #4]
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d813      	bhi.n	800a408 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	6839      	ldr	r1, [r7, #0]
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	4798      	blx	r3
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	88db      	ldrh	r3, [r3, #6]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d110      	bne.n	800a41c <USBD_StdItfReq+0x74>
 800a3fa:	7bfb      	ldrb	r3, [r7, #15]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d10d      	bne.n	800a41c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 fd79 	bl	800aef8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a406:	e009      	b.n	800a41c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800a408:	6839      	ldr	r1, [r7, #0]
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 fcab 	bl	800ad66 <USBD_CtlError>
          break;
 800a410:	e004      	b.n	800a41c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800a412:	6839      	ldr	r1, [r7, #0]
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 fca6 	bl	800ad66 <USBD_CtlError>
          break;
 800a41a:	e000      	b.n	800a41e <USBD_StdItfReq+0x76>
          break;
 800a41c:	bf00      	nop
      }
      break;
 800a41e:	e004      	b.n	800a42a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800a420:	6839      	ldr	r1, [r7, #0]
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 fc9f 	bl	800ad66 <USBD_CtlError>
      break;
 800a428:	bf00      	nop
  }

  return USBD_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a43e:	2300      	movs	r3, #0
 800a440:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	889b      	ldrh	r3, [r3, #4]
 800a446:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a450:	2b20      	cmp	r3, #32
 800a452:	d004      	beq.n	800a45e <USBD_StdEPReq+0x2a>
 800a454:	2b40      	cmp	r3, #64	; 0x40
 800a456:	d002      	beq.n	800a45e <USBD_StdEPReq+0x2a>
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d008      	beq.n	800a46e <USBD_StdEPReq+0x3a>
 800a45c:	e13d      	b.n	800a6da <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	6839      	ldr	r1, [r7, #0]
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	4798      	blx	r3
      break;
 800a46c:	e13a      	b.n	800a6e4 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a476:	2b20      	cmp	r3, #32
 800a478:	d10a      	bne.n	800a490 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	6839      	ldr	r1, [r7, #0]
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	4798      	blx	r3
 800a488:	4603      	mov	r3, r0
 800a48a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a48c:	7bfb      	ldrb	r3, [r7, #15]
 800a48e:	e12a      	b.n	800a6e6 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	785b      	ldrb	r3, [r3, #1]
 800a494:	2b01      	cmp	r3, #1
 800a496:	d03e      	beq.n	800a516 <USBD_StdEPReq+0xe2>
 800a498:	2b03      	cmp	r3, #3
 800a49a:	d002      	beq.n	800a4a2 <USBD_StdEPReq+0x6e>
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d070      	beq.n	800a582 <USBD_StdEPReq+0x14e>
 800a4a0:	e115      	b.n	800a6ce <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	d002      	beq.n	800a4b2 <USBD_StdEPReq+0x7e>
 800a4ac:	2b03      	cmp	r3, #3
 800a4ae:	d015      	beq.n	800a4dc <USBD_StdEPReq+0xa8>
 800a4b0:	e02b      	b.n	800a50a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4b2:	7bbb      	ldrb	r3, [r7, #14]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d00c      	beq.n	800a4d2 <USBD_StdEPReq+0x9e>
 800a4b8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ba:	2b80      	cmp	r3, #128	; 0x80
 800a4bc:	d009      	beq.n	800a4d2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a4be:	7bbb      	ldrb	r3, [r7, #14]
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f002 fa1c 	bl	800c900 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a4c8:	2180      	movs	r1, #128	; 0x80
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f002 fa18 	bl	800c900 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a4d0:	e020      	b.n	800a514 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800a4d2:	6839      	ldr	r1, [r7, #0]
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 fc46 	bl	800ad66 <USBD_CtlError>
              break;
 800a4da:	e01b      	b.n	800a514 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	885b      	ldrh	r3, [r3, #2]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10e      	bne.n	800a502 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800a4e4:	7bbb      	ldrb	r3, [r7, #14]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00b      	beq.n	800a502 <USBD_StdEPReq+0xce>
 800a4ea:	7bbb      	ldrb	r3, [r7, #14]
 800a4ec:	2b80      	cmp	r3, #128	; 0x80
 800a4ee:	d008      	beq.n	800a502 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	88db      	ldrh	r3, [r3, #6]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d104      	bne.n	800a502 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a4f8:	7bbb      	ldrb	r3, [r7, #14]
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f002 f9ff 	bl	800c900 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 fcf8 	bl	800aef8 <USBD_CtlSendStatus>

              break;
 800a508:	e004      	b.n	800a514 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800a50a:	6839      	ldr	r1, [r7, #0]
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 fc2a 	bl	800ad66 <USBD_CtlError>
              break;
 800a512:	bf00      	nop
          }
          break;
 800a514:	e0e0      	b.n	800a6d8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	d002      	beq.n	800a526 <USBD_StdEPReq+0xf2>
 800a520:	2b03      	cmp	r3, #3
 800a522:	d015      	beq.n	800a550 <USBD_StdEPReq+0x11c>
 800a524:	e026      	b.n	800a574 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a526:	7bbb      	ldrb	r3, [r7, #14]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d00c      	beq.n	800a546 <USBD_StdEPReq+0x112>
 800a52c:	7bbb      	ldrb	r3, [r7, #14]
 800a52e:	2b80      	cmp	r3, #128	; 0x80
 800a530:	d009      	beq.n	800a546 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a532:	7bbb      	ldrb	r3, [r7, #14]
 800a534:	4619      	mov	r1, r3
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f002 f9e2 	bl	800c900 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a53c:	2180      	movs	r1, #128	; 0x80
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f002 f9de 	bl	800c900 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a544:	e01c      	b.n	800a580 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800a546:	6839      	ldr	r1, [r7, #0]
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 fc0c 	bl	800ad66 <USBD_CtlError>
              break;
 800a54e:	e017      	b.n	800a580 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	885b      	ldrh	r3, [r3, #2]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d112      	bne.n	800a57e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a558:	7bbb      	ldrb	r3, [r7, #14]
 800a55a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d004      	beq.n	800a56c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a562:	7bbb      	ldrb	r3, [r7, #14]
 800a564:	4619      	mov	r1, r3
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f002 f9e9 	bl	800c93e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 fcc3 	bl	800aef8 <USBD_CtlSendStatus>
              }
              break;
 800a572:	e004      	b.n	800a57e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800a574:	6839      	ldr	r1, [r7, #0]
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 fbf5 	bl	800ad66 <USBD_CtlError>
              break;
 800a57c:	e000      	b.n	800a580 <USBD_StdEPReq+0x14c>
              break;
 800a57e:	bf00      	nop
          }
          break;
 800a580:	e0aa      	b.n	800a6d8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a588:	2b02      	cmp	r3, #2
 800a58a:	d002      	beq.n	800a592 <USBD_StdEPReq+0x15e>
 800a58c:	2b03      	cmp	r3, #3
 800a58e:	d032      	beq.n	800a5f6 <USBD_StdEPReq+0x1c2>
 800a590:	e097      	b.n	800a6c2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a592:	7bbb      	ldrb	r3, [r7, #14]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d007      	beq.n	800a5a8 <USBD_StdEPReq+0x174>
 800a598:	7bbb      	ldrb	r3, [r7, #14]
 800a59a:	2b80      	cmp	r3, #128	; 0x80
 800a59c:	d004      	beq.n	800a5a8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800a59e:	6839      	ldr	r1, [r7, #0]
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 fbe0 	bl	800ad66 <USBD_CtlError>
                break;
 800a5a6:	e091      	b.n	800a6cc <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	da0b      	bge.n	800a5c8 <USBD_StdEPReq+0x194>
 800a5b0:	7bbb      	ldrb	r3, [r7, #14]
 800a5b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	4413      	add	r3, r2
 800a5bc:	009b      	lsls	r3, r3, #2
 800a5be:	3310      	adds	r3, #16
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	3304      	adds	r3, #4
 800a5c6:	e00b      	b.n	800a5e0 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a5c8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	009b      	lsls	r3, r3, #2
 800a5d2:	4413      	add	r3, r2
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	4413      	add	r3, r2
 800a5de:	3304      	adds	r3, #4
 800a5e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	2202      	movs	r2, #2
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 fc24 	bl	800ae3c <USBD_CtlSendData>
              break;
 800a5f4:	e06a      	b.n	800a6cc <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a5f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	da11      	bge.n	800a622 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a5fe:	7bbb      	ldrb	r3, [r7, #14]
 800a600:	f003 020f 	and.w	r2, r3, #15
 800a604:	6879      	ldr	r1, [r7, #4]
 800a606:	4613      	mov	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	4413      	add	r3, r2
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	440b      	add	r3, r1
 800a610:	3318      	adds	r3, #24
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d117      	bne.n	800a648 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800a618:	6839      	ldr	r1, [r7, #0]
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 fba3 	bl	800ad66 <USBD_CtlError>
                  break;
 800a620:	e054      	b.n	800a6cc <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a622:	7bbb      	ldrb	r3, [r7, #14]
 800a624:	f003 020f 	and.w	r2, r3, #15
 800a628:	6879      	ldr	r1, [r7, #4]
 800a62a:	4613      	mov	r3, r2
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	4413      	add	r3, r2
 800a630:	009b      	lsls	r3, r3, #2
 800a632:	440b      	add	r3, r1
 800a634:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d104      	bne.n	800a648 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800a63e:	6839      	ldr	r1, [r7, #0]
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 fb90 	bl	800ad66 <USBD_CtlError>
                  break;
 800a646:	e041      	b.n	800a6cc <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a648:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	da0b      	bge.n	800a668 <USBD_StdEPReq+0x234>
 800a650:	7bbb      	ldrb	r3, [r7, #14]
 800a652:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a656:	4613      	mov	r3, r2
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	4413      	add	r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	3310      	adds	r3, #16
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	4413      	add	r3, r2
 800a664:	3304      	adds	r3, #4
 800a666:	e00b      	b.n	800a680 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a668:	7bbb      	ldrb	r3, [r7, #14]
 800a66a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a66e:	4613      	mov	r3, r2
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	4413      	add	r3, r2
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	4413      	add	r3, r2
 800a67e:	3304      	adds	r3, #4
 800a680:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a682:	7bbb      	ldrb	r3, [r7, #14]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d002      	beq.n	800a68e <USBD_StdEPReq+0x25a>
 800a688:	7bbb      	ldrb	r3, [r7, #14]
 800a68a:	2b80      	cmp	r3, #128	; 0x80
 800a68c:	d103      	bne.n	800a696 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	2200      	movs	r2, #0
 800a692:	601a      	str	r2, [r3, #0]
 800a694:	e00e      	b.n	800a6b4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a696:	7bbb      	ldrb	r3, [r7, #14]
 800a698:	4619      	mov	r1, r3
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f002 f96e 	bl	800c97c <USBD_LL_IsStallEP>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d003      	beq.n	800a6ae <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	601a      	str	r2, [r3, #0]
 800a6ac:	e002      	b.n	800a6b4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	2202      	movs	r2, #2
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 fbbe 	bl	800ae3c <USBD_CtlSendData>
              break;
 800a6c0:	e004      	b.n	800a6cc <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800a6c2:	6839      	ldr	r1, [r7, #0]
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 fb4e 	bl	800ad66 <USBD_CtlError>
              break;
 800a6ca:	bf00      	nop
          }
          break;
 800a6cc:	e004      	b.n	800a6d8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800a6ce:	6839      	ldr	r1, [r7, #0]
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 fb48 	bl	800ad66 <USBD_CtlError>
          break;
 800a6d6:	bf00      	nop
      }
      break;
 800a6d8:	e004      	b.n	800a6e4 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800a6da:	6839      	ldr	r1, [r7, #0]
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 fb42 	bl	800ad66 <USBD_CtlError>
      break;
 800a6e2:	bf00      	nop
  }

  return ret;
 800a6e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
	...

0800a6f0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a6fe:	2300      	movs	r3, #0
 800a700:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a702:	2300      	movs	r3, #0
 800a704:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	885b      	ldrh	r3, [r3, #2]
 800a70a:	0a1b      	lsrs	r3, r3, #8
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	3b01      	subs	r3, #1
 800a710:	2b0e      	cmp	r3, #14
 800a712:	f200 8152 	bhi.w	800a9ba <USBD_GetDescriptor+0x2ca>
 800a716:	a201      	add	r2, pc, #4	; (adr r2, 800a71c <USBD_GetDescriptor+0x2c>)
 800a718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a71c:	0800a78d 	.word	0x0800a78d
 800a720:	0800a7a5 	.word	0x0800a7a5
 800a724:	0800a7e5 	.word	0x0800a7e5
 800a728:	0800a9bb 	.word	0x0800a9bb
 800a72c:	0800a9bb 	.word	0x0800a9bb
 800a730:	0800a95b 	.word	0x0800a95b
 800a734:	0800a987 	.word	0x0800a987
 800a738:	0800a9bb 	.word	0x0800a9bb
 800a73c:	0800a9bb 	.word	0x0800a9bb
 800a740:	0800a9bb 	.word	0x0800a9bb
 800a744:	0800a9bb 	.word	0x0800a9bb
 800a748:	0800a9bb 	.word	0x0800a9bb
 800a74c:	0800a9bb 	.word	0x0800a9bb
 800a750:	0800a9bb 	.word	0x0800a9bb
 800a754:	0800a759 	.word	0x0800a759
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a75e:	69db      	ldr	r3, [r3, #28]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d00b      	beq.n	800a77c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a76a:	69db      	ldr	r3, [r3, #28]
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	7c12      	ldrb	r2, [r2, #16]
 800a770:	f107 0108 	add.w	r1, r7, #8
 800a774:	4610      	mov	r0, r2
 800a776:	4798      	blx	r3
 800a778:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a77a:	e126      	b.n	800a9ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a77c:	6839      	ldr	r1, [r7, #0]
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 faf1 	bl	800ad66 <USBD_CtlError>
        err++;
 800a784:	7afb      	ldrb	r3, [r7, #11]
 800a786:	3301      	adds	r3, #1
 800a788:	72fb      	strb	r3, [r7, #11]
      break;
 800a78a:	e11e      	b.n	800a9ca <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	7c12      	ldrb	r2, [r2, #16]
 800a798:	f107 0108 	add.w	r1, r7, #8
 800a79c:	4610      	mov	r0, r2
 800a79e:	4798      	blx	r3
 800a7a0:	60f8      	str	r0, [r7, #12]
      break;
 800a7a2:	e112      	b.n	800a9ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	7c1b      	ldrb	r3, [r3, #16]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10d      	bne.n	800a7c8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b4:	f107 0208 	add.w	r2, r7, #8
 800a7b8:	4610      	mov	r0, r2
 800a7ba:	4798      	blx	r3
 800a7bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	2202      	movs	r2, #2
 800a7c4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a7c6:	e100      	b.n	800a9ca <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d0:	f107 0208 	add.w	r2, r7, #8
 800a7d4:	4610      	mov	r0, r2
 800a7d6:	4798      	blx	r3
 800a7d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	3301      	adds	r3, #1
 800a7de:	2202      	movs	r2, #2
 800a7e0:	701a      	strb	r2, [r3, #0]
      break;
 800a7e2:	e0f2      	b.n	800a9ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	885b      	ldrh	r3, [r3, #2]
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	2b05      	cmp	r3, #5
 800a7ec:	f200 80ac 	bhi.w	800a948 <USBD_GetDescriptor+0x258>
 800a7f0:	a201      	add	r2, pc, #4	; (adr r2, 800a7f8 <USBD_GetDescriptor+0x108>)
 800a7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f6:	bf00      	nop
 800a7f8:	0800a811 	.word	0x0800a811
 800a7fc:	0800a845 	.word	0x0800a845
 800a800:	0800a879 	.word	0x0800a879
 800a804:	0800a8ad 	.word	0x0800a8ad
 800a808:	0800a8e1 	.word	0x0800a8e1
 800a80c:	0800a915 	.word	0x0800a915
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d00b      	beq.n	800a834 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	7c12      	ldrb	r2, [r2, #16]
 800a828:	f107 0108 	add.w	r1, r7, #8
 800a82c:	4610      	mov	r0, r2
 800a82e:	4798      	blx	r3
 800a830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a832:	e091      	b.n	800a958 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a834:	6839      	ldr	r1, [r7, #0]
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 fa95 	bl	800ad66 <USBD_CtlError>
            err++;
 800a83c:	7afb      	ldrb	r3, [r7, #11]
 800a83e:	3301      	adds	r3, #1
 800a840:	72fb      	strb	r3, [r7, #11]
          break;
 800a842:	e089      	b.n	800a958 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00b      	beq.n	800a868 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	7c12      	ldrb	r2, [r2, #16]
 800a85c:	f107 0108 	add.w	r1, r7, #8
 800a860:	4610      	mov	r0, r2
 800a862:	4798      	blx	r3
 800a864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a866:	e077      	b.n	800a958 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a868:	6839      	ldr	r1, [r7, #0]
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 fa7b 	bl	800ad66 <USBD_CtlError>
            err++;
 800a870:	7afb      	ldrb	r3, [r7, #11]
 800a872:	3301      	adds	r3, #1
 800a874:	72fb      	strb	r3, [r7, #11]
          break;
 800a876:	e06f      	b.n	800a958 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d00b      	beq.n	800a89c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	7c12      	ldrb	r2, [r2, #16]
 800a890:	f107 0108 	add.w	r1, r7, #8
 800a894:	4610      	mov	r0, r2
 800a896:	4798      	blx	r3
 800a898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a89a:	e05d      	b.n	800a958 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a89c:	6839      	ldr	r1, [r7, #0]
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 fa61 	bl	800ad66 <USBD_CtlError>
            err++;
 800a8a4:	7afb      	ldrb	r3, [r7, #11]
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	72fb      	strb	r3, [r7, #11]
          break;
 800a8aa:	e055      	b.n	800a958 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a8b2:	691b      	ldr	r3, [r3, #16]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d00b      	beq.n	800a8d0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a8be:	691b      	ldr	r3, [r3, #16]
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	7c12      	ldrb	r2, [r2, #16]
 800a8c4:	f107 0108 	add.w	r1, r7, #8
 800a8c8:	4610      	mov	r0, r2
 800a8ca:	4798      	blx	r3
 800a8cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8ce:	e043      	b.n	800a958 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a8d0:	6839      	ldr	r1, [r7, #0]
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 fa47 	bl	800ad66 <USBD_CtlError>
            err++;
 800a8d8:	7afb      	ldrb	r3, [r7, #11]
 800a8da:	3301      	adds	r3, #1
 800a8dc:	72fb      	strb	r3, [r7, #11]
          break;
 800a8de:	e03b      	b.n	800a958 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a8e6:	695b      	ldr	r3, [r3, #20]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00b      	beq.n	800a904 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a8f2:	695b      	ldr	r3, [r3, #20]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	7c12      	ldrb	r2, [r2, #16]
 800a8f8:	f107 0108 	add.w	r1, r7, #8
 800a8fc:	4610      	mov	r0, r2
 800a8fe:	4798      	blx	r3
 800a900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a902:	e029      	b.n	800a958 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a904:	6839      	ldr	r1, [r7, #0]
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 fa2d 	bl	800ad66 <USBD_CtlError>
            err++;
 800a90c:	7afb      	ldrb	r3, [r7, #11]
 800a90e:	3301      	adds	r3, #1
 800a910:	72fb      	strb	r3, [r7, #11]
          break;
 800a912:	e021      	b.n	800a958 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a91a:	699b      	ldr	r3, [r3, #24]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00b      	beq.n	800a938 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a926:	699b      	ldr	r3, [r3, #24]
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	7c12      	ldrb	r2, [r2, #16]
 800a92c:	f107 0108 	add.w	r1, r7, #8
 800a930:	4610      	mov	r0, r2
 800a932:	4798      	blx	r3
 800a934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a936:	e00f      	b.n	800a958 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a938:	6839      	ldr	r1, [r7, #0]
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 fa13 	bl	800ad66 <USBD_CtlError>
            err++;
 800a940:	7afb      	ldrb	r3, [r7, #11]
 800a942:	3301      	adds	r3, #1
 800a944:	72fb      	strb	r3, [r7, #11]
          break;
 800a946:	e007      	b.n	800a958 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a948:	6839      	ldr	r1, [r7, #0]
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 fa0b 	bl	800ad66 <USBD_CtlError>
          err++;
 800a950:	7afb      	ldrb	r3, [r7, #11]
 800a952:	3301      	adds	r3, #1
 800a954:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a956:	e038      	b.n	800a9ca <USBD_GetDescriptor+0x2da>
 800a958:	e037      	b.n	800a9ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	7c1b      	ldrb	r3, [r3, #16]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d109      	bne.n	800a976 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a96a:	f107 0208 	add.w	r2, r7, #8
 800a96e:	4610      	mov	r0, r2
 800a970:	4798      	blx	r3
 800a972:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a974:	e029      	b.n	800a9ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a976:	6839      	ldr	r1, [r7, #0]
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 f9f4 	bl	800ad66 <USBD_CtlError>
        err++;
 800a97e:	7afb      	ldrb	r3, [r7, #11]
 800a980:	3301      	adds	r3, #1
 800a982:	72fb      	strb	r3, [r7, #11]
      break;
 800a984:	e021      	b.n	800a9ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	7c1b      	ldrb	r3, [r3, #16]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d10d      	bne.n	800a9aa <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a996:	f107 0208 	add.w	r2, r7, #8
 800a99a:	4610      	mov	r0, r2
 800a99c:	4798      	blx	r3
 800a99e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	2207      	movs	r2, #7
 800a9a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a9a8:	e00f      	b.n	800a9ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a9aa:	6839      	ldr	r1, [r7, #0]
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 f9da 	bl	800ad66 <USBD_CtlError>
        err++;
 800a9b2:	7afb      	ldrb	r3, [r7, #11]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	72fb      	strb	r3, [r7, #11]
      break;
 800a9b8:	e007      	b.n	800a9ca <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a9ba:	6839      	ldr	r1, [r7, #0]
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 f9d2 	bl	800ad66 <USBD_CtlError>
      err++;
 800a9c2:	7afb      	ldrb	r3, [r7, #11]
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	72fb      	strb	r3, [r7, #11]
      break;
 800a9c8:	bf00      	nop
  }

  if (err != 0U)
 800a9ca:	7afb      	ldrb	r3, [r7, #11]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d11c      	bne.n	800aa0a <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a9d0:	893b      	ldrh	r3, [r7, #8]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d011      	beq.n	800a9fa <USBD_GetDescriptor+0x30a>
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	88db      	ldrh	r3, [r3, #6]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00d      	beq.n	800a9fa <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	88da      	ldrh	r2, [r3, #6]
 800a9e2:	893b      	ldrh	r3, [r7, #8]
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	bf28      	it	cs
 800a9e8:	4613      	movcs	r3, r2
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a9ee:	893b      	ldrh	r3, [r7, #8]
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	68f9      	ldr	r1, [r7, #12]
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 fa21 	bl	800ae3c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	88db      	ldrh	r3, [r3, #6]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d104      	bne.n	800aa0c <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 fa78 	bl	800aef8 <USBD_CtlSendStatus>
 800aa08:	e000      	b.n	800aa0c <USBD_GetDescriptor+0x31c>
    return;
 800aa0a:	bf00      	nop
    }
  }
}
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop

0800aa14 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	889b      	ldrh	r3, [r3, #4]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d130      	bne.n	800aa88 <USBD_SetAddress+0x74>
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	88db      	ldrh	r3, [r3, #6]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d12c      	bne.n	800aa88 <USBD_SetAddress+0x74>
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	885b      	ldrh	r3, [r3, #2]
 800aa32:	2b7f      	cmp	r3, #127	; 0x7f
 800aa34:	d828      	bhi.n	800aa88 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	885b      	ldrh	r3, [r3, #2]
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa48:	2b03      	cmp	r3, #3
 800aa4a:	d104      	bne.n	800aa56 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800aa4c:	6839      	ldr	r1, [r7, #0]
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 f989 	bl	800ad66 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa54:	e01c      	b.n	800aa90 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	7bfa      	ldrb	r2, [r7, #15]
 800aa5a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
 800aa60:	4619      	mov	r1, r3
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f001 ffb0 	bl	800c9c8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 fa45 	bl	800aef8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aa6e:	7bfb      	ldrb	r3, [r7, #15]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d004      	beq.n	800aa7e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2202      	movs	r2, #2
 800aa78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa7c:	e008      	b.n	800aa90 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2201      	movs	r2, #1
 800aa82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa86:	e003      	b.n	800aa90 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aa88:	6839      	ldr	r1, [r7, #0]
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 f96b 	bl	800ad66 <USBD_CtlError>
  }
}
 800aa90:	bf00      	nop
 800aa92:	3710      	adds	r7, #16
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	885b      	ldrh	r3, [r3, #2]
 800aaa6:	b2da      	uxtb	r2, r3
 800aaa8:	4b41      	ldr	r3, [pc, #260]	; (800abb0 <USBD_SetConfig+0x118>)
 800aaaa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aaac:	4b40      	ldr	r3, [pc, #256]	; (800abb0 <USBD_SetConfig+0x118>)
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d904      	bls.n	800aabe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800aab4:	6839      	ldr	r1, [r7, #0]
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 f955 	bl	800ad66 <USBD_CtlError>
 800aabc:	e075      	b.n	800abaa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	d002      	beq.n	800aace <USBD_SetConfig+0x36>
 800aac8:	2b03      	cmp	r3, #3
 800aaca:	d023      	beq.n	800ab14 <USBD_SetConfig+0x7c>
 800aacc:	e062      	b.n	800ab94 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800aace:	4b38      	ldr	r3, [pc, #224]	; (800abb0 <USBD_SetConfig+0x118>)
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d01a      	beq.n	800ab0c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800aad6:	4b36      	ldr	r3, [pc, #216]	; (800abb0 <USBD_SetConfig+0x118>)
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	461a      	mov	r2, r3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2203      	movs	r2, #3
 800aae4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aae8:	4b31      	ldr	r3, [pc, #196]	; (800abb0 <USBD_SetConfig+0x118>)
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	4619      	mov	r1, r3
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f7ff f9c7 	bl	8009e82 <USBD_SetClassConfig>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	d104      	bne.n	800ab04 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800aafa:	6839      	ldr	r1, [r7, #0]
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 f932 	bl	800ad66 <USBD_CtlError>
            return;
 800ab02:	e052      	b.n	800abaa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 f9f7 	bl	800aef8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ab0a:	e04e      	b.n	800abaa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 f9f3 	bl	800aef8 <USBD_CtlSendStatus>
        break;
 800ab12:	e04a      	b.n	800abaa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ab14:	4b26      	ldr	r3, [pc, #152]	; (800abb0 <USBD_SetConfig+0x118>)
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d112      	bne.n	800ab42 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2202      	movs	r2, #2
 800ab20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800ab24:	4b22      	ldr	r3, [pc, #136]	; (800abb0 <USBD_SetConfig+0x118>)
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	461a      	mov	r2, r3
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ab2e:	4b20      	ldr	r3, [pc, #128]	; (800abb0 <USBD_SetConfig+0x118>)
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	4619      	mov	r1, r3
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f7ff f9c3 	bl	8009ec0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 f9dc 	bl	800aef8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ab40:	e033      	b.n	800abaa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800ab42:	4b1b      	ldr	r3, [pc, #108]	; (800abb0 <USBD_SetConfig+0x118>)
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	461a      	mov	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d01d      	beq.n	800ab8c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	4619      	mov	r1, r3
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f7ff f9b1 	bl	8009ec0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ab5e:	4b14      	ldr	r3, [pc, #80]	; (800abb0 <USBD_SetConfig+0x118>)
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	461a      	mov	r2, r3
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ab68:	4b11      	ldr	r3, [pc, #68]	; (800abb0 <USBD_SetConfig+0x118>)
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7ff f987 	bl	8009e82 <USBD_SetClassConfig>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b02      	cmp	r3, #2
 800ab78:	d104      	bne.n	800ab84 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800ab7a:	6839      	ldr	r1, [r7, #0]
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 f8f2 	bl	800ad66 <USBD_CtlError>
            return;
 800ab82:	e012      	b.n	800abaa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 f9b7 	bl	800aef8 <USBD_CtlSendStatus>
        break;
 800ab8a:	e00e      	b.n	800abaa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f000 f9b3 	bl	800aef8 <USBD_CtlSendStatus>
        break;
 800ab92:	e00a      	b.n	800abaa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800ab94:	6839      	ldr	r1, [r7, #0]
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 f8e5 	bl	800ad66 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ab9c:	4b04      	ldr	r3, [pc, #16]	; (800abb0 <USBD_SetConfig+0x118>)
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	4619      	mov	r1, r3
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f7ff f98c 	bl	8009ec0 <USBD_ClrClassConfig>
        break;
 800aba8:	bf00      	nop
    }
  }
}
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	20001476 	.word	0x20001476

0800abb4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	88db      	ldrh	r3, [r3, #6]
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d004      	beq.n	800abd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800abc6:	6839      	ldr	r1, [r7, #0]
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 f8cc 	bl	800ad66 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800abce:	e021      	b.n	800ac14 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	db17      	blt.n	800ac0a <USBD_GetConfig+0x56>
 800abda:	2b02      	cmp	r3, #2
 800abdc:	dd02      	ble.n	800abe4 <USBD_GetConfig+0x30>
 800abde:	2b03      	cmp	r3, #3
 800abe0:	d00b      	beq.n	800abfa <USBD_GetConfig+0x46>
 800abe2:	e012      	b.n	800ac0a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	3308      	adds	r3, #8
 800abee:	2201      	movs	r2, #1
 800abf0:	4619      	mov	r1, r3
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 f922 	bl	800ae3c <USBD_CtlSendData>
        break;
 800abf8:	e00c      	b.n	800ac14 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	3304      	adds	r3, #4
 800abfe:	2201      	movs	r2, #1
 800ac00:	4619      	mov	r1, r3
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 f91a 	bl	800ae3c <USBD_CtlSendData>
        break;
 800ac08:	e004      	b.n	800ac14 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800ac0a:	6839      	ldr	r1, [r7, #0]
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f000 f8aa 	bl	800ad66 <USBD_CtlError>
        break;
 800ac12:	bf00      	nop
}
 800ac14:	bf00      	nop
 800ac16:	3708      	adds	r7, #8
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b082      	sub	sp, #8
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac2c:	3b01      	subs	r3, #1
 800ac2e:	2b02      	cmp	r3, #2
 800ac30:	d81e      	bhi.n	800ac70 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	88db      	ldrh	r3, [r3, #6]
 800ac36:	2b02      	cmp	r3, #2
 800ac38:	d004      	beq.n	800ac44 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800ac3a:	6839      	ldr	r1, [r7, #0]
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 f892 	bl	800ad66 <USBD_CtlError>
        break;
 800ac42:	e01a      	b.n	800ac7a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2201      	movs	r2, #1
 800ac48:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d005      	beq.n	800ac60 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	f043 0202 	orr.w	r2, r3, #2
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	330c      	adds	r3, #12
 800ac64:	2202      	movs	r2, #2
 800ac66:	4619      	mov	r1, r3
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 f8e7 	bl	800ae3c <USBD_CtlSendData>
      break;
 800ac6e:	e004      	b.n	800ac7a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800ac70:	6839      	ldr	r1, [r7, #0]
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 f877 	bl	800ad66 <USBD_CtlError>
      break;
 800ac78:	bf00      	nop
  }
}
 800ac7a:	bf00      	nop
 800ac7c:	3708      	adds	r7, #8
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b082      	sub	sp, #8
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
 800ac8a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	885b      	ldrh	r3, [r3, #2]
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d106      	bne.n	800aca2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2201      	movs	r2, #1
 800ac98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 f92b 	bl	800aef8 <USBD_CtlSendStatus>
  }
}
 800aca2:	bf00      	nop
 800aca4:	3708      	adds	r7, #8
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b082      	sub	sp, #8
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
 800acb2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acba:	3b01      	subs	r3, #1
 800acbc:	2b02      	cmp	r3, #2
 800acbe:	d80b      	bhi.n	800acd8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	885b      	ldrh	r3, [r3, #2]
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d10c      	bne.n	800ace2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2200      	movs	r2, #0
 800accc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 f911 	bl	800aef8 <USBD_CtlSendStatus>
      }
      break;
 800acd6:	e004      	b.n	800ace2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800acd8:	6839      	ldr	r1, [r7, #0]
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 f843 	bl	800ad66 <USBD_CtlError>
      break;
 800ace0:	e000      	b.n	800ace4 <USBD_ClrFeature+0x3a>
      break;
 800ace2:	bf00      	nop
  }
}
 800ace4:	bf00      	nop
 800ace6:	3708      	adds	r7, #8
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	781a      	ldrb	r2, [r3, #0]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	785a      	ldrb	r2, [r3, #1]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	3302      	adds	r3, #2
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	b29a      	uxth	r2, r3
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	3303      	adds	r3, #3
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	021b      	lsls	r3, r3, #8
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	4413      	add	r3, r2
 800ad1c:	b29a      	uxth	r2, r3
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	3304      	adds	r3, #4
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	b29a      	uxth	r2, r3
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	3305      	adds	r3, #5
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	021b      	lsls	r3, r3, #8
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	4413      	add	r3, r2
 800ad38:	b29a      	uxth	r2, r3
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	3306      	adds	r3, #6
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	b29a      	uxth	r2, r3
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	3307      	adds	r3, #7
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	021b      	lsls	r3, r3, #8
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	4413      	add	r3, r2
 800ad54:	b29a      	uxth	r2, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	80da      	strh	r2, [r3, #6]

}
 800ad5a:	bf00      	nop
 800ad5c:	370c      	adds	r7, #12
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr

0800ad66 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b082      	sub	sp, #8
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
 800ad6e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ad70:	2180      	movs	r1, #128	; 0x80
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f001 fdc4 	bl	800c900 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ad78:	2100      	movs	r1, #0
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f001 fdc0 	bl	800c900 <USBD_LL_StallEP>
}
 800ad80:	bf00      	nop
 800ad82:	3708      	adds	r7, #8
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b086      	sub	sp, #24
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	60b9      	str	r1, [r7, #8]
 800ad92:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ad94:	2300      	movs	r3, #0
 800ad96:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d032      	beq.n	800ae04 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	f000 f834 	bl	800ae0c <USBD_GetLen>
 800ada4:	4603      	mov	r3, r0
 800ada6:	3301      	adds	r3, #1
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	005b      	lsls	r3, r3, #1
 800adac:	b29a      	uxth	r2, r3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800adb2:	7dfb      	ldrb	r3, [r7, #23]
 800adb4:	1c5a      	adds	r2, r3, #1
 800adb6:	75fa      	strb	r2, [r7, #23]
 800adb8:	461a      	mov	r2, r3
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	4413      	add	r3, r2
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	7812      	ldrb	r2, [r2, #0]
 800adc2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800adc4:	7dfb      	ldrb	r3, [r7, #23]
 800adc6:	1c5a      	adds	r2, r3, #1
 800adc8:	75fa      	strb	r2, [r7, #23]
 800adca:	461a      	mov	r2, r3
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	4413      	add	r3, r2
 800add0:	2203      	movs	r2, #3
 800add2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800add4:	e012      	b.n	800adfc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	1c5a      	adds	r2, r3, #1
 800adda:	60fa      	str	r2, [r7, #12]
 800addc:	7dfa      	ldrb	r2, [r7, #23]
 800adde:	1c51      	adds	r1, r2, #1
 800ade0:	75f9      	strb	r1, [r7, #23]
 800ade2:	4611      	mov	r1, r2
 800ade4:	68ba      	ldr	r2, [r7, #8]
 800ade6:	440a      	add	r2, r1
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800adec:	7dfb      	ldrb	r3, [r7, #23]
 800adee:	1c5a      	adds	r2, r3, #1
 800adf0:	75fa      	strb	r2, [r7, #23]
 800adf2:	461a      	mov	r2, r3
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	4413      	add	r3, r2
 800adf8:	2200      	movs	r2, #0
 800adfa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d1e8      	bne.n	800add6 <USBD_GetString+0x4e>
    }
  }
}
 800ae04:	bf00      	nop
 800ae06:	3718      	adds	r7, #24
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b085      	sub	sp, #20
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ae14:	2300      	movs	r3, #0
 800ae16:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800ae18:	e005      	b.n	800ae26 <USBD_GetLen+0x1a>
  {
    len++;
 800ae1a:	7bfb      	ldrb	r3, [r7, #15]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	3301      	adds	r3, #1
 800ae24:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d1f5      	bne.n	800ae1a <USBD_GetLen+0xe>
  }

  return len;
 800ae2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3714      	adds	r7, #20
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	4613      	mov	r3, r2
 800ae48:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2202      	movs	r2, #2
 800ae4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ae52:	88fa      	ldrh	r2, [r7, #6]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ae58:	88fa      	ldrh	r2, [r7, #6]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae5e:	88fb      	ldrh	r3, [r7, #6]
 800ae60:	68ba      	ldr	r2, [r7, #8]
 800ae62:	2100      	movs	r1, #0
 800ae64:	68f8      	ldr	r0, [r7, #12]
 800ae66:	f001 fdce 	bl	800ca06 <USBD_LL_Transmit>

  return USBD_OK;
 800ae6a:	2300      	movs	r3, #0
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3710      	adds	r7, #16
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	4613      	mov	r3, r2
 800ae80:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae82:	88fb      	ldrh	r3, [r7, #6]
 800ae84:	68ba      	ldr	r2, [r7, #8]
 800ae86:	2100      	movs	r1, #0
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	f001 fdbc 	bl	800ca06 <USBD_LL_Transmit>

  return USBD_OK;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	4613      	mov	r3, r2
 800aea4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2203      	movs	r2, #3
 800aeaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800aeae:	88fa      	ldrh	r2, [r7, #6]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800aeb6:	88fa      	ldrh	r2, [r7, #6]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aebe:	88fb      	ldrh	r3, [r7, #6]
 800aec0:	68ba      	ldr	r2, [r7, #8]
 800aec2:	2100      	movs	r1, #0
 800aec4:	68f8      	ldr	r0, [r7, #12]
 800aec6:	f001 fdc1 	bl	800ca4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	4613      	mov	r3, r2
 800aee0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aee2:	88fb      	ldrh	r3, [r7, #6]
 800aee4:	68ba      	ldr	r2, [r7, #8]
 800aee6:	2100      	movs	r1, #0
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	f001 fdaf 	bl	800ca4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2204      	movs	r2, #4
 800af04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800af08:	2300      	movs	r3, #0
 800af0a:	2200      	movs	r2, #0
 800af0c:	2100      	movs	r1, #0
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f001 fd79 	bl	800ca06 <USBD_LL_Transmit>

  return USBD_OK;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3708      	adds	r7, #8
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800af1e:	b580      	push	{r7, lr}
 800af20:	b082      	sub	sp, #8
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2205      	movs	r2, #5
 800af2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af2e:	2300      	movs	r3, #0
 800af30:	2200      	movs	r2, #0
 800af32:	2100      	movs	r1, #0
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f001 fd89 	bl	800ca4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3708      	adds	r7, #8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800af44:	b480      	push	{r7}
 800af46:	b085      	sub	sp, #20
 800af48:	af00      	add	r7, sp, #0
 800af4a:	4603      	mov	r3, r0
 800af4c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800af4e:	2300      	movs	r3, #0
 800af50:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800af52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800af56:	2b84      	cmp	r3, #132	; 0x84
 800af58:	d005      	beq.n	800af66 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800af5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	4413      	add	r3, r2
 800af62:	3303      	adds	r3, #3
 800af64:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800af66:	68fb      	ldr	r3, [r7, #12]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3714      	adds	r7, #20
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800af78:	f000 fa58 	bl	800b42c <vTaskStartScheduler>
  
  return osOK;
 800af7c:	2300      	movs	r3, #0
}
 800af7e:	4618      	mov	r0, r3
 800af80:	bd80      	pop	{r7, pc}

0800af82 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800af82:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af84:	b087      	sub	sp, #28
 800af86:	af02      	add	r7, sp, #8
 800af88:	6078      	str	r0, [r7, #4]
 800af8a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	685c      	ldr	r4, [r3, #4]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800af98:	b29e      	uxth	r6, r3
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7ff ffcf 	bl	800af44 <makeFreeRtosPriority>
 800afa6:	4602      	mov	r2, r0
 800afa8:	f107 030c 	add.w	r3, r7, #12
 800afac:	9301      	str	r3, [sp, #4]
 800afae:	9200      	str	r2, [sp, #0]
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	4632      	mov	r2, r6
 800afb4:	4629      	mov	r1, r5
 800afb6:	4620      	mov	r0, r4
 800afb8:	f000 f8d2 	bl	800b160 <xTaskCreate>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d001      	beq.n	800afc6 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800afc2:	2300      	movs	r3, #0
 800afc4:	e000      	b.n	800afc8 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800afc6:	68fb      	ldr	r3, [r7, #12]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3714      	adds	r7, #20
 800afcc:	46bd      	mov	sp, r7
 800afce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800afd0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b084      	sub	sp, #16
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d001      	beq.n	800afe6 <osDelay+0x16>
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	e000      	b.n	800afe8 <osDelay+0x18>
 800afe6:	2301      	movs	r3, #1
 800afe8:	4618      	mov	r0, r3
 800afea:	f000 f9eb 	bl	800b3c4 <vTaskDelay>
  
  return osOK;
 800afee:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3710      	adds	r7, #16
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f103 0208 	add.w	r2, r3, #8
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f04f 32ff 	mov.w	r2, #4294967295
 800b010:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f103 0208 	add.w	r2, r3, #8
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f103 0208 	add.w	r2, r3, #8
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b02c:	bf00      	nop
 800b02e:	370c      	adds	r7, #12
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b038:	b480      	push	{r7}
 800b03a:	b083      	sub	sp, #12
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b046:	bf00      	nop
 800b048:	370c      	adds	r7, #12
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr

0800b052 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b052:	b480      	push	{r7}
 800b054:	b085      	sub	sp, #20
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
 800b05a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	68fa      	ldr	r2, [r7, #12]
 800b066:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	689a      	ldr	r2, [r3, #8]
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	683a      	ldr	r2, [r7, #0]
 800b076:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	683a      	ldr	r2, [r7, #0]
 800b07c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	1c5a      	adds	r2, r3, #1
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	601a      	str	r2, [r3, #0]
}
 800b08e:	bf00      	nop
 800b090:	3714      	adds	r7, #20
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr

0800b09a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b09a:	b480      	push	{r7}
 800b09c:	b085      	sub	sp, #20
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
 800b0a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b0:	d103      	bne.n	800b0ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	60fb      	str	r3, [r7, #12]
 800b0b8:	e00c      	b.n	800b0d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	3308      	adds	r3, #8
 800b0be:	60fb      	str	r3, [r7, #12]
 800b0c0:	e002      	b.n	800b0c8 <vListInsert+0x2e>
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	60fb      	str	r3, [r7, #12]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68ba      	ldr	r2, [r7, #8]
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d2f6      	bcs.n	800b0c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	685a      	ldr	r2, [r3, #4]
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	683a      	ldr	r2, [r7, #0]
 800b0e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	683a      	ldr	r2, [r7, #0]
 800b0ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	1c5a      	adds	r2, r3, #1
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	601a      	str	r2, [r3, #0]
}
 800b100:	bf00      	nop
 800b102:	3714      	adds	r7, #20
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b10c:	b480      	push	{r7}
 800b10e:	b085      	sub	sp, #20
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	691b      	ldr	r3, [r3, #16]
 800b118:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	6892      	ldr	r2, [r2, #8]
 800b122:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	6852      	ldr	r2, [r2, #4]
 800b12c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	429a      	cmp	r2, r3
 800b136:	d103      	bne.n	800b140 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	689a      	ldr	r2, [r3, #8]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	1e5a      	subs	r2, r3, #1
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
}
 800b154:	4618      	mov	r0, r3
 800b156:	3714      	adds	r7, #20
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b160:	b580      	push	{r7, lr}
 800b162:	b08c      	sub	sp, #48	; 0x30
 800b164:	af04      	add	r7, sp, #16
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	603b      	str	r3, [r7, #0]
 800b16c:	4613      	mov	r3, r2
 800b16e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b170:	88fb      	ldrh	r3, [r7, #6]
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	4618      	mov	r0, r3
 800b176:	f000 fe75 	bl	800be64 <pvPortMalloc>
 800b17a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d00e      	beq.n	800b1a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b182:	2054      	movs	r0, #84	; 0x54
 800b184:	f000 fe6e 	bl	800be64 <pvPortMalloc>
 800b188:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b18a:	69fb      	ldr	r3, [r7, #28]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d003      	beq.n	800b198 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b190:	69fb      	ldr	r3, [r7, #28]
 800b192:	697a      	ldr	r2, [r7, #20]
 800b194:	631a      	str	r2, [r3, #48]	; 0x30
 800b196:	e005      	b.n	800b1a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b198:	6978      	ldr	r0, [r7, #20]
 800b19a:	f000 ff25 	bl	800bfe8 <vPortFree>
 800b19e:	e001      	b.n	800b1a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d013      	beq.n	800b1d2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b1aa:	88fa      	ldrh	r2, [r7, #6]
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	9303      	str	r3, [sp, #12]
 800b1b0:	69fb      	ldr	r3, [r7, #28]
 800b1b2:	9302      	str	r3, [sp, #8]
 800b1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b6:	9301      	str	r3, [sp, #4]
 800b1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	68b9      	ldr	r1, [r7, #8]
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f000 f80e 	bl	800b1e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1c6:	69f8      	ldr	r0, [r7, #28]
 800b1c8:	f000 f892 	bl	800b2f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	61bb      	str	r3, [r7, #24]
 800b1d0:	e002      	b.n	800b1d8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b1d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b1d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b1d8:	69bb      	ldr	r3, [r7, #24]
	}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3720      	adds	r7, #32
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}

0800b1e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b1e2:	b580      	push	{r7, lr}
 800b1e4:	b088      	sub	sp, #32
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	60f8      	str	r0, [r7, #12]
 800b1ea:	60b9      	str	r1, [r7, #8]
 800b1ec:	607a      	str	r2, [r7, #4]
 800b1ee:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b1fa:	3b01      	subs	r3, #1
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	4413      	add	r3, r2
 800b200:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b202:	69bb      	ldr	r3, [r7, #24]
 800b204:	f023 0307 	bic.w	r3, r3, #7
 800b208:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b20a:	69bb      	ldr	r3, [r7, #24]
 800b20c:	f003 0307 	and.w	r3, r3, #7
 800b210:	2b00      	cmp	r3, #0
 800b212:	d009      	beq.n	800b228 <prvInitialiseNewTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b218:	f383 8811 	msr	BASEPRI, r3
 800b21c:	f3bf 8f6f 	isb	sy
 800b220:	f3bf 8f4f 	dsb	sy
 800b224:	617b      	str	r3, [r7, #20]
 800b226:	e7fe      	b.n	800b226 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d01f      	beq.n	800b26e <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b22e:	2300      	movs	r3, #0
 800b230:	61fb      	str	r3, [r7, #28]
 800b232:	e012      	b.n	800b25a <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b234:	68ba      	ldr	r2, [r7, #8]
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	4413      	add	r3, r2
 800b23a:	7819      	ldrb	r1, [r3, #0]
 800b23c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	4413      	add	r3, r2
 800b242:	3334      	adds	r3, #52	; 0x34
 800b244:	460a      	mov	r2, r1
 800b246:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b248:	68ba      	ldr	r2, [r7, #8]
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	4413      	add	r3, r2
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d006      	beq.n	800b262 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b254:	69fb      	ldr	r3, [r7, #28]
 800b256:	3301      	adds	r3, #1
 800b258:	61fb      	str	r3, [r7, #28]
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	2b0f      	cmp	r3, #15
 800b25e:	d9e9      	bls.n	800b234 <prvInitialiseNewTask+0x52>
 800b260:	e000      	b.n	800b264 <prvInitialiseNewTask+0x82>
			{
				break;
 800b262:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b266:	2200      	movs	r2, #0
 800b268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b26c:	e003      	b.n	800b276 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b270:	2200      	movs	r2, #0
 800b272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b278:	2b06      	cmp	r3, #6
 800b27a:	d901      	bls.n	800b280 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b27c:	2306      	movs	r3, #6
 800b27e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b284:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b288:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b28a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28e:	2200      	movs	r2, #0
 800b290:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b294:	3304      	adds	r3, #4
 800b296:	4618      	mov	r0, r3
 800b298:	f7ff fece 	bl	800b038 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29e:	3318      	adds	r3, #24
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7ff fec9 	bl	800b038 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ae:	f1c3 0207 	rsb	r2, r3, #7
 800b2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2be:	2200      	movs	r2, #0
 800b2c0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b2ca:	683a      	ldr	r2, [r7, #0]
 800b2cc:	68f9      	ldr	r1, [r7, #12]
 800b2ce:	69b8      	ldr	r0, [r7, #24]
 800b2d0:	f000 fbc8 	bl	800ba64 <pxPortInitialiseStack>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d002      	beq.n	800b2e6 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2e6:	bf00      	nop
 800b2e8:	3720      	adds	r7, #32
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
	...

0800b2f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b2f8:	f000 fcd8 	bl	800bcac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b2fc:	4b2a      	ldr	r3, [pc, #168]	; (800b3a8 <prvAddNewTaskToReadyList+0xb8>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	3301      	adds	r3, #1
 800b302:	4a29      	ldr	r2, [pc, #164]	; (800b3a8 <prvAddNewTaskToReadyList+0xb8>)
 800b304:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b306:	4b29      	ldr	r3, [pc, #164]	; (800b3ac <prvAddNewTaskToReadyList+0xbc>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d109      	bne.n	800b322 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b30e:	4a27      	ldr	r2, [pc, #156]	; (800b3ac <prvAddNewTaskToReadyList+0xbc>)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b314:	4b24      	ldr	r3, [pc, #144]	; (800b3a8 <prvAddNewTaskToReadyList+0xb8>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d110      	bne.n	800b33e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b31c:	f000 faa0 	bl	800b860 <prvInitialiseTaskLists>
 800b320:	e00d      	b.n	800b33e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b322:	4b23      	ldr	r3, [pc, #140]	; (800b3b0 <prvAddNewTaskToReadyList+0xc0>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d109      	bne.n	800b33e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b32a:	4b20      	ldr	r3, [pc, #128]	; (800b3ac <prvAddNewTaskToReadyList+0xbc>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b334:	429a      	cmp	r2, r3
 800b336:	d802      	bhi.n	800b33e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b338:	4a1c      	ldr	r2, [pc, #112]	; (800b3ac <prvAddNewTaskToReadyList+0xbc>)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b33e:	4b1d      	ldr	r3, [pc, #116]	; (800b3b4 <prvAddNewTaskToReadyList+0xc4>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	3301      	adds	r3, #1
 800b344:	4a1b      	ldr	r2, [pc, #108]	; (800b3b4 <prvAddNewTaskToReadyList+0xc4>)
 800b346:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b34c:	2201      	movs	r2, #1
 800b34e:	409a      	lsls	r2, r3
 800b350:	4b19      	ldr	r3, [pc, #100]	; (800b3b8 <prvAddNewTaskToReadyList+0xc8>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4313      	orrs	r3, r2
 800b356:	4a18      	ldr	r2, [pc, #96]	; (800b3b8 <prvAddNewTaskToReadyList+0xc8>)
 800b358:	6013      	str	r3, [r2, #0]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b35e:	4613      	mov	r3, r2
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	4413      	add	r3, r2
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	4a15      	ldr	r2, [pc, #84]	; (800b3bc <prvAddNewTaskToReadyList+0xcc>)
 800b368:	441a      	add	r2, r3
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	3304      	adds	r3, #4
 800b36e:	4619      	mov	r1, r3
 800b370:	4610      	mov	r0, r2
 800b372:	f7ff fe6e 	bl	800b052 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b376:	f000 fcc7 	bl	800bd08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b37a:	4b0d      	ldr	r3, [pc, #52]	; (800b3b0 <prvAddNewTaskToReadyList+0xc0>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00e      	beq.n	800b3a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b382:	4b0a      	ldr	r3, [pc, #40]	; (800b3ac <prvAddNewTaskToReadyList+0xbc>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d207      	bcs.n	800b3a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b390:	4b0b      	ldr	r3, [pc, #44]	; (800b3c0 <prvAddNewTaskToReadyList+0xd0>)
 800b392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b396:	601a      	str	r2, [r3, #0]
 800b398:	f3bf 8f4f 	dsb	sy
 800b39c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3a0:	bf00      	nop
 800b3a2:	3708      	adds	r7, #8
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	20001578 	.word	0x20001578
 800b3ac:	20001478 	.word	0x20001478
 800b3b0:	20001584 	.word	0x20001584
 800b3b4:	20001594 	.word	0x20001594
 800b3b8:	20001580 	.word	0x20001580
 800b3bc:	2000147c 	.word	0x2000147c
 800b3c0:	e000ed04 	.word	0xe000ed04

0800b3c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d016      	beq.n	800b404 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b3d6:	4b13      	ldr	r3, [pc, #76]	; (800b424 <vTaskDelay+0x60>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d009      	beq.n	800b3f2 <vTaskDelay+0x2e>
 800b3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e2:	f383 8811 	msr	BASEPRI, r3
 800b3e6:	f3bf 8f6f 	isb	sy
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	60bb      	str	r3, [r7, #8]
 800b3f0:	e7fe      	b.n	800b3f0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b3f2:	f000 f861 	bl	800b4b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b3f6:	2100      	movs	r1, #0
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 facd 	bl	800b998 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b3fe:	f000 f869 	bl	800b4d4 <xTaskResumeAll>
 800b402:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d107      	bne.n	800b41a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b40a:	4b07      	ldr	r3, [pc, #28]	; (800b428 <vTaskDelay+0x64>)
 800b40c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b410:	601a      	str	r2, [r3, #0]
 800b412:	f3bf 8f4f 	dsb	sy
 800b416:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b41a:	bf00      	nop
 800b41c:	3710      	adds	r7, #16
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	200015a0 	.word	0x200015a0
 800b428:	e000ed04 	.word	0xe000ed04

0800b42c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b086      	sub	sp, #24
 800b430:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800b432:	4b1b      	ldr	r3, [pc, #108]	; (800b4a0 <vTaskStartScheduler+0x74>)
 800b434:	9301      	str	r3, [sp, #4]
 800b436:	2300      	movs	r3, #0
 800b438:	9300      	str	r3, [sp, #0]
 800b43a:	2300      	movs	r3, #0
 800b43c:	2280      	movs	r2, #128	; 0x80
 800b43e:	4919      	ldr	r1, [pc, #100]	; (800b4a4 <vTaskStartScheduler+0x78>)
 800b440:	4819      	ldr	r0, [pc, #100]	; (800b4a8 <vTaskStartScheduler+0x7c>)
 800b442:	f7ff fe8d 	bl	800b160 <xTaskCreate>
 800b446:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d115      	bne.n	800b47a <vTaskStartScheduler+0x4e>
 800b44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b460:	4b12      	ldr	r3, [pc, #72]	; (800b4ac <vTaskStartScheduler+0x80>)
 800b462:	f04f 32ff 	mov.w	r2, #4294967295
 800b466:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b468:	4b11      	ldr	r3, [pc, #68]	; (800b4b0 <vTaskStartScheduler+0x84>)
 800b46a:	2201      	movs	r2, #1
 800b46c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b46e:	4b11      	ldr	r3, [pc, #68]	; (800b4b4 <vTaskStartScheduler+0x88>)
 800b470:	2200      	movs	r2, #0
 800b472:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b474:	f000 fb7c 	bl	800bb70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b478:	e00d      	b.n	800b496 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b480:	d109      	bne.n	800b496 <vTaskStartScheduler+0x6a>
 800b482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b486:	f383 8811 	msr	BASEPRI, r3
 800b48a:	f3bf 8f6f 	isb	sy
 800b48e:	f3bf 8f4f 	dsb	sy
 800b492:	607b      	str	r3, [r7, #4]
 800b494:	e7fe      	b.n	800b494 <vTaskStartScheduler+0x68>
}
 800b496:	bf00      	nop
 800b498:	3710      	adds	r7, #16
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
 800b49e:	bf00      	nop
 800b4a0:	2000159c 	.word	0x2000159c
 800b4a4:	0800d1d0 	.word	0x0800d1d0
 800b4a8:	0800b831 	.word	0x0800b831
 800b4ac:	20001598 	.word	0x20001598
 800b4b0:	20001584 	.word	0x20001584
 800b4b4:	2000157c 	.word	0x2000157c

0800b4b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b4bc:	4b04      	ldr	r3, [pc, #16]	; (800b4d0 <vTaskSuspendAll+0x18>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	4a03      	ldr	r2, [pc, #12]	; (800b4d0 <vTaskSuspendAll+0x18>)
 800b4c4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b4c6:	bf00      	nop
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr
 800b4d0:	200015a0 	.word	0x200015a0

0800b4d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b4e2:	4b41      	ldr	r3, [pc, #260]	; (800b5e8 <xTaskResumeAll+0x114>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d109      	bne.n	800b4fe <xTaskResumeAll+0x2a>
 800b4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ee:	f383 8811 	msr	BASEPRI, r3
 800b4f2:	f3bf 8f6f 	isb	sy
 800b4f6:	f3bf 8f4f 	dsb	sy
 800b4fa:	603b      	str	r3, [r7, #0]
 800b4fc:	e7fe      	b.n	800b4fc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b4fe:	f000 fbd5 	bl	800bcac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b502:	4b39      	ldr	r3, [pc, #228]	; (800b5e8 <xTaskResumeAll+0x114>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	3b01      	subs	r3, #1
 800b508:	4a37      	ldr	r2, [pc, #220]	; (800b5e8 <xTaskResumeAll+0x114>)
 800b50a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b50c:	4b36      	ldr	r3, [pc, #216]	; (800b5e8 <xTaskResumeAll+0x114>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d161      	bne.n	800b5d8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b514:	4b35      	ldr	r3, [pc, #212]	; (800b5ec <xTaskResumeAll+0x118>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d05d      	beq.n	800b5d8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b51c:	e02e      	b.n	800b57c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b51e:	4b34      	ldr	r3, [pc, #208]	; (800b5f0 <xTaskResumeAll+0x11c>)
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	3318      	adds	r3, #24
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7ff fdee 	bl	800b10c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	3304      	adds	r3, #4
 800b534:	4618      	mov	r0, r3
 800b536:	f7ff fde9 	bl	800b10c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b53e:	2201      	movs	r2, #1
 800b540:	409a      	lsls	r2, r3
 800b542:	4b2c      	ldr	r3, [pc, #176]	; (800b5f4 <xTaskResumeAll+0x120>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4313      	orrs	r3, r2
 800b548:	4a2a      	ldr	r2, [pc, #168]	; (800b5f4 <xTaskResumeAll+0x120>)
 800b54a:	6013      	str	r3, [r2, #0]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b550:	4613      	mov	r3, r2
 800b552:	009b      	lsls	r3, r3, #2
 800b554:	4413      	add	r3, r2
 800b556:	009b      	lsls	r3, r3, #2
 800b558:	4a27      	ldr	r2, [pc, #156]	; (800b5f8 <xTaskResumeAll+0x124>)
 800b55a:	441a      	add	r2, r3
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	3304      	adds	r3, #4
 800b560:	4619      	mov	r1, r3
 800b562:	4610      	mov	r0, r2
 800b564:	f7ff fd75 	bl	800b052 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b56c:	4b23      	ldr	r3, [pc, #140]	; (800b5fc <xTaskResumeAll+0x128>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b572:	429a      	cmp	r2, r3
 800b574:	d302      	bcc.n	800b57c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800b576:	4b22      	ldr	r3, [pc, #136]	; (800b600 <xTaskResumeAll+0x12c>)
 800b578:	2201      	movs	r2, #1
 800b57a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b57c:	4b1c      	ldr	r3, [pc, #112]	; (800b5f0 <xTaskResumeAll+0x11c>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d1cc      	bne.n	800b51e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d001      	beq.n	800b58e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b58a:	f000 f9e5 	bl	800b958 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b58e:	4b1d      	ldr	r3, [pc, #116]	; (800b604 <xTaskResumeAll+0x130>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d010      	beq.n	800b5bc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b59a:	f000 f837 	bl	800b60c <xTaskIncrementTick>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d002      	beq.n	800b5aa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800b5a4:	4b16      	ldr	r3, [pc, #88]	; (800b600 <xTaskResumeAll+0x12c>)
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	3b01      	subs	r3, #1
 800b5ae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d1f1      	bne.n	800b59a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800b5b6:	4b13      	ldr	r3, [pc, #76]	; (800b604 <xTaskResumeAll+0x130>)
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b5bc:	4b10      	ldr	r3, [pc, #64]	; (800b600 <xTaskResumeAll+0x12c>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d009      	beq.n	800b5d8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b5c8:	4b0f      	ldr	r3, [pc, #60]	; (800b608 <xTaskResumeAll+0x134>)
 800b5ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5ce:	601a      	str	r2, [r3, #0]
 800b5d0:	f3bf 8f4f 	dsb	sy
 800b5d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b5d8:	f000 fb96 	bl	800bd08 <vPortExitCritical>

	return xAlreadyYielded;
 800b5dc:	68bb      	ldr	r3, [r7, #8]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3710      	adds	r7, #16
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	200015a0 	.word	0x200015a0
 800b5ec:	20001578 	.word	0x20001578
 800b5f0:	20001538 	.word	0x20001538
 800b5f4:	20001580 	.word	0x20001580
 800b5f8:	2000147c 	.word	0x2000147c
 800b5fc:	20001478 	.word	0x20001478
 800b600:	2000158c 	.word	0x2000158c
 800b604:	20001588 	.word	0x20001588
 800b608:	e000ed04 	.word	0xe000ed04

0800b60c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b086      	sub	sp, #24
 800b610:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b612:	2300      	movs	r3, #0
 800b614:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b616:	4b4e      	ldr	r3, [pc, #312]	; (800b750 <xTaskIncrementTick+0x144>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	f040 8087 	bne.w	800b72e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b620:	4b4c      	ldr	r3, [pc, #304]	; (800b754 <xTaskIncrementTick+0x148>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	3301      	adds	r3, #1
 800b626:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b628:	4a4a      	ldr	r2, [pc, #296]	; (800b754 <xTaskIncrementTick+0x148>)
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d11f      	bne.n	800b674 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b634:	4b48      	ldr	r3, [pc, #288]	; (800b758 <xTaskIncrementTick+0x14c>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d009      	beq.n	800b652 <xTaskIncrementTick+0x46>
 800b63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b642:	f383 8811 	msr	BASEPRI, r3
 800b646:	f3bf 8f6f 	isb	sy
 800b64a:	f3bf 8f4f 	dsb	sy
 800b64e:	603b      	str	r3, [r7, #0]
 800b650:	e7fe      	b.n	800b650 <xTaskIncrementTick+0x44>
 800b652:	4b41      	ldr	r3, [pc, #260]	; (800b758 <xTaskIncrementTick+0x14c>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	60fb      	str	r3, [r7, #12]
 800b658:	4b40      	ldr	r3, [pc, #256]	; (800b75c <xTaskIncrementTick+0x150>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4a3e      	ldr	r2, [pc, #248]	; (800b758 <xTaskIncrementTick+0x14c>)
 800b65e:	6013      	str	r3, [r2, #0]
 800b660:	4a3e      	ldr	r2, [pc, #248]	; (800b75c <xTaskIncrementTick+0x150>)
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	6013      	str	r3, [r2, #0]
 800b666:	4b3e      	ldr	r3, [pc, #248]	; (800b760 <xTaskIncrementTick+0x154>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	3301      	adds	r3, #1
 800b66c:	4a3c      	ldr	r2, [pc, #240]	; (800b760 <xTaskIncrementTick+0x154>)
 800b66e:	6013      	str	r3, [r2, #0]
 800b670:	f000 f972 	bl	800b958 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b674:	4b3b      	ldr	r3, [pc, #236]	; (800b764 <xTaskIncrementTick+0x158>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	693a      	ldr	r2, [r7, #16]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d348      	bcc.n	800b710 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b67e:	4b36      	ldr	r3, [pc, #216]	; (800b758 <xTaskIncrementTick+0x14c>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d104      	bne.n	800b692 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b688:	4b36      	ldr	r3, [pc, #216]	; (800b764 <xTaskIncrementTick+0x158>)
 800b68a:	f04f 32ff 	mov.w	r2, #4294967295
 800b68e:	601a      	str	r2, [r3, #0]
					break;
 800b690:	e03e      	b.n	800b710 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b692:	4b31      	ldr	r3, [pc, #196]	; (800b758 <xTaskIncrementTick+0x14c>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	68db      	ldr	r3, [r3, #12]
 800b69a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b6a2:	693a      	ldr	r2, [r7, #16]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d203      	bcs.n	800b6b2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b6aa:	4a2e      	ldr	r2, [pc, #184]	; (800b764 <xTaskIncrementTick+0x158>)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b6b0:	e02e      	b.n	800b710 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	3304      	adds	r3, #4
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7ff fd28 	bl	800b10c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d004      	beq.n	800b6ce <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	3318      	adds	r3, #24
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7ff fd1f 	bl	800b10c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	409a      	lsls	r2, r3
 800b6d6:	4b24      	ldr	r3, [pc, #144]	; (800b768 <xTaskIncrementTick+0x15c>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4313      	orrs	r3, r2
 800b6dc:	4a22      	ldr	r2, [pc, #136]	; (800b768 <xTaskIncrementTick+0x15c>)
 800b6de:	6013      	str	r3, [r2, #0]
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6e4:	4613      	mov	r3, r2
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	4413      	add	r3, r2
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	4a1f      	ldr	r2, [pc, #124]	; (800b76c <xTaskIncrementTick+0x160>)
 800b6ee:	441a      	add	r2, r3
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	3304      	adds	r3, #4
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	4610      	mov	r0, r2
 800b6f8:	f7ff fcab 	bl	800b052 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b700:	4b1b      	ldr	r3, [pc, #108]	; (800b770 <xTaskIncrementTick+0x164>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b706:	429a      	cmp	r2, r3
 800b708:	d3b9      	bcc.n	800b67e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b70a:	2301      	movs	r3, #1
 800b70c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b70e:	e7b6      	b.n	800b67e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b710:	4b17      	ldr	r3, [pc, #92]	; (800b770 <xTaskIncrementTick+0x164>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b716:	4915      	ldr	r1, [pc, #84]	; (800b76c <xTaskIncrementTick+0x160>)
 800b718:	4613      	mov	r3, r2
 800b71a:	009b      	lsls	r3, r3, #2
 800b71c:	4413      	add	r3, r2
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	440b      	add	r3, r1
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	2b01      	cmp	r3, #1
 800b726:	d907      	bls.n	800b738 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800b728:	2301      	movs	r3, #1
 800b72a:	617b      	str	r3, [r7, #20]
 800b72c:	e004      	b.n	800b738 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b72e:	4b11      	ldr	r3, [pc, #68]	; (800b774 <xTaskIncrementTick+0x168>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	3301      	adds	r3, #1
 800b734:	4a0f      	ldr	r2, [pc, #60]	; (800b774 <xTaskIncrementTick+0x168>)
 800b736:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b738:	4b0f      	ldr	r3, [pc, #60]	; (800b778 <xTaskIncrementTick+0x16c>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d001      	beq.n	800b744 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800b740:	2301      	movs	r3, #1
 800b742:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b744:	697b      	ldr	r3, [r7, #20]
}
 800b746:	4618      	mov	r0, r3
 800b748:	3718      	adds	r7, #24
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	200015a0 	.word	0x200015a0
 800b754:	2000157c 	.word	0x2000157c
 800b758:	20001530 	.word	0x20001530
 800b75c:	20001534 	.word	0x20001534
 800b760:	20001590 	.word	0x20001590
 800b764:	20001598 	.word	0x20001598
 800b768:	20001580 	.word	0x20001580
 800b76c:	2000147c 	.word	0x2000147c
 800b770:	20001478 	.word	0x20001478
 800b774:	20001588 	.word	0x20001588
 800b778:	2000158c 	.word	0x2000158c

0800b77c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b77c:	b480      	push	{r7}
 800b77e:	b087      	sub	sp, #28
 800b780:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b782:	4b26      	ldr	r3, [pc, #152]	; (800b81c <vTaskSwitchContext+0xa0>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d003      	beq.n	800b792 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b78a:	4b25      	ldr	r3, [pc, #148]	; (800b820 <vTaskSwitchContext+0xa4>)
 800b78c:	2201      	movs	r2, #1
 800b78e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b790:	e03e      	b.n	800b810 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800b792:	4b23      	ldr	r3, [pc, #140]	; (800b820 <vTaskSwitchContext+0xa4>)
 800b794:	2200      	movs	r2, #0
 800b796:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b798:	4b22      	ldr	r3, [pc, #136]	; (800b824 <vTaskSwitchContext+0xa8>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	fab3 f383 	clz	r3, r3
 800b7a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b7a6:	7afb      	ldrb	r3, [r7, #11]
 800b7a8:	f1c3 031f 	rsb	r3, r3, #31
 800b7ac:	617b      	str	r3, [r7, #20]
 800b7ae:	491e      	ldr	r1, [pc, #120]	; (800b828 <vTaskSwitchContext+0xac>)
 800b7b0:	697a      	ldr	r2, [r7, #20]
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	4413      	add	r3, r2
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	440b      	add	r3, r1
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d109      	bne.n	800b7d6 <vTaskSwitchContext+0x5a>
	__asm volatile
 800b7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c6:	f383 8811 	msr	BASEPRI, r3
 800b7ca:	f3bf 8f6f 	isb	sy
 800b7ce:	f3bf 8f4f 	dsb	sy
 800b7d2:	607b      	str	r3, [r7, #4]
 800b7d4:	e7fe      	b.n	800b7d4 <vTaskSwitchContext+0x58>
 800b7d6:	697a      	ldr	r2, [r7, #20]
 800b7d8:	4613      	mov	r3, r2
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	4413      	add	r3, r2
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	4a11      	ldr	r2, [pc, #68]	; (800b828 <vTaskSwitchContext+0xac>)
 800b7e2:	4413      	add	r3, r2
 800b7e4:	613b      	str	r3, [r7, #16]
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	685a      	ldr	r2, [r3, #4]
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	605a      	str	r2, [r3, #4]
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	685a      	ldr	r2, [r3, #4]
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	3308      	adds	r3, #8
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d104      	bne.n	800b806 <vTaskSwitchContext+0x8a>
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	685a      	ldr	r2, [r3, #4]
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	605a      	str	r2, [r3, #4]
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	4a07      	ldr	r2, [pc, #28]	; (800b82c <vTaskSwitchContext+0xb0>)
 800b80e:	6013      	str	r3, [r2, #0]
}
 800b810:	bf00      	nop
 800b812:	371c      	adds	r7, #28
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr
 800b81c:	200015a0 	.word	0x200015a0
 800b820:	2000158c 	.word	0x2000158c
 800b824:	20001580 	.word	0x20001580
 800b828:	2000147c 	.word	0x2000147c
 800b82c:	20001478 	.word	0x20001478

0800b830 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b838:	f000 f852 	bl	800b8e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b83c:	4b06      	ldr	r3, [pc, #24]	; (800b858 <prvIdleTask+0x28>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2b01      	cmp	r3, #1
 800b842:	d9f9      	bls.n	800b838 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b844:	4b05      	ldr	r3, [pc, #20]	; (800b85c <prvIdleTask+0x2c>)
 800b846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b84a:	601a      	str	r2, [r3, #0]
 800b84c:	f3bf 8f4f 	dsb	sy
 800b850:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b854:	e7f0      	b.n	800b838 <prvIdleTask+0x8>
 800b856:	bf00      	nop
 800b858:	2000147c 	.word	0x2000147c
 800b85c:	e000ed04 	.word	0xe000ed04

0800b860 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b866:	2300      	movs	r3, #0
 800b868:	607b      	str	r3, [r7, #4]
 800b86a:	e00c      	b.n	800b886 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	4613      	mov	r3, r2
 800b870:	009b      	lsls	r3, r3, #2
 800b872:	4413      	add	r3, r2
 800b874:	009b      	lsls	r3, r3, #2
 800b876:	4a12      	ldr	r2, [pc, #72]	; (800b8c0 <prvInitialiseTaskLists+0x60>)
 800b878:	4413      	add	r3, r2
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7ff fbbc 	bl	800aff8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	3301      	adds	r3, #1
 800b884:	607b      	str	r3, [r7, #4]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2b06      	cmp	r3, #6
 800b88a:	d9ef      	bls.n	800b86c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b88c:	480d      	ldr	r0, [pc, #52]	; (800b8c4 <prvInitialiseTaskLists+0x64>)
 800b88e:	f7ff fbb3 	bl	800aff8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b892:	480d      	ldr	r0, [pc, #52]	; (800b8c8 <prvInitialiseTaskLists+0x68>)
 800b894:	f7ff fbb0 	bl	800aff8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b898:	480c      	ldr	r0, [pc, #48]	; (800b8cc <prvInitialiseTaskLists+0x6c>)
 800b89a:	f7ff fbad 	bl	800aff8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b89e:	480c      	ldr	r0, [pc, #48]	; (800b8d0 <prvInitialiseTaskLists+0x70>)
 800b8a0:	f7ff fbaa 	bl	800aff8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b8a4:	480b      	ldr	r0, [pc, #44]	; (800b8d4 <prvInitialiseTaskLists+0x74>)
 800b8a6:	f7ff fba7 	bl	800aff8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b8aa:	4b0b      	ldr	r3, [pc, #44]	; (800b8d8 <prvInitialiseTaskLists+0x78>)
 800b8ac:	4a05      	ldr	r2, [pc, #20]	; (800b8c4 <prvInitialiseTaskLists+0x64>)
 800b8ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b8b0:	4b0a      	ldr	r3, [pc, #40]	; (800b8dc <prvInitialiseTaskLists+0x7c>)
 800b8b2:	4a05      	ldr	r2, [pc, #20]	; (800b8c8 <prvInitialiseTaskLists+0x68>)
 800b8b4:	601a      	str	r2, [r3, #0]
}
 800b8b6:	bf00      	nop
 800b8b8:	3708      	adds	r7, #8
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	2000147c 	.word	0x2000147c
 800b8c4:	20001508 	.word	0x20001508
 800b8c8:	2000151c 	.word	0x2000151c
 800b8cc:	20001538 	.word	0x20001538
 800b8d0:	2000154c 	.word	0x2000154c
 800b8d4:	20001564 	.word	0x20001564
 800b8d8:	20001530 	.word	0x20001530
 800b8dc:	20001534 	.word	0x20001534

0800b8e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b8e6:	e019      	b.n	800b91c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b8e8:	f000 f9e0 	bl	800bcac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8ec:	4b0f      	ldr	r3, [pc, #60]	; (800b92c <prvCheckTasksWaitingTermination+0x4c>)
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	68db      	ldr	r3, [r3, #12]
 800b8f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7ff fc07 	bl	800b10c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b8fe:	4b0c      	ldr	r3, [pc, #48]	; (800b930 <prvCheckTasksWaitingTermination+0x50>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	3b01      	subs	r3, #1
 800b904:	4a0a      	ldr	r2, [pc, #40]	; (800b930 <prvCheckTasksWaitingTermination+0x50>)
 800b906:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b908:	4b0a      	ldr	r3, [pc, #40]	; (800b934 <prvCheckTasksWaitingTermination+0x54>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	3b01      	subs	r3, #1
 800b90e:	4a09      	ldr	r2, [pc, #36]	; (800b934 <prvCheckTasksWaitingTermination+0x54>)
 800b910:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b912:	f000 f9f9 	bl	800bd08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 f80e 	bl	800b938 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b91c:	4b05      	ldr	r3, [pc, #20]	; (800b934 <prvCheckTasksWaitingTermination+0x54>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d1e1      	bne.n	800b8e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b924:	bf00      	nop
 800b926:	3708      	adds	r7, #8
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	2000154c 	.word	0x2000154c
 800b930:	20001578 	.word	0x20001578
 800b934:	20001560 	.word	0x20001560

0800b938 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b944:	4618      	mov	r0, r3
 800b946:	f000 fb4f 	bl	800bfe8 <vPortFree>
			vPortFree( pxTCB );
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 fb4c 	bl	800bfe8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b950:	bf00      	nop
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b95e:	4b0c      	ldr	r3, [pc, #48]	; (800b990 <prvResetNextTaskUnblockTime+0x38>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d104      	bne.n	800b972 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b968:	4b0a      	ldr	r3, [pc, #40]	; (800b994 <prvResetNextTaskUnblockTime+0x3c>)
 800b96a:	f04f 32ff 	mov.w	r2, #4294967295
 800b96e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b970:	e008      	b.n	800b984 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b972:	4b07      	ldr	r3, [pc, #28]	; (800b990 <prvResetNextTaskUnblockTime+0x38>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	4a04      	ldr	r2, [pc, #16]	; (800b994 <prvResetNextTaskUnblockTime+0x3c>)
 800b982:	6013      	str	r3, [r2, #0]
}
 800b984:	bf00      	nop
 800b986:	370c      	adds	r7, #12
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr
 800b990:	20001530 	.word	0x20001530
 800b994:	20001598 	.word	0x20001598

0800b998 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b9a2:	4b29      	ldr	r3, [pc, #164]	; (800ba48 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9a8:	4b28      	ldr	r3, [pc, #160]	; (800ba4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	3304      	adds	r3, #4
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7ff fbac 	bl	800b10c <uxListRemove>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d10b      	bne.n	800b9d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b9ba:	4b24      	ldr	r3, [pc, #144]	; (800ba4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b9c6:	43da      	mvns	r2, r3
 800b9c8:	4b21      	ldr	r3, [pc, #132]	; (800ba50 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4013      	ands	r3, r2
 800b9ce:	4a20      	ldr	r2, [pc, #128]	; (800ba50 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b9d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9d8:	d10a      	bne.n	800b9f0 <prvAddCurrentTaskToDelayedList+0x58>
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d007      	beq.n	800b9f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9e0:	4b1a      	ldr	r3, [pc, #104]	; (800ba4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	3304      	adds	r3, #4
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	481a      	ldr	r0, [pc, #104]	; (800ba54 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b9ea:	f7ff fb32 	bl	800b052 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b9ee:	e026      	b.n	800ba3e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b9f0:	68fa      	ldr	r2, [r7, #12]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	4413      	add	r3, r2
 800b9f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b9f8:	4b14      	ldr	r3, [pc, #80]	; (800ba4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba00:	68ba      	ldr	r2, [r7, #8]
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d209      	bcs.n	800ba1c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba08:	4b13      	ldr	r3, [pc, #76]	; (800ba58 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	4b0f      	ldr	r3, [pc, #60]	; (800ba4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	3304      	adds	r3, #4
 800ba12:	4619      	mov	r1, r3
 800ba14:	4610      	mov	r0, r2
 800ba16:	f7ff fb40 	bl	800b09a <vListInsert>
}
 800ba1a:	e010      	b.n	800ba3e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba1c:	4b0f      	ldr	r3, [pc, #60]	; (800ba5c <prvAddCurrentTaskToDelayedList+0xc4>)
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	4b0a      	ldr	r3, [pc, #40]	; (800ba4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	3304      	adds	r3, #4
 800ba26:	4619      	mov	r1, r3
 800ba28:	4610      	mov	r0, r2
 800ba2a:	f7ff fb36 	bl	800b09a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ba2e:	4b0c      	ldr	r3, [pc, #48]	; (800ba60 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	68ba      	ldr	r2, [r7, #8]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d202      	bcs.n	800ba3e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ba38:	4a09      	ldr	r2, [pc, #36]	; (800ba60 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	6013      	str	r3, [r2, #0]
}
 800ba3e:	bf00      	nop
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	2000157c 	.word	0x2000157c
 800ba4c:	20001478 	.word	0x20001478
 800ba50:	20001580 	.word	0x20001580
 800ba54:	20001564 	.word	0x20001564
 800ba58:	20001534 	.word	0x20001534
 800ba5c:	20001530 	.word	0x20001530
 800ba60:	20001598 	.word	0x20001598

0800ba64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ba64:	b480      	push	{r7}
 800ba66:	b085      	sub	sp, #20
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	60f8      	str	r0, [r7, #12]
 800ba6c:	60b9      	str	r1, [r7, #8]
 800ba6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	3b04      	subs	r3, #4
 800ba74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ba7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	3b04      	subs	r3, #4
 800ba82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	f023 0201 	bic.w	r2, r3, #1
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	3b04      	subs	r3, #4
 800ba92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ba94:	4a0c      	ldr	r2, [pc, #48]	; (800bac8 <pxPortInitialiseStack+0x64>)
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	3b14      	subs	r3, #20
 800ba9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	3b04      	subs	r3, #4
 800baaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f06f 0202 	mvn.w	r2, #2
 800bab2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	3b20      	subs	r3, #32
 800bab8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800baba:	68fb      	ldr	r3, [r7, #12]
}
 800babc:	4618      	mov	r0, r3
 800babe:	3714      	adds	r7, #20
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr
 800bac8:	0800bacd 	.word	0x0800bacd

0800bacc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bacc:	b480      	push	{r7}
 800bace:	b085      	sub	sp, #20
 800bad0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bad2:	2300      	movs	r3, #0
 800bad4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bad6:	4b11      	ldr	r3, [pc, #68]	; (800bb1c <prvTaskExitError+0x50>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bade:	d009      	beq.n	800baf4 <prvTaskExitError+0x28>
 800bae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae4:	f383 8811 	msr	BASEPRI, r3
 800bae8:	f3bf 8f6f 	isb	sy
 800baec:	f3bf 8f4f 	dsb	sy
 800baf0:	60fb      	str	r3, [r7, #12]
 800baf2:	e7fe      	b.n	800baf2 <prvTaskExitError+0x26>
 800baf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf8:	f383 8811 	msr	BASEPRI, r3
 800bafc:	f3bf 8f6f 	isb	sy
 800bb00:	f3bf 8f4f 	dsb	sy
 800bb04:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bb06:	bf00      	nop
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d0fc      	beq.n	800bb08 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bb0e:	bf00      	nop
 800bb10:	3714      	adds	r7, #20
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop
 800bb1c:	2000011c 	.word	0x2000011c

0800bb20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bb20:	4b07      	ldr	r3, [pc, #28]	; (800bb40 <pxCurrentTCBConst2>)
 800bb22:	6819      	ldr	r1, [r3, #0]
 800bb24:	6808      	ldr	r0, [r1, #0]
 800bb26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb2a:	f380 8809 	msr	PSP, r0
 800bb2e:	f3bf 8f6f 	isb	sy
 800bb32:	f04f 0000 	mov.w	r0, #0
 800bb36:	f380 8811 	msr	BASEPRI, r0
 800bb3a:	4770      	bx	lr
 800bb3c:	f3af 8000 	nop.w

0800bb40 <pxCurrentTCBConst2>:
 800bb40:	20001478 	.word	0x20001478
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bb44:	bf00      	nop
 800bb46:	bf00      	nop

0800bb48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bb48:	4808      	ldr	r0, [pc, #32]	; (800bb6c <prvPortStartFirstTask+0x24>)
 800bb4a:	6800      	ldr	r0, [r0, #0]
 800bb4c:	6800      	ldr	r0, [r0, #0]
 800bb4e:	f380 8808 	msr	MSP, r0
 800bb52:	f04f 0000 	mov.w	r0, #0
 800bb56:	f380 8814 	msr	CONTROL, r0
 800bb5a:	b662      	cpsie	i
 800bb5c:	b661      	cpsie	f
 800bb5e:	f3bf 8f4f 	dsb	sy
 800bb62:	f3bf 8f6f 	isb	sy
 800bb66:	df00      	svc	0
 800bb68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bb6a:	bf00      	nop
 800bb6c:	e000ed08 	.word	0xe000ed08

0800bb70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b086      	sub	sp, #24
 800bb74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bb76:	4b44      	ldr	r3, [pc, #272]	; (800bc88 <xPortStartScheduler+0x118>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	4a44      	ldr	r2, [pc, #272]	; (800bc8c <xPortStartScheduler+0x11c>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d109      	bne.n	800bb94 <xPortStartScheduler+0x24>
 800bb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb84:	f383 8811 	msr	BASEPRI, r3
 800bb88:	f3bf 8f6f 	isb	sy
 800bb8c:	f3bf 8f4f 	dsb	sy
 800bb90:	613b      	str	r3, [r7, #16]
 800bb92:	e7fe      	b.n	800bb92 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bb94:	4b3c      	ldr	r3, [pc, #240]	; (800bc88 <xPortStartScheduler+0x118>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4a3d      	ldr	r2, [pc, #244]	; (800bc90 <xPortStartScheduler+0x120>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d109      	bne.n	800bbb2 <xPortStartScheduler+0x42>
 800bb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba2:	f383 8811 	msr	BASEPRI, r3
 800bba6:	f3bf 8f6f 	isb	sy
 800bbaa:	f3bf 8f4f 	dsb	sy
 800bbae:	60fb      	str	r3, [r7, #12]
 800bbb0:	e7fe      	b.n	800bbb0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bbb2:	4b38      	ldr	r3, [pc, #224]	; (800bc94 <xPortStartScheduler+0x124>)
 800bbb4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	b2db      	uxtb	r3, r3
 800bbbc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	22ff      	movs	r2, #255	; 0xff
 800bbc2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bbcc:	78fb      	ldrb	r3, [r7, #3]
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bbd4:	b2da      	uxtb	r2, r3
 800bbd6:	4b30      	ldr	r3, [pc, #192]	; (800bc98 <xPortStartScheduler+0x128>)
 800bbd8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bbda:	4b30      	ldr	r3, [pc, #192]	; (800bc9c <xPortStartScheduler+0x12c>)
 800bbdc:	2207      	movs	r2, #7
 800bbde:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bbe0:	e009      	b.n	800bbf6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800bbe2:	4b2e      	ldr	r3, [pc, #184]	; (800bc9c <xPortStartScheduler+0x12c>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	3b01      	subs	r3, #1
 800bbe8:	4a2c      	ldr	r2, [pc, #176]	; (800bc9c <xPortStartScheduler+0x12c>)
 800bbea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bbec:	78fb      	ldrb	r3, [r7, #3]
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	005b      	lsls	r3, r3, #1
 800bbf2:	b2db      	uxtb	r3, r3
 800bbf4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bbf6:	78fb      	ldrb	r3, [r7, #3]
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbfe:	2b80      	cmp	r3, #128	; 0x80
 800bc00:	d0ef      	beq.n	800bbe2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bc02:	4b26      	ldr	r3, [pc, #152]	; (800bc9c <xPortStartScheduler+0x12c>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f1c3 0307 	rsb	r3, r3, #7
 800bc0a:	2b04      	cmp	r3, #4
 800bc0c:	d009      	beq.n	800bc22 <xPortStartScheduler+0xb2>
 800bc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc12:	f383 8811 	msr	BASEPRI, r3
 800bc16:	f3bf 8f6f 	isb	sy
 800bc1a:	f3bf 8f4f 	dsb	sy
 800bc1e:	60bb      	str	r3, [r7, #8]
 800bc20:	e7fe      	b.n	800bc20 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bc22:	4b1e      	ldr	r3, [pc, #120]	; (800bc9c <xPortStartScheduler+0x12c>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	021b      	lsls	r3, r3, #8
 800bc28:	4a1c      	ldr	r2, [pc, #112]	; (800bc9c <xPortStartScheduler+0x12c>)
 800bc2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bc2c:	4b1b      	ldr	r3, [pc, #108]	; (800bc9c <xPortStartScheduler+0x12c>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bc34:	4a19      	ldr	r2, [pc, #100]	; (800bc9c <xPortStartScheduler+0x12c>)
 800bc36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	b2da      	uxtb	r2, r3
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bc40:	4b17      	ldr	r3, [pc, #92]	; (800bca0 <xPortStartScheduler+0x130>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4a16      	ldr	r2, [pc, #88]	; (800bca0 <xPortStartScheduler+0x130>)
 800bc46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bc4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bc4c:	4b14      	ldr	r3, [pc, #80]	; (800bca0 <xPortStartScheduler+0x130>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a13      	ldr	r2, [pc, #76]	; (800bca0 <xPortStartScheduler+0x130>)
 800bc52:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bc56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bc58:	f000 f8d6 	bl	800be08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bc5c:	4b11      	ldr	r3, [pc, #68]	; (800bca4 <xPortStartScheduler+0x134>)
 800bc5e:	2200      	movs	r2, #0
 800bc60:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bc62:	f000 f8f5 	bl	800be50 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bc66:	4b10      	ldr	r3, [pc, #64]	; (800bca8 <xPortStartScheduler+0x138>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4a0f      	ldr	r2, [pc, #60]	; (800bca8 <xPortStartScheduler+0x138>)
 800bc6c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bc70:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bc72:	f7ff ff69 	bl	800bb48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bc76:	f7ff fd81 	bl	800b77c <vTaskSwitchContext>
	prvTaskExitError();
 800bc7a:	f7ff ff27 	bl	800bacc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bc7e:	2300      	movs	r3, #0
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3718      	adds	r7, #24
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	e000ed00 	.word	0xe000ed00
 800bc8c:	410fc271 	.word	0x410fc271
 800bc90:	410fc270 	.word	0x410fc270
 800bc94:	e000e400 	.word	0xe000e400
 800bc98:	200015a4 	.word	0x200015a4
 800bc9c:	200015a8 	.word	0x200015a8
 800bca0:	e000ed20 	.word	0xe000ed20
 800bca4:	2000011c 	.word	0x2000011c
 800bca8:	e000ef34 	.word	0xe000ef34

0800bcac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb6:	f383 8811 	msr	BASEPRI, r3
 800bcba:	f3bf 8f6f 	isb	sy
 800bcbe:	f3bf 8f4f 	dsb	sy
 800bcc2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bcc4:	4b0e      	ldr	r3, [pc, #56]	; (800bd00 <vPortEnterCritical+0x54>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	3301      	adds	r3, #1
 800bcca:	4a0d      	ldr	r2, [pc, #52]	; (800bd00 <vPortEnterCritical+0x54>)
 800bccc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bcce:	4b0c      	ldr	r3, [pc, #48]	; (800bd00 <vPortEnterCritical+0x54>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d10e      	bne.n	800bcf4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bcd6:	4b0b      	ldr	r3, [pc, #44]	; (800bd04 <vPortEnterCritical+0x58>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d009      	beq.n	800bcf4 <vPortEnterCritical+0x48>
 800bce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce4:	f383 8811 	msr	BASEPRI, r3
 800bce8:	f3bf 8f6f 	isb	sy
 800bcec:	f3bf 8f4f 	dsb	sy
 800bcf0:	603b      	str	r3, [r7, #0]
 800bcf2:	e7fe      	b.n	800bcf2 <vPortEnterCritical+0x46>
	}
}
 800bcf4:	bf00      	nop
 800bcf6:	370c      	adds	r7, #12
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr
 800bd00:	2000011c 	.word	0x2000011c
 800bd04:	e000ed04 	.word	0xe000ed04

0800bd08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bd0e:	4b11      	ldr	r3, [pc, #68]	; (800bd54 <vPortExitCritical+0x4c>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d109      	bne.n	800bd2a <vPortExitCritical+0x22>
 800bd16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd1a:	f383 8811 	msr	BASEPRI, r3
 800bd1e:	f3bf 8f6f 	isb	sy
 800bd22:	f3bf 8f4f 	dsb	sy
 800bd26:	607b      	str	r3, [r7, #4]
 800bd28:	e7fe      	b.n	800bd28 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800bd2a:	4b0a      	ldr	r3, [pc, #40]	; (800bd54 <vPortExitCritical+0x4c>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	3b01      	subs	r3, #1
 800bd30:	4a08      	ldr	r2, [pc, #32]	; (800bd54 <vPortExitCritical+0x4c>)
 800bd32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bd34:	4b07      	ldr	r3, [pc, #28]	; (800bd54 <vPortExitCritical+0x4c>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d104      	bne.n	800bd46 <vPortExitCritical+0x3e>
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800bd46:	bf00      	nop
 800bd48:	370c      	adds	r7, #12
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr
 800bd52:	bf00      	nop
 800bd54:	2000011c 	.word	0x2000011c
	...

0800bd60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bd60:	f3ef 8009 	mrs	r0, PSP
 800bd64:	f3bf 8f6f 	isb	sy
 800bd68:	4b15      	ldr	r3, [pc, #84]	; (800bdc0 <pxCurrentTCBConst>)
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	f01e 0f10 	tst.w	lr, #16
 800bd70:	bf08      	it	eq
 800bd72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bd76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd7a:	6010      	str	r0, [r2, #0]
 800bd7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bd80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bd84:	f380 8811 	msr	BASEPRI, r0
 800bd88:	f3bf 8f4f 	dsb	sy
 800bd8c:	f3bf 8f6f 	isb	sy
 800bd90:	f7ff fcf4 	bl	800b77c <vTaskSwitchContext>
 800bd94:	f04f 0000 	mov.w	r0, #0
 800bd98:	f380 8811 	msr	BASEPRI, r0
 800bd9c:	bc09      	pop	{r0, r3}
 800bd9e:	6819      	ldr	r1, [r3, #0]
 800bda0:	6808      	ldr	r0, [r1, #0]
 800bda2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bda6:	f01e 0f10 	tst.w	lr, #16
 800bdaa:	bf08      	it	eq
 800bdac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bdb0:	f380 8809 	msr	PSP, r0
 800bdb4:	f3bf 8f6f 	isb	sy
 800bdb8:	4770      	bx	lr
 800bdba:	bf00      	nop
 800bdbc:	f3af 8000 	nop.w

0800bdc0 <pxCurrentTCBConst>:
 800bdc0:	20001478 	.word	0x20001478
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bdc4:	bf00      	nop
 800bdc6:	bf00      	nop

0800bdc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
	__asm volatile
 800bdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd2:	f383 8811 	msr	BASEPRI, r3
 800bdd6:	f3bf 8f6f 	isb	sy
 800bdda:	f3bf 8f4f 	dsb	sy
 800bdde:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bde0:	f7ff fc14 	bl	800b60c <xTaskIncrementTick>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d003      	beq.n	800bdf2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bdea:	4b06      	ldr	r3, [pc, #24]	; (800be04 <SysTick_Handler+0x3c>)
 800bdec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdf0:	601a      	str	r2, [r3, #0]
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800bdfc:	bf00      	nop
 800bdfe:	3708      	adds	r7, #8
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}
 800be04:	e000ed04 	.word	0xe000ed04

0800be08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800be08:	b480      	push	{r7}
 800be0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800be0c:	4b0b      	ldr	r3, [pc, #44]	; (800be3c <vPortSetupTimerInterrupt+0x34>)
 800be0e:	2200      	movs	r2, #0
 800be10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800be12:	4b0b      	ldr	r3, [pc, #44]	; (800be40 <vPortSetupTimerInterrupt+0x38>)
 800be14:	2200      	movs	r2, #0
 800be16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800be18:	4b0a      	ldr	r3, [pc, #40]	; (800be44 <vPortSetupTimerInterrupt+0x3c>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4a0a      	ldr	r2, [pc, #40]	; (800be48 <vPortSetupTimerInterrupt+0x40>)
 800be1e:	fba2 2303 	umull	r2, r3, r2, r3
 800be22:	099b      	lsrs	r3, r3, #6
 800be24:	4a09      	ldr	r2, [pc, #36]	; (800be4c <vPortSetupTimerInterrupt+0x44>)
 800be26:	3b01      	subs	r3, #1
 800be28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800be2a:	4b04      	ldr	r3, [pc, #16]	; (800be3c <vPortSetupTimerInterrupt+0x34>)
 800be2c:	2207      	movs	r2, #7
 800be2e:	601a      	str	r2, [r3, #0]
}
 800be30:	bf00      	nop
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr
 800be3a:	bf00      	nop
 800be3c:	e000e010 	.word	0xe000e010
 800be40:	e000e018 	.word	0xe000e018
 800be44:	20000000 	.word	0x20000000
 800be48:	10624dd3 	.word	0x10624dd3
 800be4c:	e000e014 	.word	0xe000e014

0800be50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800be50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800be60 <vPortEnableVFP+0x10>
 800be54:	6801      	ldr	r1, [r0, #0]
 800be56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800be5a:	6001      	str	r1, [r0, #0]
 800be5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800be5e:	bf00      	nop
 800be60:	e000ed88 	.word	0xe000ed88

0800be64 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b08a      	sub	sp, #40	; 0x28
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800be6c:	2300      	movs	r3, #0
 800be6e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800be70:	f7ff fb22 	bl	800b4b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800be74:	4b57      	ldr	r3, [pc, #348]	; (800bfd4 <pvPortMalloc+0x170>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d101      	bne.n	800be80 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800be7c:	f000 f90c 	bl	800c098 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800be80:	4b55      	ldr	r3, [pc, #340]	; (800bfd8 <pvPortMalloc+0x174>)
 800be82:	681a      	ldr	r2, [r3, #0]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	4013      	ands	r3, r2
 800be88:	2b00      	cmp	r3, #0
 800be8a:	f040 808c 	bne.w	800bfa6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d01c      	beq.n	800bece <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800be94:	2208      	movs	r2, #8
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	4413      	add	r3, r2
 800be9a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f003 0307 	and.w	r3, r3, #7
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d013      	beq.n	800bece <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f023 0307 	bic.w	r3, r3, #7
 800beac:	3308      	adds	r3, #8
 800beae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f003 0307 	and.w	r3, r3, #7
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d009      	beq.n	800bece <pvPortMalloc+0x6a>
	__asm volatile
 800beba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bebe:	f383 8811 	msr	BASEPRI, r3
 800bec2:	f3bf 8f6f 	isb	sy
 800bec6:	f3bf 8f4f 	dsb	sy
 800beca:	617b      	str	r3, [r7, #20]
 800becc:	e7fe      	b.n	800becc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d068      	beq.n	800bfa6 <pvPortMalloc+0x142>
 800bed4:	4b41      	ldr	r3, [pc, #260]	; (800bfdc <pvPortMalloc+0x178>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d863      	bhi.n	800bfa6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bede:	4b40      	ldr	r3, [pc, #256]	; (800bfe0 <pvPortMalloc+0x17c>)
 800bee0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bee2:	4b3f      	ldr	r3, [pc, #252]	; (800bfe0 <pvPortMalloc+0x17c>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bee8:	e004      	b.n	800bef4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800beea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800beee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	429a      	cmp	r2, r3
 800befc:	d903      	bls.n	800bf06 <pvPortMalloc+0xa2>
 800befe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d1f1      	bne.n	800beea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bf06:	4b33      	ldr	r3, [pc, #204]	; (800bfd4 <pvPortMalloc+0x170>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d04a      	beq.n	800bfa6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bf10:	6a3b      	ldr	r3, [r7, #32]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	2208      	movs	r2, #8
 800bf16:	4413      	add	r3, r2
 800bf18:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	6a3b      	ldr	r3, [r7, #32]
 800bf20:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bf22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf24:	685a      	ldr	r2, [r3, #4]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	1ad2      	subs	r2, r2, r3
 800bf2a:	2308      	movs	r3, #8
 800bf2c:	005b      	lsls	r3, r3, #1
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d91e      	bls.n	800bf70 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bf32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	4413      	add	r3, r2
 800bf38:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf3a:	69bb      	ldr	r3, [r7, #24]
 800bf3c:	f003 0307 	and.w	r3, r3, #7
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d009      	beq.n	800bf58 <pvPortMalloc+0xf4>
 800bf44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf48:	f383 8811 	msr	BASEPRI, r3
 800bf4c:	f3bf 8f6f 	isb	sy
 800bf50:	f3bf 8f4f 	dsb	sy
 800bf54:	613b      	str	r3, [r7, #16]
 800bf56:	e7fe      	b.n	800bf56 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bf58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5a:	685a      	ldr	r2, [r3, #4]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	1ad2      	subs	r2, r2, r3
 800bf60:	69bb      	ldr	r3, [r7, #24]
 800bf62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bf6a:	69b8      	ldr	r0, [r7, #24]
 800bf6c:	f000 f8f6 	bl	800c15c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bf70:	4b1a      	ldr	r3, [pc, #104]	; (800bfdc <pvPortMalloc+0x178>)
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	1ad3      	subs	r3, r2, r3
 800bf7a:	4a18      	ldr	r2, [pc, #96]	; (800bfdc <pvPortMalloc+0x178>)
 800bf7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bf7e:	4b17      	ldr	r3, [pc, #92]	; (800bfdc <pvPortMalloc+0x178>)
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	4b18      	ldr	r3, [pc, #96]	; (800bfe4 <pvPortMalloc+0x180>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d203      	bcs.n	800bf92 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bf8a:	4b14      	ldr	r3, [pc, #80]	; (800bfdc <pvPortMalloc+0x178>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4a15      	ldr	r2, [pc, #84]	; (800bfe4 <pvPortMalloc+0x180>)
 800bf90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bf92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf94:	685a      	ldr	r2, [r3, #4]
 800bf96:	4b10      	ldr	r3, [pc, #64]	; (800bfd8 <pvPortMalloc+0x174>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	431a      	orrs	r2, r3
 800bf9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bfa6:	f7ff fa95 	bl	800b4d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bfaa:	69fb      	ldr	r3, [r7, #28]
 800bfac:	f003 0307 	and.w	r3, r3, #7
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d009      	beq.n	800bfc8 <pvPortMalloc+0x164>
 800bfb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb8:	f383 8811 	msr	BASEPRI, r3
 800bfbc:	f3bf 8f6f 	isb	sy
 800bfc0:	f3bf 8f4f 	dsb	sy
 800bfc4:	60fb      	str	r3, [r7, #12]
 800bfc6:	e7fe      	b.n	800bfc6 <pvPortMalloc+0x162>
	return pvReturn;
 800bfc8:	69fb      	ldr	r3, [r7, #28]
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3728      	adds	r7, #40	; 0x28
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	200021b4 	.word	0x200021b4
 800bfd8:	200021c0 	.word	0x200021c0
 800bfdc:	200021b8 	.word	0x200021b8
 800bfe0:	200021ac 	.word	0x200021ac
 800bfe4:	200021bc 	.word	0x200021bc

0800bfe8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b086      	sub	sp, #24
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d046      	beq.n	800c088 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bffa:	2308      	movs	r3, #8
 800bffc:	425b      	negs	r3, r3
 800bffe:	697a      	ldr	r2, [r7, #20]
 800c000:	4413      	add	r3, r2
 800c002:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	685a      	ldr	r2, [r3, #4]
 800c00c:	4b20      	ldr	r3, [pc, #128]	; (800c090 <vPortFree+0xa8>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4013      	ands	r3, r2
 800c012:	2b00      	cmp	r3, #0
 800c014:	d109      	bne.n	800c02a <vPortFree+0x42>
 800c016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01a:	f383 8811 	msr	BASEPRI, r3
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	f3bf 8f4f 	dsb	sy
 800c026:	60fb      	str	r3, [r7, #12]
 800c028:	e7fe      	b.n	800c028 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d009      	beq.n	800c046 <vPortFree+0x5e>
 800c032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c036:	f383 8811 	msr	BASEPRI, r3
 800c03a:	f3bf 8f6f 	isb	sy
 800c03e:	f3bf 8f4f 	dsb	sy
 800c042:	60bb      	str	r3, [r7, #8]
 800c044:	e7fe      	b.n	800c044 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	685a      	ldr	r2, [r3, #4]
 800c04a:	4b11      	ldr	r3, [pc, #68]	; (800c090 <vPortFree+0xa8>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	4013      	ands	r3, r2
 800c050:	2b00      	cmp	r3, #0
 800c052:	d019      	beq.n	800c088 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d115      	bne.n	800c088 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	685a      	ldr	r2, [r3, #4]
 800c060:	4b0b      	ldr	r3, [pc, #44]	; (800c090 <vPortFree+0xa8>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	43db      	mvns	r3, r3
 800c066:	401a      	ands	r2, r3
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c06c:	f7ff fa24 	bl	800b4b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	685a      	ldr	r2, [r3, #4]
 800c074:	4b07      	ldr	r3, [pc, #28]	; (800c094 <vPortFree+0xac>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4413      	add	r3, r2
 800c07a:	4a06      	ldr	r2, [pc, #24]	; (800c094 <vPortFree+0xac>)
 800c07c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c07e:	6938      	ldr	r0, [r7, #16]
 800c080:	f000 f86c 	bl	800c15c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c084:	f7ff fa26 	bl	800b4d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c088:	bf00      	nop
 800c08a:	3718      	adds	r7, #24
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}
 800c090:	200021c0 	.word	0x200021c0
 800c094:	200021b8 	.word	0x200021b8

0800c098 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c098:	b480      	push	{r7}
 800c09a:	b085      	sub	sp, #20
 800c09c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c09e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c0a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c0a4:	4b27      	ldr	r3, [pc, #156]	; (800c144 <prvHeapInit+0xac>)
 800c0a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f003 0307 	and.w	r3, r3, #7
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d00c      	beq.n	800c0cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	3307      	adds	r3, #7
 800c0b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f023 0307 	bic.w	r3, r3, #7
 800c0be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c0c0:	68ba      	ldr	r2, [r7, #8]
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	1ad3      	subs	r3, r2, r3
 800c0c6:	4a1f      	ldr	r2, [pc, #124]	; (800c144 <prvHeapInit+0xac>)
 800c0c8:	4413      	add	r3, r2
 800c0ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c0d0:	4a1d      	ldr	r2, [pc, #116]	; (800c148 <prvHeapInit+0xb0>)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c0d6:	4b1c      	ldr	r3, [pc, #112]	; (800c148 <prvHeapInit+0xb0>)
 800c0d8:	2200      	movs	r2, #0
 800c0da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	68ba      	ldr	r2, [r7, #8]
 800c0e0:	4413      	add	r3, r2
 800c0e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c0e4:	2208      	movs	r2, #8
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	1a9b      	subs	r3, r3, r2
 800c0ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f023 0307 	bic.w	r3, r3, #7
 800c0f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	4a15      	ldr	r2, [pc, #84]	; (800c14c <prvHeapInit+0xb4>)
 800c0f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c0fa:	4b14      	ldr	r3, [pc, #80]	; (800c14c <prvHeapInit+0xb4>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	2200      	movs	r2, #0
 800c100:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c102:	4b12      	ldr	r3, [pc, #72]	; (800c14c <prvHeapInit+0xb4>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	2200      	movs	r2, #0
 800c108:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	68fa      	ldr	r2, [r7, #12]
 800c112:	1ad2      	subs	r2, r2, r3
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c118:	4b0c      	ldr	r3, [pc, #48]	; (800c14c <prvHeapInit+0xb4>)
 800c11a:	681a      	ldr	r2, [r3, #0]
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	4a0a      	ldr	r2, [pc, #40]	; (800c150 <prvHeapInit+0xb8>)
 800c126:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	4a09      	ldr	r2, [pc, #36]	; (800c154 <prvHeapInit+0xbc>)
 800c12e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c130:	4b09      	ldr	r3, [pc, #36]	; (800c158 <prvHeapInit+0xc0>)
 800c132:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c136:	601a      	str	r2, [r3, #0]
}
 800c138:	bf00      	nop
 800c13a:	3714      	adds	r7, #20
 800c13c:	46bd      	mov	sp, r7
 800c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c142:	4770      	bx	lr
 800c144:	200015ac 	.word	0x200015ac
 800c148:	200021ac 	.word	0x200021ac
 800c14c:	200021b4 	.word	0x200021b4
 800c150:	200021bc 	.word	0x200021bc
 800c154:	200021b8 	.word	0x200021b8
 800c158:	200021c0 	.word	0x200021c0

0800c15c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c15c:	b480      	push	{r7}
 800c15e:	b085      	sub	sp, #20
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c164:	4b28      	ldr	r3, [pc, #160]	; (800c208 <prvInsertBlockIntoFreeList+0xac>)
 800c166:	60fb      	str	r3, [r7, #12]
 800c168:	e002      	b.n	800c170 <prvInsertBlockIntoFreeList+0x14>
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	60fb      	str	r3, [r7, #12]
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	429a      	cmp	r2, r3
 800c178:	d8f7      	bhi.n	800c16a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	68ba      	ldr	r2, [r7, #8]
 800c184:	4413      	add	r3, r2
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d108      	bne.n	800c19e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	685a      	ldr	r2, [r3, #4]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	441a      	add	r2, r3
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	68ba      	ldr	r2, [r7, #8]
 800c1a8:	441a      	add	r2, r3
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d118      	bne.n	800c1e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681a      	ldr	r2, [r3, #0]
 800c1b6:	4b15      	ldr	r3, [pc, #84]	; (800c20c <prvInsertBlockIntoFreeList+0xb0>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d00d      	beq.n	800c1da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	685a      	ldr	r2, [r3, #4]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	441a      	add	r2, r3
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	601a      	str	r2, [r3, #0]
 800c1d8:	e008      	b.n	800c1ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c1da:	4b0c      	ldr	r3, [pc, #48]	; (800c20c <prvInsertBlockIntoFreeList+0xb0>)
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	601a      	str	r2, [r3, #0]
 800c1e2:	e003      	b.n	800c1ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c1ec:	68fa      	ldr	r2, [r7, #12]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d002      	beq.n	800c1fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	687a      	ldr	r2, [r7, #4]
 800c1f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1fa:	bf00      	nop
 800c1fc:	3714      	adds	r7, #20
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr
 800c206:	bf00      	nop
 800c208:	200021ac 	.word	0x200021ac
 800c20c:	200021b4 	.word	0x200021b4

0800c210 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800c214:	2200      	movs	r2, #0
 800c216:	4912      	ldr	r1, [pc, #72]	; (800c260 <MX_USB_Device_Init+0x50>)
 800c218:	4812      	ldr	r0, [pc, #72]	; (800c264 <MX_USB_Device_Init+0x54>)
 800c21a:	f7fd fdd6 	bl	8009dca <USBD_Init>
 800c21e:	4603      	mov	r3, r0
 800c220:	2b00      	cmp	r3, #0
 800c222:	d001      	beq.n	800c228 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c224:	f7f5 f986 	bl	8001534 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800c228:	490f      	ldr	r1, [pc, #60]	; (800c268 <MX_USB_Device_Init+0x58>)
 800c22a:	480e      	ldr	r0, [pc, #56]	; (800c264 <MX_USB_Device_Init+0x54>)
 800c22c:	f7fd fdf8 	bl	8009e20 <USBD_RegisterClass>
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	d001      	beq.n	800c23a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c236:	f7f5 f97d 	bl	8001534 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800c23a:	490c      	ldr	r1, [pc, #48]	; (800c26c <MX_USB_Device_Init+0x5c>)
 800c23c:	4809      	ldr	r0, [pc, #36]	; (800c264 <MX_USB_Device_Init+0x54>)
 800c23e:	f7fd fd55 	bl	8009cec <USBD_CDC_RegisterInterface>
 800c242:	4603      	mov	r3, r0
 800c244:	2b00      	cmp	r3, #0
 800c246:	d001      	beq.n	800c24c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c248:	f7f5 f974 	bl	8001534 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c24c:	4805      	ldr	r0, [pc, #20]	; (800c264 <MX_USB_Device_Init+0x54>)
 800c24e:	f7fd fe01 	bl	8009e54 <USBD_Start>
 800c252:	4603      	mov	r3, r0
 800c254:	2b00      	cmp	r3, #0
 800c256:	d001      	beq.n	800c25c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c258:	f7f5 f96c 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c25c:	bf00      	nop
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	20000130 	.word	0x20000130
 800c264:	20002618 	.word	0x20002618
 800c268:	20000018 	.word	0x20000018
 800c26c:	20000120 	.word	0x20000120

0800c270 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c274:	2200      	movs	r2, #0
 800c276:	4905      	ldr	r1, [pc, #20]	; (800c28c <CDC_Init_FS+0x1c>)
 800c278:	4805      	ldr	r0, [pc, #20]	; (800c290 <CDC_Init_FS+0x20>)
 800c27a:	f7fd fd4e 	bl	8009d1a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c27e:	4905      	ldr	r1, [pc, #20]	; (800c294 <CDC_Init_FS+0x24>)
 800c280:	4803      	ldr	r0, [pc, #12]	; (800c290 <CDC_Init_FS+0x20>)
 800c282:	f7fd fd64 	bl	8009d4e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c286:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c288:	4618      	mov	r0, r3
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	20002cc4 	.word	0x20002cc4
 800c290:	20002618 	.word	0x20002618
 800c294:	200028dc 	.word	0x200028dc

0800c298 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c298:	b480      	push	{r7}
 800c29a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c29c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr

0800c2a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b083      	sub	sp, #12
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	6039      	str	r1, [r7, #0]
 800c2b2:	71fb      	strb	r3, [r7, #7]
 800c2b4:	4613      	mov	r3, r2
 800c2b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c2b8:	79fb      	ldrb	r3, [r7, #7]
 800c2ba:	2b23      	cmp	r3, #35	; 0x23
 800c2bc:	d84a      	bhi.n	800c354 <CDC_Control_FS+0xac>
 800c2be:	a201      	add	r2, pc, #4	; (adr r2, 800c2c4 <CDC_Control_FS+0x1c>)
 800c2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c4:	0800c355 	.word	0x0800c355
 800c2c8:	0800c355 	.word	0x0800c355
 800c2cc:	0800c355 	.word	0x0800c355
 800c2d0:	0800c355 	.word	0x0800c355
 800c2d4:	0800c355 	.word	0x0800c355
 800c2d8:	0800c355 	.word	0x0800c355
 800c2dc:	0800c355 	.word	0x0800c355
 800c2e0:	0800c355 	.word	0x0800c355
 800c2e4:	0800c355 	.word	0x0800c355
 800c2e8:	0800c355 	.word	0x0800c355
 800c2ec:	0800c355 	.word	0x0800c355
 800c2f0:	0800c355 	.word	0x0800c355
 800c2f4:	0800c355 	.word	0x0800c355
 800c2f8:	0800c355 	.word	0x0800c355
 800c2fc:	0800c355 	.word	0x0800c355
 800c300:	0800c355 	.word	0x0800c355
 800c304:	0800c355 	.word	0x0800c355
 800c308:	0800c355 	.word	0x0800c355
 800c30c:	0800c355 	.word	0x0800c355
 800c310:	0800c355 	.word	0x0800c355
 800c314:	0800c355 	.word	0x0800c355
 800c318:	0800c355 	.word	0x0800c355
 800c31c:	0800c355 	.word	0x0800c355
 800c320:	0800c355 	.word	0x0800c355
 800c324:	0800c355 	.word	0x0800c355
 800c328:	0800c355 	.word	0x0800c355
 800c32c:	0800c355 	.word	0x0800c355
 800c330:	0800c355 	.word	0x0800c355
 800c334:	0800c355 	.word	0x0800c355
 800c338:	0800c355 	.word	0x0800c355
 800c33c:	0800c355 	.word	0x0800c355
 800c340:	0800c355 	.word	0x0800c355
 800c344:	0800c355 	.word	0x0800c355
 800c348:	0800c355 	.word	0x0800c355
 800c34c:	0800c355 	.word	0x0800c355
 800c350:	0800c355 	.word	0x0800c355
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c354:	bf00      	nop
  }

  return (USBD_OK);
 800c356:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c358:	4618      	mov	r0, r3
 800c35a:	370c      	adds	r7, #12
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr

0800c364 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b082      	sub	sp, #8
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c36e:	6879      	ldr	r1, [r7, #4]
 800c370:	4805      	ldr	r0, [pc, #20]	; (800c388 <CDC_Receive_FS+0x24>)
 800c372:	f7fd fcec 	bl	8009d4e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c376:	4804      	ldr	r0, [pc, #16]	; (800c388 <CDC_Receive_FS+0x24>)
 800c378:	f7fd fcfd 	bl	8009d76 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c37c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3708      	adds	r7, #8
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	20002618 	.word	0x20002618

0800c38c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b083      	sub	sp, #12
 800c390:	af00      	add	r7, sp, #0
 800c392:	4603      	mov	r3, r0
 800c394:	6039      	str	r1, [r7, #0]
 800c396:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	2212      	movs	r2, #18
 800c39c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800c39e:	4b03      	ldr	r3, [pc, #12]	; (800c3ac <USBD_CDC_DeviceDescriptor+0x20>)
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	370c      	adds	r7, #12
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr
 800c3ac:	20000150 	.word	0x20000150

0800c3b0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b083      	sub	sp, #12
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	6039      	str	r1, [r7, #0]
 800c3ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	2204      	movs	r2, #4
 800c3c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c3c2:	4b03      	ldr	r3, [pc, #12]	; (800c3d0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	370c      	adds	r7, #12
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr
 800c3d0:	20000164 	.word	0x20000164

0800c3d4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b082      	sub	sp, #8
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	4603      	mov	r3, r0
 800c3dc:	6039      	str	r1, [r7, #0]
 800c3de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c3e0:	79fb      	ldrb	r3, [r7, #7]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d105      	bne.n	800c3f2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c3e6:	683a      	ldr	r2, [r7, #0]
 800c3e8:	4907      	ldr	r1, [pc, #28]	; (800c408 <USBD_CDC_ProductStrDescriptor+0x34>)
 800c3ea:	4808      	ldr	r0, [pc, #32]	; (800c40c <USBD_CDC_ProductStrDescriptor+0x38>)
 800c3ec:	f7fe fccc 	bl	800ad88 <USBD_GetString>
 800c3f0:	e004      	b.n	800c3fc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c3f2:	683a      	ldr	r2, [r7, #0]
 800c3f4:	4904      	ldr	r1, [pc, #16]	; (800c408 <USBD_CDC_ProductStrDescriptor+0x34>)
 800c3f6:	4805      	ldr	r0, [pc, #20]	; (800c40c <USBD_CDC_ProductStrDescriptor+0x38>)
 800c3f8:	f7fe fcc6 	bl	800ad88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c3fc:	4b02      	ldr	r3, [pc, #8]	; (800c408 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3708      	adds	r7, #8
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	200030ac 	.word	0x200030ac
 800c40c:	0800d1d8 	.word	0x0800d1d8

0800c410 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
 800c416:	4603      	mov	r3, r0
 800c418:	6039      	str	r1, [r7, #0]
 800c41a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c41c:	683a      	ldr	r2, [r7, #0]
 800c41e:	4904      	ldr	r1, [pc, #16]	; (800c430 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800c420:	4804      	ldr	r0, [pc, #16]	; (800c434 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800c422:	f7fe fcb1 	bl	800ad88 <USBD_GetString>
  return USBD_StrDesc;
 800c426:	4b02      	ldr	r3, [pc, #8]	; (800c430 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3708      	adds	r7, #8
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}
 800c430:	200030ac 	.word	0x200030ac
 800c434:	0800d1f0 	.word	0x0800d1f0

0800c438 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	4603      	mov	r3, r0
 800c440:	6039      	str	r1, [r7, #0]
 800c442:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	221a      	movs	r2, #26
 800c448:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c44a:	f000 f843 	bl	800c4d4 <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c44e:	4b02      	ldr	r3, [pc, #8]	; (800c458 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800c450:	4618      	mov	r0, r3
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	20000168 	.word	0x20000168

0800c45c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	4603      	mov	r3, r0
 800c464:	6039      	str	r1, [r7, #0]
 800c466:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c468:	79fb      	ldrb	r3, [r7, #7]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d105      	bne.n	800c47a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c46e:	683a      	ldr	r2, [r7, #0]
 800c470:	4907      	ldr	r1, [pc, #28]	; (800c490 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c472:	4808      	ldr	r0, [pc, #32]	; (800c494 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c474:	f7fe fc88 	bl	800ad88 <USBD_GetString>
 800c478:	e004      	b.n	800c484 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c47a:	683a      	ldr	r2, [r7, #0]
 800c47c:	4904      	ldr	r1, [pc, #16]	; (800c490 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c47e:	4805      	ldr	r0, [pc, #20]	; (800c494 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c480:	f7fe fc82 	bl	800ad88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c484:	4b02      	ldr	r3, [pc, #8]	; (800c490 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800c486:	4618      	mov	r0, r3
 800c488:	3708      	adds	r7, #8
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	200030ac 	.word	0x200030ac
 800c494:	0800d204 	.word	0x0800d204

0800c498 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	4603      	mov	r3, r0
 800c4a0:	6039      	str	r1, [r7, #0]
 800c4a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c4a4:	79fb      	ldrb	r3, [r7, #7]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d105      	bne.n	800c4b6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c4aa:	683a      	ldr	r2, [r7, #0]
 800c4ac:	4907      	ldr	r1, [pc, #28]	; (800c4cc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c4ae:	4808      	ldr	r0, [pc, #32]	; (800c4d0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c4b0:	f7fe fc6a 	bl	800ad88 <USBD_GetString>
 800c4b4:	e004      	b.n	800c4c0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c4b6:	683a      	ldr	r2, [r7, #0]
 800c4b8:	4904      	ldr	r1, [pc, #16]	; (800c4cc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c4ba:	4805      	ldr	r0, [pc, #20]	; (800c4d0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c4bc:	f7fe fc64 	bl	800ad88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4c0:	4b02      	ldr	r3, [pc, #8]	; (800c4cc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3708      	adds	r7, #8
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	200030ac 	.word	0x200030ac
 800c4d0:	0800d210 	.word	0x0800d210

0800c4d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c4da:	4b0f      	ldr	r3, [pc, #60]	; (800c518 <Get_SerialNum+0x44>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c4e0:	4b0e      	ldr	r3, [pc, #56]	; (800c51c <Get_SerialNum+0x48>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c4e6:	4b0e      	ldr	r3, [pc, #56]	; (800c520 <Get_SerialNum+0x4c>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c4ec:	68fa      	ldr	r2, [r7, #12]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	4413      	add	r3, r2
 800c4f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d009      	beq.n	800c50e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c4fa:	2208      	movs	r2, #8
 800c4fc:	4909      	ldr	r1, [pc, #36]	; (800c524 <Get_SerialNum+0x50>)
 800c4fe:	68f8      	ldr	r0, [r7, #12]
 800c500:	f000 f814 	bl	800c52c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c504:	2204      	movs	r2, #4
 800c506:	4908      	ldr	r1, [pc, #32]	; (800c528 <Get_SerialNum+0x54>)
 800c508:	68b8      	ldr	r0, [r7, #8]
 800c50a:	f000 f80f 	bl	800c52c <IntToUnicode>
  }
}
 800c50e:	bf00      	nop
 800c510:	3710      	adds	r7, #16
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
 800c516:	bf00      	nop
 800c518:	1fff7590 	.word	0x1fff7590
 800c51c:	1fff7594 	.word	0x1fff7594
 800c520:	1fff7598 	.word	0x1fff7598
 800c524:	2000016a 	.word	0x2000016a
 800c528:	2000017a 	.word	0x2000017a

0800c52c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b087      	sub	sp, #28
 800c530:	af00      	add	r7, sp, #0
 800c532:	60f8      	str	r0, [r7, #12]
 800c534:	60b9      	str	r1, [r7, #8]
 800c536:	4613      	mov	r3, r2
 800c538:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c53a:	2300      	movs	r3, #0
 800c53c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c53e:	2300      	movs	r3, #0
 800c540:	75fb      	strb	r3, [r7, #23]
 800c542:	e027      	b.n	800c594 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	0f1b      	lsrs	r3, r3, #28
 800c548:	2b09      	cmp	r3, #9
 800c54a:	d80b      	bhi.n	800c564 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	0f1b      	lsrs	r3, r3, #28
 800c550:	b2da      	uxtb	r2, r3
 800c552:	7dfb      	ldrb	r3, [r7, #23]
 800c554:	005b      	lsls	r3, r3, #1
 800c556:	4619      	mov	r1, r3
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	440b      	add	r3, r1
 800c55c:	3230      	adds	r2, #48	; 0x30
 800c55e:	b2d2      	uxtb	r2, r2
 800c560:	701a      	strb	r2, [r3, #0]
 800c562:	e00a      	b.n	800c57a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	0f1b      	lsrs	r3, r3, #28
 800c568:	b2da      	uxtb	r2, r3
 800c56a:	7dfb      	ldrb	r3, [r7, #23]
 800c56c:	005b      	lsls	r3, r3, #1
 800c56e:	4619      	mov	r1, r3
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	440b      	add	r3, r1
 800c574:	3237      	adds	r2, #55	; 0x37
 800c576:	b2d2      	uxtb	r2, r2
 800c578:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	011b      	lsls	r3, r3, #4
 800c57e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c580:	7dfb      	ldrb	r3, [r7, #23]
 800c582:	005b      	lsls	r3, r3, #1
 800c584:	3301      	adds	r3, #1
 800c586:	68ba      	ldr	r2, [r7, #8]
 800c588:	4413      	add	r3, r2
 800c58a:	2200      	movs	r2, #0
 800c58c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c58e:	7dfb      	ldrb	r3, [r7, #23]
 800c590:	3301      	adds	r3, #1
 800c592:	75fb      	strb	r3, [r7, #23]
 800c594:	7dfa      	ldrb	r2, [r7, #23]
 800c596:	79fb      	ldrb	r3, [r7, #7]
 800c598:	429a      	cmp	r2, r3
 800c59a:	d3d3      	bcc.n	800c544 <IntToUnicode+0x18>
  }
}
 800c59c:	bf00      	nop
 800c59e:	371c      	adds	r7, #28
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr

0800c5a8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b08a      	sub	sp, #40	; 0x28
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5b0:	f107 0314 	add.w	r3, r7, #20
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	601a      	str	r2, [r3, #0]
 800c5b8:	605a      	str	r2, [r3, #4]
 800c5ba:	609a      	str	r2, [r3, #8]
 800c5bc:	60da      	str	r2, [r3, #12]
 800c5be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	4a1a      	ldr	r2, [pc, #104]	; (800c630 <HAL_PCD_MspInit+0x88>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d12d      	bne.n	800c626 <HAL_PCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c5ca:	4b1a      	ldr	r3, [pc, #104]	; (800c634 <HAL_PCD_MspInit+0x8c>)
 800c5cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5ce:	4a19      	ldr	r2, [pc, #100]	; (800c634 <HAL_PCD_MspInit+0x8c>)
 800c5d0:	f043 0301 	orr.w	r3, r3, #1
 800c5d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c5d6:	4b17      	ldr	r3, [pc, #92]	; (800c634 <HAL_PCD_MspInit+0x8c>)
 800c5d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5da:	f003 0301 	and.w	r3, r3, #1
 800c5de:	613b      	str	r3, [r7, #16]
 800c5e0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c5e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c5e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c5e8:	2303      	movs	r3, #3
 800c5ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c5f0:	f107 0314 	add.w	r3, r7, #20
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c5fa:	f7f6 fa09 	bl	8002a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c5fe:	4b0d      	ldr	r3, [pc, #52]	; (800c634 <HAL_PCD_MspInit+0x8c>)
 800c600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c602:	4a0c      	ldr	r2, [pc, #48]	; (800c634 <HAL_PCD_MspInit+0x8c>)
 800c604:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c608:	6593      	str	r3, [r2, #88]	; 0x58
 800c60a:	4b0a      	ldr	r3, [pc, #40]	; (800c634 <HAL_PCD_MspInit+0x8c>)
 800c60c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c60e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c612:	60fb      	str	r3, [r7, #12]
 800c614:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800c616:	2200      	movs	r2, #0
 800c618:	2105      	movs	r1, #5
 800c61a:	2014      	movs	r0, #20
 800c61c:	f7f5 fe62 	bl	80022e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c620:	2014      	movs	r0, #20
 800c622:	f7f5 fe89 	bl	8002338 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c626:	bf00      	nop
 800c628:	3728      	adds	r7, #40	; 0x28
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	40005c00 	.word	0x40005c00
 800c634:	40021000 	.word	0x40021000

0800c638 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800c64c:	4619      	mov	r1, r3
 800c64e:	4610      	mov	r0, r2
 800c650:	f7fd fc49 	bl	8009ee6 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800c654:	bf00      	nop
 800c656:	3708      	adds	r7, #8
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b082      	sub	sp, #8
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	460b      	mov	r3, r1
 800c666:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800c66e:	78fb      	ldrb	r3, [r7, #3]
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	015b      	lsls	r3, r3, #5
 800c674:	4413      	add	r3, r2
 800c676:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	78fb      	ldrb	r3, [r7, #3]
 800c67e:	4619      	mov	r1, r3
 800c680:	f7fd fc7c 	bl	8009f7c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800c684:	bf00      	nop
 800c686:	3708      	adds	r7, #8
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	460b      	mov	r3, r1
 800c696:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800c69e:	78fb      	ldrb	r3, [r7, #3]
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	015b      	lsls	r3, r3, #5
 800c6a4:	4413      	add	r3, r2
 800c6a6:	333c      	adds	r3, #60	; 0x3c
 800c6a8:	681a      	ldr	r2, [r3, #0]
 800c6aa:	78fb      	ldrb	r3, [r7, #3]
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	f7fd fcd6 	bl	800a05e <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800c6b2:	bf00      	nop
 800c6b4:	3708      	adds	r7, #8
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}

0800c6ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6ba:	b580      	push	{r7, lr}
 800c6bc:	b082      	sub	sp, #8
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7fd fde9 	bl	800a2a0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800c6ce:	bf00      	nop
 800c6d0:	3708      	adds	r7, #8
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}

0800c6d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800c6d6:	b580      	push	{r7, lr}
 800c6d8:	b084      	sub	sp, #16
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c6de:	2301      	movs	r3, #1
 800c6e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	689b      	ldr	r3, [r3, #8]
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	d001      	beq.n	800c6ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c6ea:	f7f4 ff23 	bl	8001534 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c6f4:	7bfa      	ldrb	r2, [r7, #15]
 800c6f6:	4611      	mov	r1, r2
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7fd fd96 	bl	800a22a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c704:	4618      	mov	r0, r3
 800c706:	f7fd fd4f 	bl	800a1a8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800c70a:	bf00      	nop
 800c70c:	3710      	adds	r7, #16
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
	...

0800c714 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c722:	4618      	mov	r0, r3
 800c724:	f7fd fd91 	bl	800a24a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	699b      	ldr	r3, [r3, #24]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d005      	beq.n	800c73c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c730:	4b04      	ldr	r3, [pc, #16]	; (800c744 <HAL_PCD_SuspendCallback+0x30>)
 800c732:	691b      	ldr	r3, [r3, #16]
 800c734:	4a03      	ldr	r2, [pc, #12]	; (800c744 <HAL_PCD_SuspendCallback+0x30>)
 800c736:	f043 0306 	orr.w	r3, r3, #6
 800c73a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800c73c:	bf00      	nop
 800c73e:	3708      	adds	r7, #8
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}
 800c744:	e000ed00 	.word	0xe000ed00

0800c748 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	699b      	ldr	r3, [r3, #24]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d007      	beq.n	800c768 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c758:	4b08      	ldr	r3, [pc, #32]	; (800c77c <HAL_PCD_ResumeCallback+0x34>)
 800c75a:	691b      	ldr	r3, [r3, #16]
 800c75c:	4a07      	ldr	r2, [pc, #28]	; (800c77c <HAL_PCD_ResumeCallback+0x34>)
 800c75e:	f023 0306 	bic.w	r3, r3, #6
 800c762:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c764:	f000 f9f6 	bl	800cb54 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c76e:	4618      	mov	r0, r3
 800c770:	f7fd fd80 	bl	800a274 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800c774:	bf00      	nop
 800c776:	3708      	adds	r7, #8
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}
 800c77c:	e000ed00 	.word	0xe000ed00

0800c780 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b082      	sub	sp, #8
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800c788:	4a2b      	ldr	r2, [pc, #172]	; (800c838 <USBD_LL_Init+0xb8>)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	4a29      	ldr	r2, [pc, #164]	; (800c838 <USBD_LL_Init+0xb8>)
 800c794:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c798:	4b27      	ldr	r3, [pc, #156]	; (800c838 <USBD_LL_Init+0xb8>)
 800c79a:	4a28      	ldr	r2, [pc, #160]	; (800c83c <USBD_LL_Init+0xbc>)
 800c79c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c79e:	4b26      	ldr	r3, [pc, #152]	; (800c838 <USBD_LL_Init+0xb8>)
 800c7a0:	2208      	movs	r2, #8
 800c7a2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c7a4:	4b24      	ldr	r3, [pc, #144]	; (800c838 <USBD_LL_Init+0xb8>)
 800c7a6:	2202      	movs	r2, #2
 800c7a8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c7aa:	4b23      	ldr	r3, [pc, #140]	; (800c838 <USBD_LL_Init+0xb8>)
 800c7ac:	2202      	movs	r2, #2
 800c7ae:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c7b0:	4b21      	ldr	r3, [pc, #132]	; (800c838 <USBD_LL_Init+0xb8>)
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c7b6:	4b20      	ldr	r3, [pc, #128]	; (800c838 <USBD_LL_Init+0xb8>)
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c7bc:	4b1e      	ldr	r3, [pc, #120]	; (800c838 <USBD_LL_Init+0xb8>)
 800c7be:	2200      	movs	r2, #0
 800c7c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c7c2:	4b1d      	ldr	r3, [pc, #116]	; (800c838 <USBD_LL_Init+0xb8>)
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c7c8:	481b      	ldr	r0, [pc, #108]	; (800c838 <USBD_LL_Init+0xb8>)
 800c7ca:	f7f6 fba9 	bl	8002f20 <HAL_PCD_Init>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d001      	beq.n	800c7d8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800c7d4:	f7f4 feae 	bl	8001534 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c7de:	2318      	movs	r3, #24
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	2100      	movs	r1, #0
 800c7e4:	f7f7 fa58 	bl	8003c98 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c7ee:	2358      	movs	r3, #88	; 0x58
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	2180      	movs	r1, #128	; 0x80
 800c7f4:	f7f7 fa50 	bl	8003c98 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c7fe:	23c0      	movs	r3, #192	; 0xc0
 800c800:	2200      	movs	r2, #0
 800c802:	2181      	movs	r1, #129	; 0x81
 800c804:	f7f7 fa48 	bl	8003c98 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c80e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c812:	2200      	movs	r2, #0
 800c814:	2101      	movs	r1, #1
 800c816:	f7f7 fa3f 	bl	8003c98 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c820:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c824:	2200      	movs	r2, #0
 800c826:	2182      	movs	r1, #130	; 0x82
 800c828:	f7f7 fa36 	bl	8003c98 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c82c:	2300      	movs	r3, #0
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3708      	adds	r7, #8
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	200032ac 	.word	0x200032ac
 800c83c:	40005c00 	.word	0x40005c00

0800c840 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c848:	2300      	movs	r3, #0
 800c84a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c84c:	2300      	movs	r3, #0
 800c84e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c856:	4618      	mov	r0, r3
 800c858:	f7f6 fc2a 	bl	80030b0 <HAL_PCD_Start>
 800c85c:	4603      	mov	r3, r0
 800c85e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800c860:	7bfb      	ldrb	r3, [r7, #15]
 800c862:	4618      	mov	r0, r3
 800c864:	f000 f97c 	bl	800cb60 <USBD_Get_USB_Status>
 800c868:	4603      	mov	r3, r0
 800c86a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c86c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3710      	adds	r7, #16
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c876:	b580      	push	{r7, lr}
 800c878:	b084      	sub	sp, #16
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
 800c87e:	4608      	mov	r0, r1
 800c880:	4611      	mov	r1, r2
 800c882:	461a      	mov	r2, r3
 800c884:	4603      	mov	r3, r0
 800c886:	70fb      	strb	r3, [r7, #3]
 800c888:	460b      	mov	r3, r1
 800c88a:	70bb      	strb	r3, [r7, #2]
 800c88c:	4613      	mov	r3, r2
 800c88e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c890:	2300      	movs	r3, #0
 800c892:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c894:	2300      	movs	r3, #0
 800c896:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c89e:	78bb      	ldrb	r3, [r7, #2]
 800c8a0:	883a      	ldrh	r2, [r7, #0]
 800c8a2:	78f9      	ldrb	r1, [r7, #3]
 800c8a4:	f7f6 fd99 	bl	80033da <HAL_PCD_EP_Open>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8ac:	7bfb      	ldrb	r3, [r7, #15]
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f000 f956 	bl	800cb60 <USBD_Get_USB_Status>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800c8b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3710      	adds	r7, #16
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}

0800c8c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8c2:	b580      	push	{r7, lr}
 800c8c4:	b084      	sub	sp, #16
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	6078      	str	r0, [r7, #4]
 800c8ca:	460b      	mov	r3, r1
 800c8cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c8dc:	78fa      	ldrb	r2, [r7, #3]
 800c8de:	4611      	mov	r1, r2
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f7f6 fdda 	bl	800349a <HAL_PCD_EP_Close>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8ea:	7bfb      	ldrb	r3, [r7, #15]
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f000 f937 	bl	800cb60 <USBD_Get_USB_Status>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800c8f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3710      	adds	r7, #16
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	460b      	mov	r3, r1
 800c90a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c90c:	2300      	movs	r3, #0
 800c90e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c910:	2300      	movs	r3, #0
 800c912:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c91a:	78fa      	ldrb	r2, [r7, #3]
 800c91c:	4611      	mov	r1, r2
 800c91e:	4618      	mov	r0, r3
 800c920:	f7f6 fe85 	bl	800362e <HAL_PCD_EP_SetStall>
 800c924:	4603      	mov	r3, r0
 800c926:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c928:	7bfb      	ldrb	r3, [r7, #15]
 800c92a:	4618      	mov	r0, r3
 800c92c:	f000 f918 	bl	800cb60 <USBD_Get_USB_Status>
 800c930:	4603      	mov	r3, r0
 800c932:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800c934:	7bbb      	ldrb	r3, [r7, #14]
}
 800c936:	4618      	mov	r0, r3
 800c938:	3710      	adds	r7, #16
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}

0800c93e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c93e:	b580      	push	{r7, lr}
 800c940:	b084      	sub	sp, #16
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
 800c946:	460b      	mov	r3, r1
 800c948:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c94a:	2300      	movs	r3, #0
 800c94c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c94e:	2300      	movs	r3, #0
 800c950:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c958:	78fa      	ldrb	r2, [r7, #3]
 800c95a:	4611      	mov	r1, r2
 800c95c:	4618      	mov	r0, r3
 800c95e:	f7f6 fec0 	bl	80036e2 <HAL_PCD_EP_ClrStall>
 800c962:	4603      	mov	r3, r0
 800c964:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800c966:	7bfb      	ldrb	r3, [r7, #15]
 800c968:	4618      	mov	r0, r3
 800c96a:	f000 f8f9 	bl	800cb60 <USBD_Get_USB_Status>
 800c96e:	4603      	mov	r3, r0
 800c970:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800c972:	7bbb      	ldrb	r3, [r7, #14]
}
 800c974:	4618      	mov	r0, r3
 800c976:	3710      	adds	r7, #16
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b085      	sub	sp, #20
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	460b      	mov	r3, r1
 800c986:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c98e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800c990:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c994:	2b00      	cmp	r3, #0
 800c996:	da08      	bge.n	800c9aa <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800c998:	78fb      	ldrb	r3, [r7, #3]
 800c99a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c99e:	68fa      	ldr	r2, [r7, #12]
 800c9a0:	015b      	lsls	r3, r3, #5
 800c9a2:	4413      	add	r3, r2
 800c9a4:	332a      	adds	r3, #42	; 0x2a
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	e008      	b.n	800c9bc <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800c9aa:	78fb      	ldrb	r3, [r7, #3]
 800c9ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9b0:	68fa      	ldr	r2, [r7, #12]
 800c9b2:	015b      	lsls	r3, r3, #5
 800c9b4:	4413      	add	r3, r2
 800c9b6:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800c9ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3714      	adds	r7, #20
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr

0800c9c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	460b      	mov	r3, r1
 800c9d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c9e2:	78fa      	ldrb	r2, [r7, #3]
 800c9e4:	4611      	mov	r1, r2
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7f6 fcd2 	bl	8003390 <HAL_PCD_SetAddress>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9f0:	7bfb      	ldrb	r3, [r7, #15]
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f000 f8b4 	bl	800cb60 <USBD_Get_USB_Status>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800c9fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3710      	adds	r7, #16
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}

0800ca06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ca06:	b580      	push	{r7, lr}
 800ca08:	b086      	sub	sp, #24
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	60f8      	str	r0, [r7, #12]
 800ca0e:	607a      	str	r2, [r7, #4]
 800ca10:	461a      	mov	r2, r3
 800ca12:	460b      	mov	r3, r1
 800ca14:	72fb      	strb	r3, [r7, #11]
 800ca16:	4613      	mov	r3, r2
 800ca18:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ca28:	893b      	ldrh	r3, [r7, #8]
 800ca2a:	7af9      	ldrb	r1, [r7, #11]
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	f7f6 fdc5 	bl	80035bc <HAL_PCD_EP_Transmit>
 800ca32:	4603      	mov	r3, r0
 800ca34:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca36:	7dfb      	ldrb	r3, [r7, #23]
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f000 f891 	bl	800cb60 <USBD_Get_USB_Status>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800ca42:	7dbb      	ldrb	r3, [r7, #22]
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3718      	adds	r7, #24
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b086      	sub	sp, #24
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	607a      	str	r2, [r7, #4]
 800ca56:	461a      	mov	r2, r3
 800ca58:	460b      	mov	r3, r1
 800ca5a:	72fb      	strb	r3, [r7, #11]
 800ca5c:	4613      	mov	r3, r2
 800ca5e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca60:	2300      	movs	r3, #0
 800ca62:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca64:	2300      	movs	r3, #0
 800ca66:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ca6e:	893b      	ldrh	r3, [r7, #8]
 800ca70:	7af9      	ldrb	r1, [r7, #11]
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	f7f6 fd53 	bl	800351e <HAL_PCD_EP_Receive>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca7c:	7dfb      	ldrb	r3, [r7, #23]
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f000 f86e 	bl	800cb60 <USBD_Get_USB_Status>
 800ca84:	4603      	mov	r3, r0
 800ca86:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800ca88:	7dbb      	ldrb	r3, [r7, #22]
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3718      	adds	r7, #24
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}

0800ca92 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b082      	sub	sp, #8
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
 800ca9a:	460b      	mov	r3, r1
 800ca9c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800caa4:	78fa      	ldrb	r2, [r7, #3]
 800caa6:	4611      	mov	r1, r2
 800caa8:	4618      	mov	r0, r3
 800caaa:	f7f6 fd72 	bl	8003592 <HAL_PCD_EP_GetRxCount>
 800caae:	4603      	mov	r3, r0
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3708      	adds	r7, #8
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	460b      	mov	r3, r1
 800cac2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800cac4:	78fb      	ldrb	r3, [r7, #3]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d002      	beq.n	800cad0 <HAL_PCDEx_LPM_Callback+0x18>
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d013      	beq.n	800caf6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 800cace:	e023      	b.n	800cb18 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	699b      	ldr	r3, [r3, #24]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d007      	beq.n	800cae8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800cad8:	f000 f83c 	bl	800cb54 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cadc:	4b10      	ldr	r3, [pc, #64]	; (800cb20 <HAL_PCDEx_LPM_Callback+0x68>)
 800cade:	691b      	ldr	r3, [r3, #16]
 800cae0:	4a0f      	ldr	r2, [pc, #60]	; (800cb20 <HAL_PCDEx_LPM_Callback+0x68>)
 800cae2:	f023 0306 	bic.w	r3, r3, #6
 800cae6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800caee:	4618      	mov	r0, r3
 800caf0:	f7fd fbc0 	bl	800a274 <USBD_LL_Resume>
    break;
 800caf4:	e010      	b.n	800cb18 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7fd fba4 	bl	800a24a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	699b      	ldr	r3, [r3, #24]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d005      	beq.n	800cb16 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cb0a:	4b05      	ldr	r3, [pc, #20]	; (800cb20 <HAL_PCDEx_LPM_Callback+0x68>)
 800cb0c:	691b      	ldr	r3, [r3, #16]
 800cb0e:	4a04      	ldr	r2, [pc, #16]	; (800cb20 <HAL_PCDEx_LPM_Callback+0x68>)
 800cb10:	f043 0306 	orr.w	r3, r3, #6
 800cb14:	6113      	str	r3, [r2, #16]
    break;   
 800cb16:	bf00      	nop
}
 800cb18:	bf00      	nop
 800cb1a:	3708      	adds	r7, #8
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	e000ed00 	.word	0xe000ed00

0800cb24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b083      	sub	sp, #12
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cb2c:	4b03      	ldr	r3, [pc, #12]	; (800cb3c <USBD_static_malloc+0x18>)
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	370c      	adds	r7, #12
 800cb32:	46bd      	mov	sp, r7
 800cb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb38:	4770      	bx	lr
 800cb3a:	bf00      	nop
 800cb3c:	200021c4 	.word	0x200021c4

0800cb40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b083      	sub	sp, #12
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]

}
 800cb48:	bf00      	nop
 800cb4a:	370c      	adds	r7, #12
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr

0800cb54 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cb58:	f7f4 fc14 	bl	8001384 <SystemClock_Config>
}
 800cb5c:	bf00      	nop
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cb60:	b480      	push	{r7}
 800cb62:	b085      	sub	sp, #20
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	4603      	mov	r3, r0
 800cb68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cb6e:	79fb      	ldrb	r3, [r7, #7]
 800cb70:	2b03      	cmp	r3, #3
 800cb72:	d817      	bhi.n	800cba4 <USBD_Get_USB_Status+0x44>
 800cb74:	a201      	add	r2, pc, #4	; (adr r2, 800cb7c <USBD_Get_USB_Status+0x1c>)
 800cb76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb7a:	bf00      	nop
 800cb7c:	0800cb8d 	.word	0x0800cb8d
 800cb80:	0800cb93 	.word	0x0800cb93
 800cb84:	0800cb99 	.word	0x0800cb99
 800cb88:	0800cb9f 	.word	0x0800cb9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	73fb      	strb	r3, [r7, #15]
    break;
 800cb90:	e00b      	b.n	800cbaa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb92:	2302      	movs	r3, #2
 800cb94:	73fb      	strb	r3, [r7, #15]
    break;
 800cb96:	e008      	b.n	800cbaa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb98:	2301      	movs	r3, #1
 800cb9a:	73fb      	strb	r3, [r7, #15]
    break;
 800cb9c:	e005      	b.n	800cbaa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb9e:	2302      	movs	r3, #2
 800cba0:	73fb      	strb	r3, [r7, #15]
    break;
 800cba2:	e002      	b.n	800cbaa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cba4:	2302      	movs	r3, #2
 800cba6:	73fb      	strb	r3, [r7, #15]
    break;
 800cba8:	bf00      	nop
  }
  return usb_status;
 800cbaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3714      	adds	r7, #20
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr

0800cbb8 <fmod>:
 800cbb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cbbc:	ed2d 8b02 	vpush	{d8}
 800cbc0:	b08b      	sub	sp, #44	; 0x2c
 800cbc2:	ec55 4b10 	vmov	r4, r5, d0
 800cbc6:	ec57 6b11 	vmov	r6, r7, d1
 800cbca:	f000 f859 	bl	800cc80 <__ieee754_fmod>
 800cbce:	4b2a      	ldr	r3, [pc, #168]	; (800cc78 <fmod+0xc0>)
 800cbd0:	eeb0 8a40 	vmov.f32	s16, s0
 800cbd4:	eef0 8a60 	vmov.f32	s17, s1
 800cbd8:	f993 8000 	ldrsb.w	r8, [r3]
 800cbdc:	f1b8 3fff 	cmp.w	r8, #4294967295
 800cbe0:	d030      	beq.n	800cc44 <fmod+0x8c>
 800cbe2:	4632      	mov	r2, r6
 800cbe4:	463b      	mov	r3, r7
 800cbe6:	4630      	mov	r0, r6
 800cbe8:	4639      	mov	r1, r7
 800cbea:	f7f3 ff6f 	bl	8000acc <__aeabi_dcmpun>
 800cbee:	bb48      	cbnz	r0, 800cc44 <fmod+0x8c>
 800cbf0:	4622      	mov	r2, r4
 800cbf2:	462b      	mov	r3, r5
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	4629      	mov	r1, r5
 800cbf8:	f7f3 ff68 	bl	8000acc <__aeabi_dcmpun>
 800cbfc:	4681      	mov	r9, r0
 800cbfe:	bb08      	cbnz	r0, 800cc44 <fmod+0x8c>
 800cc00:	2200      	movs	r2, #0
 800cc02:	2300      	movs	r3, #0
 800cc04:	4630      	mov	r0, r6
 800cc06:	4639      	mov	r1, r7
 800cc08:	f7f3 ff2e 	bl	8000a68 <__aeabi_dcmpeq>
 800cc0c:	b1d0      	cbz	r0, 800cc44 <fmod+0x8c>
 800cc0e:	2301      	movs	r3, #1
 800cc10:	9300      	str	r3, [sp, #0]
 800cc12:	4b1a      	ldr	r3, [pc, #104]	; (800cc7c <fmod+0xc4>)
 800cc14:	9301      	str	r3, [sp, #4]
 800cc16:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800cc1a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800cc1e:	f8cd 9020 	str.w	r9, [sp, #32]
 800cc22:	f1b8 0f00 	cmp.w	r8, #0
 800cc26:	d116      	bne.n	800cc56 <fmod+0x9e>
 800cc28:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800cc2c:	4668      	mov	r0, sp
 800cc2e:	f000 f939 	bl	800cea4 <matherr>
 800cc32:	b1d8      	cbz	r0, 800cc6c <fmod+0xb4>
 800cc34:	9b08      	ldr	r3, [sp, #32]
 800cc36:	b11b      	cbz	r3, 800cc40 <fmod+0x88>
 800cc38:	f000 f936 	bl	800cea8 <__errno>
 800cc3c:	9b08      	ldr	r3, [sp, #32]
 800cc3e:	6003      	str	r3, [r0, #0]
 800cc40:	ed9d 8b06 	vldr	d8, [sp, #24]
 800cc44:	eeb0 0a48 	vmov.f32	s0, s16
 800cc48:	eef0 0a68 	vmov.f32	s1, s17
 800cc4c:	b00b      	add	sp, #44	; 0x2c
 800cc4e:	ecbd 8b02 	vpop	{d8}
 800cc52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc56:	2200      	movs	r2, #0
 800cc58:	2300      	movs	r3, #0
 800cc5a:	4610      	mov	r0, r2
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	f7f3 fdc5 	bl	80007ec <__aeabi_ddiv>
 800cc62:	f1b8 0f02 	cmp.w	r8, #2
 800cc66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cc6a:	d1df      	bne.n	800cc2c <fmod+0x74>
 800cc6c:	f000 f91c 	bl	800cea8 <__errno>
 800cc70:	2321      	movs	r3, #33	; 0x21
 800cc72:	6003      	str	r3, [r0, #0]
 800cc74:	e7de      	b.n	800cc34 <fmod+0x7c>
 800cc76:	bf00      	nop
 800cc78:	20000182 	.word	0x20000182
 800cc7c:	0800d238 	.word	0x0800d238

0800cc80 <__ieee754_fmod>:
 800cc80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc84:	ec53 2b11 	vmov	r2, r3, d1
 800cc88:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800cc8c:	ea5e 0402 	orrs.w	r4, lr, r2
 800cc90:	ec51 0b10 	vmov	r0, r1, d0
 800cc94:	461e      	mov	r6, r3
 800cc96:	ee11 5a10 	vmov	r5, s2
 800cc9a:	4694      	mov	ip, r2
 800cc9c:	d00c      	beq.n	800ccb8 <__ieee754_fmod+0x38>
 800cc9e:	4c7a      	ldr	r4, [pc, #488]	; (800ce88 <__ieee754_fmod+0x208>)
 800cca0:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800cca4:	45a0      	cmp	r8, r4
 800cca6:	4689      	mov	r9, r1
 800cca8:	dc06      	bgt.n	800ccb8 <__ieee754_fmod+0x38>
 800ccaa:	4254      	negs	r4, r2
 800ccac:	4314      	orrs	r4, r2
 800ccae:	4f77      	ldr	r7, [pc, #476]	; (800ce8c <__ieee754_fmod+0x20c>)
 800ccb0:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800ccb4:	42bc      	cmp	r4, r7
 800ccb6:	d909      	bls.n	800cccc <__ieee754_fmod+0x4c>
 800ccb8:	f7f3 fc6e 	bl	8000598 <__aeabi_dmul>
 800ccbc:	4602      	mov	r2, r0
 800ccbe:	460b      	mov	r3, r1
 800ccc0:	f7f3 fd94 	bl	80007ec <__aeabi_ddiv>
 800ccc4:	ec41 0b10 	vmov	d0, r0, r1
 800ccc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cccc:	45f0      	cmp	r8, lr
 800ccce:	ee10 2a10 	vmov	r2, s0
 800ccd2:	4607      	mov	r7, r0
 800ccd4:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 800ccd8:	dc0a      	bgt.n	800ccf0 <__ieee754_fmod+0x70>
 800ccda:	dbf3      	blt.n	800ccc4 <__ieee754_fmod+0x44>
 800ccdc:	42a8      	cmp	r0, r5
 800ccde:	d3f1      	bcc.n	800ccc4 <__ieee754_fmod+0x44>
 800cce0:	d106      	bne.n	800ccf0 <__ieee754_fmod+0x70>
 800cce2:	496b      	ldr	r1, [pc, #428]	; (800ce90 <__ieee754_fmod+0x210>)
 800cce4:	0fe4      	lsrs	r4, r4, #31
 800cce6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800ccea:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ccee:	e7e9      	b.n	800ccc4 <__ieee754_fmod+0x44>
 800ccf0:	4b68      	ldr	r3, [pc, #416]	; (800ce94 <__ieee754_fmod+0x214>)
 800ccf2:	4598      	cmp	r8, r3
 800ccf4:	dc49      	bgt.n	800cd8a <__ieee754_fmod+0x10a>
 800ccf6:	f1b8 0f00 	cmp.w	r8, #0
 800ccfa:	d13d      	bne.n	800cd78 <__ieee754_fmod+0xf8>
 800ccfc:	4866      	ldr	r0, [pc, #408]	; (800ce98 <__ieee754_fmod+0x218>)
 800ccfe:	4611      	mov	r1, r2
 800cd00:	2900      	cmp	r1, #0
 800cd02:	dc36      	bgt.n	800cd72 <__ieee754_fmod+0xf2>
 800cd04:	459e      	cmp	lr, r3
 800cd06:	dc51      	bgt.n	800cdac <__ieee754_fmod+0x12c>
 800cd08:	f1be 0f00 	cmp.w	lr, #0
 800cd0c:	d145      	bne.n	800cd9a <__ieee754_fmod+0x11a>
 800cd0e:	4b62      	ldr	r3, [pc, #392]	; (800ce98 <__ieee754_fmod+0x218>)
 800cd10:	4629      	mov	r1, r5
 800cd12:	2900      	cmp	r1, #0
 800cd14:	dc3e      	bgt.n	800cd94 <__ieee754_fmod+0x114>
 800cd16:	4961      	ldr	r1, [pc, #388]	; (800ce9c <__ieee754_fmod+0x21c>)
 800cd18:	4288      	cmp	r0, r1
 800cd1a:	db4c      	blt.n	800cdb6 <__ieee754_fmod+0x136>
 800cd1c:	f3c9 0113 	ubfx	r1, r9, #0, #20
 800cd20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800cd24:	4a5d      	ldr	r2, [pc, #372]	; (800ce9c <__ieee754_fmod+0x21c>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	db59      	blt.n	800cdde <__ieee754_fmod+0x15e>
 800cd2a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800cd2e:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800cd32:	1ac0      	subs	r0, r0, r3
 800cd34:	1b8a      	subs	r2, r1, r6
 800cd36:	eba7 050c 	sub.w	r5, r7, ip
 800cd3a:	2800      	cmp	r0, #0
 800cd3c:	d166      	bne.n	800ce0c <__ieee754_fmod+0x18c>
 800cd3e:	4567      	cmp	r7, ip
 800cd40:	bf38      	it	cc
 800cd42:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800cd46:	2a00      	cmp	r2, #0
 800cd48:	bfbc      	itt	lt
 800cd4a:	463d      	movlt	r5, r7
 800cd4c:	460a      	movlt	r2, r1
 800cd4e:	ea52 0105 	orrs.w	r1, r2, r5
 800cd52:	d0c6      	beq.n	800cce2 <__ieee754_fmod+0x62>
 800cd54:	494f      	ldr	r1, [pc, #316]	; (800ce94 <__ieee754_fmod+0x214>)
 800cd56:	428a      	cmp	r2, r1
 800cd58:	dd6d      	ble.n	800ce36 <__ieee754_fmod+0x1b6>
 800cd5a:	4950      	ldr	r1, [pc, #320]	; (800ce9c <__ieee754_fmod+0x21c>)
 800cd5c:	428b      	cmp	r3, r1
 800cd5e:	db70      	blt.n	800ce42 <__ieee754_fmod+0x1c2>
 800cd60:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 800cd64:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800cd68:	4314      	orrs	r4, r2
 800cd6a:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 800cd6e:	4628      	mov	r0, r5
 800cd70:	e7a8      	b.n	800ccc4 <__ieee754_fmod+0x44>
 800cd72:	3801      	subs	r0, #1
 800cd74:	0049      	lsls	r1, r1, #1
 800cd76:	e7c3      	b.n	800cd00 <__ieee754_fmod+0x80>
 800cd78:	4848      	ldr	r0, [pc, #288]	; (800ce9c <__ieee754_fmod+0x21c>)
 800cd7a:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800cd7e:	0049      	lsls	r1, r1, #1
 800cd80:	2900      	cmp	r1, #0
 800cd82:	f100 30ff 	add.w	r0, r0, #4294967295
 800cd86:	dcfa      	bgt.n	800cd7e <__ieee754_fmod+0xfe>
 800cd88:	e7bc      	b.n	800cd04 <__ieee754_fmod+0x84>
 800cd8a:	ea4f 5028 	mov.w	r0, r8, asr #20
 800cd8e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800cd92:	e7b7      	b.n	800cd04 <__ieee754_fmod+0x84>
 800cd94:	3b01      	subs	r3, #1
 800cd96:	0049      	lsls	r1, r1, #1
 800cd98:	e7bb      	b.n	800cd12 <__ieee754_fmod+0x92>
 800cd9a:	4b40      	ldr	r3, [pc, #256]	; (800ce9c <__ieee754_fmod+0x21c>)
 800cd9c:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 800cda0:	0049      	lsls	r1, r1, #1
 800cda2:	2900      	cmp	r1, #0
 800cda4:	f103 33ff 	add.w	r3, r3, #4294967295
 800cda8:	dcfa      	bgt.n	800cda0 <__ieee754_fmod+0x120>
 800cdaa:	e7b4      	b.n	800cd16 <__ieee754_fmod+0x96>
 800cdac:	ea4f 532e 	mov.w	r3, lr, asr #20
 800cdb0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cdb4:	e7af      	b.n	800cd16 <__ieee754_fmod+0x96>
 800cdb6:	1a0f      	subs	r7, r1, r0
 800cdb8:	2f1f      	cmp	r7, #31
 800cdba:	dc0a      	bgt.n	800cdd2 <__ieee754_fmod+0x152>
 800cdbc:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 800cdc0:	fa08 f807 	lsl.w	r8, r8, r7
 800cdc4:	fa22 f101 	lsr.w	r1, r2, r1
 800cdc8:	ea41 0108 	orr.w	r1, r1, r8
 800cdcc:	fa02 f707 	lsl.w	r7, r2, r7
 800cdd0:	e7a8      	b.n	800cd24 <__ieee754_fmod+0xa4>
 800cdd2:	4933      	ldr	r1, [pc, #204]	; (800cea0 <__ieee754_fmod+0x220>)
 800cdd4:	1a09      	subs	r1, r1, r0
 800cdd6:	fa02 f101 	lsl.w	r1, r2, r1
 800cdda:	2700      	movs	r7, #0
 800cddc:	e7a2      	b.n	800cd24 <__ieee754_fmod+0xa4>
 800cdde:	eba2 0c03 	sub.w	ip, r2, r3
 800cde2:	f1bc 0f1f 	cmp.w	ip, #31
 800cde6:	dc0a      	bgt.n	800cdfe <__ieee754_fmod+0x17e>
 800cde8:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 800cdec:	fa0e fe0c 	lsl.w	lr, lr, ip
 800cdf0:	fa25 f606 	lsr.w	r6, r5, r6
 800cdf4:	ea46 060e 	orr.w	r6, r6, lr
 800cdf8:	fa05 fc0c 	lsl.w	ip, r5, ip
 800cdfc:	e799      	b.n	800cd32 <__ieee754_fmod+0xb2>
 800cdfe:	4e28      	ldr	r6, [pc, #160]	; (800cea0 <__ieee754_fmod+0x220>)
 800ce00:	1af6      	subs	r6, r6, r3
 800ce02:	fa05 f606 	lsl.w	r6, r5, r6
 800ce06:	f04f 0c00 	mov.w	ip, #0
 800ce0a:	e792      	b.n	800cd32 <__ieee754_fmod+0xb2>
 800ce0c:	4567      	cmp	r7, ip
 800ce0e:	bf38      	it	cc
 800ce10:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800ce14:	2a00      	cmp	r2, #0
 800ce16:	da05      	bge.n	800ce24 <__ieee754_fmod+0x1a4>
 800ce18:	0ffa      	lsrs	r2, r7, #31
 800ce1a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ce1e:	007f      	lsls	r7, r7, #1
 800ce20:	3801      	subs	r0, #1
 800ce22:	e787      	b.n	800cd34 <__ieee754_fmod+0xb4>
 800ce24:	ea52 0105 	orrs.w	r1, r2, r5
 800ce28:	f43f af5b 	beq.w	800cce2 <__ieee754_fmod+0x62>
 800ce2c:	0fe9      	lsrs	r1, r5, #31
 800ce2e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800ce32:	006f      	lsls	r7, r5, #1
 800ce34:	e7f4      	b.n	800ce20 <__ieee754_fmod+0x1a0>
 800ce36:	0fe8      	lsrs	r0, r5, #31
 800ce38:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800ce3c:	006d      	lsls	r5, r5, #1
 800ce3e:	3b01      	subs	r3, #1
 800ce40:	e789      	b.n	800cd56 <__ieee754_fmod+0xd6>
 800ce42:	1ac9      	subs	r1, r1, r3
 800ce44:	2914      	cmp	r1, #20
 800ce46:	dc0a      	bgt.n	800ce5e <__ieee754_fmod+0x1de>
 800ce48:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800ce4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ce50:	40cd      	lsrs	r5, r1
 800ce52:	432b      	orrs	r3, r5
 800ce54:	410a      	asrs	r2, r1
 800ce56:	ea42 0104 	orr.w	r1, r2, r4
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	e732      	b.n	800ccc4 <__ieee754_fmod+0x44>
 800ce5e:	291f      	cmp	r1, #31
 800ce60:	dc07      	bgt.n	800ce72 <__ieee754_fmod+0x1f2>
 800ce62:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800ce66:	40cd      	lsrs	r5, r1
 800ce68:	fa02 f303 	lsl.w	r3, r2, r3
 800ce6c:	432b      	orrs	r3, r5
 800ce6e:	4622      	mov	r2, r4
 800ce70:	e7f1      	b.n	800ce56 <__ieee754_fmod+0x1d6>
 800ce72:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800ce76:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800ce7a:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800ce7e:	33e2      	adds	r3, #226	; 0xe2
 800ce80:	fa42 f303 	asr.w	r3, r2, r3
 800ce84:	e7f3      	b.n	800ce6e <__ieee754_fmod+0x1ee>
 800ce86:	bf00      	nop
 800ce88:	7fefffff 	.word	0x7fefffff
 800ce8c:	7ff00000 	.word	0x7ff00000
 800ce90:	0800d240 	.word	0x0800d240
 800ce94:	000fffff 	.word	0x000fffff
 800ce98:	fffffbed 	.word	0xfffffbed
 800ce9c:	fffffc02 	.word	0xfffffc02
 800cea0:	fffffbe2 	.word	0xfffffbe2

0800cea4 <matherr>:
 800cea4:	2000      	movs	r0, #0
 800cea6:	4770      	bx	lr

0800cea8 <__errno>:
 800cea8:	4b01      	ldr	r3, [pc, #4]	; (800ceb0 <__errno+0x8>)
 800ceaa:	6818      	ldr	r0, [r3, #0]
 800ceac:	4770      	bx	lr
 800ceae:	bf00      	nop
 800ceb0:	20000184 	.word	0x20000184

0800ceb4 <__libc_init_array>:
 800ceb4:	b570      	push	{r4, r5, r6, lr}
 800ceb6:	4e0d      	ldr	r6, [pc, #52]	; (800ceec <__libc_init_array+0x38>)
 800ceb8:	4c0d      	ldr	r4, [pc, #52]	; (800cef0 <__libc_init_array+0x3c>)
 800ceba:	1ba4      	subs	r4, r4, r6
 800cebc:	10a4      	asrs	r4, r4, #2
 800cebe:	2500      	movs	r5, #0
 800cec0:	42a5      	cmp	r5, r4
 800cec2:	d109      	bne.n	800ced8 <__libc_init_array+0x24>
 800cec4:	4e0b      	ldr	r6, [pc, #44]	; (800cef4 <__libc_init_array+0x40>)
 800cec6:	4c0c      	ldr	r4, [pc, #48]	; (800cef8 <__libc_init_array+0x44>)
 800cec8:	f000 f820 	bl	800cf0c <_init>
 800cecc:	1ba4      	subs	r4, r4, r6
 800cece:	10a4      	asrs	r4, r4, #2
 800ced0:	2500      	movs	r5, #0
 800ced2:	42a5      	cmp	r5, r4
 800ced4:	d105      	bne.n	800cee2 <__libc_init_array+0x2e>
 800ced6:	bd70      	pop	{r4, r5, r6, pc}
 800ced8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cedc:	4798      	blx	r3
 800cede:	3501      	adds	r5, #1
 800cee0:	e7ee      	b.n	800cec0 <__libc_init_array+0xc>
 800cee2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cee6:	4798      	blx	r3
 800cee8:	3501      	adds	r5, #1
 800ceea:	e7f2      	b.n	800ced2 <__libc_init_array+0x1e>
 800ceec:	0800d250 	.word	0x0800d250
 800cef0:	0800d250 	.word	0x0800d250
 800cef4:	0800d250 	.word	0x0800d250
 800cef8:	0800d254 	.word	0x0800d254

0800cefc <memset>:
 800cefc:	4402      	add	r2, r0
 800cefe:	4603      	mov	r3, r0
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d100      	bne.n	800cf06 <memset+0xa>
 800cf04:	4770      	bx	lr
 800cf06:	f803 1b01 	strb.w	r1, [r3], #1
 800cf0a:	e7f9      	b.n	800cf00 <memset+0x4>

0800cf0c <_init>:
 800cf0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf0e:	bf00      	nop
 800cf10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf12:	bc08      	pop	{r3}
 800cf14:	469e      	mov	lr, r3
 800cf16:	4770      	bx	lr

0800cf18 <_fini>:
 800cf18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf1a:	bf00      	nop
 800cf1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf1e:	bc08      	pop	{r3}
 800cf20:	469e      	mov	lr, r3
 800cf22:	4770      	bx	lr
