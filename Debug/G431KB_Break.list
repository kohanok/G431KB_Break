
G431KB_Break.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab08  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  0800ace8  0800ace8  0001ace8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aff8  0800aff8  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  0800aff8  0800aff8  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aff8  0800aff8  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aff8  0800aff8  0001aff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800affc  0800affc  0001affc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800b000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033d4  20000184  0800b184  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003558  0800b184  00023558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002609d  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004fd7  00000000  00000000  00046251  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ba0  00000000  00000000  0004b228  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001948  00000000  00000000  0004cdc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000239e9  00000000  00000000  0004e710  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e275  00000000  00000000  000720f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cfe22  00000000  00000000  0009036e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00160190  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007084  00000000  00000000  0016020c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000184 	.word	0x20000184
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800acd0 	.word	0x0800acd0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000188 	.word	0x20000188
 800021c:	0800acd0 	.word	0x0800acd0

08000220 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b090      	sub	sp, #64	; 0x40
 8000224:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Break_Task */
  osThreadDef(Break_Task, StartBreak_Task, osPriorityNormal, 0, 128);
 8000226:	4b1a      	ldr	r3, [pc, #104]	; (8000290 <MX_FREERTOS_Init+0x70>)
 8000228:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800022c:	461d      	mov	r5, r3
 800022e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000230:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000232:	682b      	ldr	r3, [r5, #0]
 8000234:	6023      	str	r3, [r4, #0]
  Break_TaskHandle = osThreadCreate(osThread(Break_Task), NULL);
 8000236:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800023a:	2100      	movs	r1, #0
 800023c:	4618      	mov	r0, r3
 800023e:	f008 fefc 	bl	800903a <osThreadCreate>
 8000242:	4602      	mov	r2, r0
 8000244:	4b13      	ldr	r3, [pc, #76]	; (8000294 <MX_FREERTOS_Init+0x74>)
 8000246:	601a      	str	r2, [r3, #0]

  /* definition and creation of RainBow_Task */
  osThreadDef(RainBow_Task, StartRainBow_Task, osPriorityIdle, 0, 128);
 8000248:	4b13      	ldr	r3, [pc, #76]	; (8000298 <MX_FREERTOS_Init+0x78>)
 800024a:	f107 0418 	add.w	r4, r7, #24
 800024e:	461d      	mov	r5, r3
 8000250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000254:	682b      	ldr	r3, [r5, #0]
 8000256:	6023      	str	r3, [r4, #0]
  RainBow_TaskHandle = osThreadCreate(osThread(RainBow_Task), NULL);
 8000258:	f107 0318 	add.w	r3, r7, #24
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f008 feeb 	bl	800903a <osThreadCreate>
 8000264:	4602      	mov	r2, r0
 8000266:	4b0d      	ldr	r3, [pc, #52]	; (800029c <MX_FREERTOS_Init+0x7c>)
 8000268:	601a      	str	r2, [r3, #0]

  /* definition and creation of AS504X_Task */
  osThreadDef(AS504X_Task, StartAS504X_Task, osPriorityIdle, 0, 128);
 800026a:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <MX_FREERTOS_Init+0x80>)
 800026c:	1d3c      	adds	r4, r7, #4
 800026e:	461d      	mov	r5, r3
 8000270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000274:	682b      	ldr	r3, [r5, #0]
 8000276:	6023      	str	r3, [r4, #0]
  AS504X_TaskHandle = osThreadCreate(osThread(AS504X_Task), NULL);
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	2100      	movs	r1, #0
 800027c:	4618      	mov	r0, r3
 800027e:	f008 fedc 	bl	800903a <osThreadCreate>
 8000282:	4602      	mov	r2, r0
 8000284:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <MX_FREERTOS_Init+0x84>)
 8000286:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000288:	bf00      	nop
 800028a:	3740      	adds	r7, #64	; 0x40
 800028c:	46bd      	mov	sp, r7
 800028e:	bdb0      	pop	{r4, r5, r7, pc}
 8000290:	0800acf4 	.word	0x0800acf4
 8000294:	20002378 	.word	0x20002378
 8000298:	0800ad18 	.word	0x0800ad18
 800029c:	2000237c 	.word	0x2000237c
 80002a0:	0800ad38 	.word	0x0800ad38
 80002a4:	20002374 	.word	0x20002374

080002a8 <StartBreak_Task>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartBreak_Task */
void StartBreak_Task(void const * argument)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBreak_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80002b0:	2001      	movs	r0, #1
 80002b2:	f008 fee9 	bl	8009088 <osDelay>
 80002b6:	e7fb      	b.n	80002b0 <StartBreak_Task+0x8>

080002b8 <StartRainBow_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRainBow_Task */
void StartRainBow_Task(void const * argument)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRainBow_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80002c0:	2001      	movs	r0, #1
 80002c2:	f008 fee1 	bl	8009088 <osDelay>
 80002c6:	e7fb      	b.n	80002c0 <StartRainBow_Task+0x8>

080002c8 <StartAS504X_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAS504X_Task */
void StartAS504X_Task(void const * argument)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAS504X_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80002d0:	2001      	movs	r0, #1
 80002d2:	f008 fed9 	bl	8009088 <osDelay>
 80002d6:	e7fb      	b.n	80002d0 <StartAS504X_Task+0x8>

080002d8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80002de:	4b1e      	ldr	r3, [pc, #120]	; (8000358 <MX_DMA_Init+0x80>)
 80002e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80002e2:	4a1d      	ldr	r2, [pc, #116]	; (8000358 <MX_DMA_Init+0x80>)
 80002e4:	f043 0304 	orr.w	r3, r3, #4
 80002e8:	6493      	str	r3, [r2, #72]	; 0x48
 80002ea:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <MX_DMA_Init+0x80>)
 80002ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80002ee:	f003 0304 	and.w	r3, r3, #4
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002f6:	4b18      	ldr	r3, [pc, #96]	; (8000358 <MX_DMA_Init+0x80>)
 80002f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80002fa:	4a17      	ldr	r2, [pc, #92]	; (8000358 <MX_DMA_Init+0x80>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6493      	str	r3, [r2, #72]	; 0x48
 8000302:	4b15      	ldr	r3, [pc, #84]	; (8000358 <MX_DMA_Init+0x80>)
 8000304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000306:	f003 0301 	and.w	r3, r3, #1
 800030a:	603b      	str	r3, [r7, #0]
 800030c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800030e:	2200      	movs	r2, #0
 8000310:	2105      	movs	r1, #5
 8000312:	200b      	movs	r0, #11
 8000314:	f000 fe82 	bl	800101c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000318:	200b      	movs	r0, #11
 800031a:	f000 fea9 	bl	8001070 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800031e:	2200      	movs	r2, #0
 8000320:	2105      	movs	r1, #5
 8000322:	200c      	movs	r0, #12
 8000324:	f000 fe7a 	bl	800101c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000328:	200c      	movs	r0, #12
 800032a:	f000 fea1 	bl	8001070 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800032e:	2200      	movs	r2, #0
 8000330:	2105      	movs	r1, #5
 8000332:	200d      	movs	r0, #13
 8000334:	f000 fe72 	bl	800101c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000338:	200d      	movs	r0, #13
 800033a:	f000 fe99 	bl	8001070 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800033e:	2200      	movs	r2, #0
 8000340:	2105      	movs	r1, #5
 8000342:	200e      	movs	r0, #14
 8000344:	f000 fe6a 	bl	800101c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000348:	200e      	movs	r0, #14
 800034a:	f000 fe91 	bl	8001070 <HAL_NVIC_EnableIRQ>

}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40021000 	.word	0x40021000

0800035c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b08a      	sub	sp, #40	; 0x28
 8000360:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000362:	f107 0314 	add.w	r3, r7, #20
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000372:	4b39      	ldr	r3, [pc, #228]	; (8000458 <MX_GPIO_Init+0xfc>)
 8000374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000376:	4a38      	ldr	r2, [pc, #224]	; (8000458 <MX_GPIO_Init+0xfc>)
 8000378:	f043 0320 	orr.w	r3, r3, #32
 800037c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800037e:	4b36      	ldr	r3, [pc, #216]	; (8000458 <MX_GPIO_Init+0xfc>)
 8000380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000382:	f003 0320 	and.w	r3, r3, #32
 8000386:	613b      	str	r3, [r7, #16]
 8000388:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800038a:	4b33      	ldr	r3, [pc, #204]	; (8000458 <MX_GPIO_Init+0xfc>)
 800038c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038e:	4a32      	ldr	r2, [pc, #200]	; (8000458 <MX_GPIO_Init+0xfc>)
 8000390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000396:	4b30      	ldr	r3, [pc, #192]	; (8000458 <MX_GPIO_Init+0xfc>)
 8000398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800039a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800039e:	60fb      	str	r3, [r7, #12]
 80003a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a2:	4b2d      	ldr	r3, [pc, #180]	; (8000458 <MX_GPIO_Init+0xfc>)
 80003a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a6:	4a2c      	ldr	r2, [pc, #176]	; (8000458 <MX_GPIO_Init+0xfc>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ae:	4b2a      	ldr	r3, [pc, #168]	; (8000458 <MX_GPIO_Init+0xfc>)
 80003b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	60bb      	str	r3, [r7, #8]
 80003b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ba:	4b27      	ldr	r3, [pc, #156]	; (8000458 <MX_GPIO_Init+0xfc>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003be:	4a26      	ldr	r2, [pc, #152]	; (8000458 <MX_GPIO_Init+0xfc>)
 80003c0:	f043 0302 	orr.w	r3, r3, #2
 80003c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003c6:	4b24      	ldr	r3, [pc, #144]	; (8000458 <MX_GPIO_Init+0xfc>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ca:	f003 0302 	and.w	r3, r3, #2
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 80003d2:	2200      	movs	r2, #0
 80003d4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80003d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003dc:	f001 fc0c 	bl	8001bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80003e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003e6:	2303      	movs	r3, #3
 80003e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ea:	2300      	movs	r3, #0
 80003ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80003ee:	f107 0314 	add.w	r3, r7, #20
 80003f2:	4619      	mov	r1, r3
 80003f4:	4819      	ldr	r0, [pc, #100]	; (800045c <MX_GPIO_Init+0x100>)
 80003f6:	f001 f9a7 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA9 
                           PA10 PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9 
 80003fa:	f24e 630e 	movw	r3, #58894	; 0xe60e
 80003fe:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000400:	2303      	movs	r3, #3
 8000402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000408:	f107 0314 	add.w	r3, r7, #20
 800040c:	4619      	mov	r1, r3
 800040e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000412:	f001 f999 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8;
 8000416:	f44f 7388 	mov.w	r3, #272	; 0x110
 800041a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041c:	2301      	movs	r3, #1
 800041e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000420:	2300      	movs	r3, #0
 8000422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000424:	2300      	movs	r3, #0
 8000426:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000428:	f107 0314 	add.w	r3, r7, #20
 800042c:	4619      	mov	r1, r3
 800042e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000432:	f001 f989 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 PB4 PB6 
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6 
 8000436:	f240 13d9 	movw	r3, #473	; 0x1d9
 800043a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800043c:	2303      	movs	r3, #3
 800043e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000440:	2300      	movs	r3, #0
 8000442:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000444:	f107 0314 	add.w	r3, r7, #20
 8000448:	4619      	mov	r1, r3
 800044a:	4805      	ldr	r0, [pc, #20]	; (8000460 <MX_GPIO_Init+0x104>)
 800044c:	f001 f97c 	bl	8001748 <HAL_GPIO_Init>

}
 8000450:	bf00      	nop
 8000452:	3728      	adds	r7, #40	; 0x28
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40021000 	.word	0x40021000
 800045c:	48001800 	.word	0x48001800
 8000460:	48000400 	.word	0x48000400

08000464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000468:	f000 fcd3 	bl	8000e12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800046c:	f000 f817 	bl	800049e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000470:	f7ff ff74 	bl	800035c <MX_GPIO_Init>
  MX_DMA_Init();
 8000474:	f7ff ff30 	bl	80002d8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000478:	f000 f89a 	bl	80005b0 <MX_SPI1_Init>
  MX_TIM2_Init();
 800047c:	f000 fa92 	bl	80009a4 <MX_TIM2_Init>
  MX_TIM17_Init();
 8000480:	f000 fae8 	bl	8000a54 <MX_TIM17_Init>
  MX_USB_Device_Init();
 8000484:	f009 ff24 	bl	800a2d0 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  ws2812Init();
 8000488:	f000 fc4c 	bl	8000d24 <ws2812Init>
  ws2812Begin(B_LED_CNT, R_LED_CNT);
 800048c:	2180      	movs	r1, #128	; 0x80
 800048e:	2014      	movs	r0, #20
 8000490:	f000 fc5e 	bl	8000d50 <ws2812Begin>

	//uint32_t led_index=0;
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000494:	f7ff fec4 	bl	8000220 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000498:	f008 fdc8 	bl	800902c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800049c:	e7fe      	b.n	800049c <main+0x38>

0800049e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800049e:	b580      	push	{r7, lr}
 80004a0:	b0a4      	sub	sp, #144	; 0x90
 80004a2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80004a8:	2238      	movs	r2, #56	; 0x38
 80004aa:	2100      	movs	r1, #0
 80004ac:	4618      	mov	r0, r3
 80004ae:	f00a fc07 	bl	800acc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
 80004c0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004c2:	463b      	mov	r3, r7
 80004c4:	2244      	movs	r2, #68	; 0x44
 80004c6:	2100      	movs	r1, #0
 80004c8:	4618      	mov	r0, r3
 80004ca:	f00a fbf9 	bl	800acc0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80004ce:	2000      	movs	r0, #0
 80004d0:	f002 fae6 	bl	8002aa0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80004d4:	2321      	movs	r3, #33	; 0x21
 80004d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004de:	2301      	movs	r3, #1
 80004e0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e2:	2302      	movs	r3, #2
 80004e4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004e6:	2303      	movs	r3, #3
 80004e8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80004ea:	2304      	movs	r3, #4
 80004ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80004ee:	2355      	movs	r3, #85	; 0x55
 80004f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004f4:	2302      	movs	r3, #2
 80004f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004fa:	2302      	movs	r3, #2
 80004fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000500:	2302      	movs	r3, #2
 8000502:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000506:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800050a:	4618      	mov	r0, r3
 800050c:	f002 fb7c 	bl	8002c08 <HAL_RCC_OscConfig>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000516:	f000 f839 	bl	800058c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051a:	230f      	movs	r3, #15
 800051c:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800051e:	2303      	movs	r3, #3
 8000520:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000522:	2300      	movs	r3, #0
 8000524:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000526:	2300      	movs	r3, #0
 8000528:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800052a:	2300      	movs	r3, #0
 800052c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 800052e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000532:	2108      	movs	r1, #8
 8000534:	4618      	mov	r0, r3
 8000536:	f002 ff79 	bl	800342c <HAL_RCC_ClockConfig>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000540:	f000 f824 	bl	800058c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000548:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800054a:	2300      	movs	r3, #0
 800054c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800054e:	463b      	mov	r3, r7
 8000550:	4618      	mov	r0, r3
 8000552:	f003 fa73 	bl	8003a3c <HAL_RCCEx_PeriphCLKConfig>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800055c:	f000 f816 	bl	800058c <Error_Handler>
  }
}
 8000560:	bf00      	nop
 8000562:	3790      	adds	r7, #144	; 0x90
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d101      	bne.n	800057e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800057a:	f000 fc63 	bl	8000e44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40012c00 	.word	0x40012c00

0800058c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 800059a:	b480      	push	{r7}
 800059c:	b083      	sub	sp, #12
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
 80005a2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80005a4:	bf00      	nop
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80005b4:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <MX_SPI1_Init+0x74>)
 80005b6:	4a1c      	ldr	r2, [pc, #112]	; (8000628 <MX_SPI1_Init+0x78>)
 80005b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005ba:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <MX_SPI1_Init+0x74>)
 80005bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <MX_SPI1_Init+0x74>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <MX_SPI1_Init+0x74>)
 80005ca:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80005ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_SPI1_Init+0x74>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_SPI1_Init+0x74>)
 80005d8:	2200      	movs	r2, #0
 80005da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_SPI1_Init+0x74>)
 80005de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_SPI1_Init+0x74>)
 80005e6:	2218      	movs	r2, #24
 80005e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_SPI1_Init+0x74>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_SPI1_Init+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <MX_SPI1_Init+0x74>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_SPI1_Init+0x74>)
 80005fe:	2207      	movs	r2, #7
 8000600:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <MX_SPI1_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_SPI1_Init+0x74>)
 800060a:	2208      	movs	r2, #8
 800060c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <MX_SPI1_Init+0x74>)
 8000610:	f003 fdb4 	bl	800417c <HAL_SPI_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800061a:	f7ff ffb7 	bl	800058c <Error_Handler>
  }

}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20002380 	.word	0x20002380
 8000628:	40013000 	.word	0x40013000

0800062c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a51      	ldr	r2, [pc, #324]	; (8000790 <HAL_SPI_MspInit+0x164>)
 800064a:	4293      	cmp	r3, r2
 800064c:	f040 809b 	bne.w	8000786 <HAL_SPI_MspInit+0x15a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000650:	4b50      	ldr	r3, [pc, #320]	; (8000794 <HAL_SPI_MspInit+0x168>)
 8000652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000654:	4a4f      	ldr	r2, [pc, #316]	; (8000794 <HAL_SPI_MspInit+0x168>)
 8000656:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800065a:	6613      	str	r3, [r2, #96]	; 0x60
 800065c:	4b4d      	ldr	r3, [pc, #308]	; (8000794 <HAL_SPI_MspInit+0x168>)
 800065e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000664:	613b      	str	r3, [r7, #16]
 8000666:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000668:	4b4a      	ldr	r3, [pc, #296]	; (8000794 <HAL_SPI_MspInit+0x168>)
 800066a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066c:	4a49      	ldr	r2, [pc, #292]	; (8000794 <HAL_SPI_MspInit+0x168>)
 800066e:	f043 0301 	orr.w	r3, r3, #1
 8000672:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000674:	4b47      	ldr	r3, [pc, #284]	; (8000794 <HAL_SPI_MspInit+0x168>)
 8000676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000678:	f003 0301 	and.w	r3, r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000680:	4b44      	ldr	r3, [pc, #272]	; (8000794 <HAL_SPI_MspInit+0x168>)
 8000682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000684:	4a43      	ldr	r2, [pc, #268]	; (8000794 <HAL_SPI_MspInit+0x168>)
 8000686:	f043 0302 	orr.w	r3, r3, #2
 800068a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068c:	4b41      	ldr	r3, [pc, #260]	; (8000794 <HAL_SPI_MspInit+0x168>)
 800068e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000690:	f003 0302 	and.w	r3, r3, #2
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000698:	2360      	movs	r3, #96	; 0x60
 800069a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069c:	2302      	movs	r3, #2
 800069e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006a8:	2305      	movs	r3, #5
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4619      	mov	r1, r3
 80006b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b6:	f001 f847 	bl	8001748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006ba:	2320      	movs	r3, #32
 80006bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006be:	2302      	movs	r3, #2
 80006c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2300      	movs	r3, #0
 80006c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006ca:	2305      	movs	r3, #5
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	4830      	ldr	r0, [pc, #192]	; (8000798 <HAL_SPI_MspInit+0x16c>)
 80006d6:	f001 f837 	bl	8001748 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 80006da:	4b30      	ldr	r3, [pc, #192]	; (800079c <HAL_SPI_MspInit+0x170>)
 80006dc:	4a30      	ldr	r2, [pc, #192]	; (80007a0 <HAL_SPI_MspInit+0x174>)
 80006de:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80006e0:	4b2e      	ldr	r3, [pc, #184]	; (800079c <HAL_SPI_MspInit+0x170>)
 80006e2:	220a      	movs	r2, #10
 80006e4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006e6:	4b2d      	ldr	r3, [pc, #180]	; (800079c <HAL_SPI_MspInit+0x170>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006ec:	4b2b      	ldr	r3, [pc, #172]	; (800079c <HAL_SPI_MspInit+0x170>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006f2:	4b2a      	ldr	r3, [pc, #168]	; (800079c <HAL_SPI_MspInit+0x170>)
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006f8:	4b28      	ldr	r3, [pc, #160]	; (800079c <HAL_SPI_MspInit+0x170>)
 80006fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006fe:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000700:	4b26      	ldr	r3, [pc, #152]	; (800079c <HAL_SPI_MspInit+0x170>)
 8000702:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000706:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <HAL_SPI_MspInit+0x170>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <HAL_SPI_MspInit+0x170>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000714:	4821      	ldr	r0, [pc, #132]	; (800079c <HAL_SPI_MspInit+0x170>)
 8000716:	f000 fcc3 	bl	80010a0 <HAL_DMA_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8000720:	f7ff ff34 	bl	800058c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a1d      	ldr	r2, [pc, #116]	; (800079c <HAL_SPI_MspInit+0x170>)
 8000728:	659a      	str	r2, [r3, #88]	; 0x58
 800072a:	4a1c      	ldr	r2, [pc, #112]	; (800079c <HAL_SPI_MspInit+0x170>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 8000730:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <HAL_SPI_MspInit+0x178>)
 8000732:	4a1d      	ldr	r2, [pc, #116]	; (80007a8 <HAL_SPI_MspInit+0x17c>)
 8000734:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000736:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <HAL_SPI_MspInit+0x178>)
 8000738:	220b      	movs	r2, #11
 800073a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800073c:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <HAL_SPI_MspInit+0x178>)
 800073e:	2210      	movs	r2, #16
 8000740:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <HAL_SPI_MspInit+0x178>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <HAL_SPI_MspInit+0x178>)
 800074a:	2280      	movs	r2, #128	; 0x80
 800074c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <HAL_SPI_MspInit+0x178>)
 8000750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000754:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <HAL_SPI_MspInit+0x178>)
 8000758:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800075c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <HAL_SPI_MspInit+0x178>)
 8000760:	2200      	movs	r2, #0
 8000762:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <HAL_SPI_MspInit+0x178>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800076a:	480e      	ldr	r0, [pc, #56]	; (80007a4 <HAL_SPI_MspInit+0x178>)
 800076c:	f000 fc98 	bl	80010a0 <HAL_DMA_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 8000776:	f7ff ff09 	bl	800058c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a09      	ldr	r2, [pc, #36]	; (80007a4 <HAL_SPI_MspInit+0x178>)
 800077e:	655a      	str	r2, [r3, #84]	; 0x54
 8000780:	4a08      	ldr	r2, [pc, #32]	; (80007a4 <HAL_SPI_MspInit+0x178>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	; 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40013000 	.word	0x40013000
 8000794:	40021000 	.word	0x40021000
 8000798:	48000400 	.word	0x48000400
 800079c:	200023e4 	.word	0x200023e4
 80007a0:	40020008 	.word	0x40020008
 80007a4:	20002444 	.word	0x20002444
 80007a8:	4002001c 	.word	0x4002001c

080007ac <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80007b2:	689b      	ldr	r3, [r3, #8]
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80007b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ba:	6093      	str	r3, [r2, #8]
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40007000 	.word	0x40007000

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_MspInit+0x50>)
 80007d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007d6:	4a11      	ldr	r2, [pc, #68]	; (800081c <HAL_MspInit+0x50>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6613      	str	r3, [r2, #96]	; 0x60
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <HAL_MspInit+0x50>)
 80007e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <HAL_MspInit+0x50>)
 80007ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ee:	4a0b      	ldr	r2, [pc, #44]	; (800081c <HAL_MspInit+0x50>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f4:	6593      	str	r3, [r2, #88]	; 0x58
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <HAL_MspInit+0x50>)
 80007f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	210f      	movs	r1, #15
 8000806:	f06f 0001 	mvn.w	r0, #1
 800080a:	f000 fc07 	bl	800101c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800080e:	f7ff ffcd 	bl	80007ac <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40021000 	.word	0x40021000

08000820 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	; 0x30
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8000830:	2200      	movs	r2, #0
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	2019      	movs	r0, #25
 8000836:	f000 fbf1 	bl	800101c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 800083a:	2019      	movs	r0, #25
 800083c:	f000 fc18 	bl	8001070 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000840:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <HAL_InitTick+0x9c>)
 8000842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000844:	4a1d      	ldr	r2, [pc, #116]	; (80008bc <HAL_InitTick+0x9c>)
 8000846:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800084a:	6613      	str	r3, [r2, #96]	; 0x60
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <HAL_InitTick+0x9c>)
 800084e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000858:	f107 0210 	add.w	r2, r7, #16
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4611      	mov	r1, r2
 8000862:	4618      	mov	r0, r3
 8000864:	f003 f864 	bl	8003930 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000868:	f003 f84c 	bl	8003904 <HAL_RCC_GetPCLK2Freq>
 800086c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800086e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000870:	4a13      	ldr	r2, [pc, #76]	; (80008c0 <HAL_InitTick+0xa0>)
 8000872:	fba2 2303 	umull	r2, r3, r2, r3
 8000876:	0c9b      	lsrs	r3, r3, #18
 8000878:	3b01      	subs	r3, #1
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <HAL_InitTick+0xa4>)
 800087e:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <HAL_InitTick+0xa8>)
 8000880:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <HAL_InitTick+0xa4>)
 8000884:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000888:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800088a:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <HAL_InitTick+0xa4>)
 800088c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800088e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <HAL_InitTick+0xa4>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <HAL_InitTick+0xa4>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800089c:	4809      	ldr	r0, [pc, #36]	; (80008c4 <HAL_InitTick+0xa4>)
 800089e:	f003 fdff 	bl	80044a0 <HAL_TIM_Base_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d104      	bne.n	80008b2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008a8:	4806      	ldr	r0, [pc, #24]	; (80008c4 <HAL_InitTick+0xa4>)
 80008aa:	f003 fed5 	bl	8004658 <HAL_TIM_Base_Start_IT>
 80008ae:	4603      	mov	r3, r0
 80008b0:	e000      	b.n	80008b4 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3730      	adds	r7, #48	; 0x30
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40021000 	.word	0x40021000
 80008c0:	431bde83 	.word	0x431bde83
 80008c4:	200024a4 	.word	0x200024a4
 80008c8:	40012c00 	.word	0x40012c00

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <MemManage_Handler+0x4>

080008e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <BusFault_Handler+0x4>

080008ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <UsageFault_Handler+0x4>

080008f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <DMA1_Channel1_IRQHandler+0x10>)
 8000906:	f000 fdcf 	bl	80014a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200023e4 	.word	0x200023e4

08000914 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <DMA1_Channel2_IRQHandler+0x10>)
 800091a:	f000 fdc5 	bl	80014a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20002444 	.word	0x20002444

08000928 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <DMA1_Channel3_IRQHandler+0x10>)
 800092e:	f000 fdbb 	bl	80014a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200025e8 	.word	0x200025e8

0800093c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <DMA1_Channel4_IRQHandler+0x10>)
 8000942:	f000 fdb1 	bl	80014a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200024f0 	.word	0x200024f0

08000950 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <USB_LP_IRQHandler+0x10>)
 8000956:	f001 fa69 	bl	8001e2c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200032e4 	.word	0x200032e4

08000964 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800096a:	f004 fa45 	bl	8004df8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200024a4 	.word	0x200024a4

08000978 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <SystemInit+0x28>)
 800097e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000982:	4a07      	ldr	r2, [pc, #28]	; (80009a0 <SystemInit+0x28>)
 8000984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <SystemInit+0x28>)
 800098e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000992:	609a      	str	r2, [r3, #8]
#endif
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim2_ch1;
DMA_HandleTypeDef hdma_tim17_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b6:	463b      	mov	r3, r7
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
 80009c4:	615a      	str	r2, [r3, #20]
 80009c6:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80009c8:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <MX_TIM2_Init+0xac>)
 80009ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009d0:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <MX_TIM2_Init+0xac>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d6:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <MX_TIM2_Init+0xac>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80009dc:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <MX_TIM2_Init+0xac>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e2:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <MX_TIM2_Init+0xac>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e8:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <MX_TIM2_Init+0xac>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009ee:	4818      	ldr	r0, [pc, #96]	; (8000a50 <MX_TIM2_Init+0xac>)
 80009f0:	f003 feb2 	bl	8004758 <HAL_TIM_PWM_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80009fa:	f7ff fdc7 	bl	800058c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4810      	ldr	r0, [pc, #64]	; (8000a50 <MX_TIM2_Init+0xac>)
 8000a0e:	f005 fb4f 	bl	80060b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000a18:	f7ff fdb8 	bl	800058c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a1c:	2360      	movs	r3, #96	; 0x60
 8000a1e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	2200      	movs	r2, #0
 8000a30:	4619      	mov	r1, r3
 8000a32:	4807      	ldr	r0, [pc, #28]	; (8000a50 <MX_TIM2_Init+0xac>)
 8000a34:	f004 fb60 	bl	80050f8 <HAL_TIM_PWM_ConfigChannel>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000a3e:	f7ff fda5 	bl	800058c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000a42:	4803      	ldr	r0, [pc, #12]	; (8000a50 <MX_TIM2_Init+0xac>)
 8000a44:	f000 f914 	bl	8000c70 <HAL_TIM_MspPostInit>

}
 8000a48:	bf00      	nop
 8000a4a:	3728      	adds	r7, #40	; 0x28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2000259c 	.word	0x2000259c

08000a54 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b094      	sub	sp, #80	; 0x50
 8000a58:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]
 8000a6a:	615a      	str	r2, [r3, #20]
 8000a6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a6e:	463b      	mov	r3, r7
 8000a70:	2234      	movs	r2, #52	; 0x34
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f00a f923 	bl	800acc0 <memset>

  htim17.Instance = TIM17;
 8000a7a:	4b30      	ldr	r3, [pc, #192]	; (8000b3c <MX_TIM17_Init+0xe8>)
 8000a7c:	4a30      	ldr	r2, [pc, #192]	; (8000b40 <MX_TIM17_Init+0xec>)
 8000a7e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000a80:	4b2e      	ldr	r3, [pc, #184]	; (8000b3c <MX_TIM17_Init+0xe8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a86:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <MX_TIM17_Init+0xe8>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 0;
 8000a8c:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <MX_TIM17_Init+0xe8>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a92:	4b2a      	ldr	r3, [pc, #168]	; (8000b3c <MX_TIM17_Init+0xe8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a98:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <MX_TIM17_Init+0xe8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9e:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <MX_TIM17_Init+0xe8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000aa4:	4825      	ldr	r0, [pc, #148]	; (8000b3c <MX_TIM17_Init+0xe8>)
 8000aa6:	f003 fcfb 	bl	80044a0 <HAL_TIM_Base_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8000ab0:	f7ff fd6c 	bl	800058c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000ab4:	4821      	ldr	r0, [pc, #132]	; (8000b3c <MX_TIM17_Init+0xe8>)
 8000ab6:	f003 fe4f 	bl	8004758 <HAL_TIM_PWM_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8000ac0:	f7ff fd64 	bl	800058c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac4:	2360      	movs	r3, #96	; 0x60
 8000ac6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000acc:	2300      	movs	r3, #0
 8000ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000adc:	2300      	movs	r3, #0
 8000ade:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ae0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4814      	ldr	r0, [pc, #80]	; (8000b3c <MX_TIM17_Init+0xe8>)
 8000aea:	f004 fb05 	bl	80050f8 <HAL_TIM_PWM_ConfigChannel>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 8000af4:	f7ff fd4a 	bl	800058c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4807      	ldr	r0, [pc, #28]	; (8000b3c <MX_TIM17_Init+0xe8>)
 8000b20:	f005 fc0a 	bl	8006338 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8000b2a:	f7ff fd2f 	bl	800058c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim17);
 8000b2e:	4803      	ldr	r0, [pc, #12]	; (8000b3c <MX_TIM17_Init+0xe8>)
 8000b30:	f000 f89e 	bl	8000c70 <HAL_TIM_MspPostInit>

}
 8000b34:	bf00      	nop
 8000b36:	3750      	adds	r7, #80	; 0x50
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20002550 	.word	0x20002550
 8000b40:	40014800 	.word	0x40014800

08000b44 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b54:	d135      	bne.n	8000bc2 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b56:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <HAL_TIM_PWM_MspInit+0x88>)
 8000b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5a:	4a1c      	ldr	r2, [pc, #112]	; (8000bcc <HAL_TIM_PWM_MspInit+0x88>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6593      	str	r3, [r2, #88]	; 0x58
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <HAL_TIM_PWM_MspInit+0x88>)
 8000b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel4;
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b70:	4a18      	ldr	r2, [pc, #96]	; (8000bd4 <HAL_TIM_PWM_MspInit+0x90>)
 8000b72:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8000b74:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b76:	2238      	movs	r2, #56	; 0x38
 8000b78:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b7c:	2210      	movs	r2, #16
 8000b7e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b88:	2280      	movs	r2, #128	; 0x80
 8000b8a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b92:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b9c:	2220      	movs	r2, #32
 8000b9e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000ba6:	480a      	ldr	r0, [pc, #40]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000ba8:	f000 fa7a 	bl	80010a0 <HAL_DMA_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_TIM_PWM_MspInit+0x72>
    {
      Error_Handler();
 8000bb2:	f7ff fceb 	bl	800058c <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000bba:	625a      	str	r2, [r3, #36]	; 0x24
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	200024f0 	.word	0x200024f0
 8000bd4:	40020044 	.word	0x40020044

08000bd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a1e      	ldr	r2, [pc, #120]	; (8000c60 <HAL_TIM_Base_MspInit+0x88>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d135      	bne.n	8000c56 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000bea:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <HAL_TIM_Base_MspInit+0x8c>)
 8000bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bee:	4a1d      	ldr	r2, [pc, #116]	; (8000c64 <HAL_TIM_Base_MspInit+0x8c>)
 8000bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bf4:	6613      	str	r3, [r2, #96]	; 0x60
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <HAL_TIM_Base_MspInit+0x8c>)
 8000bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM17 DMA Init */
    /* TIM17_CH1 Init */
    hdma_tim17_ch1.Instance = DMA1_Channel3;
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <HAL_TIM_Base_MspInit+0x90>)
 8000c04:	4a19      	ldr	r2, [pc, #100]	; (8000c6c <HAL_TIM_Base_MspInit+0x94>)
 8000c06:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <HAL_TIM_Base_MspInit+0x90>)
 8000c0a:	2254      	movs	r2, #84	; 0x54
 8000c0c:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <HAL_TIM_Base_MspInit+0x90>)
 8000c10:	2210      	movs	r2, #16
 8000c12:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <HAL_TIM_Base_MspInit+0x90>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c1a:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <HAL_TIM_Base_MspInit+0x90>)
 8000c1c:	2280      	movs	r2, #128	; 0x80
 8000c1e:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <HAL_TIM_Base_MspInit+0x90>)
 8000c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c26:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <HAL_TIM_Base_MspInit+0x90>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1.Init.Mode = DMA_CIRCULAR;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <HAL_TIM_Base_MspInit+0x90>)
 8000c30:	2220      	movs	r2, #32
 8000c32:	61da      	str	r2, [r3, #28]
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <HAL_TIM_Base_MspInit+0x90>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 8000c3a:	480b      	ldr	r0, [pc, #44]	; (8000c68 <HAL_TIM_Base_MspInit+0x90>)
 8000c3c:	f000 fa30 	bl	80010a0 <HAL_DMA_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8000c46:	f7ff fca1 	bl	800058c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a06      	ldr	r2, [pc, #24]	; (8000c68 <HAL_TIM_Base_MspInit+0x90>)
 8000c4e:	625a      	str	r2, [r3, #36]	; 0x24
 8000c50:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <HAL_TIM_Base_MspInit+0x90>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40014800 	.word	0x40014800
 8000c64:	40021000 	.word	0x40021000
 8000c68:	200025e8 	.word	0x200025e8
 8000c6c:	40020030 	.word	0x40020030

08000c70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c90:	d11d      	bne.n	8000cce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <HAL_TIM_MspPostInit+0xac>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	4a21      	ldr	r2, [pc, #132]	; (8000d1c <HAL_TIM_MspPostInit+0xac>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <HAL_TIM_MspPostInit+0xac>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000caa:	2301      	movs	r3, #1
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc8:	f000 fd3e 	bl	8001748 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000ccc:	e021      	b.n	8000d12 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM17)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a13      	ldr	r2, [pc, #76]	; (8000d20 <HAL_TIM_MspPostInit+0xb0>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d11c      	bne.n	8000d12 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <HAL_TIM_MspPostInit+0xac>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cdc:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <HAL_TIM_MspPostInit+0xac>)
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <HAL_TIM_MspPostInit+0xac>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8000d00:	2301      	movs	r3, #1
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0e:	f000 fd1b 	bl	8001748 <HAL_GPIO_Init>
}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	40014800 	.word	0x40014800

08000d24 <ws2812Init>:
extern TIM_HandleTypeDef htim17;



bool ws2812Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  memset(led_buf, 0, sizeof(led_buf));
 8000d28:	f240 6232 	movw	r2, #1586	; 0x632
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4806      	ldr	r0, [pc, #24]	; (8000d48 <ws2812Init+0x24>)
 8000d30:	f009 ffc6 	bl	800acc0 <memset>
  memset(led_buf_rainbow, 0, sizeof(led_buf));
 8000d34:	f240 6232 	movw	r2, #1586	; 0x632
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4804      	ldr	r0, [pc, #16]	; (8000d4c <ws2812Init+0x28>)
 8000d3c:	f009 ffc0 	bl	800acc0 <memset>

  return true;
 8000d40:	2301      	movs	r3, #1
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200001a0 	.word	0x200001a0
 8000d4c:	200007d4 	.word	0x200007d4

08000d50 <ws2812Begin>:

void ws2812Begin(uint32_t break_led_cnt, uint32_t ranbow_led_cnt)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  ws2812.break_led_cnt = break_led_cnt;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <ws2812Begin+0x5c>)
 8000d60:	801a      	strh	r2, [r3, #0]
  ws2812.ranbow_led_cnt = ranbow_led_cnt;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <ws2812Begin+0x5c>)
 8000d68:	805a      	strh	r2, [r3, #2]


  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)led_buf, (50 + 24 *  ws2812.break_led_cnt) * 1);
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <ws2812Begin+0x5c>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	0052      	lsls	r2, r2, #1
 8000d72:	4413      	add	r3, r2
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	3332      	adds	r3, #50	; 0x32
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	4a0c      	ldr	r2, [pc, #48]	; (8000db0 <ws2812Begin+0x60>)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <ws2812Begin+0x64>)
 8000d82:	f003 fdc5 	bl	8004910 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t *)led_buf_rainbow, (50 + 24 *  ws2812.ranbow_led_cnt) * 1);
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <ws2812Begin+0x5c>)
 8000d88:	885b      	ldrh	r3, [r3, #2]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	0052      	lsls	r2, r2, #1
 8000d8e:	4413      	add	r3, r2
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	3332      	adds	r3, #50	; 0x32
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <ws2812Begin+0x68>)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4807      	ldr	r0, [pc, #28]	; (8000dbc <ws2812Begin+0x6c>)
 8000d9e:	f003 fdb7 	bl	8004910 <HAL_TIM_PWM_Start_DMA>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20002648 	.word	0x20002648
 8000db0:	200001a0 	.word	0x200001a0
 8000db4:	2000259c 	.word	0x2000259c
 8000db8:	200007d4 	.word	0x200007d4
 8000dbc:	20002550 	.word	0x20002550

08000dc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dc2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000dc6:	490e      	ldr	r1, [pc, #56]	; (8000e00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dc8:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <LoopForever+0xe>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ddc:	4c0b      	ldr	r4, [pc, #44]	; (8000e0c <LoopForever+0x16>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dea:	f7ff fdc5 	bl	8000978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dee:	f009 ff43 	bl	800ac78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000df2:	f7ff fb37 	bl	8000464 <main>

08000df6 <LoopForever>:

LoopForever:
    b LoopForever
 8000df6:	e7fe      	b.n	8000df6 <LoopForever>
  ldr   r0, =_estack
 8000df8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000e04:	0800b000 	.word	0x0800b000
  ldr r2, =_sbss
 8000e08:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000e0c:	20003558 	.word	0x20003558

08000e10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC1_2_IRQHandler>

08000e12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f000 f8dd 	bl	8000fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e22:	2000      	movs	r0, #0
 8000e24:	f7ff fcfc 	bl	8000820 <HAL_InitTick>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d002      	beq.n	8000e34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	71fb      	strb	r3, [r7, #7]
 8000e32:	e001      	b.n	8000e38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e34:	f7ff fcca 	bl	80007cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e38:	79fb      	ldrb	r3, [r7, #7]

}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <HAL_IncTick+0x1c>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <HAL_IncTick+0x20>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4413      	add	r3, r2
 8000e52:	4a03      	ldr	r2, [pc, #12]	; (8000e60 <HAL_IncTick+0x1c>)
 8000e54:	6013      	str	r3, [r2, #0]
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	2000264c 	.word	0x2000264c
 8000e64:	20000008 	.word	0x20000008

08000e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <HAL_GetTick+0x14>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	2000264c 	.word	0x2000264c

08000e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb2:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	60d3      	str	r3, [r2, #12]
}
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	f003 0307 	and.w	r3, r3, #7
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	db0b      	blt.n	8000f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	f003 021f 	and.w	r2, r3, #31
 8000efc:	4907      	ldr	r1, [pc, #28]	; (8000f1c <__NVIC_EnableIRQ+0x38>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	095b      	lsrs	r3, r3, #5
 8000f04:	2001      	movs	r0, #1
 8000f06:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000e100 	.word	0xe000e100

08000f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	db0a      	blt.n	8000f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	490c      	ldr	r1, [pc, #48]	; (8000f6c <__NVIC_SetPriority+0x4c>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	0112      	lsls	r2, r2, #4
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	440b      	add	r3, r1
 8000f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f48:	e00a      	b.n	8000f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4908      	ldr	r1, [pc, #32]	; (8000f70 <__NVIC_SetPriority+0x50>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	3b04      	subs	r3, #4
 8000f58:	0112      	lsls	r2, r2, #4
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	761a      	strb	r2, [r3, #24]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000e100 	.word	0xe000e100
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f1c3 0307 	rsb	r3, r3, #7
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	bf28      	it	cs
 8000f92:	2304      	movcs	r3, #4
 8000f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	d902      	bls.n	8000fa4 <NVIC_EncodePriority+0x30>
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3b03      	subs	r3, #3
 8000fa2:	e000      	b.n	8000fa6 <NVIC_EncodePriority+0x32>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	43d9      	mvns	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	4313      	orrs	r3, r2
         );
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3724      	adds	r7, #36	; 0x24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b07      	cmp	r3, #7
 8000fe8:	d00f      	beq.n	800100a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b06      	cmp	r3, #6
 8000fee:	d00c      	beq.n	800100a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b05      	cmp	r3, #5
 8000ff4:	d009      	beq.n	800100a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	d006      	beq.n	800100a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d003      	beq.n	800100a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001002:	21a7      	movs	r1, #167	; 0xa7
 8001004:	4804      	ldr	r0, [pc, #16]	; (8001018 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001006:	f7ff fac8 	bl	800059a <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ff38 	bl	8000e80 <__NVIC_SetPriorityGrouping>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	0800ad4c 	.word	0x0800ad4c

0800101c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b0f      	cmp	r3, #15
 800102e:	d903      	bls.n	8001038 <HAL_NVIC_SetPriority+0x1c>
 8001030:	21bf      	movs	r1, #191	; 0xbf
 8001032:	480e      	ldr	r0, [pc, #56]	; (800106c <HAL_NVIC_SetPriority+0x50>)
 8001034:	f7ff fab1 	bl	800059a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	2b0f      	cmp	r3, #15
 800103c:	d903      	bls.n	8001046 <HAL_NVIC_SetPriority+0x2a>
 800103e:	21c0      	movs	r1, #192	; 0xc0
 8001040:	480a      	ldr	r0, [pc, #40]	; (800106c <HAL_NVIC_SetPriority+0x50>)
 8001042:	f7ff faaa 	bl	800059a <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8001046:	f7ff ff3f 	bl	8000ec8 <__NVIC_GetPriorityGrouping>
 800104a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	6978      	ldr	r0, [r7, #20]
 8001052:	f7ff ff8f 	bl	8000f74 <NVIC_EncodePriority>
 8001056:	4602      	mov	r2, r0
 8001058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105c:	4611      	mov	r1, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff5e 	bl	8000f20 <__NVIC_SetPriority>
}
 8001064:	bf00      	nop
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	0800ad4c 	.word	0x0800ad4c

08001070 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	da03      	bge.n	800108a <HAL_NVIC_EnableIRQ+0x1a>
 8001082:	21d3      	movs	r1, #211	; 0xd3
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <HAL_NVIC_EnableIRQ+0x2c>)
 8001086:	f7ff fa88 	bl	800059a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff28 	bl	8000ee4 <__NVIC_EnableIRQ>
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	0800ad4c 	.word	0x0800ad4c

080010a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e16b      	b.n	800138a <HAL_DMA_Init+0x2ea>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a97      	ldr	r2, [pc, #604]	; (8001314 <HAL_DMA_Init+0x274>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d03a      	beq.n	8001132 <HAL_DMA_Init+0x92>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a95      	ldr	r2, [pc, #596]	; (8001318 <HAL_DMA_Init+0x278>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d035      	beq.n	8001132 <HAL_DMA_Init+0x92>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a94      	ldr	r2, [pc, #592]	; (800131c <HAL_DMA_Init+0x27c>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d030      	beq.n	8001132 <HAL_DMA_Init+0x92>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a92      	ldr	r2, [pc, #584]	; (8001320 <HAL_DMA_Init+0x280>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d02b      	beq.n	8001132 <HAL_DMA_Init+0x92>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a91      	ldr	r2, [pc, #580]	; (8001324 <HAL_DMA_Init+0x284>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d026      	beq.n	8001132 <HAL_DMA_Init+0x92>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a8f      	ldr	r2, [pc, #572]	; (8001328 <HAL_DMA_Init+0x288>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d021      	beq.n	8001132 <HAL_DMA_Init+0x92>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a8e      	ldr	r2, [pc, #568]	; (800132c <HAL_DMA_Init+0x28c>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d01c      	beq.n	8001132 <HAL_DMA_Init+0x92>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a8c      	ldr	r2, [pc, #560]	; (8001330 <HAL_DMA_Init+0x290>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d017      	beq.n	8001132 <HAL_DMA_Init+0x92>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a8b      	ldr	r2, [pc, #556]	; (8001334 <HAL_DMA_Init+0x294>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d012      	beq.n	8001132 <HAL_DMA_Init+0x92>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a89      	ldr	r2, [pc, #548]	; (8001338 <HAL_DMA_Init+0x298>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d00d      	beq.n	8001132 <HAL_DMA_Init+0x92>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a88      	ldr	r2, [pc, #544]	; (800133c <HAL_DMA_Init+0x29c>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d008      	beq.n	8001132 <HAL_DMA_Init+0x92>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a86      	ldr	r2, [pc, #536]	; (8001340 <HAL_DMA_Init+0x2a0>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d003      	beq.n	8001132 <HAL_DMA_Init+0x92>
 800112a:	21a3      	movs	r1, #163	; 0xa3
 800112c:	4885      	ldr	r0, [pc, #532]	; (8001344 <HAL_DMA_Init+0x2a4>)
 800112e:	f7ff fa34 	bl	800059a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00c      	beq.n	8001154 <HAL_DMA_Init+0xb4>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2b10      	cmp	r3, #16
 8001140:	d008      	beq.n	8001154 <HAL_DMA_Init+0xb4>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800114a:	d003      	beq.n	8001154 <HAL_DMA_Init+0xb4>
 800114c:	21a4      	movs	r1, #164	; 0xa4
 800114e:	487d      	ldr	r0, [pc, #500]	; (8001344 <HAL_DMA_Init+0x2a4>)
 8001150:	f7ff fa23 	bl	800059a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	2b40      	cmp	r3, #64	; 0x40
 800115a:	d007      	beq.n	800116c <HAL_DMA_Init+0xcc>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <HAL_DMA_Init+0xcc>
 8001164:	21a5      	movs	r1, #165	; 0xa5
 8001166:	4877      	ldr	r0, [pc, #476]	; (8001344 <HAL_DMA_Init+0x2a4>)
 8001168:	f7ff fa17 	bl	800059a <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	2b80      	cmp	r3, #128	; 0x80
 8001172:	d007      	beq.n	8001184 <HAL_DMA_Init+0xe4>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_DMA_Init+0xe4>
 800117c:	21a6      	movs	r1, #166	; 0xa6
 800117e:	4871      	ldr	r0, [pc, #452]	; (8001344 <HAL_DMA_Init+0x2a4>)
 8001180:	f7ff fa0b 	bl	800059a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00d      	beq.n	80011a8 <HAL_DMA_Init+0x108>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001194:	d008      	beq.n	80011a8 <HAL_DMA_Init+0x108>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800119e:	d003      	beq.n	80011a8 <HAL_DMA_Init+0x108>
 80011a0:	21a7      	movs	r1, #167	; 0xa7
 80011a2:	4868      	ldr	r0, [pc, #416]	; (8001344 <HAL_DMA_Init+0x2a4>)
 80011a4:	f7ff f9f9 	bl	800059a <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00d      	beq.n	80011cc <HAL_DMA_Init+0x12c>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011b8:	d008      	beq.n	80011cc <HAL_DMA_Init+0x12c>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011c2:	d003      	beq.n	80011cc <HAL_DMA_Init+0x12c>
 80011c4:	21a8      	movs	r1, #168	; 0xa8
 80011c6:	485f      	ldr	r0, [pc, #380]	; (8001344 <HAL_DMA_Init+0x2a4>)
 80011c8:	f7ff f9e7 	bl	800059a <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69db      	ldr	r3, [r3, #28]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d007      	beq.n	80011e4 <HAL_DMA_Init+0x144>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69db      	ldr	r3, [r3, #28]
 80011d8:	2b20      	cmp	r3, #32
 80011da:	d003      	beq.n	80011e4 <HAL_DMA_Init+0x144>
 80011dc:	21a9      	movs	r1, #169	; 0xa9
 80011de:	4859      	ldr	r0, [pc, #356]	; (8001344 <HAL_DMA_Init+0x2a4>)
 80011e0:	f7ff f9db 	bl	800059a <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d012      	beq.n	8001212 <HAL_DMA_Init+0x172>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011f4:	d00d      	beq.n	8001212 <HAL_DMA_Init+0x172>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a1b      	ldr	r3, [r3, #32]
 80011fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011fe:	d008      	beq.n	8001212 <HAL_DMA_Init+0x172>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001208:	d003      	beq.n	8001212 <HAL_DMA_Init+0x172>
 800120a:	21aa      	movs	r1, #170	; 0xaa
 800120c:	484d      	ldr	r0, [pc, #308]	; (8001344 <HAL_DMA_Init+0x2a4>)
 800120e:	f7ff f9c4 	bl	800059a <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b73      	cmp	r3, #115	; 0x73
 8001218:	d903      	bls.n	8001222 <HAL_DMA_Init+0x182>
 800121a:	21ac      	movs	r1, #172	; 0xac
 800121c:	4849      	ldr	r0, [pc, #292]	; (8001344 <HAL_DMA_Init+0x2a4>)
 800121e:	f7ff f9bc 	bl	800059a <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	4b47      	ldr	r3, [pc, #284]	; (8001348 <HAL_DMA_Init+0x2a8>)
 800122a:	429a      	cmp	r2, r3
 800122c:	d80f      	bhi.n	800124e <HAL_DMA_Init+0x1ae>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	4b45      	ldr	r3, [pc, #276]	; (800134c <HAL_DMA_Init+0x2ac>)
 8001236:	4413      	add	r3, r2
 8001238:	4a45      	ldr	r2, [pc, #276]	; (8001350 <HAL_DMA_Init+0x2b0>)
 800123a:	fba2 2303 	umull	r2, r3, r2, r3
 800123e:	091b      	lsrs	r3, r3, #4
 8001240:	009a      	lsls	r2, r3, #2
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a42      	ldr	r2, [pc, #264]	; (8001354 <HAL_DMA_Init+0x2b4>)
 800124a:	641a      	str	r2, [r3, #64]	; 0x40
 800124c:	e00e      	b.n	800126c <HAL_DMA_Init+0x1cc>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	4b40      	ldr	r3, [pc, #256]	; (8001358 <HAL_DMA_Init+0x2b8>)
 8001256:	4413      	add	r3, r2
 8001258:	4a3d      	ldr	r2, [pc, #244]	; (8001350 <HAL_DMA_Init+0x2b0>)
 800125a:	fba2 2303 	umull	r2, r3, r2, r3
 800125e:	091b      	lsrs	r3, r3, #4
 8001260:	009a      	lsls	r2, r3, #2
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a3c      	ldr	r2, [pc, #240]	; (800135c <HAL_DMA_Init+0x2bc>)
 800126a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2202      	movs	r2, #2
 8001270:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001286:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001290:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800129c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a1b      	ldr	r3, [r3, #32]
 80012ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 f9e0 	bl	8001684 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012cc:	d102      	bne.n	80012d4 <HAL_DMA_Init+0x234>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80012e8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d036      	beq.n	8001360 <HAL_DMA_Init+0x2c0>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d832      	bhi.n	8001360 <HAL_DMA_Init+0x2c0>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 fa00 	bl	8001700 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	e02e      	b.n	8001372 <HAL_DMA_Init+0x2d2>
 8001314:	40020008 	.word	0x40020008
 8001318:	4002001c 	.word	0x4002001c
 800131c:	40020030 	.word	0x40020030
 8001320:	40020044 	.word	0x40020044
 8001324:	40020058 	.word	0x40020058
 8001328:	4002006c 	.word	0x4002006c
 800132c:	40020408 	.word	0x40020408
 8001330:	4002041c 	.word	0x4002041c
 8001334:	40020430 	.word	0x40020430
 8001338:	40020444 	.word	0x40020444
 800133c:	40020458 	.word	0x40020458
 8001340:	4002046c 	.word	0x4002046c
 8001344:	0800ad88 	.word	0x0800ad88
 8001348:	40020407 	.word	0x40020407
 800134c:	bffdfff8 	.word	0xbffdfff8
 8001350:	cccccccd 	.word	0xcccccccd
 8001354:	40020000 	.word	0x40020000
 8001358:	bffdfbf8 	.word	0xbffdfbf8
 800135c:	40020400 	.word	0x40020400
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2201      	movs	r2, #1
 800137c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop

08001394 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_DMA_Start_IT+0x20>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013b2:	d304      	bcc.n	80013be <HAL_DMA_Start_IT+0x2a>
 80013b4:	f240 11ab 	movw	r1, #427	; 0x1ab
 80013b8:	483a      	ldr	r0, [pc, #232]	; (80014a4 <HAL_DMA_Start_IT+0x110>)
 80013ba:	f7ff f8ee 	bl	800059a <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <HAL_DMA_Start_IT+0x38>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e066      	b.n	800149a <HAL_DMA_Start_IT+0x106>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d155      	bne.n	800148c <HAL_DMA_Start_IT+0xf8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2202      	movs	r2, #2
 80013e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2200      	movs	r2, #0
 80013ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0201 	bic.w	r2, r2, #1
 80013fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	68b9      	ldr	r1, [r7, #8]
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f000 f8fe 	bl	8001606 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	2b00      	cmp	r3, #0
 8001410:	d008      	beq.n	8001424 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f042 020e 	orr.w	r2, r2, #14
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	e00f      	b.n	8001444 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0204 	bic.w	r2, r2, #4
 8001432:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f042 020a 	orr.w	r2, r2, #10
 8001442:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d007      	beq.n	8001462 <HAL_DMA_Start_IT+0xce>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800145c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001460:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001466:	2b00      	cmp	r3, #0
 8001468:	d007      	beq.n	800147a <HAL_DMA_Start_IT+0xe6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001474:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001478:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f042 0201 	orr.w	r2, r2, #1
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	e005      	b.n	8001498 <HAL_DMA_Start_IT+0x104>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001494:	2302      	movs	r3, #2
 8001496:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001498:	7dfb      	ldrb	r3, [r7, #23]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	0800ad88 	.word	0x0800ad88

080014a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c4:	f003 031f 	and.w	r3, r3, #31
 80014c8:	2204      	movs	r2, #4
 80014ca:	409a      	lsls	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d026      	beq.n	8001522 <HAL_DMA_IRQHandler+0x7a>
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d021      	beq.n	8001522 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0320 	and.w	r3, r3, #32
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d107      	bne.n	80014fc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 0204 	bic.w	r2, r2, #4
 80014fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001500:	f003 021f 	and.w	r2, r3, #31
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	2104      	movs	r1, #4
 800150a:	fa01 f202 	lsl.w	r2, r1, r2
 800150e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	2b00      	cmp	r3, #0
 8001516:	d071      	beq.n	80015fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001520:	e06c      	b.n	80015fc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f003 031f 	and.w	r3, r3, #31
 800152a:	2202      	movs	r2, #2
 800152c:	409a      	lsls	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4013      	ands	r3, r2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d02e      	beq.n	8001594 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d029      	beq.n	8001594 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0320 	and.w	r3, r3, #32
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10b      	bne.n	8001566 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 020a 	bic.w	r2, r2, #10
 800155c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	f003 021f 	and.w	r2, r3, #31
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	2102      	movs	r1, #2
 8001574:	fa01 f202 	lsl.w	r2, r1, r2
 8001578:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001586:	2b00      	cmp	r3, #0
 8001588:	d038      	beq.n	80015fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001592:	e033      	b.n	80015fc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001598:	f003 031f 	and.w	r3, r3, #31
 800159c:	2208      	movs	r2, #8
 800159e:	409a      	lsls	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d02a      	beq.n	80015fe <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d025      	beq.n	80015fe <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 020e 	bic.w	r2, r2, #14
 80015c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f003 021f 	and.w	r2, r3, #31
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	2101      	movs	r1, #1
 80015d0:	fa01 f202 	lsl.w	r2, r1, r2
 80015d4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d004      	beq.n	80015fe <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
}
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001606:	b480      	push	{r7}
 8001608:	b085      	sub	sp, #20
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800161c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001622:	2b00      	cmp	r3, #0
 8001624:	d004      	beq.n	8001630 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800162e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001634:	f003 021f 	and.w	r2, r3, #31
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	2101      	movs	r1, #1
 800163e:	fa01 f202 	lsl.w	r2, r1, r2
 8001642:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b10      	cmp	r3, #16
 8001652:	d108      	bne.n	8001666 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001664:	e007      	b.n	8001676 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	60da      	str	r2, [r3, #12]
}
 8001676:	bf00      	nop
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001684:	b480      	push	{r7}
 8001686:	b087      	sub	sp, #28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b16      	ldr	r3, [pc, #88]	; (80016ec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001694:	429a      	cmp	r2, r3
 8001696:	d802      	bhi.n	800169e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	e001      	b.n	80016a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80016a0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	3b08      	subs	r3, #8
 80016ae:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80016b0:	fba2 2303 	umull	r2, r3, r2, r3
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	009a      	lsls	r2, r3, #2
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	4413      	add	r3, r2
 80016c4:	461a      	mov	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80016ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 031f 	and.w	r3, r3, #31
 80016d6:	2201      	movs	r2, #1
 80016d8:	409a      	lsls	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80016de:	bf00      	nop
 80016e0:	371c      	adds	r7, #28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40020407 	.word	0x40020407
 80016f0:	40020800 	.word	0x40020800
 80016f4:	40020820 	.word	0x40020820
 80016f8:	cccccccd 	.word	0xcccccccd
 80016fc:	40020880 	.word	0x40020880

08001700 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001714:	4413      	add	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	461a      	mov	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a08      	ldr	r2, [pc, #32]	; (8001744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001722:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	3b01      	subs	r3, #1
 8001728:	f003 031f 	and.w	r3, r3, #31
 800172c:	2201      	movs	r2, #1
 800172e:	409a      	lsls	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	1000823f 	.word	0x1000823f
 8001744:	40020940 	.word	0x40020940

08001748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800175c:	d01b      	beq.n	8001796 <HAL_GPIO_Init+0x4e>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a3b      	ldr	r2, [pc, #236]	; (8001850 <HAL_GPIO_Init+0x108>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d017      	beq.n	8001796 <HAL_GPIO_Init+0x4e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a3a      	ldr	r2, [pc, #232]	; (8001854 <HAL_GPIO_Init+0x10c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d013      	beq.n	8001796 <HAL_GPIO_Init+0x4e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a39      	ldr	r2, [pc, #228]	; (8001858 <HAL_GPIO_Init+0x110>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d00f      	beq.n	8001796 <HAL_GPIO_Init+0x4e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a38      	ldr	r2, [pc, #224]	; (800185c <HAL_GPIO_Init+0x114>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d00b      	beq.n	8001796 <HAL_GPIO_Init+0x4e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a37      	ldr	r2, [pc, #220]	; (8001860 <HAL_GPIO_Init+0x118>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d007      	beq.n	8001796 <HAL_GPIO_Init+0x4e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a36      	ldr	r2, [pc, #216]	; (8001864 <HAL_GPIO_Init+0x11c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_Init+0x4e>
 800178e:	21b1      	movs	r1, #177	; 0xb1
 8001790:	4835      	ldr	r0, [pc, #212]	; (8001868 <HAL_GPIO_Init+0x120>)
 8001792:	f7fe ff02 	bl	800059a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	b29b      	uxth	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_GPIO_Init+0x64>
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	0c1b      	lsrs	r3, r3, #16
 80017a6:	041b      	lsls	r3, r3, #16
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x6c>
 80017ac:	21b2      	movs	r1, #178	; 0xb2
 80017ae:	482e      	ldr	r0, [pc, #184]	; (8001868 <HAL_GPIO_Init+0x120>)
 80017b0:	f7fe fef3 	bl	800059a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d035      	beq.n	8001828 <HAL_GPIO_Init+0xe0>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d031      	beq.n	8001828 <HAL_GPIO_Init+0xe0>
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b11      	cmp	r3, #17
 80017ca:	d02d      	beq.n	8001828 <HAL_GPIO_Init+0xe0>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d029      	beq.n	8001828 <HAL_GPIO_Init+0xe0>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b12      	cmp	r3, #18
 80017da:	d025      	beq.n	8001828 <HAL_GPIO_Init+0xe0>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	4a22      	ldr	r2, [pc, #136]	; (800186c <HAL_GPIO_Init+0x124>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d020      	beq.n	8001828 <HAL_GPIO_Init+0xe0>
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	4a21      	ldr	r2, [pc, #132]	; (8001870 <HAL_GPIO_Init+0x128>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d01b      	beq.n	8001828 <HAL_GPIO_Init+0xe0>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	4a1f      	ldr	r2, [pc, #124]	; (8001874 <HAL_GPIO_Init+0x12c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d016      	beq.n	8001828 <HAL_GPIO_Init+0xe0>
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4a1e      	ldr	r2, [pc, #120]	; (8001878 <HAL_GPIO_Init+0x130>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d011      	beq.n	8001828 <HAL_GPIO_Init+0xe0>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	4a1c      	ldr	r2, [pc, #112]	; (800187c <HAL_GPIO_Init+0x134>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d00c      	beq.n	8001828 <HAL_GPIO_Init+0xe0>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4a1b      	ldr	r2, [pc, #108]	; (8001880 <HAL_GPIO_Init+0x138>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d007      	beq.n	8001828 <HAL_GPIO_Init+0xe0>
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b03      	cmp	r3, #3
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0xe0>
 8001820:	21b3      	movs	r1, #179	; 0xb3
 8001822:	4811      	ldr	r0, [pc, #68]	; (8001868 <HAL_GPIO_Init+0x120>)
 8001824:	f7fe feb9 	bl	800059a <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 81d2 	beq.w	8001bd6 <HAL_GPIO_Init+0x48e>
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b01      	cmp	r3, #1
 8001838:	f000 81cd 	beq.w	8001bd6 <HAL_GPIO_Init+0x48e>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b02      	cmp	r3, #2
 8001842:	f000 81c8 	beq.w	8001bd6 <HAL_GPIO_Init+0x48e>
 8001846:	21b4      	movs	r1, #180	; 0xb4
 8001848:	4807      	ldr	r0, [pc, #28]	; (8001868 <HAL_GPIO_Init+0x120>)
 800184a:	f7fe fea6 	bl	800059a <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800184e:	e1c2      	b.n	8001bd6 <HAL_GPIO_Init+0x48e>
 8001850:	48000400 	.word	0x48000400
 8001854:	48000800 	.word	0x48000800
 8001858:	48000c00 	.word	0x48000c00
 800185c:	48001000 	.word	0x48001000
 8001860:	48001400 	.word	0x48001400
 8001864:	48001800 	.word	0x48001800
 8001868:	0800adc0 	.word	0x0800adc0
 800186c:	10110000 	.word	0x10110000
 8001870:	10210000 	.word	0x10210000
 8001874:	10310000 	.word	0x10310000
 8001878:	10120000 	.word	0x10120000
 800187c:	10220000 	.word	0x10220000
 8001880:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2101      	movs	r1, #1
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	fa01 f303 	lsl.w	r3, r1, r3
 8001890:	4013      	ands	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 819a 	beq.w	8001bd0 <HAL_GPIO_Init+0x488>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d00b      	beq.n	80018bc <HAL_GPIO_Init+0x174>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d007      	beq.n	80018bc <HAL_GPIO_Init+0x174>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018b0:	2b11      	cmp	r3, #17
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x174>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b12      	cmp	r3, #18
 80018ba:	d144      	bne.n	8001946 <HAL_GPIO_Init+0x1fe>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00f      	beq.n	80018e4 <HAL_GPIO_Init+0x19c>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d00b      	beq.n	80018e4 <HAL_GPIO_Init+0x19c>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d007      	beq.n	80018e4 <HAL_GPIO_Init+0x19c>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d003      	beq.n	80018e4 <HAL_GPIO_Init+0x19c>
 80018dc:	21c4      	movs	r1, #196	; 0xc4
 80018de:	4881      	ldr	r0, [pc, #516]	; (8001ae4 <HAL_GPIO_Init+0x39c>)
 80018e0:	f7fe fe5b 	bl	800059a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4313      	orrs	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800191a:	2201      	movs	r2, #1
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	091b      	lsrs	r3, r3, #4
 8001930:	f003 0201 	and.w	r2, r3, #1
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	2203      	movs	r2, #3
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b02      	cmp	r3, #2
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0x23e>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b12      	cmp	r3, #18
 8001984:	d14b      	bne.n	8001a1e <HAL_GPIO_Init+0x2d6>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800198c:	d01b      	beq.n	80019c6 <HAL_GPIO_Init+0x27e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a55      	ldr	r2, [pc, #340]	; (8001ae8 <HAL_GPIO_Init+0x3a0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d017      	beq.n	80019c6 <HAL_GPIO_Init+0x27e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a54      	ldr	r2, [pc, #336]	; (8001aec <HAL_GPIO_Init+0x3a4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d013      	beq.n	80019c6 <HAL_GPIO_Init+0x27e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a53      	ldr	r2, [pc, #332]	; (8001af0 <HAL_GPIO_Init+0x3a8>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d00f      	beq.n	80019c6 <HAL_GPIO_Init+0x27e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a52      	ldr	r2, [pc, #328]	; (8001af4 <HAL_GPIO_Init+0x3ac>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d00b      	beq.n	80019c6 <HAL_GPIO_Init+0x27e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a51      	ldr	r2, [pc, #324]	; (8001af8 <HAL_GPIO_Init+0x3b0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d007      	beq.n	80019c6 <HAL_GPIO_Init+0x27e>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a50      	ldr	r2, [pc, #320]	; (8001afc <HAL_GPIO_Init+0x3b4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x27e>
 80019be:	21dc      	movs	r1, #220	; 0xdc
 80019c0:	4848      	ldr	r0, [pc, #288]	; (8001ae4 <HAL_GPIO_Init+0x39c>)
 80019c2:	f7fe fdea 	bl	800059a <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	2b0f      	cmp	r3, #15
 80019cc:	d903      	bls.n	80019d6 <HAL_GPIO_Init+0x28e>
 80019ce:	21dd      	movs	r1, #221	; 0xdd
 80019d0:	4844      	ldr	r0, [pc, #272]	; (8001ae4 <HAL_GPIO_Init+0x39c>)
 80019d2:	f7fe fde2 	bl	800059a <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	08da      	lsrs	r2, r3, #3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3208      	adds	r2, #8
 80019de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	220f      	movs	r2, #15
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	691a      	ldr	r2, [r3, #16]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	08da      	lsrs	r2, r3, #3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3208      	adds	r2, #8
 8001a18:	6939      	ldr	r1, [r7, #16]
 8001a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	2203      	movs	r2, #3
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 0203 	and.w	r2, r3, #3
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 80b8 	beq.w	8001bd0 <HAL_GPIO_Init+0x488>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a60:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <HAL_GPIO_Init+0x3b8>)
 8001a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a64:	4a26      	ldr	r2, [pc, #152]	; (8001b00 <HAL_GPIO_Init+0x3b8>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6613      	str	r3, [r2, #96]	; 0x60
 8001a6c:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <HAL_GPIO_Init+0x3b8>)
 8001a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a78:	4a22      	ldr	r2, [pc, #136]	; (8001b04 <HAL_GPIO_Init+0x3bc>)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	089b      	lsrs	r3, r3, #2
 8001a7e:	3302      	adds	r3, #2
 8001a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	220f      	movs	r2, #15
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001aa2:	d031      	beq.n	8001b08 <HAL_GPIO_Init+0x3c0>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a10      	ldr	r2, [pc, #64]	; (8001ae8 <HAL_GPIO_Init+0x3a0>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d019      	beq.n	8001ae0 <HAL_GPIO_Init+0x398>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a0f      	ldr	r2, [pc, #60]	; (8001aec <HAL_GPIO_Init+0x3a4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d013      	beq.n	8001adc <HAL_GPIO_Init+0x394>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <HAL_GPIO_Init+0x3a8>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d00d      	beq.n	8001ad8 <HAL_GPIO_Init+0x390>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a0d      	ldr	r2, [pc, #52]	; (8001af4 <HAL_GPIO_Init+0x3ac>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d007      	beq.n	8001ad4 <HAL_GPIO_Init+0x38c>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a0c      	ldr	r2, [pc, #48]	; (8001af8 <HAL_GPIO_Init+0x3b0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d101      	bne.n	8001ad0 <HAL_GPIO_Init+0x388>
 8001acc:	2305      	movs	r3, #5
 8001ace:	e01c      	b.n	8001b0a <HAL_GPIO_Init+0x3c2>
 8001ad0:	2306      	movs	r3, #6
 8001ad2:	e01a      	b.n	8001b0a <HAL_GPIO_Init+0x3c2>
 8001ad4:	2304      	movs	r3, #4
 8001ad6:	e018      	b.n	8001b0a <HAL_GPIO_Init+0x3c2>
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e016      	b.n	8001b0a <HAL_GPIO_Init+0x3c2>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e014      	b.n	8001b0a <HAL_GPIO_Init+0x3c2>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e012      	b.n	8001b0a <HAL_GPIO_Init+0x3c2>
 8001ae4:	0800adc0 	.word	0x0800adc0
 8001ae8:	48000400 	.word	0x48000400
 8001aec:	48000800 	.word	0x48000800
 8001af0:	48000c00 	.word	0x48000c00
 8001af4:	48001000 	.word	0x48001000
 8001af8:	48001400 	.word	0x48001400
 8001afc:	48001800 	.word	0x48001800
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40010000 	.word	0x40010000
 8001b08:	2300      	movs	r3, #0
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	f002 0203 	and.w	r2, r2, #3
 8001b10:	0092      	lsls	r2, r2, #2
 8001b12:	4093      	lsls	r3, r2
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b1a:	4935      	ldr	r1, [pc, #212]	; (8001bf0 <HAL_GPIO_Init+0x4a8>)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	089b      	lsrs	r3, r3, #2
 8001b20:	3302      	adds	r3, #2
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b28:	4b32      	ldr	r3, [pc, #200]	; (8001bf4 <HAL_GPIO_Init+0x4ac>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x404>
        {
          temp |= iocurrent;
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b4c:	4a29      	ldr	r2, [pc, #164]	; (8001bf4 <HAL_GPIO_Init+0x4ac>)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001b52:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <HAL_GPIO_Init+0x4ac>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x42e>
        {
          temp |= iocurrent;
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b76:	4a1f      	ldr	r2, [pc, #124]	; (8001bf4 <HAL_GPIO_Init+0x4ac>)
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_GPIO_Init+0x4ac>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x458>
        {
          temp |= iocurrent;
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ba0:	4a14      	ldr	r2, [pc, #80]	; (8001bf4 <HAL_GPIO_Init+0x4ac>)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ba6:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <HAL_GPIO_Init+0x4ac>)
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x482>
        {
          temp |= iocurrent;
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bca:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <HAL_GPIO_Init+0x4ac>)
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f47f ae4f 	bne.w	8001884 <HAL_GPIO_Init+0x13c>
  }
}
 8001be6:	bf00      	nop
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40010000 	.word	0x40010000
 8001bf4:	40010400 	.word	0x40010400

08001bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]
 8001c04:	4613      	mov	r3, r2
 8001c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001c08:	887b      	ldrh	r3, [r7, #2]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d004      	beq.n	8001c18 <HAL_GPIO_WritePin+0x20>
 8001c0e:	887b      	ldrh	r3, [r7, #2]
 8001c10:	0c1b      	lsrs	r3, r3, #16
 8001c12:	041b      	lsls	r3, r3, #16
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d004      	beq.n	8001c22 <HAL_GPIO_WritePin+0x2a>
 8001c18:	f240 119d 	movw	r1, #413	; 0x19d
 8001c1c:	480d      	ldr	r0, [pc, #52]	; (8001c54 <HAL_GPIO_WritePin+0x5c>)
 8001c1e:	f7fe fcbc 	bl	800059a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001c22:	787b      	ldrb	r3, [r7, #1]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d007      	beq.n	8001c38 <HAL_GPIO_WritePin+0x40>
 8001c28:	787b      	ldrb	r3, [r7, #1]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d004      	beq.n	8001c38 <HAL_GPIO_WritePin+0x40>
 8001c2e:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8001c32:	4808      	ldr	r0, [pc, #32]	; (8001c54 <HAL_GPIO_WritePin+0x5c>)
 8001c34:	f7fe fcb1 	bl	800059a <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8001c38:	787b      	ldrb	r3, [r7, #1]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c3e:	887a      	ldrh	r2, [r7, #2]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c44:	e002      	b.n	8001c4c <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c46:	887a      	ldrh	r2, [r7, #2]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	0800adc0 	.word	0x0800adc0

08001c58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c5a:	b08b      	sub	sp, #44	; 0x2c
 8001c5c:	af06      	add	r7, sp, #24
 8001c5e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0b6      	b.n	8001dd8 <HAL_PCD_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a5c      	ldr	r2, [pc, #368]	; (8001de0 <HAL_PCD_Init+0x188>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d003      	beq.n	8001c7c <HAL_PCD_Init+0x24>
 8001c74:	2183      	movs	r1, #131	; 0x83
 8001c76:	485b      	ldr	r0, [pc, #364]	; (8001de4 <HAL_PCD_Init+0x18c>)
 8001c78:	f7fe fc8f 	bl	800059a <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d106      	bne.n	8001c96 <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f008 fce9 	bl	800a668 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2203      	movs	r2, #3
 8001c9a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f004 fd23 	bl	80066ee <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	73fb      	strb	r3, [r7, #15]
 8001cac:	e035      	b.n	8001d1a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	015b      	lsls	r3, r3, #5
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3329      	adds	r3, #41	; 0x29
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	015b      	lsls	r3, r3, #5
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3328      	adds	r3, #40	; 0x28
 8001cc6:	7bfa      	ldrb	r2, [r7, #15]
 8001cc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	7bfa      	ldrb	r2, [r7, #15]
 8001cce:	b291      	uxth	r1, r2
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	015b      	lsls	r3, r3, #5
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3336      	adds	r3, #54	; 0x36
 8001cd8:	460a      	mov	r2, r1
 8001cda:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	015b      	lsls	r3, r3, #5
 8001ce2:	4413      	add	r3, r2
 8001ce4:	332b      	adds	r3, #43	; 0x2b
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	015b      	lsls	r3, r3, #5
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3338      	adds	r3, #56	; 0x38
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	015b      	lsls	r3, r3, #5
 8001cfe:	4413      	add	r3, r2
 8001d00:	333c      	adds	r3, #60	; 0x3c
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	015b      	lsls	r3, r3, #5
 8001d0e:	4413      	add	r3, r2
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	3301      	adds	r3, #1
 8001d18:	73fb      	strb	r3, [r7, #15]
 8001d1a:	7bfa      	ldrb	r2, [r7, #15]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d3c4      	bcc.n	8001cae <HAL_PCD_Init+0x56>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d24:	2300      	movs	r3, #0
 8001d26:	73fb      	strb	r3, [r7, #15]
 8001d28:	e031      	b.n	8001d8e <HAL_PCD_Init+0x136>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	015b      	lsls	r3, r3, #5
 8001d30:	4413      	add	r3, r2
 8001d32:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	015b      	lsls	r3, r3, #5
 8001d40:	4413      	add	r3, r2
 8001d42:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d46:	7bfa      	ldrb	r2, [r7, #15]
 8001d48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	015b      	lsls	r3, r3, #5
 8001d50:	4413      	add	r3, r2
 8001d52:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	015b      	lsls	r3, r3, #5
 8001d60:	4413      	add	r3, r2
 8001d62:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	015b      	lsls	r3, r3, #5
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	330a      	adds	r3, #10
 8001d80:	015b      	lsls	r3, r3, #5
 8001d82:	4413      	add	r3, r2
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	73fb      	strb	r3, [r7, #15]
 8001d8e:	7bfa      	ldrb	r2, [r7, #15]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d3c8      	bcc.n	8001d2a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	687e      	ldr	r6, [r7, #4]
 8001da0:	466d      	mov	r5, sp
 8001da2:	f106 0410 	add.w	r4, r6, #16
 8001da6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001daa:	6823      	ldr	r3, [r4, #0]
 8001dac:	602b      	str	r3, [r5, #0]
 8001dae:	1d33      	adds	r3, r6, #4
 8001db0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001db2:	6838      	ldr	r0, [r7, #0]
 8001db4:	f004 fcb6 	bl	8006724 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d102      	bne.n	8001dd6 <HAL_PCD_Init+0x17e>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 fe3a 	bl	8002a4a <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001de0:	40005c00 	.word	0x40005c00
 8001de4:	0800adfc 	.word	0x0800adfc

08001de8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_PCD_Start+0x16>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e012      	b.n	8001e24 <HAL_PCD_Start+0x3c>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f005 fcd6 	bl	80077bc <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f004 fc51 	bl	80066bc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f005 fcd6 	bl	80077ea <USB_ReadInterrupts>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e48:	d102      	bne.n	8001e50 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 fb34 	bl	80024b8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f005 fcc8 	bl	80077ea <USB_ReadInterrupts>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e64:	d112      	bne.n	8001e8c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e78:	b292      	uxth	r2, r2
 8001e7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f008 fc89 	bl	800a796 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e84:	2100      	movs	r1, #0
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f91e 	bl	80020c8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f005 fcaa 	bl	80077ea <USB_ReadInterrupts>
 8001e96:	4603      	mov	r3, r0
 8001e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ea0:	d10b      	bne.n	8001eba <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001eb4:	b292      	uxth	r2, r2
 8001eb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f005 fc93 	bl	80077ea <USB_ReadInterrupts>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ece:	d10b      	bne.n	8001ee8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ee2:	b292      	uxth	r2, r2
 8001ee4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f005 fc7c 	bl	80077ea <USB_ReadInterrupts>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001efc:	d133      	bne.n	8001f66 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0204 	bic.w	r2, r2, #4
 8001f10:	b292      	uxth	r2, r2
 8001f12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0208 	bic.w	r2, r2, #8
 8001f28:	b292      	uxth	r2, r2
 8001f2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d107      	bne.n	8001f48 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f40:	2100      	movs	r1, #0
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f008 fe18 	bl	800ab78 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f008 fc5d 	bl	800a808 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f60:	b292      	uxth	r2, r2
 8001f62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f005 fc3d 	bl	80077ea <USB_ReadInterrupts>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f7a:	d126      	bne.n	8001fca <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0208 	orr.w	r2, r2, #8
 8001f8e:	b292      	uxth	r2, r2
 8001f90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fa6:	b292      	uxth	r2, r2
 8001fa8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0204 	orr.w	r2, r2, #4
 8001fbe:	b292      	uxth	r2, r2
 8001fc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f008 fc05 	bl	800a7d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f005 fc0b 	bl	80077ea <USB_ReadInterrupts>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fda:	2b80      	cmp	r3, #128	; 0x80
 8001fdc:	d13f      	bne.n	800205e <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ff0:	b292      	uxth	r2, r2
 8001ff2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d12b      	bne.n	8002058 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002008:	b29a      	uxth	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0204 	orr.w	r2, r2, #4
 8002012:	b292      	uxth	r2, r2
 8002014:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002020:	b29a      	uxth	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0208 	orr.w	r2, r2, #8
 800202a:	b292      	uxth	r2, r2
 800202c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002040:	b29b      	uxth	r3, r3
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800204e:	2101      	movs	r1, #1
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f008 fd91 	bl	800ab78 <HAL_PCDEx_LPM_Callback>
 8002056:	e002      	b.n	800205e <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f008 fbbb 	bl	800a7d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f005 fbc1 	bl	80077ea <USB_ReadInterrupts>
 8002068:	4603      	mov	r3, r0
 800206a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800206e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002072:	d10e      	bne.n	8002092 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800207c:	b29a      	uxth	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002086:	b292      	uxth	r2, r2
 8002088:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f008 fb74 	bl	800a77a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f005 fba7 	bl	80077ea <USB_ReadInterrupts>
 800209c:	4603      	mov	r3, r0
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020a6:	d10b      	bne.n	80020c0 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020ba:	b292      	uxth	r2, r2
 80020bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_PCD_SetAddress+0x1a>
 80020de:	2302      	movs	r3, #2
 80020e0:	e013      	b.n	800210a <HAL_PCD_SetAddress+0x42>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	78fa      	ldrb	r2, [r7, #3]
 80020ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	78fa      	ldrb	r2, [r7, #3]
 80020f8:	4611      	mov	r1, r2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f005 fb4a 	bl	8007794 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b084      	sub	sp, #16
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	4608      	mov	r0, r1
 800211c:	4611      	mov	r1, r2
 800211e:	461a      	mov	r2, r3
 8002120:	4603      	mov	r3, r0
 8002122:	70fb      	strb	r3, [r7, #3]
 8002124:	460b      	mov	r3, r1
 8002126:	803b      	strh	r3, [r7, #0]
 8002128:	4613      	mov	r3, r2
 800212a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002134:	2b00      	cmp	r3, #0
 8002136:	da0b      	bge.n	8002150 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	015b      	lsls	r3, r3, #5
 8002140:	3328      	adds	r3, #40	; 0x28
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2201      	movs	r2, #1
 800214c:	705a      	strb	r2, [r3, #1]
 800214e:	e00b      	b.n	8002168 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	015b      	lsls	r3, r3, #5
 8002158:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4413      	add	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	b2da      	uxtb	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002174:	883a      	ldrh	r2, [r7, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	78ba      	ldrb	r2, [r7, #2]
 800217e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	785b      	ldrb	r3, [r3, #1]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d004      	beq.n	8002192 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002192:	78bb      	ldrb	r3, [r7, #2]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d102      	bne.n	800219e <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_PCD_EP_Open+0x9a>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e00e      	b.n	80021ca <HAL_PCD_EP_Open+0xb8>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68f9      	ldr	r1, [r7, #12]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f004 fad6 	bl	800676c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80021c8:	7afb      	ldrb	r3, [r7, #11]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	460b      	mov	r3, r1
 80021dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	da0b      	bge.n	80021fe <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	015b      	lsls	r3, r3, #5
 80021ee:	3328      	adds	r3, #40	; 0x28
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	4413      	add	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2201      	movs	r2, #1
 80021fa:	705a      	strb	r2, [r3, #1]
 80021fc:	e00b      	b.n	8002216 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021fe:	78fb      	ldrb	r3, [r7, #3]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	015b      	lsls	r3, r3, #5
 8002206:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	b2da      	uxtb	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_PCD_EP_Close+0x5e>
 800222c:	2302      	movs	r3, #2
 800222e:	e00e      	b.n	800224e <HAL_PCD_EP_Close+0x7c>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68f9      	ldr	r1, [r7, #12]
 800223e:	4618      	mov	r0, r3
 8002240:	f004 fd84 	bl	8006d4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b086      	sub	sp, #24
 800225a:	af00      	add	r7, sp, #0
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	607a      	str	r2, [r7, #4]
 8002260:	603b      	str	r3, [r7, #0]
 8002262:	460b      	mov	r3, r1
 8002264:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002266:	7afb      	ldrb	r3, [r7, #11]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	015b      	lsls	r3, r3, #5
 800226e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	4413      	add	r3, r2
 8002276:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	2200      	movs	r2, #0
 8002288:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2200      	movs	r2, #0
 800228e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002290:	7afb      	ldrb	r3, [r7, #11]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	b2da      	uxtb	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800229c:	7afb      	ldrb	r3, [r7, #11]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d106      	bne.n	80022b4 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6979      	ldr	r1, [r7, #20]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f004 fee3 	bl	8007078 <USB_EPStartXfer>
 80022b2:	e005      	b.n	80022c0 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6979      	ldr	r1, [r7, #20]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f004 fedc 	bl	8007078 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	460b      	mov	r3, r1
 80022d4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	330a      	adds	r3, #10
 80022e0:	015b      	lsls	r3, r3, #5
 80022e2:	4413      	add	r3, r2
 80022e4:	3304      	adds	r3, #4
 80022e6:	681b      	ldr	r3, [r3, #0]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	603b      	str	r3, [r7, #0]
 8002300:	460b      	mov	r3, r1
 8002302:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002304:	7afb      	ldrb	r3, [r7, #11]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	015b      	lsls	r3, r3, #5
 800230c:	3328      	adds	r3, #40	; 0x28
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4413      	add	r3, r2
 8002312:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2200      	movs	r2, #0
 8002324:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2201      	movs	r2, #1
 800232a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800232c:	7afb      	ldrb	r3, [r7, #11]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	b2da      	uxtb	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002338:	7afb      	ldrb	r3, [r7, #11]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6979      	ldr	r1, [r7, #20]
 8002348:	4618      	mov	r0, r3
 800234a:	f004 fe95 	bl	8007078 <USB_EPStartXfer>
 800234e:	e005      	b.n	800235c <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6979      	ldr	r1, [r7, #20]
 8002356:	4618      	mov	r0, r3
 8002358:	f004 fe8e 	bl	8007078 <USB_EPStartXfer>
  }

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	460b      	mov	r3, r1
 8002370:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002372:	78fb      	ldrb	r3, [r7, #3]
 8002374:	f003 0207 	and.w	r2, r3, #7
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	429a      	cmp	r2, r3
 800237e:	d901      	bls.n	8002384 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e046      	b.n	8002412 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002384:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002388:	2b00      	cmp	r3, #0
 800238a:	da0b      	bge.n	80023a4 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	015b      	lsls	r3, r3, #5
 8002394:	3328      	adds	r3, #40	; 0x28
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2201      	movs	r2, #1
 80023a0:	705a      	strb	r2, [r3, #1]
 80023a2:	e009      	b.n	80023b8 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	015b      	lsls	r3, r3, #5
 80023a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	4413      	add	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2201      	movs	r2, #1
 80023bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_PCD_EP_SetStall+0x72>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e01c      	b.n	8002412 <HAL_PCD_EP_SetStall+0xac>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68f9      	ldr	r1, [r7, #12]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f005 f8fe 	bl	80075e8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d108      	bne.n	8002408 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002400:	4619      	mov	r1, r3
 8002402:	4610      	mov	r0, r2
 8002404:	f005 fa01 	bl	800780a <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b084      	sub	sp, #16
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	f003 020f 	and.w	r2, r3, #15
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	429a      	cmp	r2, r3
 8002432:	d901      	bls.n	8002438 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e03a      	b.n	80024ae <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002438:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800243c:	2b00      	cmp	r3, #0
 800243e:	da0b      	bge.n	8002458 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	015b      	lsls	r3, r3, #5
 8002448:	3328      	adds	r3, #40	; 0x28
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2201      	movs	r2, #1
 8002454:	705a      	strb	r2, [r3, #1]
 8002456:	e00b      	b.n	8002470 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	015b      	lsls	r3, r3, #5
 8002460:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	4413      	add	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	b2da      	uxtb	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_PCD_EP_ClrStall+0x76>
 800248c:	2302      	movs	r3, #2
 800248e:	e00e      	b.n	80024ae <HAL_PCD_EP_ClrStall+0x94>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68f9      	ldr	r1, [r7, #12]
 800249e:	4618      	mov	r0, r3
 80024a0:	f005 f8e4 	bl	800766c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80024b8:	b590      	push	{r4, r7, lr}
 80024ba:	b089      	sub	sp, #36	; 0x24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024c0:	e274      	b.n	80029ac <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024ca:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80024cc:	8afb      	ldrh	r3, [r7, #22]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80024d6:	7d7b      	ldrb	r3, [r7, #21]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f040 813c 	bne.w	8002756 <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80024de:	8afb      	ldrh	r3, [r7, #22]
 80024e0:	f003 0310 	and.w	r3, r3, #16
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d14f      	bne.n	8002588 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80024f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f8:	b29c      	uxth	r4, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002506:	b29b      	uxth	r3, r3
 8002508:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3328      	adds	r3, #40	; 0x28
 800250e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002518:	b29b      	uxth	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4413      	add	r3, r2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	4413      	add	r3, r2
 800252a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	695a      	ldr	r2, [r3, #20]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	441a      	add	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002546:	2100      	movs	r1, #0
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f008 f8ff 	bl	800a74c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 8228 	beq.w	80029ac <PCD_EP_ISR_Handler+0x4f4>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	2b00      	cmp	r3, #0
 8002562:	f040 8223 	bne.w	80029ac <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800256c:	b2db      	uxtb	r3, r3
 800256e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002572:	b2da      	uxtb	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	b292      	uxth	r2, r2
 800257a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002586:	e211      	b.n	80029ac <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800258e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002598:	8a7b      	ldrh	r3, [r7, #18]
 800259a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d031      	beq.n	8002606 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4413      	add	r3, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	4413      	add	r3, r2
 80025bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025dc:	b29b      	uxth	r3, r3
 80025de:	f005 f961 	bl	80078a4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025ee:	4013      	ands	r3, r2
 80025f0:	b29c      	uxth	r4, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80025fa:	b292      	uxth	r2, r2
 80025fc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f008 f87a 	bl	800a6f8 <HAL_PCD_SetupStageCallback>
 8002604:	e1d2      	b.n	80029ac <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002606:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800260a:	2b00      	cmp	r3, #0
 800260c:	f280 81ce 	bge.w	80029ac <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	b29a      	uxth	r2, r3
 8002618:	f640 738f 	movw	r3, #3983	; 0xf8f
 800261c:	4013      	ands	r3, r2
 800261e:	b29c      	uxth	r4, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002628:	b292      	uxth	r2, r2
 800262a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002634:	b29b      	uxth	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4413      	add	r3, r2
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	4413      	add	r3, r2
 8002646:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d019      	beq.n	8002690 <PCD_EP_ISR_Handler+0x1d8>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d015      	beq.n	8002690 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6959      	ldr	r1, [r3, #20]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002674:	b29b      	uxth	r3, r3
 8002676:	f005 f915 	bl	80078a4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	441a      	add	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002688:	2100      	movs	r1, #0
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f008 f846 	bl	800a71c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	461c      	mov	r4, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800269e:	b29b      	uxth	r3, r3
 80026a0:	441c      	add	r4, r3
 80026a2:	f204 4306 	addw	r3, r4, #1030	; 0x406
 80026a6:	461c      	mov	r4, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10e      	bne.n	80026ce <PCD_EP_ISR_Handler+0x216>
 80026b0:	8823      	ldrh	r3, [r4, #0]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	8023      	strh	r3, [r4, #0]
 80026bc:	8823      	ldrh	r3, [r4, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	8023      	strh	r3, [r4, #0]
 80026cc:	e02d      	b.n	800272a <PCD_EP_ISR_Handler+0x272>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	2b3e      	cmp	r3, #62	; 0x3e
 80026d4:	d812      	bhi.n	80026fc <PCD_EP_ISR_Handler+0x244>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	085b      	lsrs	r3, r3, #1
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <PCD_EP_ISR_Handler+0x238>
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	3301      	adds	r3, #1
 80026ee:	61bb      	str	r3, [r7, #24]
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	029b      	lsls	r3, r3, #10
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	8023      	strh	r3, [r4, #0]
 80026fa:	e016      	b.n	800272a <PCD_EP_ISR_Handler+0x272>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	095b      	lsrs	r3, r3, #5
 8002702:	61bb      	str	r3, [r7, #24]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	2b00      	cmp	r3, #0
 800270e:	d102      	bne.n	8002716 <PCD_EP_ISR_Handler+0x25e>
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	3b01      	subs	r3, #1
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	b29b      	uxth	r3, r3
 800271a:	029b      	lsls	r3, r3, #10
 800271c:	b29b      	uxth	r3, r3
 800271e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002726:	b29b      	uxth	r3, r3
 8002728:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	b29b      	uxth	r3, r3
 8002732:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273a:	b29c      	uxth	r4, r3
 800273c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002740:	b29c      	uxth	r4, r3
 8002742:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002746:	b29c      	uxth	r4, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4b9e      	ldr	r3, [pc, #632]	; (80029c8 <PCD_EP_ISR_Handler+0x510>)
 800274e:	4323      	orrs	r3, r4
 8002750:	b29b      	uxth	r3, r3
 8002752:	8013      	strh	r3, [r2, #0]
 8002754:	e12a      	b.n	80029ac <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	7d7b      	ldrb	r3, [r7, #21]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002766:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800276a:	2b00      	cmp	r3, #0
 800276c:	f280 80cb 	bge.w	8002906 <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	461a      	mov	r2, r3
 8002776:	7d7b      	ldrb	r3, [r7, #21]
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	b29a      	uxth	r2, r3
 8002780:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002784:	4013      	ands	r3, r2
 8002786:	b29c      	uxth	r4, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	7d7b      	ldrb	r3, [r7, #21]
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002798:	b292      	uxth	r2, r2
 800279a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800279c:	7d7b      	ldrb	r3, [r7, #21]
 800279e:	015b      	lsls	r3, r3, #5
 80027a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	4413      	add	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	7b1b      	ldrb	r3, [r3, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d11f      	bne.n	80027f2 <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	461a      	mov	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	4413      	add	r3, r2
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6812      	ldr	r2, [r2, #0]
 80027ca:	4413      	add	r3, r2
 80027cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027d6:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80027d8:	8bfb      	ldrh	r3, [r7, #30]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d06e      	beq.n	80028bc <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6959      	ldr	r1, [r3, #20]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	88da      	ldrh	r2, [r3, #6]
 80027ea:	8bfb      	ldrh	r3, [r7, #30]
 80027ec:	f005 f85a 	bl	80078a4 <USB_ReadPMA>
 80027f0:	e064      	b.n	80028bc <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	b29b      	uxth	r3, r3
 8002804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800280c:	b29c      	uxth	r4, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	441a      	add	r2, r3
 800281c:	4b6b      	ldr	r3, [pc, #428]	; (80029cc <PCD_EP_ISR_Handler+0x514>)
 800281e:	4323      	orrs	r3, r4
 8002820:	b29b      	uxth	r3, r3
 8002822:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	b29b      	uxth	r3, r3
 8002836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d01f      	beq.n	800287e <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002846:	b29b      	uxth	r3, r3
 8002848:	461a      	mov	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4413      	add	r3, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6812      	ldr	r2, [r2, #0]
 8002856:	4413      	add	r3, r2
 8002858:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002862:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002864:	8bfb      	ldrh	r3, [r7, #30]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d028      	beq.n	80028bc <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6959      	ldr	r1, [r3, #20]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	891a      	ldrh	r2, [r3, #8]
 8002876:	8bfb      	ldrh	r3, [r7, #30]
 8002878:	f005 f814 	bl	80078a4 <USB_ReadPMA>
 800287c:	e01e      	b.n	80028bc <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002886:	b29b      	uxth	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4413      	add	r3, r2
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6812      	ldr	r2, [r2, #0]
 8002896:	4413      	add	r3, r2
 8002898:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028a2:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80028a4:	8bfb      	ldrh	r3, [r7, #30]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d008      	beq.n	80028bc <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6959      	ldr	r1, [r3, #20]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	895a      	ldrh	r2, [r3, #10]
 80028b6:	8bfb      	ldrh	r3, [r7, #30]
 80028b8:	f004 fff4 	bl	80078a4 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	69da      	ldr	r2, [r3, #28]
 80028c0:	8bfb      	ldrh	r3, [r7, #30]
 80028c2:	441a      	add	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	695a      	ldr	r2, [r3, #20]
 80028cc:	8bfb      	ldrh	r3, [r7, #30]
 80028ce:	441a      	add	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d004      	beq.n	80028e6 <PCD_EP_ISR_Handler+0x42e>
 80028dc:	8bfa      	ldrh	r2, [r7, #30]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d206      	bcs.n	80028f4 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	4619      	mov	r1, r3
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f007 ff15 	bl	800a71c <HAL_PCD_DataOutStageCallback>
 80028f2:	e008      	b.n	8002906 <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	7819      	ldrb	r1, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff fca8 	bl	8002256 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002906:	8a7b      	ldrh	r3, [r7, #18]
 8002908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290c:	2b00      	cmp	r3, #0
 800290e:	d04d      	beq.n	80029ac <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002910:	7d7b      	ldrb	r3, [r7, #21]
 8002912:	015b      	lsls	r3, r3, #5
 8002914:	3328      	adds	r3, #40	; 0x28
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	4413      	add	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	461a      	mov	r2, r3
 8002922:	7d7b      	ldrb	r3, [r7, #21]
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	b29b      	uxth	r3, r3
 800292c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002934:	b29c      	uxth	r4, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	461a      	mov	r2, r3
 800293c:	7d7b      	ldrb	r3, [r7, #21]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	441a      	add	r2, r3
 8002942:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800294a:	b29b      	uxth	r3, r3
 800294c:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002956:	b29b      	uxth	r3, r3
 8002958:	461a      	mov	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4413      	add	r3, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6812      	ldr	r2, [r2, #0]
 8002966:	4413      	add	r3, r2
 8002968:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	441a      	add	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d106      	bne.n	800299a <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	4619      	mov	r1, r3
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f007 feda 	bl	800a74c <HAL_PCD_DataInStageCallback>
 8002998:	e008      	b.n	80029ac <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	7819      	ldrb	r1, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7ff fca4 	bl	80022f4 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	b21b      	sxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f6ff ad82 	blt.w	80024c2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3724      	adds	r7, #36	; 0x24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd90      	pop	{r4, r7, pc}
 80029c8:	ffff8080 	.word	0xffff8080
 80029cc:	ffff80c0 	.word	0xffff80c0

080029d0 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b087      	sub	sp, #28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	607b      	str	r3, [r7, #4]
 80029da:	460b      	mov	r3, r1
 80029dc:	817b      	strh	r3, [r7, #10]
 80029de:	4613      	mov	r3, r2
 80029e0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80029e2:	897b      	ldrh	r3, [r7, #10]
 80029e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d008      	beq.n	8002a00 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ee:	897b      	ldrh	r3, [r7, #10]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	015b      	lsls	r3, r3, #5
 80029f6:	3328      	adds	r3, #40	; 0x28
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4413      	add	r3, r2
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	e006      	b.n	8002a0e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a00:	897b      	ldrh	r3, [r7, #10]
 8002a02:	015b      	lsls	r3, r3, #5
 8002a04:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a0e:	893b      	ldrh	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d107      	bne.n	8002a24 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2200      	movs	r2, #0
 8002a18:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	80da      	strh	r2, [r3, #6]
 8002a22:	e00b      	b.n	8002a3c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2201      	movs	r2, #1
 8002a28:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	0c1b      	lsrs	r3, r3, #16
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	371c      	adds	r7, #28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b085      	sub	sp, #20
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	f043 0302 	orr.w	r3, r3, #2
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
	...

08002aa0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00b      	beq.n	8002ac6 <HAL_PWREx_ControlVoltageScaling+0x26>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ab4:	d007      	beq.n	8002ac6 <HAL_PWREx_ControlVoltageScaling+0x26>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002abc:	d003      	beq.n	8002ac6 <HAL_PWREx_ControlVoltageScaling+0x26>
 8002abe:	219e      	movs	r1, #158	; 0x9e
 8002ac0:	484d      	ldr	r0, [pc, #308]	; (8002bf8 <HAL_PWREx_ControlVoltageScaling+0x158>)
 8002ac2:	f7fd fd6a 	bl	800059a <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d141      	bne.n	8002b50 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002acc:	4b4b      	ldr	r3, [pc, #300]	; (8002bfc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad8:	d131      	bne.n	8002b3e <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ada:	4b48      	ldr	r3, [pc, #288]	; (8002bfc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ae0:	4a46      	ldr	r2, [pc, #280]	; (8002bfc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002ae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ae6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aea:	4b44      	ldr	r3, [pc, #272]	; (8002bfc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002af2:	4a42      	ldr	r2, [pc, #264]	; (8002bfc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002af4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002af8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002afa:	4b41      	ldr	r3, [pc, #260]	; (8002c00 <HAL_PWREx_ControlVoltageScaling+0x160>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2232      	movs	r2, #50	; 0x32
 8002b00:	fb02 f303 	mul.w	r3, r2, r3
 8002b04:	4a3f      	ldr	r2, [pc, #252]	; (8002c04 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8002b06:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0a:	0c9b      	lsrs	r3, r3, #18
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b10:	e002      	b.n	8002b18 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	3b01      	subs	r3, #1
 8002b16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b18:	4b38      	ldr	r3, [pc, #224]	; (8002bfc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b24:	d102      	bne.n	8002b2c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f2      	bne.n	8002b12 <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b2c:	4b33      	ldr	r3, [pc, #204]	; (8002bfc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b38:	d158      	bne.n	8002bec <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e057      	b.n	8002bee <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b3e:	4b2f      	ldr	r3, [pc, #188]	; (8002bfc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b44:	4a2d      	ldr	r2, [pc, #180]	; (8002bfc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002b46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b4a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b4e:	e04d      	b.n	8002bec <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b56:	d141      	bne.n	8002bdc <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b58:	4b28      	ldr	r3, [pc, #160]	; (8002bfc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b64:	d131      	bne.n	8002bca <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b66:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b6c:	4a23      	ldr	r2, [pc, #140]	; (8002bfc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b72:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b76:	4b21      	ldr	r3, [pc, #132]	; (8002bfc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b7e:	4a1f      	ldr	r2, [pc, #124]	; (8002bfc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002b80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b84:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b86:	4b1e      	ldr	r3, [pc, #120]	; (8002c00 <HAL_PWREx_ControlVoltageScaling+0x160>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2232      	movs	r2, #50	; 0x32
 8002b8c:	fb02 f303 	mul.w	r3, r2, r3
 8002b90:	4a1c      	ldr	r2, [pc, #112]	; (8002c04 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	0c9b      	lsrs	r3, r3, #18
 8002b98:	3301      	adds	r3, #1
 8002b9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b9c:	e002      	b.n	8002ba4 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ba4:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb0:	d102      	bne.n	8002bb8 <HAL_PWREx_ControlVoltageScaling+0x118>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1f2      	bne.n	8002b9e <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bb8:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc4:	d112      	bne.n	8002bec <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e011      	b.n	8002bee <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bca:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bd0:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002bda:	e007      	b.n	8002bec <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bdc:	4b07      	ldr	r3, [pc, #28]	; (8002bfc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002be4:	4a05      	ldr	r2, [pc, #20]	; (8002bfc <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8002be6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bea:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	0800ae34 	.word	0x0800ae34
 8002bfc:	40007000 	.word	0x40007000
 8002c00:	20000000 	.word	0x20000000
 8002c04:	431bde83 	.word	0x431bde83

08002c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d102      	bne.n	8002c1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	f000 bc03 	b.w	8003422 <HAL_RCC_OscConfig+0x81a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d022      	beq.n	8002c6a <HAL_RCC_OscConfig+0x62>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d11c      	bne.n	8002c6a <HAL_RCC_OscConfig+0x62>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d116      	bne.n	8002c6a <HAL_RCC_OscConfig+0x62>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0320 	and.w	r3, r3, #32
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d110      	bne.n	8002c6a <HAL_RCC_OscConfig+0x62>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10a      	bne.n	8002c6a <HAL_RCC_OscConfig+0x62>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d104      	bne.n	8002c6a <HAL_RCC_OscConfig+0x62>
 8002c60:	f240 114b 	movw	r1, #331	; 0x14b
 8002c64:	48a4      	ldr	r0, [pc, #656]	; (8002ef8 <HAL_RCC_OscConfig+0x2f0>)
 8002c66:	f7fd fc98 	bl	800059a <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 8089 	beq.w	8002d8a <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00e      	beq.n	8002c9e <HAL_RCC_OscConfig+0x96>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c88:	d009      	beq.n	8002c9e <HAL_RCC_OscConfig+0x96>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c92:	d004      	beq.n	8002c9e <HAL_RCC_OscConfig+0x96>
 8002c94:	f240 1151 	movw	r1, #337	; 0x151
 8002c98:	4897      	ldr	r0, [pc, #604]	; (8002ef8 <HAL_RCC_OscConfig+0x2f0>)
 8002c9a:	f7fd fc7e 	bl	800059a <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c9e:	4b97      	ldr	r3, [pc, #604]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ca8:	4b94      	ldr	r3, [pc, #592]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	2b0c      	cmp	r3, #12
 8002cb6:	d102      	bne.n	8002cbe <HAL_RCC_OscConfig+0xb6>
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2b03      	cmp	r3, #3
 8002cbc:	d002      	beq.n	8002cc4 <HAL_RCC_OscConfig+0xbc>
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d10b      	bne.n	8002cdc <HAL_RCC_OscConfig+0xd4>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc4:	4b8d      	ldr	r3, [pc, #564]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d05b      	beq.n	8002d88 <HAL_RCC_OscConfig+0x180>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d157      	bne.n	8002d88 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e3a2      	b.n	8003422 <HAL_RCC_OscConfig+0x81a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce4:	d106      	bne.n	8002cf4 <HAL_RCC_OscConfig+0xec>
 8002ce6:	4b85      	ldr	r3, [pc, #532]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a84      	ldr	r2, [pc, #528]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	e01d      	b.n	8002d30 <HAL_RCC_OscConfig+0x128>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cfc:	d10c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x110>
 8002cfe:	4b7f      	ldr	r3, [pc, #508]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a7e      	ldr	r2, [pc, #504]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	4b7c      	ldr	r3, [pc, #496]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a7b      	ldr	r2, [pc, #492]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	e00b      	b.n	8002d30 <HAL_RCC_OscConfig+0x128>
 8002d18:	4b78      	ldr	r3, [pc, #480]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a77      	ldr	r2, [pc, #476]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	4b75      	ldr	r3, [pc, #468]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a74      	ldr	r2, [pc, #464]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d013      	beq.n	8002d60 <HAL_RCC_OscConfig+0x158>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7fe f896 	bl	8000e68 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d40:	f7fe f892 	bl	8000e68 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	; 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e367      	b.n	8003422 <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d52:	4b6a      	ldr	r3, [pc, #424]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0x138>
 8002d5e:	e014      	b.n	8002d8a <HAL_RCC_OscConfig+0x182>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d60:	f7fe f882 	bl	8000e68 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d68:	f7fe f87e 	bl	8000e68 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	; 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e353      	b.n	8003422 <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d7a:	4b60      	ldr	r3, [pc, #384]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x160>
 8002d86:	e000      	b.n	8002d8a <HAL_RCC_OscConfig+0x182>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 808d 	beq.w	8002eb2 <HAL_RCC_OscConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d009      	beq.n	8002db4 <HAL_RCC_OscConfig+0x1ac>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da8:	d004      	beq.n	8002db4 <HAL_RCC_OscConfig+0x1ac>
 8002daa:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8002dae:	4852      	ldr	r0, [pc, #328]	; (8002ef8 <HAL_RCC_OscConfig+0x2f0>)
 8002db0:	f7fd fbf3 	bl	800059a <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	2b7f      	cmp	r3, #127	; 0x7f
 8002dba:	d904      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x1be>
 8002dbc:	f240 1187 	movw	r1, #391	; 0x187
 8002dc0:	484d      	ldr	r0, [pc, #308]	; (8002ef8 <HAL_RCC_OscConfig+0x2f0>)
 8002dc2:	f7fd fbea 	bl	800059a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dc6:	4b4d      	ldr	r3, [pc, #308]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dd0:	4b4a      	ldr	r3, [pc, #296]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	2b0c      	cmp	r3, #12
 8002dde:	d102      	bne.n	8002de6 <HAL_RCC_OscConfig+0x1de>
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d002      	beq.n	8002dec <HAL_RCC_OscConfig+0x1e4>
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d11f      	bne.n	8002e2c <HAL_RCC_OscConfig+0x224>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dec:	4b43      	ldr	r3, [pc, #268]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_RCC_OscConfig+0x1fc>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_OscConfig+0x1fc>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e30e      	b.n	8003422 <HAL_RCC_OscConfig+0x81a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e04:	4b3d      	ldr	r3, [pc, #244]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	061b      	lsls	r3, r3, #24
 8002e12:	493a      	ldr	r1, [pc, #232]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e18:	4b39      	ldr	r3, [pc, #228]	; (8002f00 <HAL_RCC_OscConfig+0x2f8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd fcff 	bl	8000820 <HAL_InitTick>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d043      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x2a8>
        {
          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e2fa      	b.n	8003422 <HAL_RCC_OscConfig+0x81a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d023      	beq.n	8002e7c <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e34:	4b31      	ldr	r3, [pc, #196]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a30      	ldr	r2, [pc, #192]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7fe f812 	bl	8000e68 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x252>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e48:	f7fe f80e 	bl	8000e68 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x252>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e2e3      	b.n	8003422 <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e5a:	4b28      	ldr	r3, [pc, #160]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0x240>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e66:	4b25      	ldr	r3, [pc, #148]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	061b      	lsls	r3, r3, #24
 8002e74:	4921      	ldr	r1, [pc, #132]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	604b      	str	r3, [r1, #4]
 8002e7a:	e01a      	b.n	8002eb2 <HAL_RCC_OscConfig+0x2aa>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e7c:	4b1f      	ldr	r3, [pc, #124]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a1e      	ldr	r2, [pc, #120]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002e82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fd ffee 	bl	8000e68 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x29a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e90:	f7fd ffea 	bl	8000e68 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e2bf      	b.n	8003422 <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ea2:	4b16      	ldr	r3, [pc, #88]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x288>
 8002eae:	e000      	b.n	8002eb2 <HAL_RCC_OscConfig+0x2aa>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d04f      	beq.n	8002f5e <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d008      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x2d0>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d004      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x2d0>
 8002ece:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8002ed2:	4809      	ldr	r0, [pc, #36]	; (8002ef8 <HAL_RCC_OscConfig+0x2f0>)
 8002ed4:	f7fd fb61 	bl	800059a <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d022      	beq.n	8002f26 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee6:	4a05      	ldr	r2, [pc, #20]	; (8002efc <HAL_RCC_OscConfig+0x2f4>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef0:	f7fd ffba 	bl	8000e68 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ef6:	e00e      	b.n	8002f16 <HAL_RCC_OscConfig+0x30e>
 8002ef8:	0800ae70 	.word	0x0800ae70
 8002efc:	40021000 	.word	0x40021000
 8002f00:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f04:	f7fd ffb0 	bl	8000e68 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e285      	b.n	8003422 <HAL_RCC_OscConfig+0x81a>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f16:	4b95      	ldr	r3, [pc, #596]	; (800316c <HAL_RCC_OscConfig+0x564>)
 8002f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0ef      	beq.n	8002f04 <HAL_RCC_OscConfig+0x2fc>
 8002f24:	e01b      	b.n	8002f5e <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f26:	4b91      	ldr	r3, [pc, #580]	; (800316c <HAL_RCC_OscConfig+0x564>)
 8002f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f2c:	4a8f      	ldr	r2, [pc, #572]	; (800316c <HAL_RCC_OscConfig+0x564>)
 8002f2e:	f023 0301 	bic.w	r3, r3, #1
 8002f32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f36:	f7fd ff97 	bl	8000e68 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f3e:	f7fd ff93 	bl	8000e68 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e268      	b.n	8003422 <HAL_RCC_OscConfig+0x81a>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f50:	4b86      	ldr	r3, [pc, #536]	; (800316c <HAL_RCC_OscConfig+0x564>)
 8002f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1ef      	bne.n	8002f3e <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0304 	and.w	r3, r3, #4
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 80b7 	beq.w	80030da <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00c      	beq.n	8002f92 <HAL_RCC_OscConfig+0x38a>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d008      	beq.n	8002f92 <HAL_RCC_OscConfig+0x38a>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b05      	cmp	r3, #5
 8002f86:	d004      	beq.n	8002f92 <HAL_RCC_OscConfig+0x38a>
 8002f88:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 8002f8c:	4878      	ldr	r0, [pc, #480]	; (8003170 <HAL_RCC_OscConfig+0x568>)
 8002f8e:	f7fd fb04 	bl	800059a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f92:	4b76      	ldr	r3, [pc, #472]	; (800316c <HAL_RCC_OscConfig+0x564>)
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x39a>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <HAL_RCC_OscConfig+0x39c>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00d      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa8:	4b70      	ldr	r3, [pc, #448]	; (800316c <HAL_RCC_OscConfig+0x564>)
 8002faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fac:	4a6f      	ldr	r2, [pc, #444]	; (800316c <HAL_RCC_OscConfig+0x564>)
 8002fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	6593      	str	r3, [r2, #88]	; 0x58
 8002fb4:	4b6d      	ldr	r3, [pc, #436]	; (800316c <HAL_RCC_OscConfig+0x564>)
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fc4:	4b6b      	ldr	r3, [pc, #428]	; (8003174 <HAL_RCC_OscConfig+0x56c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d118      	bne.n	8003002 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fd0:	4b68      	ldr	r3, [pc, #416]	; (8003174 <HAL_RCC_OscConfig+0x56c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a67      	ldr	r2, [pc, #412]	; (8003174 <HAL_RCC_OscConfig+0x56c>)
 8002fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fdc:	f7fd ff44 	bl	8000e68 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe4:	f7fd ff40 	bl	8000e68 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e215      	b.n	8003422 <HAL_RCC_OscConfig+0x81a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ff6:	4b5f      	ldr	r3, [pc, #380]	; (8003174 <HAL_RCC_OscConfig+0x56c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d108      	bne.n	800301c <HAL_RCC_OscConfig+0x414>
 800300a:	4b58      	ldr	r3, [pc, #352]	; (800316c <HAL_RCC_OscConfig+0x564>)
 800300c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003010:	4a56      	ldr	r2, [pc, #344]	; (800316c <HAL_RCC_OscConfig+0x564>)
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800301a:	e024      	b.n	8003066 <HAL_RCC_OscConfig+0x45e>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2b05      	cmp	r3, #5
 8003022:	d110      	bne.n	8003046 <HAL_RCC_OscConfig+0x43e>
 8003024:	4b51      	ldr	r3, [pc, #324]	; (800316c <HAL_RCC_OscConfig+0x564>)
 8003026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302a:	4a50      	ldr	r2, [pc, #320]	; (800316c <HAL_RCC_OscConfig+0x564>)
 800302c:	f043 0304 	orr.w	r3, r3, #4
 8003030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003034:	4b4d      	ldr	r3, [pc, #308]	; (800316c <HAL_RCC_OscConfig+0x564>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303a:	4a4c      	ldr	r2, [pc, #304]	; (800316c <HAL_RCC_OscConfig+0x564>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003044:	e00f      	b.n	8003066 <HAL_RCC_OscConfig+0x45e>
 8003046:	4b49      	ldr	r3, [pc, #292]	; (800316c <HAL_RCC_OscConfig+0x564>)
 8003048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304c:	4a47      	ldr	r2, [pc, #284]	; (800316c <HAL_RCC_OscConfig+0x564>)
 800304e:	f023 0301 	bic.w	r3, r3, #1
 8003052:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003056:	4b45      	ldr	r3, [pc, #276]	; (800316c <HAL_RCC_OscConfig+0x564>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	4a43      	ldr	r2, [pc, #268]	; (800316c <HAL_RCC_OscConfig+0x564>)
 800305e:	f023 0304 	bic.w	r3, r3, #4
 8003062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d016      	beq.n	800309c <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306e:	f7fd fefb 	bl	8000e68 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003074:	e00a      	b.n	800308c <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003076:	f7fd fef7 	bl	8000e68 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	f241 3288 	movw	r2, #5000	; 0x1388
 8003084:	4293      	cmp	r3, r2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e1ca      	b.n	8003422 <HAL_RCC_OscConfig+0x81a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800308c:	4b37      	ldr	r3, [pc, #220]	; (800316c <HAL_RCC_OscConfig+0x564>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0ed      	beq.n	8003076 <HAL_RCC_OscConfig+0x46e>
 800309a:	e015      	b.n	80030c8 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309c:	f7fd fee4 	bl	8000e68 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030a2:	e00a      	b.n	80030ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a4:	f7fd fee0 	bl	8000e68 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e1b3      	b.n	8003422 <HAL_RCC_OscConfig+0x81a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030ba:	4b2c      	ldr	r3, [pc, #176]	; (800316c <HAL_RCC_OscConfig+0x564>)
 80030bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1ed      	bne.n	80030a4 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030c8:	7ffb      	ldrb	r3, [r7, #31]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d105      	bne.n	80030da <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ce:	4b27      	ldr	r3, [pc, #156]	; (800316c <HAL_RCC_OscConfig+0x564>)
 80030d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d2:	4a26      	ldr	r2, [pc, #152]	; (800316c <HAL_RCC_OscConfig+0x564>)
 80030d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d04f      	beq.n	8003186 <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d008      	beq.n	8003100 <HAL_RCC_OscConfig+0x4f8>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d004      	beq.n	8003100 <HAL_RCC_OscConfig+0x4f8>
 80030f6:	f240 2141 	movw	r1, #577	; 0x241
 80030fa:	481d      	ldr	r0, [pc, #116]	; (8003170 <HAL_RCC_OscConfig+0x568>)
 80030fc:	f7fd fa4d 	bl	800059a <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d01c      	beq.n	8003142 <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003108:	4b18      	ldr	r3, [pc, #96]	; (800316c <HAL_RCC_OscConfig+0x564>)
 800310a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800310e:	4a17      	ldr	r2, [pc, #92]	; (800316c <HAL_RCC_OscConfig+0x564>)
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003118:	f7fd fea6 	bl	8000e68 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003120:	f7fd fea2 	bl	8000e68 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e177      	b.n	8003422 <HAL_RCC_OscConfig+0x81a>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003132:	4b0e      	ldr	r3, [pc, #56]	; (800316c <HAL_RCC_OscConfig+0x564>)
 8003134:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0ef      	beq.n	8003120 <HAL_RCC_OscConfig+0x518>
 8003140:	e021      	b.n	8003186 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003142:	4b0a      	ldr	r3, [pc, #40]	; (800316c <HAL_RCC_OscConfig+0x564>)
 8003144:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003148:	4a08      	ldr	r2, [pc, #32]	; (800316c <HAL_RCC_OscConfig+0x564>)
 800314a:	f023 0301 	bic.w	r3, r3, #1
 800314e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003152:	f7fd fe89 	bl	8000e68 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003158:	e00e      	b.n	8003178 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800315a:	f7fd fe85 	bl	8000e68 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d907      	bls.n	8003178 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e15a      	b.n	8003422 <HAL_RCC_OscConfig+0x81a>
 800316c:	40021000 	.word	0x40021000
 8003170:	0800ae70 	.word	0x0800ae70
 8003174:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003178:	4ba6      	ldr	r3, [pc, #664]	; (8003414 <HAL_RCC_OscConfig+0x80c>)
 800317a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1e9      	bne.n	800315a <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00c      	beq.n	80031a8 <HAL_RCC_OscConfig+0x5a0>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d008      	beq.n	80031a8 <HAL_RCC_OscConfig+0x5a0>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d004      	beq.n	80031a8 <HAL_RCC_OscConfig+0x5a0>
 800319e:	f240 216a 	movw	r1, #618	; 0x26a
 80031a2:	489d      	ldr	r0, [pc, #628]	; (8003418 <HAL_RCC_OscConfig+0x810>)
 80031a4:	f7fd f9f9 	bl	800059a <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8137 	beq.w	8003420 <HAL_RCC_OscConfig+0x818>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031b2:	4b98      	ldr	r3, [pc, #608]	; (8003414 <HAL_RCC_OscConfig+0x80c>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	2b0c      	cmp	r3, #12
 80031bc:	f000 80ea 	beq.w	8003394 <HAL_RCC_OscConfig+0x78c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	f040 80bd 	bne.w	8003344 <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00c      	beq.n	80031ec <HAL_RCC_OscConfig+0x5e4>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d008      	beq.n	80031ec <HAL_RCC_OscConfig+0x5e4>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d004      	beq.n	80031ec <HAL_RCC_OscConfig+0x5e4>
 80031e2:	f44f 711d 	mov.w	r1, #628	; 0x274
 80031e6:	488c      	ldr	r0, [pc, #560]	; (8003418 <HAL_RCC_OscConfig+0x810>)
 80031e8:	f7fd f9d7 	bl	800059a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_RCC_OscConfig+0x5f4>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	2b10      	cmp	r3, #16
 80031fa:	d904      	bls.n	8003206 <HAL_RCC_OscConfig+0x5fe>
 80031fc:	f240 2175 	movw	r1, #629	; 0x275
 8003200:	4885      	ldr	r0, [pc, #532]	; (8003418 <HAL_RCC_OscConfig+0x810>)
 8003202:	f7fd f9ca 	bl	800059a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320a:	2b07      	cmp	r3, #7
 800320c:	d903      	bls.n	8003216 <HAL_RCC_OscConfig+0x60e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003212:	2b7f      	cmp	r3, #127	; 0x7f
 8003214:	d904      	bls.n	8003220 <HAL_RCC_OscConfig+0x618>
 8003216:	f240 2176 	movw	r1, #630	; 0x276
 800321a:	487f      	ldr	r0, [pc, #508]	; (8003418 <HAL_RCC_OscConfig+0x810>)
 800321c:	f7fd f9bd 	bl	800059a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	2b01      	cmp	r3, #1
 8003226:	d903      	bls.n	8003230 <HAL_RCC_OscConfig+0x628>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322c:	2b1f      	cmp	r3, #31
 800322e:	d904      	bls.n	800323a <HAL_RCC_OscConfig+0x632>
 8003230:	f240 2177 	movw	r1, #631	; 0x277
 8003234:	4878      	ldr	r0, [pc, #480]	; (8003418 <HAL_RCC_OscConfig+0x810>)
 8003236:	f7fd f9b0 	bl	800059a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	2b02      	cmp	r3, #2
 8003240:	d010      	beq.n	8003264 <HAL_RCC_OscConfig+0x65c>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	2b04      	cmp	r3, #4
 8003248:	d00c      	beq.n	8003264 <HAL_RCC_OscConfig+0x65c>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	2b06      	cmp	r3, #6
 8003250:	d008      	beq.n	8003264 <HAL_RCC_OscConfig+0x65c>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	2b08      	cmp	r3, #8
 8003258:	d004      	beq.n	8003264 <HAL_RCC_OscConfig+0x65c>
 800325a:	f44f 711e 	mov.w	r1, #632	; 0x278
 800325e:	486e      	ldr	r0, [pc, #440]	; (8003418 <HAL_RCC_OscConfig+0x810>)
 8003260:	f7fd f99b 	bl	800059a <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003268:	2b02      	cmp	r3, #2
 800326a:	d010      	beq.n	800328e <HAL_RCC_OscConfig+0x686>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003270:	2b04      	cmp	r3, #4
 8003272:	d00c      	beq.n	800328e <HAL_RCC_OscConfig+0x686>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003278:	2b06      	cmp	r3, #6
 800327a:	d008      	beq.n	800328e <HAL_RCC_OscConfig+0x686>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003280:	2b08      	cmp	r3, #8
 8003282:	d004      	beq.n	800328e <HAL_RCC_OscConfig+0x686>
 8003284:	f240 2179 	movw	r1, #633	; 0x279
 8003288:	4863      	ldr	r0, [pc, #396]	; (8003418 <HAL_RCC_OscConfig+0x810>)
 800328a:	f7fd f986 	bl	800059a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328e:	4b61      	ldr	r3, [pc, #388]	; (8003414 <HAL_RCC_OscConfig+0x80c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a60      	ldr	r2, [pc, #384]	; (8003414 <HAL_RCC_OscConfig+0x80c>)
 8003294:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329a:	f7fd fde5 	bl	8000e68 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a2:	f7fd fde1 	bl	8000e68 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e0b6      	b.n	8003422 <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032b4:	4b57      	ldr	r3, [pc, #348]	; (8003414 <HAL_RCC_OscConfig+0x80c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1f0      	bne.n	80032a2 <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032c0:	4b54      	ldr	r3, [pc, #336]	; (8003414 <HAL_RCC_OscConfig+0x80c>)
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	4b55      	ldr	r3, [pc, #340]	; (800341c <HAL_RCC_OscConfig+0x814>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6a11      	ldr	r1, [r2, #32]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032d0:	3a01      	subs	r2, #1
 80032d2:	0112      	lsls	r2, r2, #4
 80032d4:	4311      	orrs	r1, r2
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80032da:	0212      	lsls	r2, r2, #8
 80032dc:	4311      	orrs	r1, r2
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032e2:	0852      	lsrs	r2, r2, #1
 80032e4:	3a01      	subs	r2, #1
 80032e6:	0552      	lsls	r2, r2, #21
 80032e8:	4311      	orrs	r1, r2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032ee:	0852      	lsrs	r2, r2, #1
 80032f0:	3a01      	subs	r2, #1
 80032f2:	0652      	lsls	r2, r2, #25
 80032f4:	4311      	orrs	r1, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80032fa:	06d2      	lsls	r2, r2, #27
 80032fc:	430a      	orrs	r2, r1
 80032fe:	4945      	ldr	r1, [pc, #276]	; (8003414 <HAL_RCC_OscConfig+0x80c>)
 8003300:	4313      	orrs	r3, r2
 8003302:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003304:	4b43      	ldr	r3, [pc, #268]	; (8003414 <HAL_RCC_OscConfig+0x80c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a42      	ldr	r2, [pc, #264]	; (8003414 <HAL_RCC_OscConfig+0x80c>)
 800330a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800330e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003310:	4b40      	ldr	r3, [pc, #256]	; (8003414 <HAL_RCC_OscConfig+0x80c>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4a3f      	ldr	r2, [pc, #252]	; (8003414 <HAL_RCC_OscConfig+0x80c>)
 8003316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800331a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fd fda4 	bl	8000e68 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003324:	f7fd fda0 	bl	8000e68 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e075      	b.n	8003422 <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003336:	4b37      	ldr	r3, [pc, #220]	; (8003414 <HAL_RCC_OscConfig+0x80c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0x71c>
 8003342:	e06d      	b.n	8003420 <HAL_RCC_OscConfig+0x818>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003344:	4b33      	ldr	r3, [pc, #204]	; (8003414 <HAL_RCC_OscConfig+0x80c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a32      	ldr	r2, [pc, #200]	; (8003414 <HAL_RCC_OscConfig+0x80c>)
 800334a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800334e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003350:	4b30      	ldr	r3, [pc, #192]	; (8003414 <HAL_RCC_OscConfig+0x80c>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4a2f      	ldr	r2, [pc, #188]	; (8003414 <HAL_RCC_OscConfig+0x80c>)
 8003356:	f023 0303 	bic.w	r3, r3, #3
 800335a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800335c:	4b2d      	ldr	r3, [pc, #180]	; (8003414 <HAL_RCC_OscConfig+0x80c>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	4a2c      	ldr	r2, [pc, #176]	; (8003414 <HAL_RCC_OscConfig+0x80c>)
 8003362:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800336a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fd fd7c 	bl	8000e68 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x77e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003374:	f7fd fd78 	bl	8000e68 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x77e>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e04d      	b.n	8003422 <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003386:	4b23      	ldr	r3, [pc, #140]	; (8003414 <HAL_RCC_OscConfig+0x80c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x76c>
 8003392:	e045      	b.n	8003420 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d101      	bne.n	80033a0 <HAL_RCC_OscConfig+0x798>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e040      	b.n	8003422 <HAL_RCC_OscConfig+0x81a>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80033a0:	4b1c      	ldr	r3, [pc, #112]	; (8003414 <HAL_RCC_OscConfig+0x80c>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f003 0203 	and.w	r2, r3, #3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d12c      	bne.n	800340e <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	3b01      	subs	r3, #1
 80033c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d123      	bne.n	800340e <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d11b      	bne.n	800340e <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d113      	bne.n	800340e <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	085b      	lsrs	r3, r3, #1
 80033f2:	3b01      	subs	r3, #1
 80033f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d109      	bne.n	800340e <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003404:	085b      	lsrs	r3, r3, #1
 8003406:	3b01      	subs	r3, #1
 8003408:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800340a:	429a      	cmp	r2, r3
 800340c:	d008      	beq.n	8003420 <HAL_RCC_OscConfig+0x818>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e007      	b.n	8003422 <HAL_RCC_OscConfig+0x81a>
 8003412:	bf00      	nop
 8003414:	40021000 	.word	0x40021000
 8003418:	0800ae70 	.word	0x0800ae70
 800341c:	019f800c 	.word	0x019f800c
      }
    }
  }
  }

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3720      	adds	r7, #32
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop

0800342c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e1e2      	b.n	800380a <HAL_RCC_ClockConfig+0x3de>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_RCC_ClockConfig+0x30>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f023 030f 	bic.w	r3, r3, #15
 8003458:	2b00      	cmp	r3, #0
 800345a:	d004      	beq.n	8003466 <HAL_RCC_ClockConfig+0x3a>
 800345c:	f240 3112 	movw	r1, #786	; 0x312
 8003460:	4897      	ldr	r0, [pc, #604]	; (80036c0 <HAL_RCC_ClockConfig+0x294>)
 8003462:	f7fd f89a 	bl	800059a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d031      	beq.n	80034d0 <HAL_RCC_ClockConfig+0xa4>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d02e      	beq.n	80034d0 <HAL_RCC_ClockConfig+0xa4>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d02b      	beq.n	80034d0 <HAL_RCC_ClockConfig+0xa4>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	2b03      	cmp	r3, #3
 800347c:	d028      	beq.n	80034d0 <HAL_RCC_ClockConfig+0xa4>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b04      	cmp	r3, #4
 8003482:	d025      	beq.n	80034d0 <HAL_RCC_ClockConfig+0xa4>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	2b05      	cmp	r3, #5
 8003488:	d022      	beq.n	80034d0 <HAL_RCC_ClockConfig+0xa4>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b06      	cmp	r3, #6
 800348e:	d01f      	beq.n	80034d0 <HAL_RCC_ClockConfig+0xa4>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2b07      	cmp	r3, #7
 8003494:	d01c      	beq.n	80034d0 <HAL_RCC_ClockConfig+0xa4>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b08      	cmp	r3, #8
 800349a:	d019      	beq.n	80034d0 <HAL_RCC_ClockConfig+0xa4>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	2b09      	cmp	r3, #9
 80034a0:	d016      	beq.n	80034d0 <HAL_RCC_ClockConfig+0xa4>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b0a      	cmp	r3, #10
 80034a6:	d013      	beq.n	80034d0 <HAL_RCC_ClockConfig+0xa4>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b0b      	cmp	r3, #11
 80034ac:	d010      	beq.n	80034d0 <HAL_RCC_ClockConfig+0xa4>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b0c      	cmp	r3, #12
 80034b2:	d00d      	beq.n	80034d0 <HAL_RCC_ClockConfig+0xa4>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	2b0d      	cmp	r3, #13
 80034b8:	d00a      	beq.n	80034d0 <HAL_RCC_ClockConfig+0xa4>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b0e      	cmp	r3, #14
 80034be:	d007      	beq.n	80034d0 <HAL_RCC_ClockConfig+0xa4>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2b0f      	cmp	r3, #15
 80034c4:	d004      	beq.n	80034d0 <HAL_RCC_ClockConfig+0xa4>
 80034c6:	f240 3113 	movw	r1, #787	; 0x313
 80034ca:	487d      	ldr	r0, [pc, #500]	; (80036c0 <HAL_RCC_ClockConfig+0x294>)
 80034cc:	f7fd f865 	bl	800059a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034d0:	4b7c      	ldr	r3, [pc, #496]	; (80036c4 <HAL_RCC_ClockConfig+0x298>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d910      	bls.n	8003500 <HAL_RCC_ClockConfig+0xd4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034de:	4b79      	ldr	r3, [pc, #484]	; (80036c4 <HAL_RCC_ClockConfig+0x298>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 020f 	bic.w	r2, r3, #15
 80034e6:	4977      	ldr	r1, [pc, #476]	; (80036c4 <HAL_RCC_ClockConfig+0x298>)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ee:	4b75      	ldr	r3, [pc, #468]	; (80036c4 <HAL_RCC_ClockConfig+0x298>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_ClockConfig+0xd4>
    {
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e184      	b.n	800380a <HAL_RCC_ClockConfig+0x3de>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 8085 	beq.w	8003618 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d00c      	beq.n	8003530 <HAL_RCC_ClockConfig+0x104>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d008      	beq.n	8003530 <HAL_RCC_ClockConfig+0x104>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b03      	cmp	r3, #3
 8003524:	d004      	beq.n	8003530 <HAL_RCC_ClockConfig+0x104>
 8003526:	f240 312a 	movw	r1, #810	; 0x32a
 800352a:	4865      	ldr	r0, [pc, #404]	; (80036c0 <HAL_RCC_ClockConfig+0x294>)
 800352c:	f7fd f835 	bl	800059a <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b03      	cmp	r3, #3
 8003536:	d129      	bne.n	800358c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003538:	4b63      	ldr	r3, [pc, #396]	; (80036c8 <HAL_RCC_ClockConfig+0x29c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_RCC_ClockConfig+0x11c>
      {
        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e160      	b.n	800380a <HAL_RCC_ClockConfig+0x3de>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003548:	f000 fa34 	bl	80039b4 <RCC_GetSysClockFreqFromPLLSource>
 800354c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	4a5e      	ldr	r2, [pc, #376]	; (80036cc <HAL_RCC_ClockConfig+0x2a0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d93f      	bls.n	80035d6 <HAL_RCC_ClockConfig+0x1aa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003556:	4b5c      	ldr	r3, [pc, #368]	; (80036c8 <HAL_RCC_ClockConfig+0x29c>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d009      	beq.n	8003576 <HAL_RCC_ClockConfig+0x14a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800356a:	2b00      	cmp	r3, #0
 800356c:	d033      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x1aa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003572:	2b00      	cmp	r3, #0
 8003574:	d12f      	bne.n	80035d6 <HAL_RCC_ClockConfig+0x1aa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003576:	4b54      	ldr	r3, [pc, #336]	; (80036c8 <HAL_RCC_ClockConfig+0x29c>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800357e:	4a52      	ldr	r2, [pc, #328]	; (80036c8 <HAL_RCC_ClockConfig+0x29c>)
 8003580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003584:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003586:	2380      	movs	r3, #128	; 0x80
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	e024      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b02      	cmp	r3, #2
 8003592:	d107      	bne.n	80035a4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003594:	4b4c      	ldr	r3, [pc, #304]	; (80036c8 <HAL_RCC_ClockConfig+0x29c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d109      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e132      	b.n	800380a <HAL_RCC_ClockConfig+0x3de>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035a4:	4b48      	ldr	r3, [pc, #288]	; (80036c8 <HAL_RCC_ClockConfig+0x29c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e12a      	b.n	800380a <HAL_RCC_ClockConfig+0x3de>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80035b4:	f000 f93a 	bl	800382c <HAL_RCC_GetSysClockFreq>
 80035b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4a43      	ldr	r2, [pc, #268]	; (80036cc <HAL_RCC_ClockConfig+0x2a0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d909      	bls.n	80035d6 <HAL_RCC_ClockConfig+0x1aa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035c2:	4b41      	ldr	r3, [pc, #260]	; (80036c8 <HAL_RCC_ClockConfig+0x29c>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ca:	4a3f      	ldr	r2, [pc, #252]	; (80036c8 <HAL_RCC_ClockConfig+0x29c>)
 80035cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80035d2:	2380      	movs	r3, #128	; 0x80
 80035d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035d6:	4b3c      	ldr	r3, [pc, #240]	; (80036c8 <HAL_RCC_ClockConfig+0x29c>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f023 0203 	bic.w	r2, r3, #3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	4939      	ldr	r1, [pc, #228]	; (80036c8 <HAL_RCC_ClockConfig+0x29c>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e8:	f7fd fc3e 	bl	8000e68 <HAL_GetTick>
 80035ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ee:	e00a      	b.n	8003606 <HAL_RCC_ClockConfig+0x1da>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f0:	f7fd fc3a 	bl	8000e68 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fe:	4293      	cmp	r3, r2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e101      	b.n	800380a <HAL_RCC_ClockConfig+0x3de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	4b30      	ldr	r3, [pc, #192]	; (80036c8 <HAL_RCC_ClockConfig+0x29c>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 020c 	and.w	r2, r3, #12
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	429a      	cmp	r2, r3
 8003616:	d1eb      	bne.n	80035f0 <HAL_RCC_ClockConfig+0x1c4>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d055      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x2a4>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_RCC_ClockConfig+0x210>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003630:	4b25      	ldr	r3, [pc, #148]	; (80036c8 <HAL_RCC_ClockConfig+0x29c>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	4a24      	ldr	r2, [pc, #144]	; (80036c8 <HAL_RCC_ClockConfig+0x29c>)
 8003636:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800363a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d007      	beq.n	8003658 <HAL_RCC_ClockConfig+0x22c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003648:	4b1f      	ldr	r3, [pc, #124]	; (80036c8 <HAL_RCC_ClockConfig+0x29c>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003650:	4a1d      	ldr	r2, [pc, #116]	; (80036c8 <HAL_RCC_ClockConfig+0x29c>)
 8003652:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003656:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d024      	beq.n	80036aa <HAL_RCC_ClockConfig+0x27e>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b80      	cmp	r3, #128	; 0x80
 8003666:	d020      	beq.n	80036aa <HAL_RCC_ClockConfig+0x27e>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	2b90      	cmp	r3, #144	; 0x90
 800366e:	d01c      	beq.n	80036aa <HAL_RCC_ClockConfig+0x27e>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2ba0      	cmp	r3, #160	; 0xa0
 8003676:	d018      	beq.n	80036aa <HAL_RCC_ClockConfig+0x27e>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2bb0      	cmp	r3, #176	; 0xb0
 800367e:	d014      	beq.n	80036aa <HAL_RCC_ClockConfig+0x27e>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2bc0      	cmp	r3, #192	; 0xc0
 8003686:	d010      	beq.n	80036aa <HAL_RCC_ClockConfig+0x27e>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2bd0      	cmp	r3, #208	; 0xd0
 800368e:	d00c      	beq.n	80036aa <HAL_RCC_ClockConfig+0x27e>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2be0      	cmp	r3, #224	; 0xe0
 8003696:	d008      	beq.n	80036aa <HAL_RCC_ClockConfig+0x27e>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2bf0      	cmp	r3, #240	; 0xf0
 800369e:	d004      	beq.n	80036aa <HAL_RCC_ClockConfig+0x27e>
 80036a0:	f240 3181 	movw	r1, #897	; 0x381
 80036a4:	4806      	ldr	r0, [pc, #24]	; (80036c0 <HAL_RCC_ClockConfig+0x294>)
 80036a6:	f7fc ff78 	bl	800059a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036aa:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <HAL_RCC_ClockConfig+0x29c>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	4904      	ldr	r1, [pc, #16]	; (80036c8 <HAL_RCC_ClockConfig+0x29c>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	608b      	str	r3, [r1, #8]
 80036bc:	e011      	b.n	80036e2 <HAL_RCC_ClockConfig+0x2b6>
 80036be:	bf00      	nop
 80036c0:	0800ae70 	.word	0x0800ae70
 80036c4:	40022000 	.word	0x40022000
 80036c8:	40021000 	.word	0x40021000
 80036cc:	04c4b400 	.word	0x04c4b400
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2b80      	cmp	r3, #128	; 0x80
 80036d4:	d105      	bne.n	80036e2 <HAL_RCC_ClockConfig+0x2b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036d6:	4b4f      	ldr	r3, [pc, #316]	; (8003814 <HAL_RCC_ClockConfig+0x3e8>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	4a4e      	ldr	r2, [pc, #312]	; (8003814 <HAL_RCC_ClockConfig+0x3e8>)
 80036dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036e2:	4b4d      	ldr	r3, [pc, #308]	; (8003818 <HAL_RCC_ClockConfig+0x3ec>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d21d      	bcs.n	800372c <HAL_RCC_ClockConfig+0x300>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f0:	4b49      	ldr	r3, [pc, #292]	; (8003818 <HAL_RCC_ClockConfig+0x3ec>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f023 020f 	bic.w	r2, r3, #15
 80036f8:	4947      	ldr	r1, [pc, #284]	; (8003818 <HAL_RCC_ClockConfig+0x3ec>)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003700:	f7fd fbb2 	bl	8000e68 <HAL_GetTick>
 8003704:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003706:	e00a      	b.n	800371e <HAL_RCC_ClockConfig+0x2f2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003708:	f7fd fbae 	bl	8000e68 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	; 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_ClockConfig+0x2f2>
      {
        return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e075      	b.n	800380a <HAL_RCC_ClockConfig+0x3de>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371e:	4b3e      	ldr	r3, [pc, #248]	; (8003818 <HAL_RCC_ClockConfig+0x3ec>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d1ed      	bne.n	8003708 <HAL_RCC_ClockConfig+0x2dc>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	d025      	beq.n	8003784 <HAL_RCC_ClockConfig+0x358>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d018      	beq.n	8003772 <HAL_RCC_ClockConfig+0x346>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003748:	d013      	beq.n	8003772 <HAL_RCC_ClockConfig+0x346>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003752:	d00e      	beq.n	8003772 <HAL_RCC_ClockConfig+0x346>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800375c:	d009      	beq.n	8003772 <HAL_RCC_ClockConfig+0x346>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003766:	d004      	beq.n	8003772 <HAL_RCC_ClockConfig+0x346>
 8003768:	f240 31a3 	movw	r1, #931	; 0x3a3
 800376c:	482b      	ldr	r0, [pc, #172]	; (800381c <HAL_RCC_ClockConfig+0x3f0>)
 800376e:	f7fc ff14 	bl	800059a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003772:	4b28      	ldr	r3, [pc, #160]	; (8003814 <HAL_RCC_ClockConfig+0x3e8>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	4925      	ldr	r1, [pc, #148]	; (8003814 <HAL_RCC_ClockConfig+0x3e8>)
 8003780:	4313      	orrs	r3, r2
 8003782:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	d026      	beq.n	80037de <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d018      	beq.n	80037ca <HAL_RCC_ClockConfig+0x39e>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a0:	d013      	beq.n	80037ca <HAL_RCC_ClockConfig+0x39e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80037aa:	d00e      	beq.n	80037ca <HAL_RCC_ClockConfig+0x39e>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80037b4:	d009      	beq.n	80037ca <HAL_RCC_ClockConfig+0x39e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037be:	d004      	beq.n	80037ca <HAL_RCC_ClockConfig+0x39e>
 80037c0:	f240 31aa 	movw	r1, #938	; 0x3aa
 80037c4:	4815      	ldr	r0, [pc, #84]	; (800381c <HAL_RCC_ClockConfig+0x3f0>)
 80037c6:	f7fc fee8 	bl	800059a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ca:	4b12      	ldr	r3, [pc, #72]	; (8003814 <HAL_RCC_ClockConfig+0x3e8>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	490e      	ldr	r1, [pc, #56]	; (8003814 <HAL_RCC_ClockConfig+0x3e8>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037de:	f000 f825 	bl	800382c <HAL_RCC_GetSysClockFreq>
 80037e2:	4601      	mov	r1, r0
 80037e4:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <HAL_RCC_ClockConfig+0x3e8>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	091b      	lsrs	r3, r3, #4
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	4a0c      	ldr	r2, [pc, #48]	; (8003820 <HAL_RCC_ClockConfig+0x3f4>)
 80037f0:	5cd3      	ldrb	r3, [r2, r3]
 80037f2:	f003 031f 	and.w	r3, r3, #31
 80037f6:	fa21 f303 	lsr.w	r3, r1, r3
 80037fa:	4a0a      	ldr	r2, [pc, #40]	; (8003824 <HAL_RCC_ClockConfig+0x3f8>)
 80037fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80037fe:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <HAL_RCC_ClockConfig+0x3fc>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fd f80c 	bl	8000820 <HAL_InitTick>
 8003808:	4603      	mov	r3, r0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40021000 	.word	0x40021000
 8003818:	40022000 	.word	0x40022000
 800381c:	0800ae70 	.word	0x0800ae70
 8003820:	0800afe0 	.word	0x0800afe0
 8003824:	20000000 	.word	0x20000000
 8003828:	20000004 	.word	0x20000004

0800382c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003832:	4b2c      	ldr	r3, [pc, #176]	; (80038e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b04      	cmp	r3, #4
 800383c:	d102      	bne.n	8003844 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800383e:	4b2a      	ldr	r3, [pc, #168]	; (80038e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	e047      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003844:	4b27      	ldr	r3, [pc, #156]	; (80038e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 030c 	and.w	r3, r3, #12
 800384c:	2b08      	cmp	r3, #8
 800384e:	d102      	bne.n	8003856 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003850:	4b25      	ldr	r3, [pc, #148]	; (80038e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	e03e      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003856:	4b23      	ldr	r3, [pc, #140]	; (80038e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b0c      	cmp	r3, #12
 8003860:	d136      	bne.n	80038d0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003862:	4b20      	ldr	r3, [pc, #128]	; (80038e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800386c:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	091b      	lsrs	r3, r3, #4
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	3301      	adds	r3, #1
 8003878:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b03      	cmp	r3, #3
 800387e:	d10c      	bne.n	800389a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003880:	4a19      	ldr	r2, [pc, #100]	; (80038e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	fbb2 f3f3 	udiv	r3, r2, r3
 8003888:	4a16      	ldr	r2, [pc, #88]	; (80038e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800388a:	68d2      	ldr	r2, [r2, #12]
 800388c:	0a12      	lsrs	r2, r2, #8
 800388e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003892:	fb02 f303 	mul.w	r3, r2, r3
 8003896:	617b      	str	r3, [r7, #20]
      break;
 8003898:	e00c      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800389a:	4a13      	ldr	r2, [pc, #76]	; (80038e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a2:	4a10      	ldr	r2, [pc, #64]	; (80038e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038a4:	68d2      	ldr	r2, [r2, #12]
 80038a6:	0a12      	lsrs	r2, r2, #8
 80038a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038ac:	fb02 f303 	mul.w	r3, r2, r3
 80038b0:	617b      	str	r3, [r7, #20]
      break;
 80038b2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038b4:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	0e5b      	lsrs	r3, r3, #25
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	3301      	adds	r3, #1
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	e001      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80038d4:	693b      	ldr	r3, [r7, #16]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	371c      	adds	r7, #28
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40021000 	.word	0x40021000
 80038e8:	00f42400 	.word	0x00f42400

080038ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f0:	4b03      	ldr	r3, [pc, #12]	; (8003900 <HAL_RCC_GetHCLKFreq+0x14>)
 80038f2:	681b      	ldr	r3, [r3, #0]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20000000 	.word	0x20000000

08003904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003908:	f7ff fff0 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 800390c:	4601      	mov	r1, r0
 800390e:	4b06      	ldr	r3, [pc, #24]	; (8003928 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	0adb      	lsrs	r3, r3, #11
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	4a04      	ldr	r2, [pc, #16]	; (800392c <HAL_RCC_GetPCLK2Freq+0x28>)
 800391a:	5cd3      	ldrb	r3, [r2, r3]
 800391c:	f003 031f 	and.w	r3, r3, #31
 8003920:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003924:	4618      	mov	r0, r3
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40021000 	.word	0x40021000
 800392c:	0800aff0 	.word	0x0800aff0

08003930 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d104      	bne.n	800394a <HAL_RCC_GetClockConfig+0x1a>
 8003940:	f240 41d9 	movw	r1, #1241	; 0x4d9
 8003944:	4818      	ldr	r0, [pc, #96]	; (80039a8 <HAL_RCC_GetClockConfig+0x78>)
 8003946:	f7fc fe28 	bl	800059a <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d104      	bne.n	800395a <HAL_RCC_GetClockConfig+0x2a>
 8003950:	f240 41da 	movw	r1, #1242	; 0x4da
 8003954:	4814      	ldr	r0, [pc, #80]	; (80039a8 <HAL_RCC_GetClockConfig+0x78>)
 8003956:	f7fc fe20 	bl	800059a <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	220f      	movs	r2, #15
 800395e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003960:	4b12      	ldr	r3, [pc, #72]	; (80039ac <HAL_RCC_GetClockConfig+0x7c>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 0203 	and.w	r2, r3, #3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800396c:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <HAL_RCC_GetClockConfig+0x7c>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003978:	4b0c      	ldr	r3, [pc, #48]	; (80039ac <HAL_RCC_GetClockConfig+0x7c>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003984:	4b09      	ldr	r3, [pc, #36]	; (80039ac <HAL_RCC_GetClockConfig+0x7c>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	08db      	lsrs	r3, r3, #3
 800398a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003992:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <HAL_RCC_GetClockConfig+0x80>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 020f 	and.w	r2, r3, #15
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	601a      	str	r2, [r3, #0]
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	0800ae70 	.word	0x0800ae70
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40022000 	.word	0x40022000

080039b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039ba:	4b1e      	ldr	r3, [pc, #120]	; (8003a34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039c4:	4b1b      	ldr	r3, [pc, #108]	; (8003a34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	091b      	lsrs	r3, r3, #4
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	3301      	adds	r3, #1
 80039d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d10c      	bne.n	80039f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039d8:	4a17      	ldr	r2, [pc, #92]	; (8003a38 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e0:	4a14      	ldr	r2, [pc, #80]	; (8003a34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039e2:	68d2      	ldr	r2, [r2, #12]
 80039e4:	0a12      	lsrs	r2, r2, #8
 80039e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039ea:	fb02 f303 	mul.w	r3, r2, r3
 80039ee:	617b      	str	r3, [r7, #20]
    break;
 80039f0:	e00c      	b.n	8003a0c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039f2:	4a11      	ldr	r2, [pc, #68]	; (8003a38 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fa:	4a0e      	ldr	r2, [pc, #56]	; (8003a34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039fc:	68d2      	ldr	r2, [r2, #12]
 80039fe:	0a12      	lsrs	r2, r2, #8
 8003a00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a04:	fb02 f303 	mul.w	r3, r2, r3
 8003a08:	617b      	str	r3, [r7, #20]
    break;
 8003a0a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a0c:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	0e5b      	lsrs	r3, r3, #25
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	3301      	adds	r3, #1
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a24:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003a26:	687b      	ldr	r3, [r7, #4]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	371c      	adds	r7, #28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	40021000 	.word	0x40021000
 8003a38:	00f42400 	.word	0x00f42400

08003a3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a44:	2300      	movs	r3, #0
 8003a46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a48:	2300      	movs	r3, #0
 8003a4a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d15d      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d157      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d151      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d14b      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0320 	and.w	r3, r3, #32
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d145      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d13f      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d139      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d133      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d12d      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d127      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d121      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d11b      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d115      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10f      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d109      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d103      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8003b0c:	2185      	movs	r1, #133	; 0x85
 8003b0e:	4855      	ldr	r0, [pc, #340]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003b10:	f7fc fd43 	bl	800059a <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 80b2 	beq.w	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b22:	2300      	movs	r3, #0
 8003b24:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d012      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b36:	d00d      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b40:	d008      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b4a:	d003      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8003b4c:	218d      	movs	r1, #141	; 0x8d
 8003b4e:	4845      	ldr	r0, [pc, #276]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003b50:	f7fc fd23 	bl	800059a <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b54:	4b44      	ldr	r3, [pc, #272]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10d      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x140>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b60:	4b41      	ldr	r3, [pc, #260]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b64:	4a40      	ldr	r2, [pc, #256]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b6c:	4b3e      	ldr	r3, [pc, #248]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b74:	60bb      	str	r3, [r7, #8]
 8003b76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b7c:	4b3b      	ldr	r3, [pc, #236]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a3a      	ldr	r2, [pc, #232]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b88:	f7fd f96e 	bl	8000e68 <HAL_GetTick>
 8003b8c:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b8e:	e009      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b90:	f7fd f96a 	bl	8000e68 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d902      	bls.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        ret = HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	74fb      	strb	r3, [r7, #19]
        break;
 8003ba2:	e005      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ba4:	4b31      	ldr	r3, [pc, #196]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0ef      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x154>
      }
    }

    if(ret == HAL_OK)
 8003bb0:	7cfb      	ldrb	r3, [r7, #19]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d15c      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x234>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bb6:	4b2c      	ldr	r3, [pc, #176]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc0:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d01e      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d019      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bd2:	4b25      	ldr	r3, [pc, #148]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bdc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bde:	4b22      	ldr	r3, [pc, #136]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be4:	4a20      	ldr	r2, [pc, #128]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bee:	4b1e      	ldr	r3, [pc, #120]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf4:	4a1c      	ldr	r2, [pc, #112]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bfe:	4a1a      	ldr	r2, [pc, #104]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d016      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x202>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fd f92a 	bl	8000e68 <HAL_GetTick>
 8003c14:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c16:	e00b      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c18:	f7fd f926 	bl	8000e68 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d902      	bls.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
          {
            ret = HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	74fb      	strb	r3, [r7, #19]
            break;
 8003c2e:	e006      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x202>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c30:	4b0d      	ldr	r3, [pc, #52]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0ec      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003c3e:	7cfb      	ldrb	r3, [r7, #19]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10b      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x220>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c44:	4b08      	ldr	r3, [pc, #32]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	4905      	ldr	r1, [pc, #20]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c5a:	e00b      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x238>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c5c:	7cfb      	ldrb	r3, [r7, #19]
 8003c5e:	74bb      	strb	r3, [r7, #18]
 8003c60:	e008      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003c62:	bf00      	nop
 8003c64:	0800aea8 	.word	0x0800aea8
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c70:	7cfb      	ldrb	r3, [r7, #19]
 8003c72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c74:	7c7b      	ldrb	r3, [r7, #17]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d105      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c7a:	4ba7      	ldr	r3, [pc, #668]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7e:	4aa6      	ldr	r2, [pc, #664]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d01e      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00f      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d00b      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d007      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d003      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8003cb2:	21e2      	movs	r1, #226	; 0xe2
 8003cb4:	4899      	ldr	r0, [pc, #612]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003cb6:	f7fc fc70 	bl	800059a <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cba:	4b97      	ldr	r3, [pc, #604]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc0:	f023 0203 	bic.w	r2, r3, #3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4993      	ldr	r1, [pc, #588]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d01e      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00f      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d00b      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	2b0c      	cmp	r3, #12
 8003cf2:	d007      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d003      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8003cfc:	21ec      	movs	r1, #236	; 0xec
 8003cfe:	4887      	ldr	r0, [pc, #540]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003d00:	f7fc fc4b 	bl	800059a <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d04:	4b84      	ldr	r3, [pc, #528]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0a:	f023 020c 	bic.w	r2, r3, #12
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	4981      	ldr	r1, [pc, #516]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d01e      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00f      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	2b10      	cmp	r3, #16
 8003d34:	d00b      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	2b30      	cmp	r3, #48	; 0x30
 8003d3c:	d007      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	2b20      	cmp	r3, #32
 8003d44:	d003      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003d46:	21f6      	movs	r1, #246	; 0xf6
 8003d48:	4874      	ldr	r0, [pc, #464]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003d4a:	f7fc fc26 	bl	800059a <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d4e:	4b72      	ldr	r3, [pc, #456]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	496e      	ldr	r1, [pc, #440]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d01f      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d010      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	2b40      	cmp	r3, #64	; 0x40
 8003d7e:	d00c      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	2bc0      	cmp	r3, #192	; 0xc0
 8003d86:	d008      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	2b80      	cmp	r3, #128	; 0x80
 8003d8e:	d004      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003d90:	f240 1101 	movw	r1, #257	; 0x101
 8003d94:	4861      	ldr	r0, [pc, #388]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003d96:	f7fc fc00 	bl	800059a <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d9a:	4b5f      	ldr	r3, [pc, #380]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	495b      	ldr	r1, [pc, #364]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0320 	and.w	r3, r3, #32
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d022      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d013      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dcc:	d00e      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dd6:	d009      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003de0:	d004      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8003de2:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8003de6:	484d      	ldr	r0, [pc, #308]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003de8:	f7fc fbd7 	bl	800059a <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dec:	4b4a      	ldr	r3, [pc, #296]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	4947      	ldr	r1, [pc, #284]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d01d      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00e      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1e:	d009      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e28:	d004      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003e2a:	f44f 7192 	mov.w	r1, #292	; 0x124
 8003e2e:	483b      	ldr	r0, [pc, #236]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003e30:	f7fc fbb3 	bl	800059a <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e34:	4b38      	ldr	r3, [pc, #224]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	4935      	ldr	r1, [pc, #212]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d01d      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00e      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e66:	d009      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e70:	d004      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003e72:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8003e76:	4829      	ldr	r0, [pc, #164]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003e78:	f7fc fb8f 	bl	800059a <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e7c:	4b26      	ldr	r3, [pc, #152]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	4923      	ldr	r1, [pc, #140]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d01d      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x49e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00e      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eae:	d009      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eb8:	d004      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003eba:	f44f 719c 	mov.w	r1, #312	; 0x138
 8003ebe:	4817      	ldr	r0, [pc, #92]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003ec0:	f7fc fb6b 	bl	800059a <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ec4:	4b14      	ldr	r3, [pc, #80]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	4911      	ldr	r1, [pc, #68]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d027      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d018      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ef6:	d013      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f00:	d00e      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f0a:	d009      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003f0c:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8003f10:	4802      	ldr	r0, [pc, #8]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8003f12:	f7fc fb42 	bl	800059a <assert_failed>
 8003f16:	e003      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	0800aea8 	.word	0x0800aea8

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f20:	4b94      	ldr	r3, [pc, #592]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8003f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f26:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	4991      	ldr	r1, [pc, #580]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d02d      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d013      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x536>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f52:	d00e      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x536>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f5c:	d009      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x536>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f66:	d004      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x536>
 8003f68:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8003f6c:	4882      	ldr	r0, [pc, #520]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003f6e:	f7fc fb14 	bl	800059a <assert_failed>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f72:	4b80      	ldr	r3, [pc, #512]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	497c      	ldr	r1, [pc, #496]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f90:	d105      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f92:	4b78      	ldr	r3, [pc, #480]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	4a77      	ldr	r2, [pc, #476]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8003f98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f9c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d02d      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d013      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fba:	d00e      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fc4:	d009      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fce:	d004      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003fd0:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8003fd4:	4868      	ldr	r0, [pc, #416]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003fd6:	f7fc fae0 	bl	800059a <assert_failed>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003fda:	4b66      	ldr	r3, [pc, #408]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	4962      	ldr	r1, [pc, #392]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ff8:	d105      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ffa:	4b5e      	ldr	r3, [pc, #376]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	4a5d      	ldr	r2, [pc, #372]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004000:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004004:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d028      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00e      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004022:	d009      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004028:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800402c:	d004      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 800402e:	f240 117b 	movw	r1, #379	; 0x17b
 8004032:	4851      	ldr	r0, [pc, #324]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004034:	f7fc fab1 	bl	800059a <assert_failed>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004038:	4b4e      	ldr	r3, [pc, #312]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	494b      	ldr	r1, [pc, #300]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004056:	d105      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004058:	4b46      	ldr	r3, [pc, #280]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	4a45      	ldr	r2, [pc, #276]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800405e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004062:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d023      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004074:	2b00      	cmp	r3, #0
 8004076:	d009      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004080:	d004      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004082:	f240 118d 	movw	r1, #397	; 0x18d
 8004086:	483c      	ldr	r0, [pc, #240]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004088:	f7fc fa87 	bl	800059a <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800408c:	4b39      	ldr	r3, [pc, #228]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800408e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004092:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800409a:	4936      	ldr	r1, [pc, #216]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040aa:	d105      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040ac:	4b31      	ldr	r3, [pc, #196]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	4a30      	ldr	r2, [pc, #192]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80040b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040b6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d023      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d009      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040d4:	d004      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 80040d6:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80040da:	4827      	ldr	r0, [pc, #156]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80040dc:	f7fc fa5d 	bl	800059a <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040e0:	4b24      	ldr	r3, [pc, #144]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80040e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ee:	4921      	ldr	r1, [pc, #132]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040fe:	d105      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004100:	4b1c      	ldr	r3, [pc, #112]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	4a1b      	ldr	r2, [pc, #108]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004106:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800410a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d028      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x72e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00e      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x702>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004124:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004128:	d009      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x702>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004132:	d004      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x702>
 8004134:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004138:	480f      	ldr	r0, [pc, #60]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800413a:	f7fc fa2e 	bl	800059a <assert_failed>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800413e:	4b0d      	ldr	r3, [pc, #52]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004144:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414c:	4909      	ldr	r1, [pc, #36]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004158:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800415c:	d105      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x72e>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800415e:	4b05      	ldr	r3, [pc, #20]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	4a04      	ldr	r2, [pc, #16]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004168:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800416a:	7cbb      	ldrb	r3, [r7, #18]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40021000 	.word	0x40021000
 8004178:	0800aea8 	.word	0x0800aea8

0800417c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e184      	b.n	8004498 <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a9b      	ldr	r2, [pc, #620]	; (8004400 <HAL_SPI_Init+0x284>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00e      	beq.n	80041b6 <HAL_SPI_Init+0x3a>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a99      	ldr	r2, [pc, #612]	; (8004404 <HAL_SPI_Init+0x288>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d009      	beq.n	80041b6 <HAL_SPI_Init+0x3a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a98      	ldr	r2, [pc, #608]	; (8004408 <HAL_SPI_Init+0x28c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d004      	beq.n	80041b6 <HAL_SPI_Init+0x3a>
 80041ac:	f240 1147 	movw	r1, #327	; 0x147
 80041b0:	4896      	ldr	r0, [pc, #600]	; (800440c <HAL_SPI_Init+0x290>)
 80041b2:	f7fc f9f2 	bl	800059a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d009      	beq.n	80041d2 <HAL_SPI_Init+0x56>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041c6:	d004      	beq.n	80041d2 <HAL_SPI_Init+0x56>
 80041c8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80041cc:	488f      	ldr	r0, [pc, #572]	; (800440c <HAL_SPI_Init+0x290>)
 80041ce:	f7fc f9e4 	bl	800059a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00e      	beq.n	80041f8 <HAL_SPI_Init+0x7c>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e2:	d009      	beq.n	80041f8 <HAL_SPI_Init+0x7c>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ec:	d004      	beq.n	80041f8 <HAL_SPI_Init+0x7c>
 80041ee:	f240 1149 	movw	r1, #329	; 0x149
 80041f2:	4886      	ldr	r0, [pc, #536]	; (800440c <HAL_SPI_Init+0x290>)
 80041f4:	f7fc f9d1 	bl	800059a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004200:	d040      	beq.n	8004284 <HAL_SPI_Init+0x108>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800420a:	d03b      	beq.n	8004284 <HAL_SPI_Init+0x108>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004214:	d036      	beq.n	8004284 <HAL_SPI_Init+0x108>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800421e:	d031      	beq.n	8004284 <HAL_SPI_Init+0x108>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004228:	d02c      	beq.n	8004284 <HAL_SPI_Init+0x108>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004232:	d027      	beq.n	8004284 <HAL_SPI_Init+0x108>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800423c:	d022      	beq.n	8004284 <HAL_SPI_Init+0x108>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004246:	d01d      	beq.n	8004284 <HAL_SPI_Init+0x108>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004250:	d018      	beq.n	8004284 <HAL_SPI_Init+0x108>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800425a:	d013      	beq.n	8004284 <HAL_SPI_Init+0x108>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004264:	d00e      	beq.n	8004284 <HAL_SPI_Init+0x108>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800426e:	d009      	beq.n	8004284 <HAL_SPI_Init+0x108>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004278:	d004      	beq.n	8004284 <HAL_SPI_Init+0x108>
 800427a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800427e:	4863      	ldr	r0, [pc, #396]	; (800440c <HAL_SPI_Init+0x290>)
 8004280:	f7fc f98b 	bl	800059a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800428c:	d00d      	beq.n	80042aa <HAL_SPI_Init+0x12e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d009      	beq.n	80042aa <HAL_SPI_Init+0x12e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800429e:	d004      	beq.n	80042aa <HAL_SPI_Init+0x12e>
 80042a0:	f240 114b 	movw	r1, #331	; 0x14b
 80042a4:	4859      	ldr	r0, [pc, #356]	; (800440c <HAL_SPI_Init+0x290>)
 80042a6:	f7fc f978 	bl	800059a <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d008      	beq.n	80042c4 <HAL_SPI_Init+0x148>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d004      	beq.n	80042c4 <HAL_SPI_Init+0x148>
 80042ba:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80042be:	4853      	ldr	r0, [pc, #332]	; (800440c <HAL_SPI_Init+0x290>)
 80042c0:	f7fc f96b 	bl	800059a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d020      	beq.n	800430e <HAL_SPI_Init+0x192>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d01c      	beq.n	800430e <HAL_SPI_Init+0x192>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	2b10      	cmp	r3, #16
 80042da:	d018      	beq.n	800430e <HAL_SPI_Init+0x192>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	2b18      	cmp	r3, #24
 80042e2:	d014      	beq.n	800430e <HAL_SPI_Init+0x192>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d010      	beq.n	800430e <HAL_SPI_Init+0x192>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	2b28      	cmp	r3, #40	; 0x28
 80042f2:	d00c      	beq.n	800430e <HAL_SPI_Init+0x192>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	2b30      	cmp	r3, #48	; 0x30
 80042fa:	d008      	beq.n	800430e <HAL_SPI_Init+0x192>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	2b38      	cmp	r3, #56	; 0x38
 8004302:	d004      	beq.n	800430e <HAL_SPI_Init+0x192>
 8004304:	f240 114d 	movw	r1, #333	; 0x14d
 8004308:	4840      	ldr	r0, [pc, #256]	; (800440c <HAL_SPI_Init+0x290>)
 800430a:	f7fc f946 	bl	800059a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d008      	beq.n	8004328 <HAL_SPI_Init+0x1ac>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	2b80      	cmp	r3, #128	; 0x80
 800431c:	d004      	beq.n	8004328 <HAL_SPI_Init+0x1ac>
 800431e:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8004322:	483a      	ldr	r0, [pc, #232]	; (800440c <HAL_SPI_Init+0x290>)
 8004324:	f7fc f939 	bl	800059a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	2b00      	cmp	r3, #0
 800432e:	d008      	beq.n	8004342 <HAL_SPI_Init+0x1c6>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	2b10      	cmp	r3, #16
 8004336:	d004      	beq.n	8004342 <HAL_SPI_Init+0x1c6>
 8004338:	f240 114f 	movw	r1, #335	; 0x14f
 800433c:	4833      	ldr	r0, [pc, #204]	; (800440c <HAL_SPI_Init+0x290>)
 800433e:	f7fc f92c 	bl	800059a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	2b00      	cmp	r3, #0
 8004348:	d119      	bne.n	800437e <HAL_SPI_Init+0x202>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d008      	beq.n	8004364 <HAL_SPI_Init+0x1e8>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	2b02      	cmp	r3, #2
 8004358:	d004      	beq.n	8004364 <HAL_SPI_Init+0x1e8>
 800435a:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800435e:	482b      	ldr	r0, [pc, #172]	; (800440c <HAL_SPI_Init+0x290>)
 8004360:	f7fc f91b 	bl	800059a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_SPI_Init+0x202>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d004      	beq.n	800437e <HAL_SPI_Init+0x202>
 8004374:	f240 1153 	movw	r1, #339	; 0x153
 8004378:	4824      	ldr	r0, [pc, #144]	; (800440c <HAL_SPI_Init+0x290>)
 800437a:	f7fc f90e 	bl	800059a <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d106      	bne.n	800439e <HAL_SPI_Init+0x222>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7fc f947 	bl	800062c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2202      	movs	r2, #2
 80043a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043b4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043be:	d902      	bls.n	80043c6 <HAL_SPI_Init+0x24a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043c0:	2300      	movs	r3, #0
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	e002      	b.n	80043cc <HAL_SPI_Init+0x250>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043ca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80043d4:	d007      	beq.n	80043e6 <HAL_SPI_Init+0x26a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043de:	d002      	beq.n	80043e6 <HAL_SPI_Init+0x26a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d113      	bne.n	8004416 <HAL_SPI_Init+0x29a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043f6:	d90b      	bls.n	8004410 <HAL_SPI_Init+0x294>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	631a      	str	r2, [r3, #48]	; 0x30
 80043fe:	e00a      	b.n	8004416 <HAL_SPI_Init+0x29a>
 8004400:	40013000 	.word	0x40013000
 8004404:	40003800 	.word	0x40003800
 8004408:	40003c00 	.word	0x40003c00
 800440c:	0800aee4 	.word	0x0800aee4
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	ea42 0103 	orr.w	r1, r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	0c1b      	lsrs	r3, r3, #16
 8004456:	f003 0204 	and.w	r2, r3, #4
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	ea42 0103 	orr.w	r1, r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	430a      	orrs	r2, r1
 8004476:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	69da      	ldr	r2, [r3, #28]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004486:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e0b9      	b.n	8004626 <HAL_TIM_Base_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a5e      	ldr	r2, [pc, #376]	; (8004630 <HAL_TIM_Base_Init+0x190>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d031      	beq.n	8004520 <HAL_TIM_Base_Init+0x80>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c4:	d02c      	beq.n	8004520 <HAL_TIM_Base_Init+0x80>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a5a      	ldr	r2, [pc, #360]	; (8004634 <HAL_TIM_Base_Init+0x194>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d027      	beq.n	8004520 <HAL_TIM_Base_Init+0x80>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a58      	ldr	r2, [pc, #352]	; (8004638 <HAL_TIM_Base_Init+0x198>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d022      	beq.n	8004520 <HAL_TIM_Base_Init+0x80>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a57      	ldr	r2, [pc, #348]	; (800463c <HAL_TIM_Base_Init+0x19c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d01d      	beq.n	8004520 <HAL_TIM_Base_Init+0x80>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a55      	ldr	r2, [pc, #340]	; (8004640 <HAL_TIM_Base_Init+0x1a0>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d018      	beq.n	8004520 <HAL_TIM_Base_Init+0x80>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a54      	ldr	r2, [pc, #336]	; (8004644 <HAL_TIM_Base_Init+0x1a4>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d013      	beq.n	8004520 <HAL_TIM_Base_Init+0x80>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a52      	ldr	r2, [pc, #328]	; (8004648 <HAL_TIM_Base_Init+0x1a8>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00e      	beq.n	8004520 <HAL_TIM_Base_Init+0x80>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a51      	ldr	r2, [pc, #324]	; (800464c <HAL_TIM_Base_Init+0x1ac>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d009      	beq.n	8004520 <HAL_TIM_Base_Init+0x80>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a4f      	ldr	r2, [pc, #316]	; (8004650 <HAL_TIM_Base_Init+0x1b0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d004      	beq.n	8004520 <HAL_TIM_Base_Init+0x80>
 8004516:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800451a:	484e      	ldr	r0, [pc, #312]	; (8004654 <HAL_TIM_Base_Init+0x1b4>)
 800451c:	f7fc f83d 	bl	800059a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d014      	beq.n	8004552 <HAL_TIM_Base_Init+0xb2>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2b10      	cmp	r3, #16
 800452e:	d010      	beq.n	8004552 <HAL_TIM_Base_Init+0xb2>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	2b20      	cmp	r3, #32
 8004536:	d00c      	beq.n	8004552 <HAL_TIM_Base_Init+0xb2>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2b40      	cmp	r3, #64	; 0x40
 800453e:	d008      	beq.n	8004552 <HAL_TIM_Base_Init+0xb2>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b60      	cmp	r3, #96	; 0x60
 8004546:	d004      	beq.n	8004552 <HAL_TIM_Base_Init+0xb2>
 8004548:	f240 111d 	movw	r1, #285	; 0x11d
 800454c:	4841      	ldr	r0, [pc, #260]	; (8004654 <HAL_TIM_Base_Init+0x1b4>)
 800454e:	f7fc f824 	bl	800059a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00e      	beq.n	8004578 <HAL_TIM_Base_Init+0xd8>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004562:	d009      	beq.n	8004578 <HAL_TIM_Base_Init+0xd8>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800456c:	d004      	beq.n	8004578 <HAL_TIM_Base_Init+0xd8>
 800456e:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004572:	4838      	ldr	r0, [pc, #224]	; (8004654 <HAL_TIM_Base_Init+0x1b4>)
 8004574:	f7fc f811 	bl	800059a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d008      	beq.n	8004592 <HAL_TIM_Base_Init+0xf2>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	2b80      	cmp	r3, #128	; 0x80
 8004586:	d004      	beq.n	8004592 <HAL_TIM_Base_Init+0xf2>
 8004588:	f240 111f 	movw	r1, #287	; 0x11f
 800458c:	4831      	ldr	r0, [pc, #196]	; (8004654 <HAL_TIM_Base_Init+0x1b4>)
 800458e:	f7fc f804 	bl	800059a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d106      	bne.n	80045ac <HAL_TIM_Base_Init+0x10c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fc fb16 	bl	8000bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3304      	adds	r3, #4
 80045bc:	4619      	mov	r1, r3
 80045be:	4610      	mov	r0, r2
 80045c0:	f001 f8da 	bl	8005778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	40012c00 	.word	0x40012c00
 8004634:	40000400 	.word	0x40000400
 8004638:	40000800 	.word	0x40000800
 800463c:	40001000 	.word	0x40001000
 8004640:	40001400 	.word	0x40001400
 8004644:	40013400 	.word	0x40013400
 8004648:	40014000 	.word	0x40014000
 800464c:	40014400 	.word	0x40014400
 8004650:	40014800 	.word	0x40014800
 8004654:	0800af1c 	.word	0x0800af1c

08004658 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a31      	ldr	r2, [pc, #196]	; (800472c <HAL_TIM_Base_Start_IT+0xd4>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d031      	beq.n	80046ce <HAL_TIM_Base_Start_IT+0x76>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004672:	d02c      	beq.n	80046ce <HAL_TIM_Base_Start_IT+0x76>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a2d      	ldr	r2, [pc, #180]	; (8004730 <HAL_TIM_Base_Start_IT+0xd8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d027      	beq.n	80046ce <HAL_TIM_Base_Start_IT+0x76>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a2c      	ldr	r2, [pc, #176]	; (8004734 <HAL_TIM_Base_Start_IT+0xdc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d022      	beq.n	80046ce <HAL_TIM_Base_Start_IT+0x76>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a2a      	ldr	r2, [pc, #168]	; (8004738 <HAL_TIM_Base_Start_IT+0xe0>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d01d      	beq.n	80046ce <HAL_TIM_Base_Start_IT+0x76>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a29      	ldr	r2, [pc, #164]	; (800473c <HAL_TIM_Base_Start_IT+0xe4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d018      	beq.n	80046ce <HAL_TIM_Base_Start_IT+0x76>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a27      	ldr	r2, [pc, #156]	; (8004740 <HAL_TIM_Base_Start_IT+0xe8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d013      	beq.n	80046ce <HAL_TIM_Base_Start_IT+0x76>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a26      	ldr	r2, [pc, #152]	; (8004744 <HAL_TIM_Base_Start_IT+0xec>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00e      	beq.n	80046ce <HAL_TIM_Base_Start_IT+0x76>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a24      	ldr	r2, [pc, #144]	; (8004748 <HAL_TIM_Base_Start_IT+0xf0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d009      	beq.n	80046ce <HAL_TIM_Base_Start_IT+0x76>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a23      	ldr	r2, [pc, #140]	; (800474c <HAL_TIM_Base_Start_IT+0xf4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d004      	beq.n	80046ce <HAL_TIM_Base_Start_IT+0x76>
 80046c4:	f240 11d1 	movw	r1, #465	; 0x1d1
 80046c8:	4821      	ldr	r0, [pc, #132]	; (8004750 <HAL_TIM_Base_Start_IT+0xf8>)
 80046ca:	f7fb ff66 	bl	800059a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d001      	beq.n	80046de <HAL_TIM_Base_Start_IT+0x86>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e021      	b.n	8004722 <HAL_TIM_Base_Start_IT+0xca>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2202      	movs	r2, #2
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0201 	orr.w	r2, r2, #1
 80046f4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	4b15      	ldr	r3, [pc, #84]	; (8004754 <HAL_TIM_Base_Start_IT+0xfc>)
 80046fe:	4013      	ands	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b06      	cmp	r3, #6
 8004706:	d00b      	beq.n	8004720 <HAL_TIM_Base_Start_IT+0xc8>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470e:	d007      	beq.n	8004720 <HAL_TIM_Base_Start_IT+0xc8>
  {
    __HAL_TIM_ENABLE(htim);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0201 	orr.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40012c00 	.word	0x40012c00
 8004730:	40000400 	.word	0x40000400
 8004734:	40000800 	.word	0x40000800
 8004738:	40001000 	.word	0x40001000
 800473c:	40001400 	.word	0x40001400
 8004740:	40013400 	.word	0x40013400
 8004744:	40014000 	.word	0x40014000
 8004748:	40014400 	.word	0x40014400
 800474c:	40014800 	.word	0x40014800
 8004750:	0800af1c 	.word	0x0800af1c
 8004754:	00010007 	.word	0x00010007

08004758 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e0b9      	b.n	80048de <HAL_TIM_PWM_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a5e      	ldr	r2, [pc, #376]	; (80048e8 <HAL_TIM_PWM_Init+0x190>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d031      	beq.n	80047d8 <HAL_TIM_PWM_Init+0x80>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800477c:	d02c      	beq.n	80047d8 <HAL_TIM_PWM_Init+0x80>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a5a      	ldr	r2, [pc, #360]	; (80048ec <HAL_TIM_PWM_Init+0x194>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d027      	beq.n	80047d8 <HAL_TIM_PWM_Init+0x80>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a58      	ldr	r2, [pc, #352]	; (80048f0 <HAL_TIM_PWM_Init+0x198>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d022      	beq.n	80047d8 <HAL_TIM_PWM_Init+0x80>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a57      	ldr	r2, [pc, #348]	; (80048f4 <HAL_TIM_PWM_Init+0x19c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d01d      	beq.n	80047d8 <HAL_TIM_PWM_Init+0x80>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a55      	ldr	r2, [pc, #340]	; (80048f8 <HAL_TIM_PWM_Init+0x1a0>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d018      	beq.n	80047d8 <HAL_TIM_PWM_Init+0x80>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a54      	ldr	r2, [pc, #336]	; (80048fc <HAL_TIM_PWM_Init+0x1a4>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d013      	beq.n	80047d8 <HAL_TIM_PWM_Init+0x80>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a52      	ldr	r2, [pc, #328]	; (8004900 <HAL_TIM_PWM_Init+0x1a8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00e      	beq.n	80047d8 <HAL_TIM_PWM_Init+0x80>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a51      	ldr	r2, [pc, #324]	; (8004904 <HAL_TIM_PWM_Init+0x1ac>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d009      	beq.n	80047d8 <HAL_TIM_PWM_Init+0x80>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a4f      	ldr	r2, [pc, #316]	; (8004908 <HAL_TIM_PWM_Init+0x1b0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d004      	beq.n	80047d8 <HAL_TIM_PWM_Init+0x80>
 80047ce:	f240 41ec 	movw	r1, #1260	; 0x4ec
 80047d2:	484e      	ldr	r0, [pc, #312]	; (800490c <HAL_TIM_PWM_Init+0x1b4>)
 80047d4:	f7fb fee1 	bl	800059a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d014      	beq.n	800480a <HAL_TIM_PWM_Init+0xb2>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2b10      	cmp	r3, #16
 80047e6:	d010      	beq.n	800480a <HAL_TIM_PWM_Init+0xb2>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b20      	cmp	r3, #32
 80047ee:	d00c      	beq.n	800480a <HAL_TIM_PWM_Init+0xb2>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b40      	cmp	r3, #64	; 0x40
 80047f6:	d008      	beq.n	800480a <HAL_TIM_PWM_Init+0xb2>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b60      	cmp	r3, #96	; 0x60
 80047fe:	d004      	beq.n	800480a <HAL_TIM_PWM_Init+0xb2>
 8004800:	f240 41ed 	movw	r1, #1261	; 0x4ed
 8004804:	4841      	ldr	r0, [pc, #260]	; (800490c <HAL_TIM_PWM_Init+0x1b4>)
 8004806:	f7fb fec8 	bl	800059a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00e      	beq.n	8004830 <HAL_TIM_PWM_Init+0xd8>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800481a:	d009      	beq.n	8004830 <HAL_TIM_PWM_Init+0xd8>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004824:	d004      	beq.n	8004830 <HAL_TIM_PWM_Init+0xd8>
 8004826:	f240 41ee 	movw	r1, #1262	; 0x4ee
 800482a:	4838      	ldr	r0, [pc, #224]	; (800490c <HAL_TIM_PWM_Init+0x1b4>)
 800482c:	f7fb feb5 	bl	800059a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d008      	beq.n	800484a <HAL_TIM_PWM_Init+0xf2>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	2b80      	cmp	r3, #128	; 0x80
 800483e:	d004      	beq.n	800484a <HAL_TIM_PWM_Init+0xf2>
 8004840:	f240 41ef 	movw	r1, #1263	; 0x4ef
 8004844:	4831      	ldr	r0, [pc, #196]	; (800490c <HAL_TIM_PWM_Init+0x1b4>)
 8004846:	f7fb fea8 	bl	800059a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <HAL_TIM_PWM_Init+0x10c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fc f970 	bl	8000b44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3304      	adds	r3, #4
 8004874:	4619      	mov	r1, r3
 8004876:	4610      	mov	r0, r2
 8004878:	f000 ff7e 	bl	8005778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	40012c00 	.word	0x40012c00
 80048ec:	40000400 	.word	0x40000400
 80048f0:	40000800 	.word	0x40000800
 80048f4:	40001000 	.word	0x40001000
 80048f8:	40001400 	.word	0x40001400
 80048fc:	40013400 	.word	0x40013400
 8004900:	40014000 	.word	0x40014000
 8004904:	40014400 	.word	0x40014400
 8004908:	40014800 	.word	0x40014800
 800490c:	0800af1c 	.word	0x0800af1c

08004910 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
 800491c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a94      	ldr	r2, [pc, #592]	; (8004b74 <HAL_TIM_PWM_Start_DMA+0x264>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d111      	bne.n	800494c <HAL_TIM_PWM_Start_DMA+0x3c>
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d078      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b04      	cmp	r3, #4
 8004932:	d075      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b08      	cmp	r3, #8
 8004938:	d072      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2b0c      	cmp	r3, #12
 800493e:	d06f      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b10      	cmp	r3, #16
 8004944:	d06c      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b14      	cmp	r3, #20
 800494a:	d069      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004954:	d10b      	bne.n	800496e <HAL_TIM_PWM_Start_DMA+0x5e>
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d061      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b04      	cmp	r3, #4
 8004960:	d05e      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b08      	cmp	r3, #8
 8004966:	d05b      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b0c      	cmp	r3, #12
 800496c:	d058      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a81      	ldr	r2, [pc, #516]	; (8004b78 <HAL_TIM_PWM_Start_DMA+0x268>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d10b      	bne.n	8004990 <HAL_TIM_PWM_Start_DMA+0x80>
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d050      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b04      	cmp	r3, #4
 8004982:	d04d      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b08      	cmp	r3, #8
 8004988:	d04a      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2b0c      	cmp	r3, #12
 800498e:	d047      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a79      	ldr	r2, [pc, #484]	; (8004b7c <HAL_TIM_PWM_Start_DMA+0x26c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d10b      	bne.n	80049b2 <HAL_TIM_PWM_Start_DMA+0xa2>
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d03f      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d03c      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d039      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b0c      	cmp	r3, #12
 80049b0:	d036      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a72      	ldr	r2, [pc, #456]	; (8004b80 <HAL_TIM_PWM_Start_DMA+0x270>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d111      	bne.n	80049e0 <HAL_TIM_PWM_Start_DMA+0xd0>
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d02e      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d02b      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d028      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b0c      	cmp	r3, #12
 80049d2:	d025      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2b10      	cmp	r3, #16
 80049d8:	d022      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2b14      	cmp	r3, #20
 80049de:	d01f      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a67      	ldr	r2, [pc, #412]	; (8004b84 <HAL_TIM_PWM_Start_DMA+0x274>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d105      	bne.n	80049f6 <HAL_TIM_PWM_Start_DMA+0xe6>
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d017      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d014      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a63      	ldr	r2, [pc, #396]	; (8004b88 <HAL_TIM_PWM_Start_DMA+0x278>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d102      	bne.n	8004a06 <HAL_TIM_PWM_Start_DMA+0xf6>
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00c      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a60      	ldr	r2, [pc, #384]	; (8004b8c <HAL_TIM_PWM_Start_DMA+0x27c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d102      	bne.n	8004a16 <HAL_TIM_PWM_Start_DMA+0x106>
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d004      	beq.n	8004a20 <HAL_TIM_PWM_Start_DMA+0x110>
 8004a16:	f240 615f 	movw	r1, #1631	; 0x65f
 8004a1a:	485d      	ldr	r0, [pc, #372]	; (8004b90 <HAL_TIM_PWM_Start_DMA+0x280>)
 8004a1c:	f7fb fdbd 	bl	800059a <assert_failed>

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <HAL_TIM_PWM_Start_DMA+0x12a>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	bf0c      	ite	eq
 8004a32:	2301      	moveq	r3, #1
 8004a34:	2300      	movne	r3, #0
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	e03c      	b.n	8004ab4 <HAL_TIM_PWM_Start_DMA+0x1a4>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d109      	bne.n	8004a54 <HAL_TIM_PWM_Start_DMA+0x144>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	bf0c      	ite	eq
 8004a4c:	2301      	moveq	r3, #1
 8004a4e:	2300      	movne	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	e02f      	b.n	8004ab4 <HAL_TIM_PWM_Start_DMA+0x1a4>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b08      	cmp	r3, #8
 8004a58:	d109      	bne.n	8004a6e <HAL_TIM_PWM_Start_DMA+0x15e>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	bf0c      	ite	eq
 8004a66:	2301      	moveq	r3, #1
 8004a68:	2300      	movne	r3, #0
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	e022      	b.n	8004ab4 <HAL_TIM_PWM_Start_DMA+0x1a4>
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2b0c      	cmp	r3, #12
 8004a72:	d109      	bne.n	8004a88 <HAL_TIM_PWM_Start_DMA+0x178>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	bf0c      	ite	eq
 8004a80:	2301      	moveq	r3, #1
 8004a82:	2300      	movne	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	e015      	b.n	8004ab4 <HAL_TIM_PWM_Start_DMA+0x1a4>
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b10      	cmp	r3, #16
 8004a8c:	d109      	bne.n	8004aa2 <HAL_TIM_PWM_Start_DMA+0x192>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	bf0c      	ite	eq
 8004a9a:	2301      	moveq	r3, #1
 8004a9c:	2300      	movne	r3, #0
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	e008      	b.n	8004ab4 <HAL_TIM_PWM_Start_DMA+0x1a4>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	bf0c      	ite	eq
 8004aae:	2301      	moveq	r3, #1
 8004ab0:	2300      	movne	r3, #0
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    return HAL_BUSY;
 8004ab8:	2302      	movs	r3, #2
 8004aba:	e187      	b.n	8004dcc <HAL_TIM_PWM_Start_DMA+0x4bc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d109      	bne.n	8004ad6 <HAL_TIM_PWM_Start_DMA+0x1c6>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	bf0c      	ite	eq
 8004ace:	2301      	moveq	r3, #1
 8004ad0:	2300      	movne	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	e03c      	b.n	8004b50 <HAL_TIM_PWM_Start_DMA+0x240>
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d109      	bne.n	8004af0 <HAL_TIM_PWM_Start_DMA+0x1e0>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	bf0c      	ite	eq
 8004ae8:	2301      	moveq	r3, #1
 8004aea:	2300      	movne	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	e02f      	b.n	8004b50 <HAL_TIM_PWM_Start_DMA+0x240>
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2b08      	cmp	r3, #8
 8004af4:	d109      	bne.n	8004b0a <HAL_TIM_PWM_Start_DMA+0x1fa>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	bf0c      	ite	eq
 8004b02:	2301      	moveq	r3, #1
 8004b04:	2300      	movne	r3, #0
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	e022      	b.n	8004b50 <HAL_TIM_PWM_Start_DMA+0x240>
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b0c      	cmp	r3, #12
 8004b0e:	d109      	bne.n	8004b24 <HAL_TIM_PWM_Start_DMA+0x214>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	bf0c      	ite	eq
 8004b1c:	2301      	moveq	r3, #1
 8004b1e:	2300      	movne	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	e015      	b.n	8004b50 <HAL_TIM_PWM_Start_DMA+0x240>
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2b10      	cmp	r3, #16
 8004b28:	d109      	bne.n	8004b3e <HAL_TIM_PWM_Start_DMA+0x22e>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	bf0c      	ite	eq
 8004b36:	2301      	moveq	r3, #1
 8004b38:	2300      	movne	r3, #0
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	e008      	b.n	8004b50 <HAL_TIM_PWM_Start_DMA+0x240>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	bf0c      	ite	eq
 8004b4a:	2301      	moveq	r3, #1
 8004b4c:	2300      	movne	r3, #0
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d044      	beq.n	8004bde <HAL_TIM_PWM_Start_DMA+0x2ce>
  {
    if ((pData == NULL) && (Length > 0U))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d104      	bne.n	8004b64 <HAL_TIM_PWM_Start_DMA+0x254>
 8004b5a:	887b      	ldrh	r3, [r7, #2]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <HAL_TIM_PWM_Start_DMA+0x254>
    {
      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e133      	b.n	8004dcc <HAL_TIM_PWM_Start_DMA+0x4bc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d114      	bne.n	8004b94 <HAL_TIM_PWM_Start_DMA+0x284>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b72:	e036      	b.n	8004be2 <HAL_TIM_PWM_Start_DMA+0x2d2>
 8004b74:	40012c00 	.word	0x40012c00
 8004b78:	40000400 	.word	0x40000400
 8004b7c:	40000800 	.word	0x40000800
 8004b80:	40013400 	.word	0x40013400
 8004b84:	40014000 	.word	0x40014000
 8004b88:	40014400 	.word	0x40014400
 8004b8c:	40014800 	.word	0x40014800
 8004b90:	0800af1c 	.word	0x0800af1c
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d104      	bne.n	8004ba4 <HAL_TIM_PWM_Start_DMA+0x294>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ba2:	e01e      	b.n	8004be2 <HAL_TIM_PWM_Start_DMA+0x2d2>
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b08      	cmp	r3, #8
 8004ba8:	d104      	bne.n	8004bb4 <HAL_TIM_PWM_Start_DMA+0x2a4>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2202      	movs	r2, #2
 8004bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bb2:	e016      	b.n	8004be2 <HAL_TIM_PWM_Start_DMA+0x2d2>
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b0c      	cmp	r3, #12
 8004bb8:	d104      	bne.n	8004bc4 <HAL_TIM_PWM_Start_DMA+0x2b4>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bc2:	e00e      	b.n	8004be2 <HAL_TIM_PWM_Start_DMA+0x2d2>
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b10      	cmp	r3, #16
 8004bc8:	d104      	bne.n	8004bd4 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bd2:	e006      	b.n	8004be2 <HAL_TIM_PWM_Start_DMA+0x2d2>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bdc:	e001      	b.n	8004be2 <HAL_TIM_PWM_Start_DMA+0x2d2>
    }
  }
  else
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e0f4      	b.n	8004dcc <HAL_TIM_PWM_Start_DMA+0x4bc>
  }

  switch (Channel)
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2b0c      	cmp	r3, #12
 8004be6:	f200 80ad 	bhi.w	8004d44 <HAL_TIM_PWM_Start_DMA+0x434>
 8004bea:	a201      	add	r2, pc, #4	; (adr r2, 8004bf0 <HAL_TIM_PWM_Start_DMA+0x2e0>)
 8004bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf0:	08004c25 	.word	0x08004c25
 8004bf4:	08004d45 	.word	0x08004d45
 8004bf8:	08004d45 	.word	0x08004d45
 8004bfc:	08004d45 	.word	0x08004d45
 8004c00:	08004c6d 	.word	0x08004c6d
 8004c04:	08004d45 	.word	0x08004d45
 8004c08:	08004d45 	.word	0x08004d45
 8004c0c:	08004d45 	.word	0x08004d45
 8004c10:	08004cb5 	.word	0x08004cb5
 8004c14:	08004d45 	.word	0x08004d45
 8004c18:	08004d45 	.word	0x08004d45
 8004c1c:	08004d45 	.word	0x08004d45
 8004c20:	08004cfd 	.word	0x08004cfd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	4a6a      	ldr	r2, [pc, #424]	; (8004dd4 <HAL_TIM_PWM_Start_DMA+0x4c4>)
 8004c2a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	4a69      	ldr	r2, [pc, #420]	; (8004dd8 <HAL_TIM_PWM_Start_DMA+0x4c8>)
 8004c32:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	4a68      	ldr	r2, [pc, #416]	; (8004ddc <HAL_TIM_PWM_Start_DMA+0x4cc>)
 8004c3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3334      	adds	r3, #52	; 0x34
 8004c48:	461a      	mov	r2, r3
 8004c4a:	887b      	ldrh	r3, [r7, #2]
 8004c4c:	f7fc fba2 	bl	8001394 <HAL_DMA_Start_IT>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <HAL_TIM_PWM_Start_DMA+0x34a>
      {
        return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e0b8      	b.n	8004dcc <HAL_TIM_PWM_Start_DMA+0x4bc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c68:	60da      	str	r2, [r3, #12]
      break;
 8004c6a:	e06c      	b.n	8004d46 <HAL_TIM_PWM_Start_DMA+0x436>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c70:	4a58      	ldr	r2, [pc, #352]	; (8004dd4 <HAL_TIM_PWM_Start_DMA+0x4c4>)
 8004c72:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c78:	4a57      	ldr	r2, [pc, #348]	; (8004dd8 <HAL_TIM_PWM_Start_DMA+0x4c8>)
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c80:	4a56      	ldr	r2, [pc, #344]	; (8004ddc <HAL_TIM_PWM_Start_DMA+0x4cc>)
 8004c82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3338      	adds	r3, #56	; 0x38
 8004c90:	461a      	mov	r2, r3
 8004c92:	887b      	ldrh	r3, [r7, #2]
 8004c94:	f7fc fb7e 	bl	8001394 <HAL_DMA_Start_IT>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <HAL_TIM_PWM_Start_DMA+0x392>
      {
        return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e094      	b.n	8004dcc <HAL_TIM_PWM_Start_DMA+0x4bc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cb0:	60da      	str	r2, [r3, #12]
      break;
 8004cb2:	e048      	b.n	8004d46 <HAL_TIM_PWM_Start_DMA+0x436>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	4a46      	ldr	r2, [pc, #280]	; (8004dd4 <HAL_TIM_PWM_Start_DMA+0x4c4>)
 8004cba:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	4a45      	ldr	r2, [pc, #276]	; (8004dd8 <HAL_TIM_PWM_Start_DMA+0x4c8>)
 8004cc2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	4a44      	ldr	r2, [pc, #272]	; (8004ddc <HAL_TIM_PWM_Start_DMA+0x4cc>)
 8004cca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	333c      	adds	r3, #60	; 0x3c
 8004cd8:	461a      	mov	r2, r3
 8004cda:	887b      	ldrh	r3, [r7, #2]
 8004cdc:	f7fc fb5a 	bl	8001394 <HAL_DMA_Start_IT>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <HAL_TIM_PWM_Start_DMA+0x3da>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e070      	b.n	8004dcc <HAL_TIM_PWM_Start_DMA+0x4bc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cf8:	60da      	str	r2, [r3, #12]
      break;
 8004cfa:	e024      	b.n	8004d46 <HAL_TIM_PWM_Start_DMA+0x436>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d00:	4a34      	ldr	r2, [pc, #208]	; (8004dd4 <HAL_TIM_PWM_Start_DMA+0x4c4>)
 8004d02:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d08:	4a33      	ldr	r2, [pc, #204]	; (8004dd8 <HAL_TIM_PWM_Start_DMA+0x4c8>)
 8004d0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d10:	4a32      	ldr	r2, [pc, #200]	; (8004ddc <HAL_TIM_PWM_Start_DMA+0x4cc>)
 8004d12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3340      	adds	r3, #64	; 0x40
 8004d20:	461a      	mov	r2, r3
 8004d22:	887b      	ldrh	r3, [r7, #2]
 8004d24:	f7fc fb36 	bl	8001394 <HAL_DMA_Start_IT>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <HAL_TIM_PWM_Start_DMA+0x422>
      {
        return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e04c      	b.n	8004dcc <HAL_TIM_PWM_Start_DMA+0x4bc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68da      	ldr	r2, [r3, #12]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d40:	60da      	str	r2, [r3, #12]
      break;
 8004d42:	e000      	b.n	8004d46 <HAL_TIM_PWM_Start_DMA+0x436>
    }

    default:
      break;
 8004d44:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f001 f93c 	bl	8005fcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a21      	ldr	r2, [pc, #132]	; (8004de0 <HAL_TIM_PWM_Start_DMA+0x4d0>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d013      	beq.n	8004d86 <HAL_TIM_PWM_Start_DMA+0x476>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a20      	ldr	r2, [pc, #128]	; (8004de4 <HAL_TIM_PWM_Start_DMA+0x4d4>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d00e      	beq.n	8004d86 <HAL_TIM_PWM_Start_DMA+0x476>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a1e      	ldr	r2, [pc, #120]	; (8004de8 <HAL_TIM_PWM_Start_DMA+0x4d8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d009      	beq.n	8004d86 <HAL_TIM_PWM_Start_DMA+0x476>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a1d      	ldr	r2, [pc, #116]	; (8004dec <HAL_TIM_PWM_Start_DMA+0x4dc>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d004      	beq.n	8004d86 <HAL_TIM_PWM_Start_DMA+0x476>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a1b      	ldr	r2, [pc, #108]	; (8004df0 <HAL_TIM_PWM_Start_DMA+0x4e0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d101      	bne.n	8004d8a <HAL_TIM_PWM_Start_DMA+0x47a>
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <HAL_TIM_PWM_Start_DMA+0x47c>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d007      	beq.n	8004da0 <HAL_TIM_PWM_Start_DMA+0x490>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d9e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	4b13      	ldr	r3, [pc, #76]	; (8004df4 <HAL_TIM_PWM_Start_DMA+0x4e4>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	2b06      	cmp	r3, #6
 8004db0:	d00b      	beq.n	8004dca <HAL_TIM_PWM_Start_DMA+0x4ba>
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db8:	d007      	beq.n	8004dca <HAL_TIM_PWM_Start_DMA+0x4ba>
  {
    __HAL_TIM_ENABLE(htim);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f042 0201 	orr.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	08005667 	.word	0x08005667
 8004dd8:	0800570f 	.word	0x0800570f
 8004ddc:	080055d5 	.word	0x080055d5
 8004de0:	40012c00 	.word	0x40012c00
 8004de4:	40013400 	.word	0x40013400
 8004de8:	40014000 	.word	0x40014000
 8004dec:	40014400 	.word	0x40014400
 8004df0:	40014800 	.word	0x40014800
 8004df4:	00010007 	.word	0x00010007

08004df8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d122      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d11b      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f06f 0202 	mvn.w	r2, #2
 8004e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 fb98 	bl	8005570 <HAL_TIM_IC_CaptureCallback>
 8004e40:	e005      	b.n	8004e4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 fb8a 	bl	800555c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fb9b 	bl	8005584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d122      	bne.n	8004ea8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d11b      	bne.n	8004ea8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f06f 0204 	mvn.w	r2, #4
 8004e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fb6e 	bl	8005570 <HAL_TIM_IC_CaptureCallback>
 8004e94:	e005      	b.n	8004ea2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fb60 	bl	800555c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 fb71 	bl	8005584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d122      	bne.n	8004efc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d11b      	bne.n	8004efc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f06f 0208 	mvn.w	r2, #8
 8004ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2204      	movs	r2, #4
 8004ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fb44 	bl	8005570 <HAL_TIM_IC_CaptureCallback>
 8004ee8:	e005      	b.n	8004ef6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fb36 	bl	800555c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fb47 	bl	8005584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f003 0310 	and.w	r3, r3, #16
 8004f06:	2b10      	cmp	r3, #16
 8004f08:	d122      	bne.n	8004f50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f003 0310 	and.w	r3, r3, #16
 8004f14:	2b10      	cmp	r3, #16
 8004f16:	d11b      	bne.n	8004f50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f06f 0210 	mvn.w	r2, #16
 8004f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2208      	movs	r2, #8
 8004f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fb1a 	bl	8005570 <HAL_TIM_IC_CaptureCallback>
 8004f3c:	e005      	b.n	8004f4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 fb0c 	bl	800555c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fb1d 	bl	8005584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d10e      	bne.n	8004f7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d107      	bne.n	8004f7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f06f 0201 	mvn.w	r2, #1
 8004f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fb faf6 	bl	8000568 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f86:	2b80      	cmp	r3, #128	; 0x80
 8004f88:	d10e      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f94:	2b80      	cmp	r3, #128	; 0x80
 8004f96:	d107      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f001 fb4e 	bl	8006644 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb6:	d10e      	bne.n	8004fd6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc2:	2b80      	cmp	r3, #128	; 0x80
 8004fc4:	d107      	bne.n	8004fd6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f001 fb41 	bl	8006658 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe0:	2b40      	cmp	r3, #64	; 0x40
 8004fe2:	d10e      	bne.n	8005002 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fee:	2b40      	cmp	r3, #64	; 0x40
 8004ff0:	d107      	bne.n	8005002 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fad5 	bl	80055ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f003 0320 	and.w	r3, r3, #32
 800500c:	2b20      	cmp	r3, #32
 800500e:	d10e      	bne.n	800502e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f003 0320 	and.w	r3, r3, #32
 800501a:	2b20      	cmp	r3, #32
 800501c:	d107      	bne.n	800502e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f06f 0220 	mvn.w	r2, #32
 8005026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f001 fb01 	bl	8006630 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005038:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800503c:	d10f      	bne.n	800505e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800504c:	d107      	bne.n	800505e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f001 fb07 	bl	800666c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005068:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800506c:	d10f      	bne.n	800508e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005078:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800507c:	d107      	bne.n	800508e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f001 faf9 	bl	8006680 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800509c:	d10f      	bne.n	80050be <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050ac:	d107      	bne.n	80050be <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80050b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f001 faeb 	bl	8006694 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050cc:	d10f      	bne.n	80050ee <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050dc:	d107      	bne.n	80050ee <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80050e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f001 fadd 	bl	80066a8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050ee:	bf00      	nop
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
	...

080050f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d016      	beq.n	8005138 <HAL_TIM_PWM_ConfigChannel+0x40>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b04      	cmp	r3, #4
 800510e:	d013      	beq.n	8005138 <HAL_TIM_PWM_ConfigChannel+0x40>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b08      	cmp	r3, #8
 8005114:	d010      	beq.n	8005138 <HAL_TIM_PWM_ConfigChannel+0x40>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b0c      	cmp	r3, #12
 800511a:	d00d      	beq.n	8005138 <HAL_TIM_PWM_ConfigChannel+0x40>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b10      	cmp	r3, #16
 8005120:	d00a      	beq.n	8005138 <HAL_TIM_PWM_ConfigChannel+0x40>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b14      	cmp	r3, #20
 8005126:	d007      	beq.n	8005138 <HAL_TIM_PWM_ConfigChannel+0x40>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b3c      	cmp	r3, #60	; 0x3c
 800512c:	d004      	beq.n	8005138 <HAL_TIM_PWM_ConfigChannel+0x40>
 800512e:	f241 0118 	movw	r1, #4120	; 0x1018
 8005132:	4886      	ldr	r0, [pc, #536]	; (800534c <HAL_TIM_PWM_ConfigChannel+0x254>)
 8005134:	f7fb fa31 	bl	800059a <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b60      	cmp	r3, #96	; 0x60
 800513e:	d01c      	beq.n	800517a <HAL_TIM_PWM_ConfigChannel+0x82>
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b70      	cmp	r3, #112	; 0x70
 8005146:	d018      	beq.n	800517a <HAL_TIM_PWM_ConfigChannel+0x82>
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a80      	ldr	r2, [pc, #512]	; (8005350 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d013      	beq.n	800517a <HAL_TIM_PWM_ConfigChannel+0x82>
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a7f      	ldr	r2, [pc, #508]	; (8005354 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00e      	beq.n	800517a <HAL_TIM_PWM_ConfigChannel+0x82>
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a7d      	ldr	r2, [pc, #500]	; (8005358 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d009      	beq.n	800517a <HAL_TIM_PWM_ConfigChannel+0x82>
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a7c      	ldr	r2, [pc, #496]	; (800535c <HAL_TIM_PWM_ConfigChannel+0x264>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d004      	beq.n	800517a <HAL_TIM_PWM_ConfigChannel+0x82>
 8005170:	f241 0119 	movw	r1, #4121	; 0x1019
 8005174:	4875      	ldr	r0, [pc, #468]	; (800534c <HAL_TIM_PWM_ConfigChannel+0x254>)
 8005176:	f7fb fa10 	bl	800059a <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d008      	beq.n	8005194 <HAL_TIM_PWM_ConfigChannel+0x9c>
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2b02      	cmp	r3, #2
 8005188:	d004      	beq.n	8005194 <HAL_TIM_PWM_ConfigChannel+0x9c>
 800518a:	f241 011a 	movw	r1, #4122	; 0x101a
 800518e:	486f      	ldr	r0, [pc, #444]	; (800534c <HAL_TIM_PWM_ConfigChannel+0x254>)
 8005190:	f7fb fa03 	bl	800059a <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d008      	beq.n	80051ae <HAL_TIM_PWM_ConfigChannel+0xb6>
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d004      	beq.n	80051ae <HAL_TIM_PWM_ConfigChannel+0xb6>
 80051a4:	f241 011b 	movw	r1, #4123	; 0x101b
 80051a8:	4868      	ldr	r0, [pc, #416]	; (800534c <HAL_TIM_PWM_ConfigChannel+0x254>)
 80051aa:	f7fb f9f6 	bl	800059a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d101      	bne.n	80051bc <HAL_TIM_PWM_ConfigChannel+0xc4>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e1c1      	b.n	8005540 <HAL_TIM_PWM_ConfigChannel+0x448>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b14      	cmp	r3, #20
 80051c8:	f200 81b4 	bhi.w	8005534 <HAL_TIM_PWM_ConfigChannel+0x43c>
 80051cc:	a201      	add	r2, pc, #4	; (adr r2, 80051d4 <HAL_TIM_PWM_ConfigChannel+0xdc>)
 80051ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d2:	bf00      	nop
 80051d4:	08005229 	.word	0x08005229
 80051d8:	08005535 	.word	0x08005535
 80051dc:	08005535 	.word	0x08005535
 80051e0:	08005535 	.word	0x08005535
 80051e4:	080052c3 	.word	0x080052c3
 80051e8:	08005535 	.word	0x08005535
 80051ec:	08005535 	.word	0x08005535
 80051f0:	08005535 	.word	0x08005535
 80051f4:	0800537d 	.word	0x0800537d
 80051f8:	08005535 	.word	0x08005535
 80051fc:	08005535 	.word	0x08005535
 8005200:	08005535 	.word	0x08005535
 8005204:	080053f9 	.word	0x080053f9
 8005208:	08005535 	.word	0x08005535
 800520c:	08005535 	.word	0x08005535
 8005210:	08005535 	.word	0x08005535
 8005214:	08005477 	.word	0x08005477
 8005218:	08005535 	.word	0x08005535
 800521c:	08005535 	.word	0x08005535
 8005220:	08005535 	.word	0x08005535
 8005224:	080054d5 	.word	0x080054d5
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a4c      	ldr	r2, [pc, #304]	; (8005360 <HAL_TIM_PWM_ConfigChannel+0x268>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d027      	beq.n	8005282 <HAL_TIM_PWM_ConfigChannel+0x18a>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523a:	d022      	beq.n	8005282 <HAL_TIM_PWM_ConfigChannel+0x18a>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a48      	ldr	r2, [pc, #288]	; (8005364 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d01d      	beq.n	8005282 <HAL_TIM_PWM_ConfigChannel+0x18a>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a47      	ldr	r2, [pc, #284]	; (8005368 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d018      	beq.n	8005282 <HAL_TIM_PWM_ConfigChannel+0x18a>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a45      	ldr	r2, [pc, #276]	; (800536c <HAL_TIM_PWM_ConfigChannel+0x274>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d013      	beq.n	8005282 <HAL_TIM_PWM_ConfigChannel+0x18a>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a44      	ldr	r2, [pc, #272]	; (8005370 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d00e      	beq.n	8005282 <HAL_TIM_PWM_ConfigChannel+0x18a>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a42      	ldr	r2, [pc, #264]	; (8005374 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d009      	beq.n	8005282 <HAL_TIM_PWM_ConfigChannel+0x18a>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a41      	ldr	r2, [pc, #260]	; (8005378 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d004      	beq.n	8005282 <HAL_TIM_PWM_ConfigChannel+0x18a>
 8005278:	f241 0125 	movw	r1, #4133	; 0x1025
 800527c:	4833      	ldr	r0, [pc, #204]	; (800534c <HAL_TIM_PWM_ConfigChannel+0x254>)
 800527e:	f7fb f98c 	bl	800059a <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fb05 	bl	8005898 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	699a      	ldr	r2, [r3, #24]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f042 0208 	orr.w	r2, r2, #8
 800529c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	699a      	ldr	r2, [r3, #24]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 0204 	bic.w	r2, r2, #4
 80052ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6999      	ldr	r1, [r3, #24]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	691a      	ldr	r2, [r3, #16]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	619a      	str	r2, [r3, #24]
      break;
 80052c0:	e139      	b.n	8005536 <HAL_TIM_PWM_ConfigChannel+0x43e>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a26      	ldr	r2, [pc, #152]	; (8005360 <HAL_TIM_PWM_ConfigChannel+0x268>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d01d      	beq.n	8005308 <HAL_TIM_PWM_ConfigChannel+0x210>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d4:	d018      	beq.n	8005308 <HAL_TIM_PWM_ConfigChannel+0x210>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a22      	ldr	r2, [pc, #136]	; (8005364 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d013      	beq.n	8005308 <HAL_TIM_PWM_ConfigChannel+0x210>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a20      	ldr	r2, [pc, #128]	; (8005368 <HAL_TIM_PWM_ConfigChannel+0x270>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00e      	beq.n	8005308 <HAL_TIM_PWM_ConfigChannel+0x210>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a1f      	ldr	r2, [pc, #124]	; (800536c <HAL_TIM_PWM_ConfigChannel+0x274>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d009      	beq.n	8005308 <HAL_TIM_PWM_ConfigChannel+0x210>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a1d      	ldr	r2, [pc, #116]	; (8005370 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d004      	beq.n	8005308 <HAL_TIM_PWM_ConfigChannel+0x210>
 80052fe:	f241 0136 	movw	r1, #4150	; 0x1036
 8005302:	4812      	ldr	r0, [pc, #72]	; (800534c <HAL_TIM_PWM_ConfigChannel+0x254>)
 8005304:	f7fb f949 	bl	800059a <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68b9      	ldr	r1, [r7, #8]
 800530e:	4618      	mov	r0, r3
 8005310:	f000 fb7c 	bl	8005a0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699a      	ldr	r2, [r3, #24]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699a      	ldr	r2, [r3, #24]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6999      	ldr	r1, [r3, #24]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	021a      	lsls	r2, r3, #8
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	619a      	str	r2, [r3, #24]
      break;
 8005348:	e0f5      	b.n	8005536 <HAL_TIM_PWM_ConfigChannel+0x43e>
 800534a:	bf00      	nop
 800534c:	0800af1c 	.word	0x0800af1c
 8005350:	00010040 	.word	0x00010040
 8005354:	00010050 	.word	0x00010050
 8005358:	00010060 	.word	0x00010060
 800535c:	00010070 	.word	0x00010070
 8005360:	40012c00 	.word	0x40012c00
 8005364:	40000400 	.word	0x40000400
 8005368:	40000800 	.word	0x40000800
 800536c:	40013400 	.word	0x40013400
 8005370:	40014000 	.word	0x40014000
 8005374:	40014400 	.word	0x40014400
 8005378:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a71      	ldr	r2, [pc, #452]	; (8005548 <HAL_TIM_PWM_ConfigChannel+0x450>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d018      	beq.n	80053b8 <HAL_TIM_PWM_ConfigChannel+0x2c0>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538e:	d013      	beq.n	80053b8 <HAL_TIM_PWM_ConfigChannel+0x2c0>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a6d      	ldr	r2, [pc, #436]	; (800554c <HAL_TIM_PWM_ConfigChannel+0x454>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00e      	beq.n	80053b8 <HAL_TIM_PWM_ConfigChannel+0x2c0>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a6c      	ldr	r2, [pc, #432]	; (8005550 <HAL_TIM_PWM_ConfigChannel+0x458>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d009      	beq.n	80053b8 <HAL_TIM_PWM_ConfigChannel+0x2c0>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a6a      	ldr	r2, [pc, #424]	; (8005554 <HAL_TIM_PWM_ConfigChannel+0x45c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d004      	beq.n	80053b8 <HAL_TIM_PWM_ConfigChannel+0x2c0>
 80053ae:	f241 0147 	movw	r1, #4167	; 0x1047
 80053b2:	4869      	ldr	r0, [pc, #420]	; (8005558 <HAL_TIM_PWM_ConfigChannel+0x460>)
 80053b4:	f7fb f8f1 	bl	800059a <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 fbd6 	bl	8005b70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	69da      	ldr	r2, [r3, #28]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0208 	orr.w	r2, r2, #8
 80053d2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	69da      	ldr	r2, [r3, #28]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0204 	bic.w	r2, r2, #4
 80053e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	69d9      	ldr	r1, [r3, #28]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	691a      	ldr	r2, [r3, #16]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	61da      	str	r2, [r3, #28]
      break;
 80053f6:	e09e      	b.n	8005536 <HAL_TIM_PWM_ConfigChannel+0x43e>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a52      	ldr	r2, [pc, #328]	; (8005548 <HAL_TIM_PWM_ConfigChannel+0x450>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d018      	beq.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800540a:	d013      	beq.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a4e      	ldr	r2, [pc, #312]	; (800554c <HAL_TIM_PWM_ConfigChannel+0x454>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00e      	beq.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a4d      	ldr	r2, [pc, #308]	; (8005550 <HAL_TIM_PWM_ConfigChannel+0x458>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d009      	beq.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a4b      	ldr	r2, [pc, #300]	; (8005554 <HAL_TIM_PWM_ConfigChannel+0x45c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d004      	beq.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800542a:	f241 0158 	movw	r1, #4184	; 0x1058
 800542e:	484a      	ldr	r0, [pc, #296]	; (8005558 <HAL_TIM_PWM_ConfigChannel+0x460>)
 8005430:	f7fb f8b3 	bl	800059a <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fc4a 	bl	8005cd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	69da      	ldr	r2, [r3, #28]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800544e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	69da      	ldr	r2, [r3, #28]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800545e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	69d9      	ldr	r1, [r3, #28]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	021a      	lsls	r2, r3, #8
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	61da      	str	r2, [r3, #28]
      break;
 8005474:	e05f      	b.n	8005536 <HAL_TIM_PWM_ConfigChannel+0x43e>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a33      	ldr	r2, [pc, #204]	; (8005548 <HAL_TIM_PWM_ConfigChannel+0x450>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d009      	beq.n	8005494 <HAL_TIM_PWM_ConfigChannel+0x39c>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a33      	ldr	r2, [pc, #204]	; (8005554 <HAL_TIM_PWM_ConfigChannel+0x45c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d004      	beq.n	8005494 <HAL_TIM_PWM_ConfigChannel+0x39c>
 800548a:	f241 0169 	movw	r1, #4201	; 0x1069
 800548e:	4832      	ldr	r0, [pc, #200]	; (8005558 <HAL_TIM_PWM_ConfigChannel+0x460>)
 8005490:	f7fb f883 	bl	800059a <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fccc 	bl	8005e38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0208 	orr.w	r2, r2, #8
 80054ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0204 	bic.w	r2, r2, #4
 80054be:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	691a      	ldr	r2, [r3, #16]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80054d2:	e030      	b.n	8005536 <HAL_TIM_PWM_ConfigChannel+0x43e>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a1b      	ldr	r2, [pc, #108]	; (8005548 <HAL_TIM_PWM_ConfigChannel+0x450>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d009      	beq.n	80054f2 <HAL_TIM_PWM_ConfigChannel+0x3fa>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a1c      	ldr	r2, [pc, #112]	; (8005554 <HAL_TIM_PWM_ConfigChannel+0x45c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d004      	beq.n	80054f2 <HAL_TIM_PWM_ConfigChannel+0x3fa>
 80054e8:	f241 017a 	movw	r1, #4218	; 0x107a
 80054ec:	481a      	ldr	r0, [pc, #104]	; (8005558 <HAL_TIM_PWM_ConfigChannel+0x460>)
 80054ee:	f7fb f854 	bl	800059a <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68b9      	ldr	r1, [r7, #8]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fd01 	bl	8005f00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800550c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800551c:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	021a      	lsls	r2, r3, #8
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005532:	e000      	b.n	8005536 <HAL_TIM_PWM_ConfigChannel+0x43e>
    }

    default:
      break;
 8005534:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	40012c00 	.word	0x40012c00
 800554c:	40000400 	.word	0x40000400
 8005550:	40000800 	.word	0x40000800
 8005554:	40013400 	.word	0x40013400
 8005558:	0800af1c 	.word	0x0800af1c

0800555c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d107      	bne.n	80055fc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2201      	movs	r2, #1
 80055f0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055fa:	e02a      	b.n	8005652 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	429a      	cmp	r2, r3
 8005604:	d107      	bne.n	8005616 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2202      	movs	r2, #2
 800560a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005614:	e01d      	b.n	8005652 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	429a      	cmp	r2, r3
 800561e:	d107      	bne.n	8005630 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2204      	movs	r2, #4
 8005624:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800562e:	e010      	b.n	8005652 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	429a      	cmp	r2, r3
 8005638:	d107      	bne.n	800564a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2208      	movs	r2, #8
 800563e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005648:	e003      	b.n	8005652 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f7ff ffb4 	bl	80055c0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	771a      	strb	r2, [r3, #28]
}
 800565e:	bf00      	nop
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b084      	sub	sp, #16
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005672:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	429a      	cmp	r2, r3
 800567c:	d10b      	bne.n	8005696 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2201      	movs	r2, #1
 8005682:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d136      	bne.n	80056fa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005694:	e031      	b.n	80056fa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	429a      	cmp	r2, r3
 800569e:	d10b      	bne.n	80056b8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2202      	movs	r2, #2
 80056a4:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d125      	bne.n	80056fa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056b6:	e020      	b.n	80056fa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d10b      	bne.n	80056da <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2204      	movs	r2, #4
 80056c6:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d114      	bne.n	80056fa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056d8:	e00f      	b.n	80056fa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d10a      	bne.n	80056fa <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2208      	movs	r2, #8
 80056e8:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d103      	bne.n	80056fa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f7ff ff42 	bl	8005584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	771a      	strb	r2, [r3, #28]
}
 8005706:	bf00      	nop
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	429a      	cmp	r2, r3
 8005724:	d103      	bne.n	800572e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2201      	movs	r2, #1
 800572a:	771a      	strb	r2, [r3, #28]
 800572c:	e019      	b.n	8005762 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	429a      	cmp	r2, r3
 8005736:	d103      	bne.n	8005740 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2202      	movs	r2, #2
 800573c:	771a      	strb	r2, [r3, #28]
 800573e:	e010      	b.n	8005762 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	429a      	cmp	r2, r3
 8005748:	d103      	bne.n	8005752 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2204      	movs	r2, #4
 800574e:	771a      	strb	r2, [r3, #28]
 8005750:	e007      	b.n	8005762 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	429a      	cmp	r2, r3
 800575a:	d102      	bne.n	8005762 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2208      	movs	r2, #8
 8005760:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f7ff ff18 	bl	8005598 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	771a      	strb	r2, [r3, #28]
}
 800576e:	bf00      	nop
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a3c      	ldr	r2, [pc, #240]	; (800587c <TIM_Base_SetConfig+0x104>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d00f      	beq.n	80057b0 <TIM_Base_SetConfig+0x38>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005796:	d00b      	beq.n	80057b0 <TIM_Base_SetConfig+0x38>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a39      	ldr	r2, [pc, #228]	; (8005880 <TIM_Base_SetConfig+0x108>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d007      	beq.n	80057b0 <TIM_Base_SetConfig+0x38>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a38      	ldr	r2, [pc, #224]	; (8005884 <TIM_Base_SetConfig+0x10c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d003      	beq.n	80057b0 <TIM_Base_SetConfig+0x38>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a37      	ldr	r2, [pc, #220]	; (8005888 <TIM_Base_SetConfig+0x110>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d108      	bne.n	80057c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a2d      	ldr	r2, [pc, #180]	; (800587c <TIM_Base_SetConfig+0x104>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d01b      	beq.n	8005802 <TIM_Base_SetConfig+0x8a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d0:	d017      	beq.n	8005802 <TIM_Base_SetConfig+0x8a>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a2a      	ldr	r2, [pc, #168]	; (8005880 <TIM_Base_SetConfig+0x108>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d013      	beq.n	8005802 <TIM_Base_SetConfig+0x8a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a29      	ldr	r2, [pc, #164]	; (8005884 <TIM_Base_SetConfig+0x10c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d00f      	beq.n	8005802 <TIM_Base_SetConfig+0x8a>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a28      	ldr	r2, [pc, #160]	; (8005888 <TIM_Base_SetConfig+0x110>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d00b      	beq.n	8005802 <TIM_Base_SetConfig+0x8a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a27      	ldr	r2, [pc, #156]	; (800588c <TIM_Base_SetConfig+0x114>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d007      	beq.n	8005802 <TIM_Base_SetConfig+0x8a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a26      	ldr	r2, [pc, #152]	; (8005890 <TIM_Base_SetConfig+0x118>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d003      	beq.n	8005802 <TIM_Base_SetConfig+0x8a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a25      	ldr	r2, [pc, #148]	; (8005894 <TIM_Base_SetConfig+0x11c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d108      	bne.n	8005814 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	4313      	orrs	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a10      	ldr	r2, [pc, #64]	; (800587c <TIM_Base_SetConfig+0x104>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00f      	beq.n	8005860 <TIM_Base_SetConfig+0xe8>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a11      	ldr	r2, [pc, #68]	; (8005888 <TIM_Base_SetConfig+0x110>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d00b      	beq.n	8005860 <TIM_Base_SetConfig+0xe8>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a10      	ldr	r2, [pc, #64]	; (800588c <TIM_Base_SetConfig+0x114>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d007      	beq.n	8005860 <TIM_Base_SetConfig+0xe8>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a0f      	ldr	r2, [pc, #60]	; (8005890 <TIM_Base_SetConfig+0x118>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d003      	beq.n	8005860 <TIM_Base_SetConfig+0xe8>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a0e      	ldr	r2, [pc, #56]	; (8005894 <TIM_Base_SetConfig+0x11c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d103      	bne.n	8005868 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	691a      	ldr	r2, [r3, #16]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	615a      	str	r2, [r3, #20]
}
 800586e:	bf00      	nop
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	40012c00 	.word	0x40012c00
 8005880:	40000400 	.word	0x40000400
 8005884:	40000800 	.word	0x40000800
 8005888:	40013400 	.word	0x40013400
 800588c:	40014000 	.word	0x40014000
 8005890:	40014400 	.word	0x40014400
 8005894:	40014800 	.word	0x40014800

08005898 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	f023 0201 	bic.w	r2, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0303 	bic.w	r3, r3, #3
 80058d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f023 0302 	bic.w	r3, r3, #2
 80058e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a40      	ldr	r2, [pc, #256]	; (80059f4 <TIM_OC1_SetConfig+0x15c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00f      	beq.n	8005918 <TIM_OC1_SetConfig+0x80>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a3f      	ldr	r2, [pc, #252]	; (80059f8 <TIM_OC1_SetConfig+0x160>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d00b      	beq.n	8005918 <TIM_OC1_SetConfig+0x80>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a3e      	ldr	r2, [pc, #248]	; (80059fc <TIM_OC1_SetConfig+0x164>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d007      	beq.n	8005918 <TIM_OC1_SetConfig+0x80>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a3d      	ldr	r2, [pc, #244]	; (8005a00 <TIM_OC1_SetConfig+0x168>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d003      	beq.n	8005918 <TIM_OC1_SetConfig+0x80>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a3c      	ldr	r2, [pc, #240]	; (8005a04 <TIM_OC1_SetConfig+0x16c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d119      	bne.n	800594c <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d008      	beq.n	8005932 <TIM_OC1_SetConfig+0x9a>
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	2b08      	cmp	r3, #8
 8005926:	d004      	beq.n	8005932 <TIM_OC1_SetConfig+0x9a>
 8005928:	f641 21d6 	movw	r1, #6870	; 0x1ad6
 800592c:	4836      	ldr	r0, [pc, #216]	; (8005a08 <TIM_OC1_SetConfig+0x170>)
 800592e:	f7fa fe34 	bl	800059a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f023 0308 	bic.w	r3, r3, #8
 8005938:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	4313      	orrs	r3, r2
 8005942:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f023 0304 	bic.w	r3, r3, #4
 800594a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a29      	ldr	r2, [pc, #164]	; (80059f4 <TIM_OC1_SetConfig+0x15c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00f      	beq.n	8005974 <TIM_OC1_SetConfig+0xdc>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a28      	ldr	r2, [pc, #160]	; (80059f8 <TIM_OC1_SetConfig+0x160>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d00b      	beq.n	8005974 <TIM_OC1_SetConfig+0xdc>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a27      	ldr	r2, [pc, #156]	; (80059fc <TIM_OC1_SetConfig+0x164>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d007      	beq.n	8005974 <TIM_OC1_SetConfig+0xdc>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a26      	ldr	r2, [pc, #152]	; (8005a00 <TIM_OC1_SetConfig+0x168>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d003      	beq.n	8005974 <TIM_OC1_SetConfig+0xdc>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a25      	ldr	r2, [pc, #148]	; (8005a04 <TIM_OC1_SetConfig+0x16c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d12d      	bne.n	80059d0 <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800597c:	d008      	beq.n	8005990 <TIM_OC1_SetConfig+0xf8>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d004      	beq.n	8005990 <TIM_OC1_SetConfig+0xf8>
 8005986:	f641 21e3 	movw	r1, #6883	; 0x1ae3
 800598a:	481f      	ldr	r0, [pc, #124]	; (8005a08 <TIM_OC1_SetConfig+0x170>)
 800598c:	f7fa fe05 	bl	800059a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005998:	d008      	beq.n	80059ac <TIM_OC1_SetConfig+0x114>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d004      	beq.n	80059ac <TIM_OC1_SetConfig+0x114>
 80059a2:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 80059a6:	4818      	ldr	r0, [pc, #96]	; (8005a08 <TIM_OC1_SetConfig+0x170>)
 80059a8:	f7fa fdf7 	bl	800059a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	621a      	str	r2, [r3, #32]
}
 80059ea:	bf00      	nop
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	40012c00 	.word	0x40012c00
 80059f8:	40013400 	.word	0x40013400
 80059fc:	40014000 	.word	0x40014000
 8005a00:	40014400 	.word	0x40014400
 8005a04:	40014800 	.word	0x40014800
 8005a08:	0800af1c 	.word	0x0800af1c

08005a0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	f023 0210 	bic.w	r2, r3, #16
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	021b      	lsls	r3, r3, #8
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f023 0320 	bic.w	r3, r3, #32
 8005a5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a3b      	ldr	r2, [pc, #236]	; (8005b58 <TIM_OC2_SetConfig+0x14c>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d003      	beq.n	8005a78 <TIM_OC2_SetConfig+0x6c>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a3a      	ldr	r2, [pc, #232]	; (8005b5c <TIM_OC2_SetConfig+0x150>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d11a      	bne.n	8005aae <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d008      	beq.n	8005a92 <TIM_OC2_SetConfig+0x86>
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d004      	beq.n	8005a92 <TIM_OC2_SetConfig+0x86>
 8005a88:	f641 3121 	movw	r1, #6945	; 0x1b21
 8005a8c:	4834      	ldr	r0, [pc, #208]	; (8005b60 <TIM_OC2_SetConfig+0x154>)
 8005a8e:	f7fa fd84 	bl	800059a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	011b      	lsls	r3, r3, #4
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aac:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a29      	ldr	r2, [pc, #164]	; (8005b58 <TIM_OC2_SetConfig+0x14c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00f      	beq.n	8005ad6 <TIM_OC2_SetConfig+0xca>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a28      	ldr	r2, [pc, #160]	; (8005b5c <TIM_OC2_SetConfig+0x150>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d00b      	beq.n	8005ad6 <TIM_OC2_SetConfig+0xca>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a28      	ldr	r2, [pc, #160]	; (8005b64 <TIM_OC2_SetConfig+0x158>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d007      	beq.n	8005ad6 <TIM_OC2_SetConfig+0xca>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a27      	ldr	r2, [pc, #156]	; (8005b68 <TIM_OC2_SetConfig+0x15c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d003      	beq.n	8005ad6 <TIM_OC2_SetConfig+0xca>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a26      	ldr	r2, [pc, #152]	; (8005b6c <TIM_OC2_SetConfig+0x160>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d12f      	bne.n	8005b36 <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ade:	d008      	beq.n	8005af2 <TIM_OC2_SetConfig+0xe6>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d004      	beq.n	8005af2 <TIM_OC2_SetConfig+0xe6>
 8005ae8:	f641 312f 	movw	r1, #6959	; 0x1b2f
 8005aec:	481c      	ldr	r0, [pc, #112]	; (8005b60 <TIM_OC2_SetConfig+0x154>)
 8005aee:	f7fa fd54 	bl	800059a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005afa:	d008      	beq.n	8005b0e <TIM_OC2_SetConfig+0x102>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d004      	beq.n	8005b0e <TIM_OC2_SetConfig+0x102>
 8005b04:	f641 3130 	movw	r1, #6960	; 0x1b30
 8005b08:	4815      	ldr	r0, [pc, #84]	; (8005b60 <TIM_OC2_SetConfig+0x154>)
 8005b0a:	f7fa fd46 	bl	800059a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	621a      	str	r2, [r3, #32]
}
 8005b50:	bf00      	nop
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	40012c00 	.word	0x40012c00
 8005b5c:	40013400 	.word	0x40013400
 8005b60:	0800af1c 	.word	0x0800af1c
 8005b64:	40014000 	.word	0x40014000
 8005b68:	40014400 	.word	0x40014400
 8005b6c:	40014800 	.word	0x40014800

08005b70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 0303 	bic.w	r3, r3, #3
 8005baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	021b      	lsls	r3, r3, #8
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a3b      	ldr	r2, [pc, #236]	; (8005cbc <TIM_OC3_SetConfig+0x14c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d003      	beq.n	8005bda <TIM_OC3_SetConfig+0x6a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a3a      	ldr	r2, [pc, #232]	; (8005cc0 <TIM_OC3_SetConfig+0x150>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d11a      	bne.n	8005c10 <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d008      	beq.n	8005bf4 <TIM_OC3_SetConfig+0x84>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	2b08      	cmp	r3, #8
 8005be8:	d004      	beq.n	8005bf4 <TIM_OC3_SetConfig+0x84>
 8005bea:	f641 316c 	movw	r1, #7020	; 0x1b6c
 8005bee:	4835      	ldr	r0, [pc, #212]	; (8005cc4 <TIM_OC3_SetConfig+0x154>)
 8005bf0:	f7fa fcd3 	bl	800059a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	021b      	lsls	r3, r3, #8
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a2a      	ldr	r2, [pc, #168]	; (8005cbc <TIM_OC3_SetConfig+0x14c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00f      	beq.n	8005c38 <TIM_OC3_SetConfig+0xc8>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a29      	ldr	r2, [pc, #164]	; (8005cc0 <TIM_OC3_SetConfig+0x150>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d00b      	beq.n	8005c38 <TIM_OC3_SetConfig+0xc8>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a29      	ldr	r2, [pc, #164]	; (8005cc8 <TIM_OC3_SetConfig+0x158>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d007      	beq.n	8005c38 <TIM_OC3_SetConfig+0xc8>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a28      	ldr	r2, [pc, #160]	; (8005ccc <TIM_OC3_SetConfig+0x15c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d003      	beq.n	8005c38 <TIM_OC3_SetConfig+0xc8>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a27      	ldr	r2, [pc, #156]	; (8005cd0 <TIM_OC3_SetConfig+0x160>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d12f      	bne.n	8005c98 <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c40:	d008      	beq.n	8005c54 <TIM_OC3_SetConfig+0xe4>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d004      	beq.n	8005c54 <TIM_OC3_SetConfig+0xe4>
 8005c4a:	f641 3179 	movw	r1, #7033	; 0x1b79
 8005c4e:	481d      	ldr	r0, [pc, #116]	; (8005cc4 <TIM_OC3_SetConfig+0x154>)
 8005c50:	f7fa fca3 	bl	800059a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c5c:	d008      	beq.n	8005c70 <TIM_OC3_SetConfig+0x100>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d004      	beq.n	8005c70 <TIM_OC3_SetConfig+0x100>
 8005c66:	f641 317a 	movw	r1, #7034	; 0x1b7a
 8005c6a:	4816      	ldr	r0, [pc, #88]	; (8005cc4 <TIM_OC3_SetConfig+0x154>)
 8005c6c:	f7fa fc95 	bl	800059a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	011b      	lsls	r3, r3, #4
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	621a      	str	r2, [r3, #32]
}
 8005cb2:	bf00      	nop
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	40012c00 	.word	0x40012c00
 8005cc0:	40013400 	.word	0x40013400
 8005cc4:	0800af1c 	.word	0x0800af1c
 8005cc8:	40014000 	.word	0x40014000
 8005ccc:	40014400 	.word	0x40014400
 8005cd0:	40014800 	.word	0x40014800

08005cd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	021b      	lsls	r3, r3, #8
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	031b      	lsls	r3, r3, #12
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a3b      	ldr	r2, [pc, #236]	; (8005e20 <TIM_OC4_SetConfig+0x14c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d003      	beq.n	8005d40 <TIM_OC4_SetConfig+0x6c>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a3a      	ldr	r2, [pc, #232]	; (8005e24 <TIM_OC4_SetConfig+0x150>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d11a      	bne.n	8005d76 <TIM_OC4_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d008      	beq.n	8005d5a <TIM_OC4_SetConfig+0x86>
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	d004      	beq.n	8005d5a <TIM_OC4_SetConfig+0x86>
 8005d50:	f641 31b7 	movw	r1, #7095	; 0x1bb7
 8005d54:	4834      	ldr	r0, [pc, #208]	; (8005e28 <TIM_OC4_SetConfig+0x154>)
 8005d56:	f7fa fc20 	bl	800059a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	031b      	lsls	r3, r3, #12
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a29      	ldr	r2, [pc, #164]	; (8005e20 <TIM_OC4_SetConfig+0x14c>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d00f      	beq.n	8005d9e <TIM_OC4_SetConfig+0xca>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a28      	ldr	r2, [pc, #160]	; (8005e24 <TIM_OC4_SetConfig+0x150>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d00b      	beq.n	8005d9e <TIM_OC4_SetConfig+0xca>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a28      	ldr	r2, [pc, #160]	; (8005e2c <TIM_OC4_SetConfig+0x158>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d007      	beq.n	8005d9e <TIM_OC4_SetConfig+0xca>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a27      	ldr	r2, [pc, #156]	; (8005e30 <TIM_OC4_SetConfig+0x15c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d003      	beq.n	8005d9e <TIM_OC4_SetConfig+0xca>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a26      	ldr	r2, [pc, #152]	; (8005e34 <TIM_OC4_SetConfig+0x160>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d12f      	bne.n	8005dfe <TIM_OC4_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005da6:	d008      	beq.n	8005dba <TIM_OC4_SetConfig+0xe6>
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d004      	beq.n	8005dba <TIM_OC4_SetConfig+0xe6>
 8005db0:	f641 31c4 	movw	r1, #7108	; 0x1bc4
 8005db4:	481c      	ldr	r0, [pc, #112]	; (8005e28 <TIM_OC4_SetConfig+0x154>)
 8005db6:	f7fa fbf0 	bl	800059a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dc2:	d008      	beq.n	8005dd6 <TIM_OC4_SetConfig+0x102>
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d004      	beq.n	8005dd6 <TIM_OC4_SetConfig+0x102>
 8005dcc:	f641 31c5 	movw	r1, #7109	; 0x1bc5
 8005dd0:	4815      	ldr	r0, [pc, #84]	; (8005e28 <TIM_OC4_SetConfig+0x154>)
 8005dd2:	f7fa fbe2 	bl	800059a <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ddc:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005de4:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	019b      	lsls	r3, r3, #6
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	019b      	lsls	r3, r3, #6
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	621a      	str	r2, [r3, #32]
}
 8005e18:	bf00      	nop
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	40012c00 	.word	0x40012c00
 8005e24:	40013400 	.word	0x40013400
 8005e28:	0800af1c 	.word	0x0800af1c
 8005e2c:	40014000 	.word	0x40014000
 8005e30:	40014400 	.word	0x40014400
 8005e34:	40014800 	.word	0x40014800

08005e38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	041b      	lsls	r3, r3, #16
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a17      	ldr	r2, [pc, #92]	; (8005eec <TIM_OC5_SetConfig+0xb4>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d00f      	beq.n	8005eb2 <TIM_OC5_SetConfig+0x7a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a16      	ldr	r2, [pc, #88]	; (8005ef0 <TIM_OC5_SetConfig+0xb8>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d00b      	beq.n	8005eb2 <TIM_OC5_SetConfig+0x7a>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a15      	ldr	r2, [pc, #84]	; (8005ef4 <TIM_OC5_SetConfig+0xbc>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d007      	beq.n	8005eb2 <TIM_OC5_SetConfig+0x7a>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a14      	ldr	r2, [pc, #80]	; (8005ef8 <TIM_OC5_SetConfig+0xc0>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d003      	beq.n	8005eb2 <TIM_OC5_SetConfig+0x7a>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a13      	ldr	r2, [pc, #76]	; (8005efc <TIM_OC5_SetConfig+0xc4>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d109      	bne.n	8005ec6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	021b      	lsls	r3, r3, #8
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	621a      	str	r2, [r3, #32]
}
 8005ee0:	bf00      	nop
 8005ee2:	371c      	adds	r7, #28
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	40012c00 	.word	0x40012c00
 8005ef0:	40013400 	.word	0x40013400
 8005ef4:	40014000 	.word	0x40014000
 8005ef8:	40014400 	.word	0x40014400
 8005efc:	40014800 	.word	0x40014800

08005f00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b087      	sub	sp, #28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	021b      	lsls	r3, r3, #8
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	051b      	lsls	r3, r3, #20
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a18      	ldr	r2, [pc, #96]	; (8005fb8 <TIM_OC6_SetConfig+0xb8>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d00f      	beq.n	8005f7c <TIM_OC6_SetConfig+0x7c>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a17      	ldr	r2, [pc, #92]	; (8005fbc <TIM_OC6_SetConfig+0xbc>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d00b      	beq.n	8005f7c <TIM_OC6_SetConfig+0x7c>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a16      	ldr	r2, [pc, #88]	; (8005fc0 <TIM_OC6_SetConfig+0xc0>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d007      	beq.n	8005f7c <TIM_OC6_SetConfig+0x7c>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a15      	ldr	r2, [pc, #84]	; (8005fc4 <TIM_OC6_SetConfig+0xc4>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d003      	beq.n	8005f7c <TIM_OC6_SetConfig+0x7c>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a14      	ldr	r2, [pc, #80]	; (8005fc8 <TIM_OC6_SetConfig+0xc8>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d109      	bne.n	8005f90 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	029b      	lsls	r3, r3, #10
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	621a      	str	r2, [r3, #32]
}
 8005faa:	bf00      	nop
 8005fac:	371c      	adds	r7, #28
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	40012c00 	.word	0x40012c00
 8005fbc:	40013400 	.word	0x40013400
 8005fc0:	40014000 	.word	0x40014000
 8005fc4:	40014400 	.word	0x40014400
 8005fc8:	40014800 	.word	0x40014800

08005fcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4a2d      	ldr	r2, [pc, #180]	; (8006090 <TIM_CCxChannelCmd+0xc4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d020      	beq.n	8006022 <TIM_CCxChannelCmd+0x56>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fe6:	d01c      	beq.n	8006022 <TIM_CCxChannelCmd+0x56>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4a2a      	ldr	r2, [pc, #168]	; (8006094 <TIM_CCxChannelCmd+0xc8>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d018      	beq.n	8006022 <TIM_CCxChannelCmd+0x56>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4a29      	ldr	r2, [pc, #164]	; (8006098 <TIM_CCxChannelCmd+0xcc>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d014      	beq.n	8006022 <TIM_CCxChannelCmd+0x56>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4a28      	ldr	r2, [pc, #160]	; (800609c <TIM_CCxChannelCmd+0xd0>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d010      	beq.n	8006022 <TIM_CCxChannelCmd+0x56>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4a27      	ldr	r2, [pc, #156]	; (80060a0 <TIM_CCxChannelCmd+0xd4>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d00c      	beq.n	8006022 <TIM_CCxChannelCmd+0x56>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4a26      	ldr	r2, [pc, #152]	; (80060a4 <TIM_CCxChannelCmd+0xd8>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d008      	beq.n	8006022 <TIM_CCxChannelCmd+0x56>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4a25      	ldr	r2, [pc, #148]	; (80060a8 <TIM_CCxChannelCmd+0xdc>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d004      	beq.n	8006022 <TIM_CCxChannelCmd+0x56>
 8006018:	f641 6135 	movw	r1, #7733	; 0x1e35
 800601c:	4823      	ldr	r0, [pc, #140]	; (80060ac <TIM_CCxChannelCmd+0xe0>)
 800601e:	f7fa fabc 	bl	800059a <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d016      	beq.n	8006056 <TIM_CCxChannelCmd+0x8a>
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	2b04      	cmp	r3, #4
 800602c:	d013      	beq.n	8006056 <TIM_CCxChannelCmd+0x8a>
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2b08      	cmp	r3, #8
 8006032:	d010      	beq.n	8006056 <TIM_CCxChannelCmd+0x8a>
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2b0c      	cmp	r3, #12
 8006038:	d00d      	beq.n	8006056 <TIM_CCxChannelCmd+0x8a>
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b10      	cmp	r3, #16
 800603e:	d00a      	beq.n	8006056 <TIM_CCxChannelCmd+0x8a>
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2b14      	cmp	r3, #20
 8006044:	d007      	beq.n	8006056 <TIM_CCxChannelCmd+0x8a>
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2b3c      	cmp	r3, #60	; 0x3c
 800604a:	d004      	beq.n	8006056 <TIM_CCxChannelCmd+0x8a>
 800604c:	f641 6136 	movw	r1, #7734	; 0x1e36
 8006050:	4816      	ldr	r0, [pc, #88]	; (80060ac <TIM_CCxChannelCmd+0xe0>)
 8006052:	f7fa faa2 	bl	800059a <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	f003 031f 	and.w	r3, r3, #31
 800605c:	2201      	movs	r2, #1
 800605e:	fa02 f303 	lsl.w	r3, r2, r3
 8006062:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6a1a      	ldr	r2, [r3, #32]
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	43db      	mvns	r3, r3
 800606c:	401a      	ands	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6a1a      	ldr	r2, [r3, #32]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	f003 031f 	and.w	r3, r3, #31
 800607c:	6879      	ldr	r1, [r7, #4]
 800607e:	fa01 f303 	lsl.w	r3, r1, r3
 8006082:	431a      	orrs	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	621a      	str	r2, [r3, #32]
}
 8006088:	bf00      	nop
 800608a:	3718      	adds	r7, #24
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	40012c00 	.word	0x40012c00
 8006094:	40000400 	.word	0x40000400
 8006098:	40000800 	.word	0x40000800
 800609c:	40013400 	.word	0x40013400
 80060a0:	40014000 	.word	0x40014000
 80060a4:	40014400 	.word	0x40014400
 80060a8:	40014800 	.word	0x40014800
 80060ac:	0800af1c 	.word	0x0800af1c

080060b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a96      	ldr	r2, [pc, #600]	; (8006318 <HAL_TIMEx_MasterConfigSynchronization+0x268>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d027      	beq.n	8006114 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060cc:	d022      	beq.n	8006114 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a92      	ldr	r2, [pc, #584]	; (800631c <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d01d      	beq.n	8006114 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a90      	ldr	r2, [pc, #576]	; (8006320 <HAL_TIMEx_MasterConfigSynchronization+0x270>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d018      	beq.n	8006114 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a8f      	ldr	r2, [pc, #572]	; (8006324 <HAL_TIMEx_MasterConfigSynchronization+0x274>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d013      	beq.n	8006114 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a8d      	ldr	r2, [pc, #564]	; (8006328 <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d00e      	beq.n	8006114 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a8c      	ldr	r2, [pc, #560]	; (800632c <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d009      	beq.n	8006114 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a8a      	ldr	r2, [pc, #552]	; (8006330 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d004      	beq.n	8006114 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800610a:	f44f 61fd 	mov.w	r1, #2024	; 0x7e8
 800610e:	4889      	ldr	r0, [pc, #548]	; (8006334 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 8006110:	f7fa fa43 	bl	800059a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d025      	beq.n	8006168 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b10      	cmp	r3, #16
 8006122:	d021      	beq.n	8006168 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b20      	cmp	r3, #32
 800612a:	d01d      	beq.n	8006168 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b30      	cmp	r3, #48	; 0x30
 8006132:	d019      	beq.n	8006168 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b40      	cmp	r3, #64	; 0x40
 800613a:	d015      	beq.n	8006168 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b50      	cmp	r3, #80	; 0x50
 8006142:	d011      	beq.n	8006168 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b60      	cmp	r3, #96	; 0x60
 800614a:	d00d      	beq.n	8006168 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b70      	cmp	r3, #112	; 0x70
 8006152:	d009      	beq.n	8006168 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800615c:	d004      	beq.n	8006168 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800615e:	f240 71e9 	movw	r1, #2025	; 0x7e9
 8006162:	4874      	ldr	r0, [pc, #464]	; (8006334 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 8006164:	f7fa fa19 	bl	800059a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	2b80      	cmp	r3, #128	; 0x80
 800616e:	d008      	beq.n	8006182 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d004      	beq.n	8006182 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8006178:	f240 71ea 	movw	r1, #2026	; 0x7ea
 800617c:	486d      	ldr	r0, [pc, #436]	; (8006334 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 800617e:	f7fa fa0c 	bl	800059a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006188:	2b01      	cmp	r3, #1
 800618a:	d101      	bne.n	8006190 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800618c:	2302      	movs	r3, #2
 800618e:	e0be      	b.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0x25e>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2202      	movs	r2, #2
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a58      	ldr	r2, [pc, #352]	; (8006318 <HAL_TIMEx_MasterConfigSynchronization+0x268>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d004      	beq.n	80061c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a5b      	ldr	r2, [pc, #364]	; (800632c <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d161      	bne.n	8006288 <HAL_TIMEx_MasterConfigSynchronization+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d054      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061d4:	d04f      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061de:	d04a      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061e8:	d045      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061f2:	d040      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80061fc:	d03b      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006206:	d036      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006210:	d031      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 800621a:	d02c      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006224:	d027      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 800622e:	d022      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006238:	d01d      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8006242:	d018      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800624c:	d013      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8006256:	d00e      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8006260:	d009      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 800626a:	d004      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800626c:	f240 71fc 	movw	r1, #2044	; 0x7fc
 8006270:	4830      	ldr	r0, [pc, #192]	; (8006334 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 8006272:	f7fa f992 	bl	800059a <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800627c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	4313      	orrs	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800628e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006292:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	4313      	orrs	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a1b      	ldr	r2, [pc, #108]	; (8006318 <HAL_TIMEx_MasterConfigSynchronization+0x268>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d018      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0x232>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b8:	d013      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0x232>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a17      	ldr	r2, [pc, #92]	; (800631c <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00e      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0x232>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a15      	ldr	r2, [pc, #84]	; (8006320 <HAL_TIMEx_MasterConfigSynchronization+0x270>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d009      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0x232>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a16      	ldr	r2, [pc, #88]	; (800632c <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d004      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0x232>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a14      	ldr	r2, [pc, #80]	; (8006330 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d10c      	bne.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0x24c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	40012c00 	.word	0x40012c00
 800631c:	40000400 	.word	0x40000400
 8006320:	40000800 	.word	0x40000800
 8006324:	40001000 	.word	0x40001000
 8006328:	40001400 	.word	0x40001400
 800632c:	40013400 	.word	0x40013400
 8006330:	40014000 	.word	0x40014000
 8006334:	0800af54 	.word	0x0800af54

08006338 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a49      	ldr	r2, [pc, #292]	; (8006470 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d018      	beq.n	8006382 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a47      	ldr	r2, [pc, #284]	; (8006474 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d013      	beq.n	8006382 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a46      	ldr	r2, [pc, #280]	; (8006478 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d00e      	beq.n	8006382 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a44      	ldr	r2, [pc, #272]	; (800647c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d009      	beq.n	8006382 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a43      	ldr	r2, [pc, #268]	; (8006480 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d004      	beq.n	8006382 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8006378:	f640 0131 	movw	r1, #2097	; 0x831
 800637c:	4841      	ldr	r0, [pc, #260]	; (8006484 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 800637e:	f7fa f90c 	bl	800059a <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800638a:	d008      	beq.n	800639e <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d004      	beq.n	800639e <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8006394:	f640 0132 	movw	r1, #2098	; 0x832
 8006398:	483a      	ldr	r0, [pc, #232]	; (8006484 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 800639a:	f7fa f8fe 	bl	800059a <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063a6:	d008      	beq.n	80063ba <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d004      	beq.n	80063ba <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 80063b0:	f640 0133 	movw	r1, #2099	; 0x833
 80063b4:	4833      	ldr	r0, [pc, #204]	; (8006484 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 80063b6:	f7fa f8f0 	bl	800059a <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d013      	beq.n	80063ea <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ca:	d00e      	beq.n	80063ea <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063d4:	d009      	beq.n	80063ea <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063de:	d004      	beq.n	80063ea <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 80063e0:	f640 0134 	movw	r1, #2100	; 0x834
 80063e4:	4827      	ldr	r0, [pc, #156]	; (8006484 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 80063e6:	f7fa f8d8 	bl	800059a <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	2bff      	cmp	r3, #255	; 0xff
 80063f0:	d904      	bls.n	80063fc <HAL_TIMEx_ConfigBreakDeadTime+0xc4>
 80063f2:	f640 0135 	movw	r1, #2101	; 0x835
 80063f6:	4823      	ldr	r0, [pc, #140]	; (8006484 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 80063f8:	f7fa f8cf 	bl	800059a <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006404:	d008      	beq.n	8006418 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d004      	beq.n	8006418 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800640e:	f640 0136 	movw	r1, #2102	; 0x836
 8006412:	481c      	ldr	r0, [pc, #112]	; (8006484 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8006414:	f7fa f8c1 	bl	800059a <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d009      	beq.n	8006434 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006428:	d004      	beq.n	8006434 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800642a:	f640 0137 	movw	r1, #2103	; 0x837
 800642e:	4815      	ldr	r0, [pc, #84]	; (8006484 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8006430:	f7fa f8b3 	bl	800059a <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	2b0f      	cmp	r3, #15
 800643a:	d904      	bls.n	8006446 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800643c:	f640 0138 	movw	r1, #2104	; 0x838
 8006440:	4810      	ldr	r0, [pc, #64]	; (8006484 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8006442:	f7fa f8aa 	bl	800059a <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800644e:	d008      	beq.n	8006462 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006454:	2b00      	cmp	r3, #0
 8006456:	d004      	beq.n	8006462 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006458:	f640 0139 	movw	r1, #2105	; 0x839
 800645c:	4809      	ldr	r0, [pc, #36]	; (8006484 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 800645e:	f7fa f89c 	bl	800059a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006468:	2b01      	cmp	r3, #1
 800646a:	d10d      	bne.n	8006488 <HAL_TIMEx_ConfigBreakDeadTime+0x150>
 800646c:	2302      	movs	r3, #2
 800646e:	e0d4      	b.n	800661a <HAL_TIMEx_ConfigBreakDeadTime+0x2e2>
 8006470:	40012c00 	.word	0x40012c00
 8006474:	40013400 	.word	0x40013400
 8006478:	40014000 	.word	0x40014000
 800647c:	40014400 	.word	0x40014400
 8006480:	40014800 	.word	0x40014800
 8006484:	0800af54 	.word	0x0800af54
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	4313      	orrs	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	041b      	lsls	r3, r3, #16
 80064fe:	4313      	orrs	r3, r2
 8006500:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a47      	ldr	r2, [pc, #284]	; (8006624 <HAL_TIMEx_ConfigBreakDeadTime+0x2ec>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d004      	beq.n	8006516 <HAL_TIMEx_ConfigBreakDeadTime+0x1de>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a45      	ldr	r2, [pc, #276]	; (8006628 <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d114      	bne.n	8006540 <HAL_TIMEx_ConfigBreakDeadTime+0x208>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d009      	beq.n	8006532 <HAL_TIMEx_ConfigBreakDeadTime+0x1fa>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006526:	d004      	beq.n	8006532 <HAL_TIMEx_ConfigBreakDeadTime+0x1fa>
 8006528:	f640 014e 	movw	r1, #2126	; 0x84e
 800652c:	483f      	ldr	r0, [pc, #252]	; (800662c <HAL_TIMEx_ConfigBreakDeadTime+0x2f4>)
 800652e:	f7fa f834 	bl	800059a <assert_failed>

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	69db      	ldr	r3, [r3, #28]
 800653c:	4313      	orrs	r3, r2
 800653e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a37      	ldr	r2, [pc, #220]	; (8006624 <HAL_TIMEx_ConfigBreakDeadTime+0x2ec>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d004      	beq.n	8006554 <HAL_TIMEx_ConfigBreakDeadTime+0x21c>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a36      	ldr	r2, [pc, #216]	; (8006628 <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d159      	bne.n	8006608 <HAL_TIMEx_ConfigBreakDeadTime+0x2d0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800655c:	d008      	beq.n	8006570 <HAL_TIMEx_ConfigBreakDeadTime+0x238>
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d004      	beq.n	8006570 <HAL_TIMEx_ConfigBreakDeadTime+0x238>
 8006566:	f640 0157 	movw	r1, #2135	; 0x857
 800656a:	4830      	ldr	r0, [pc, #192]	; (800662c <HAL_TIMEx_ConfigBreakDeadTime+0x2f4>)
 800656c:	f7fa f815 	bl	800059a <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006574:	2b00      	cmp	r3, #0
 8006576:	d009      	beq.n	800658c <HAL_TIMEx_ConfigBreakDeadTime+0x254>
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006580:	d004      	beq.n	800658c <HAL_TIMEx_ConfigBreakDeadTime+0x254>
 8006582:	f640 0158 	movw	r1, #2136	; 0x858
 8006586:	4829      	ldr	r0, [pc, #164]	; (800662c <HAL_TIMEx_ConfigBreakDeadTime+0x2f4>)
 8006588:	f7fa f807 	bl	800059a <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006590:	2b0f      	cmp	r3, #15
 8006592:	d904      	bls.n	800659e <HAL_TIMEx_ConfigBreakDeadTime+0x266>
 8006594:	f640 0159 	movw	r1, #2137	; 0x859
 8006598:	4824      	ldr	r0, [pc, #144]	; (800662c <HAL_TIMEx_ConfigBreakDeadTime+0x2f4>)
 800659a:	f7f9 fffe 	bl	800059a <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a8:	051b      	lsls	r3, r3, #20
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c6:	4313      	orrs	r3, r2
 80065c8:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a15      	ldr	r2, [pc, #84]	; (8006624 <HAL_TIMEx_ConfigBreakDeadTime+0x2ec>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d004      	beq.n	80065de <HAL_TIMEx_ConfigBreakDeadTime+0x2a6>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a13      	ldr	r2, [pc, #76]	; (8006628 <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d114      	bne.n	8006608 <HAL_TIMEx_ConfigBreakDeadTime+0x2d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d009      	beq.n	80065fa <HAL_TIMEx_ConfigBreakDeadTime+0x2c2>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ee:	d004      	beq.n	80065fa <HAL_TIMEx_ConfigBreakDeadTime+0x2c2>
 80065f0:	f640 0163 	movw	r1, #2147	; 0x863
 80065f4:	480d      	ldr	r0, [pc, #52]	; (800662c <HAL_TIMEx_ConfigBreakDeadTime+0x2f4>)
 80065f6:	f7f9 ffd0 	bl	800059a <assert_failed>

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	4313      	orrs	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	40012c00 	.word	0x40012c00
 8006628:	40013400 	.word	0x40013400
 800662c:	0800af54 	.word	0x0800af54

08006630 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006638:	bf00      	nop
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80066c4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80066c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	4313      	orrs	r3, r2
 80066d8:	b29a      	uxth	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b085      	sub	sp, #20
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80066f6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80066fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006702:	b29a      	uxth	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	b29b      	uxth	r3, r3
 8006708:	43db      	mvns	r3, r3
 800670a:	b29b      	uxth	r3, r3
 800670c:	4013      	ands	r3, r2
 800670e:	b29a      	uxth	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006724:	b084      	sub	sp, #16
 8006726:	b580      	push	{r7, lr}
 8006728:	b082      	sub	sp, #8
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	f107 0014 	add.w	r0, r7, #20
 8006732:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7ff ffb0 	bl	80066bc <USB_EnableGlobalInt>

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006768:	b004      	add	sp, #16
 800676a:	4770      	bx	lr

0800676c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800676c:	b490      	push	{r4, r7}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	881b      	ldrh	r3, [r3, #0]
 8006786:	b29b      	uxth	r3, r3
 8006788:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800678c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006790:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	78db      	ldrb	r3, [r3, #3]
 8006796:	2b03      	cmp	r3, #3
 8006798:	d819      	bhi.n	80067ce <USB_ActivateEndpoint+0x62>
 800679a:	a201      	add	r2, pc, #4	; (adr r2, 80067a0 <USB_ActivateEndpoint+0x34>)
 800679c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a0:	080067b1 	.word	0x080067b1
 80067a4:	080067c5 	.word	0x080067c5
 80067a8:	080067d5 	.word	0x080067d5
 80067ac:	080067bb 	.word	0x080067bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80067b0:	89bb      	ldrh	r3, [r7, #12]
 80067b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067b6:	81bb      	strh	r3, [r7, #12]
      break;
 80067b8:	e00d      	b.n	80067d6 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80067ba:	89bb      	ldrh	r3, [r7, #12]
 80067bc:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80067c0:	81bb      	strh	r3, [r7, #12]
      break;
 80067c2:	e008      	b.n	80067d6 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80067c4:	89bb      	ldrh	r3, [r7, #12]
 80067c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067ca:	81bb      	strh	r3, [r7, #12]
      break;
 80067cc:	e003      	b.n	80067d6 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	73fb      	strb	r3, [r7, #15]
      break;
 80067d2:	e000      	b.n	80067d6 <USB_ActivateEndpoint+0x6a>
      break;
 80067d4:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	441a      	add	r2, r3
 80067e0:	89bb      	ldrh	r3, [r7, #12]
 80067e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	b29b      	uxth	r3, r3
 8006804:	b21b      	sxth	r3, r3
 8006806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800680a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680e:	b21a      	sxth	r2, r3
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	b21b      	sxth	r3, r3
 8006816:	4313      	orrs	r3, r2
 8006818:	b21b      	sxth	r3, r3
 800681a:	b29c      	uxth	r4, r3
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	441a      	add	r2, r3
 8006826:	4b8a      	ldr	r3, [pc, #552]	; (8006a50 <USB_ActivateEndpoint+0x2e4>)
 8006828:	4323      	orrs	r3, r4
 800682a:	b29b      	uxth	r3, r3
 800682c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	7b1b      	ldrb	r3, [r3, #12]
 8006832:	2b00      	cmp	r3, #0
 8006834:	f040 8112 	bne.w	8006a5c <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	785b      	ldrb	r3, [r3, #1]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d067      	beq.n	8006910 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006840:	687c      	ldr	r4, [r7, #4]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006848:	b29b      	uxth	r3, r3
 800684a:	441c      	add	r4, r3
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	00db      	lsls	r3, r3, #3
 8006852:	4423      	add	r3, r4
 8006854:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006858:	461c      	mov	r4, r3
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	88db      	ldrh	r3, [r3, #6]
 800685e:	085b      	lsrs	r3, r3, #1
 8006860:	b29b      	uxth	r3, r3
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	b29b      	uxth	r3, r3
 8006866:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	b29c      	uxth	r4, r3
 8006876:	4623      	mov	r3, r4
 8006878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687c:	2b00      	cmp	r3, #0
 800687e:	d014      	beq.n	80068aa <USB_ActivateEndpoint+0x13e>
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	b29b      	uxth	r3, r3
 800688e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006896:	b29c      	uxth	r4, r3
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	441a      	add	r2, r3
 80068a2:	4b6c      	ldr	r3, [pc, #432]	; (8006a54 <USB_ActivateEndpoint+0x2e8>)
 80068a4:	4323      	orrs	r3, r4
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	78db      	ldrb	r3, [r3, #3]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d018      	beq.n	80068e4 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	4413      	add	r3, r2
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068c8:	b29c      	uxth	r4, r3
 80068ca:	f084 0320 	eor.w	r3, r4, #32
 80068ce:	b29c      	uxth	r4, r3
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	441a      	add	r2, r3
 80068da:	4b5d      	ldr	r3, [pc, #372]	; (8006a50 <USB_ActivateEndpoint+0x2e4>)
 80068dc:	4323      	orrs	r3, r4
 80068de:	b29b      	uxth	r3, r3
 80068e0:	8013      	strh	r3, [r2, #0]
 80068e2:	e22b      	b.n	8006d3c <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068fa:	b29c      	uxth	r4, r3
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	441a      	add	r2, r3
 8006906:	4b52      	ldr	r3, [pc, #328]	; (8006a50 <USB_ActivateEndpoint+0x2e4>)
 8006908:	4323      	orrs	r3, r4
 800690a:	b29b      	uxth	r3, r3
 800690c:	8013      	strh	r3, [r2, #0]
 800690e:	e215      	b.n	8006d3c <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006910:	687c      	ldr	r4, [r7, #4]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006918:	b29b      	uxth	r3, r3
 800691a:	441c      	add	r4, r3
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	00db      	lsls	r3, r3, #3
 8006922:	4423      	add	r3, r4
 8006924:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006928:	461c      	mov	r4, r3
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	88db      	ldrh	r3, [r3, #6]
 800692e:	085b      	lsrs	r3, r3, #1
 8006930:	b29b      	uxth	r3, r3
 8006932:	005b      	lsls	r3, r3, #1
 8006934:	b29b      	uxth	r3, r3
 8006936:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006938:	687c      	ldr	r4, [r7, #4]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006940:	b29b      	uxth	r3, r3
 8006942:	441c      	add	r4, r3
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	00db      	lsls	r3, r3, #3
 800694a:	4423      	add	r3, r4
 800694c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006950:	461c      	mov	r4, r3
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10e      	bne.n	8006978 <USB_ActivateEndpoint+0x20c>
 800695a:	8823      	ldrh	r3, [r4, #0]
 800695c:	b29b      	uxth	r3, r3
 800695e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006962:	b29b      	uxth	r3, r3
 8006964:	8023      	strh	r3, [r4, #0]
 8006966:	8823      	ldrh	r3, [r4, #0]
 8006968:	b29b      	uxth	r3, r3
 800696a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800696e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006972:	b29b      	uxth	r3, r3
 8006974:	8023      	strh	r3, [r4, #0]
 8006976:	e02d      	b.n	80069d4 <USB_ActivateEndpoint+0x268>
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	2b3e      	cmp	r3, #62	; 0x3e
 800697e:	d812      	bhi.n	80069a6 <USB_ActivateEndpoint+0x23a>
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	085b      	lsrs	r3, r3, #1
 8006986:	60bb      	str	r3, [r7, #8]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b00      	cmp	r3, #0
 8006992:	d002      	beq.n	800699a <USB_ActivateEndpoint+0x22e>
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	3301      	adds	r3, #1
 8006998:	60bb      	str	r3, [r7, #8]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	b29b      	uxth	r3, r3
 800699e:	029b      	lsls	r3, r3, #10
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	8023      	strh	r3, [r4, #0]
 80069a4:	e016      	b.n	80069d4 <USB_ActivateEndpoint+0x268>
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	095b      	lsrs	r3, r3, #5
 80069ac:	60bb      	str	r3, [r7, #8]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	f003 031f 	and.w	r3, r3, #31
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d102      	bne.n	80069c0 <USB_ActivateEndpoint+0x254>
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	3b01      	subs	r3, #1
 80069be:	60bb      	str	r3, [r7, #8]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	029b      	lsls	r3, r3, #10
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	881b      	ldrh	r3, [r3, #0]
 80069e0:	b29c      	uxth	r4, r3
 80069e2:	4623      	mov	r3, r4
 80069e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d014      	beq.n	8006a16 <USB_ActivateEndpoint+0x2aa>
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a02:	b29c      	uxth	r4, r3
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	441a      	add	r2, r3
 8006a0e:	4b12      	ldr	r3, [pc, #72]	; (8006a58 <USB_ActivateEndpoint+0x2ec>)
 8006a10:	4323      	orrs	r3, r4
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a2c:	b29c      	uxth	r4, r3
 8006a2e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006a32:	b29c      	uxth	r4, r3
 8006a34:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006a38:	b29c      	uxth	r4, r3
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	441a      	add	r2, r3
 8006a44:	4b02      	ldr	r3, [pc, #8]	; (8006a50 <USB_ActivateEndpoint+0x2e4>)
 8006a46:	4323      	orrs	r3, r4
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	8013      	strh	r3, [r2, #0]
 8006a4c:	e176      	b.n	8006d3c <USB_ActivateEndpoint+0x5d0>
 8006a4e:	bf00      	nop
 8006a50:	ffff8080 	.word	0xffff8080
 8006a54:	ffff80c0 	.word	0xffff80c0
 8006a58:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	881b      	ldrh	r3, [r3, #0]
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a72:	b29c      	uxth	r4, r3
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	441a      	add	r2, r3
 8006a7e:	4b96      	ldr	r3, [pc, #600]	; (8006cd8 <USB_ActivateEndpoint+0x56c>)
 8006a80:	4323      	orrs	r3, r4
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006a86:	687c      	ldr	r4, [r7, #4]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	441c      	add	r4, r3
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	00db      	lsls	r3, r3, #3
 8006a98:	4423      	add	r3, r4
 8006a9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a9e:	461c      	mov	r4, r3
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	891b      	ldrh	r3, [r3, #8]
 8006aa4:	085b      	lsrs	r3, r3, #1
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	005b      	lsls	r3, r3, #1
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	8023      	strh	r3, [r4, #0]
 8006aae:	687c      	ldr	r4, [r7, #4]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	441c      	add	r4, r3
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	00db      	lsls	r3, r3, #3
 8006ac0:	4423      	add	r3, r4
 8006ac2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ac6:	461c      	mov	r4, r3
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	895b      	ldrh	r3, [r3, #10]
 8006acc:	085b      	lsrs	r3, r3, #1
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	785b      	ldrb	r3, [r3, #1]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f040 8088 	bne.w	8006bf0 <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	b29c      	uxth	r4, r3
 8006aee:	4623      	mov	r3, r4
 8006af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d014      	beq.n	8006b22 <USB_ActivateEndpoint+0x3b6>
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b0e:	b29c      	uxth	r4, r3
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	441a      	add	r2, r3
 8006b1a:	4b70      	ldr	r3, [pc, #448]	; (8006cdc <USB_ActivateEndpoint+0x570>)
 8006b1c:	4323      	orrs	r3, r4
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4413      	add	r3, r2
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	b29c      	uxth	r4, r3
 8006b30:	4623      	mov	r3, r4
 8006b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d014      	beq.n	8006b64 <USB_ActivateEndpoint+0x3f8>
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b50:	b29c      	uxth	r4, r3
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	441a      	add	r2, r3
 8006b5c:	4b60      	ldr	r3, [pc, #384]	; (8006ce0 <USB_ActivateEndpoint+0x574>)
 8006b5e:	4323      	orrs	r3, r4
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	881b      	ldrh	r3, [r3, #0]
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b7a:	b29c      	uxth	r4, r3
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	441a      	add	r2, r3
 8006b86:	4b56      	ldr	r3, [pc, #344]	; (8006ce0 <USB_ActivateEndpoint+0x574>)
 8006b88:	4323      	orrs	r3, r4
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba4:	b29c      	uxth	r4, r3
 8006ba6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006baa:	b29c      	uxth	r4, r3
 8006bac:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006bb0:	b29c      	uxth	r4, r3
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	441a      	add	r2, r3
 8006bbc:	4b49      	ldr	r3, [pc, #292]	; (8006ce4 <USB_ActivateEndpoint+0x578>)
 8006bbe:	4323      	orrs	r3, r4
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	881b      	ldrh	r3, [r3, #0]
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bda:	b29c      	uxth	r4, r3
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	441a      	add	r2, r3
 8006be6:	4b3f      	ldr	r3, [pc, #252]	; (8006ce4 <USB_ActivateEndpoint+0x578>)
 8006be8:	4323      	orrs	r3, r4
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	8013      	strh	r3, [r2, #0]
 8006bee:	e0a5      	b.n	8006d3c <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	b29c      	uxth	r4, r3
 8006bfe:	4623      	mov	r3, r4
 8006c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d014      	beq.n	8006c32 <USB_ActivateEndpoint+0x4c6>
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	881b      	ldrh	r3, [r3, #0]
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c1e:	b29c      	uxth	r4, r3
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	441a      	add	r2, r3
 8006c2a:	4b2c      	ldr	r3, [pc, #176]	; (8006cdc <USB_ActivateEndpoint+0x570>)
 8006c2c:	4323      	orrs	r3, r4
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	b29c      	uxth	r4, r3
 8006c40:	4623      	mov	r3, r4
 8006c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d014      	beq.n	8006c74 <USB_ActivateEndpoint+0x508>
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c60:	b29c      	uxth	r4, r3
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	441a      	add	r2, r3
 8006c6c:	4b1c      	ldr	r3, [pc, #112]	; (8006ce0 <USB_ActivateEndpoint+0x574>)
 8006c6e:	4323      	orrs	r3, r4
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8a:	b29c      	uxth	r4, r3
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	441a      	add	r2, r3
 8006c96:	4b11      	ldr	r3, [pc, #68]	; (8006cdc <USB_ActivateEndpoint+0x570>)
 8006c98:	4323      	orrs	r3, r4
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	78db      	ldrb	r3, [r3, #3]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d020      	beq.n	8006ce8 <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	881b      	ldrh	r3, [r3, #0]
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cbc:	b29c      	uxth	r4, r3
 8006cbe:	f084 0320 	eor.w	r3, r4, #32
 8006cc2:	b29c      	uxth	r4, r3
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	441a      	add	r2, r3
 8006cce:	4b05      	ldr	r3, [pc, #20]	; (8006ce4 <USB_ActivateEndpoint+0x578>)
 8006cd0:	4323      	orrs	r3, r4
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	8013      	strh	r3, [r2, #0]
 8006cd6:	e01c      	b.n	8006d12 <USB_ActivateEndpoint+0x5a6>
 8006cd8:	ffff8180 	.word	0xffff8180
 8006cdc:	ffffc080 	.word	0xffffc080
 8006ce0:	ffff80c0 	.word	0xffff80c0
 8006ce4:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4413      	add	r3, r2
 8006cf2:	881b      	ldrh	r3, [r3, #0]
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cfe:	b29c      	uxth	r4, r3
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	441a      	add	r2, r3
 8006d0a:	4b0f      	ldr	r3, [pc, #60]	; (8006d48 <USB_ActivateEndpoint+0x5dc>)
 8006d0c:	4323      	orrs	r3, r4
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d28:	b29c      	uxth	r4, r3
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	441a      	add	r2, r3
 8006d34:	4b04      	ldr	r3, [pc, #16]	; (8006d48 <USB_ActivateEndpoint+0x5dc>)
 8006d36:	4323      	orrs	r3, r4
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bc90      	pop	{r4, r7}
 8006d46:	4770      	bx	lr
 8006d48:	ffff8080 	.word	0xffff8080

08006d4c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d4c:	b490      	push	{r4, r7}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	7b1b      	ldrb	r3, [r3, #12]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d171      	bne.n	8006e42 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	785b      	ldrb	r3, [r3, #1]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d036      	beq.n	8006dd4 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	b29c      	uxth	r4, r3
 8006d74:	4623      	mov	r3, r4
 8006d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d014      	beq.n	8006da8 <USB_DeactivateEndpoint+0x5c>
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d94:	b29c      	uxth	r4, r3
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	441a      	add	r2, r3
 8006da0:	4b6b      	ldr	r3, [pc, #428]	; (8006f50 <USB_DeactivateEndpoint+0x204>)
 8006da2:	4323      	orrs	r3, r4
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	881b      	ldrh	r3, [r3, #0]
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dbe:	b29c      	uxth	r4, r3
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	441a      	add	r2, r3
 8006dca:	4b62      	ldr	r3, [pc, #392]	; (8006f54 <USB_DeactivateEndpoint+0x208>)
 8006dcc:	4323      	orrs	r3, r4
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	8013      	strh	r3, [r2, #0]
 8006dd2:	e144      	b.n	800705e <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4413      	add	r3, r2
 8006dde:	881b      	ldrh	r3, [r3, #0]
 8006de0:	b29c      	uxth	r4, r3
 8006de2:	4623      	mov	r3, r4
 8006de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d014      	beq.n	8006e16 <USB_DeactivateEndpoint+0xca>
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	881b      	ldrh	r3, [r3, #0]
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e02:	b29c      	uxth	r4, r3
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	441a      	add	r2, r3
 8006e0e:	4b52      	ldr	r3, [pc, #328]	; (8006f58 <USB_DeactivateEndpoint+0x20c>)
 8006e10:	4323      	orrs	r3, r4
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4413      	add	r3, r2
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e2c:	b29c      	uxth	r4, r3
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	441a      	add	r2, r3
 8006e38:	4b46      	ldr	r3, [pc, #280]	; (8006f54 <USB_DeactivateEndpoint+0x208>)
 8006e3a:	4323      	orrs	r3, r4
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	8013      	strh	r3, [r2, #0]
 8006e40:	e10d      	b.n	800705e <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	785b      	ldrb	r3, [r3, #1]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f040 8088 	bne.w	8006f5c <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	b29c      	uxth	r4, r3
 8006e5a:	4623      	mov	r3, r4
 8006e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d014      	beq.n	8006e8e <USB_DeactivateEndpoint+0x142>
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e7a:	b29c      	uxth	r4, r3
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	441a      	add	r2, r3
 8006e86:	4b34      	ldr	r3, [pc, #208]	; (8006f58 <USB_DeactivateEndpoint+0x20c>)
 8006e88:	4323      	orrs	r3, r4
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	b29c      	uxth	r4, r3
 8006e9c:	4623      	mov	r3, r4
 8006e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d014      	beq.n	8006ed0 <USB_DeactivateEndpoint+0x184>
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	881b      	ldrh	r3, [r3, #0]
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ebc:	b29c      	uxth	r4, r3
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	441a      	add	r2, r3
 8006ec8:	4b21      	ldr	r3, [pc, #132]	; (8006f50 <USB_DeactivateEndpoint+0x204>)
 8006eca:	4323      	orrs	r3, r4
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee6:	b29c      	uxth	r4, r3
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	441a      	add	r2, r3
 8006ef2:	4b17      	ldr	r3, [pc, #92]	; (8006f50 <USB_DeactivateEndpoint+0x204>)
 8006ef4:	4323      	orrs	r3, r4
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f10:	b29c      	uxth	r4, r3
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	441a      	add	r2, r3
 8006f1c:	4b0d      	ldr	r3, [pc, #52]	; (8006f54 <USB_DeactivateEndpoint+0x208>)
 8006f1e:	4323      	orrs	r3, r4
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	881b      	ldrh	r3, [r3, #0]
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f3a:	b29c      	uxth	r4, r3
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	441a      	add	r2, r3
 8006f46:	4b03      	ldr	r3, [pc, #12]	; (8006f54 <USB_DeactivateEndpoint+0x208>)
 8006f48:	4323      	orrs	r3, r4
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	8013      	strh	r3, [r2, #0]
 8006f4e:	e086      	b.n	800705e <USB_DeactivateEndpoint+0x312>
 8006f50:	ffff80c0 	.word	0xffff80c0
 8006f54:	ffff8080 	.word	0xffff8080
 8006f58:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	881b      	ldrh	r3, [r3, #0]
 8006f68:	b29c      	uxth	r4, r3
 8006f6a:	4623      	mov	r3, r4
 8006f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d014      	beq.n	8006f9e <USB_DeactivateEndpoint+0x252>
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f8a:	b29c      	uxth	r4, r3
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	441a      	add	r2, r3
 8006f96:	4b35      	ldr	r3, [pc, #212]	; (800706c <USB_DeactivateEndpoint+0x320>)
 8006f98:	4323      	orrs	r3, r4
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	b29c      	uxth	r4, r3
 8006fac:	4623      	mov	r3, r4
 8006fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d014      	beq.n	8006fe0 <USB_DeactivateEndpoint+0x294>
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	881b      	ldrh	r3, [r3, #0]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fcc:	b29c      	uxth	r4, r3
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	441a      	add	r2, r3
 8006fd8:	4b25      	ldr	r3, [pc, #148]	; (8007070 <USB_DeactivateEndpoint+0x324>)
 8006fda:	4323      	orrs	r3, r4
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff6:	b29c      	uxth	r4, r3
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	441a      	add	r2, r3
 8007002:	4b1a      	ldr	r3, [pc, #104]	; (800706c <USB_DeactivateEndpoint+0x320>)
 8007004:	4323      	orrs	r3, r4
 8007006:	b29b      	uxth	r3, r3
 8007008:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	881b      	ldrh	r3, [r3, #0]
 8007016:	b29b      	uxth	r3, r3
 8007018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800701c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007020:	b29c      	uxth	r4, r3
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	441a      	add	r2, r3
 800702c:	4b11      	ldr	r3, [pc, #68]	; (8007074 <USB_DeactivateEndpoint+0x328>)
 800702e:	4323      	orrs	r3, r4
 8007030:	b29b      	uxth	r3, r3
 8007032:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4413      	add	r3, r2
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	b29b      	uxth	r3, r3
 8007042:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800704a:	b29c      	uxth	r4, r3
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	441a      	add	r2, r3
 8007056:	4b07      	ldr	r3, [pc, #28]	; (8007074 <USB_DeactivateEndpoint+0x328>)
 8007058:	4323      	orrs	r3, r4
 800705a:	b29b      	uxth	r3, r3
 800705c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bc90      	pop	{r4, r7}
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	ffffc080 	.word	0xffffc080
 8007070:	ffff80c0 	.word	0xffff80c0
 8007074:	ffff8080 	.word	0xffff8080

08007078 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007078:	b590      	push	{r4, r7, lr}
 800707a:	b08d      	sub	sp, #52	; 0x34
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	785b      	ldrb	r3, [r3, #1]
 8007086:	2b01      	cmp	r3, #1
 8007088:	f040 8160 	bne.w	800734c <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	699a      	ldr	r2, [r3, #24]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	429a      	cmp	r2, r3
 8007096:	d909      	bls.n	80070ac <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	699a      	ldr	r2, [r3, #24]
 80070a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a4:	1ad2      	subs	r2, r2, r3
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	619a      	str	r2, [r3, #24]
 80070aa:	e005      	b.n	80070b8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2200      	movs	r2, #0
 80070b6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	7b1b      	ldrb	r3, [r3, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d119      	bne.n	80070f4 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	6959      	ldr	r1, [r3, #20]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	88da      	ldrh	r2, [r3, #6]
 80070c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fba8 	bl	8007822 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80070d2:	687c      	ldr	r4, [r7, #4]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070da:	b29b      	uxth	r3, r3
 80070dc:	441c      	add	r4, r3
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	00db      	lsls	r3, r3, #3
 80070e4:	4423      	add	r3, r4
 80070e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070ea:	461c      	mov	r4, r3
 80070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	8023      	strh	r3, [r4, #0]
 80070f2:	e10f      	b.n	8007314 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	881b      	ldrh	r3, [r3, #0]
 8007100:	b29b      	uxth	r3, r3
 8007102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007106:	2b00      	cmp	r3, #0
 8007108:	d065      	beq.n	80071d6 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800710a:	687c      	ldr	r4, [r7, #4]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	785b      	ldrb	r3, [r3, #1]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d148      	bne.n	80071a6 <USB_EPStartXfer+0x12e>
 8007114:	687c      	ldr	r4, [r7, #4]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800711c:	b29b      	uxth	r3, r3
 800711e:	441c      	add	r4, r3
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	00db      	lsls	r3, r3, #3
 8007126:	4423      	add	r3, r4
 8007128:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800712c:	461c      	mov	r4, r3
 800712e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10e      	bne.n	8007152 <USB_EPStartXfer+0xda>
 8007134:	8823      	ldrh	r3, [r4, #0]
 8007136:	b29b      	uxth	r3, r3
 8007138:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800713c:	b29b      	uxth	r3, r3
 800713e:	8023      	strh	r3, [r4, #0]
 8007140:	8823      	ldrh	r3, [r4, #0]
 8007142:	b29b      	uxth	r3, r3
 8007144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800714c:	b29b      	uxth	r3, r3
 800714e:	8023      	strh	r3, [r4, #0]
 8007150:	e03d      	b.n	80071ce <USB_EPStartXfer+0x156>
 8007152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007154:	2b3e      	cmp	r3, #62	; 0x3e
 8007156:	d810      	bhi.n	800717a <USB_EPStartXfer+0x102>
 8007158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715a:	085b      	lsrs	r3, r3, #1
 800715c:	627b      	str	r3, [r7, #36]	; 0x24
 800715e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	2b00      	cmp	r3, #0
 8007166:	d002      	beq.n	800716e <USB_EPStartXfer+0xf6>
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	3301      	adds	r3, #1
 800716c:	627b      	str	r3, [r7, #36]	; 0x24
 800716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007170:	b29b      	uxth	r3, r3
 8007172:	029b      	lsls	r3, r3, #10
 8007174:	b29b      	uxth	r3, r3
 8007176:	8023      	strh	r3, [r4, #0]
 8007178:	e029      	b.n	80071ce <USB_EPStartXfer+0x156>
 800717a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717c:	095b      	lsrs	r3, r3, #5
 800717e:	627b      	str	r3, [r7, #36]	; 0x24
 8007180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007182:	f003 031f 	and.w	r3, r3, #31
 8007186:	2b00      	cmp	r3, #0
 8007188:	d102      	bne.n	8007190 <USB_EPStartXfer+0x118>
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	3b01      	subs	r3, #1
 800718e:	627b      	str	r3, [r7, #36]	; 0x24
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007192:	b29b      	uxth	r3, r3
 8007194:	029b      	lsls	r3, r3, #10
 8007196:	b29b      	uxth	r3, r3
 8007198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800719c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	8023      	strh	r3, [r4, #0]
 80071a4:	e013      	b.n	80071ce <USB_EPStartXfer+0x156>
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	785b      	ldrb	r3, [r3, #1]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d10f      	bne.n	80071ce <USB_EPStartXfer+0x156>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	441c      	add	r4, r3
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	00db      	lsls	r3, r3, #3
 80071be:	4423      	add	r3, r4
 80071c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	895b      	ldrh	r3, [r3, #10]
 80071d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80071d4:	e063      	b.n	800729e <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	785b      	ldrb	r3, [r3, #1]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d148      	bne.n	8007270 <USB_EPStartXfer+0x1f8>
 80071de:	687c      	ldr	r4, [r7, #4]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	441c      	add	r4, r3
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	00db      	lsls	r3, r3, #3
 80071f0:	4423      	add	r3, r4
 80071f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071f6:	461c      	mov	r4, r3
 80071f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10e      	bne.n	800721c <USB_EPStartXfer+0x1a4>
 80071fe:	8823      	ldrh	r3, [r4, #0]
 8007200:	b29b      	uxth	r3, r3
 8007202:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007206:	b29b      	uxth	r3, r3
 8007208:	8023      	strh	r3, [r4, #0]
 800720a:	8823      	ldrh	r3, [r4, #0]
 800720c:	b29b      	uxth	r3, r3
 800720e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007212:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007216:	b29b      	uxth	r3, r3
 8007218:	8023      	strh	r3, [r4, #0]
 800721a:	e03d      	b.n	8007298 <USB_EPStartXfer+0x220>
 800721c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721e:	2b3e      	cmp	r3, #62	; 0x3e
 8007220:	d810      	bhi.n	8007244 <USB_EPStartXfer+0x1cc>
 8007222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007224:	085b      	lsrs	r3, r3, #1
 8007226:	623b      	str	r3, [r7, #32]
 8007228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b00      	cmp	r3, #0
 8007230:	d002      	beq.n	8007238 <USB_EPStartXfer+0x1c0>
 8007232:	6a3b      	ldr	r3, [r7, #32]
 8007234:	3301      	adds	r3, #1
 8007236:	623b      	str	r3, [r7, #32]
 8007238:	6a3b      	ldr	r3, [r7, #32]
 800723a:	b29b      	uxth	r3, r3
 800723c:	029b      	lsls	r3, r3, #10
 800723e:	b29b      	uxth	r3, r3
 8007240:	8023      	strh	r3, [r4, #0]
 8007242:	e029      	b.n	8007298 <USB_EPStartXfer+0x220>
 8007244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007246:	095b      	lsrs	r3, r3, #5
 8007248:	623b      	str	r3, [r7, #32]
 800724a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724c:	f003 031f 	and.w	r3, r3, #31
 8007250:	2b00      	cmp	r3, #0
 8007252:	d102      	bne.n	800725a <USB_EPStartXfer+0x1e2>
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	3b01      	subs	r3, #1
 8007258:	623b      	str	r3, [r7, #32]
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	b29b      	uxth	r3, r3
 800725e:	029b      	lsls	r3, r3, #10
 8007260:	b29b      	uxth	r3, r3
 8007262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800726a:	b29b      	uxth	r3, r3
 800726c:	8023      	strh	r3, [r4, #0]
 800726e:	e013      	b.n	8007298 <USB_EPStartXfer+0x220>
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	785b      	ldrb	r3, [r3, #1]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d10f      	bne.n	8007298 <USB_EPStartXfer+0x220>
 8007278:	687c      	ldr	r4, [r7, #4]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007280:	b29b      	uxth	r3, r3
 8007282:	441c      	add	r4, r3
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	00db      	lsls	r3, r3, #3
 800728a:	4423      	add	r3, r4
 800728c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007290:	461c      	mov	r4, r3
 8007292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007294:	b29b      	uxth	r3, r3
 8007296:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	891b      	ldrh	r3, [r3, #8]
 800729c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	6959      	ldr	r1, [r3, #20]
 80072a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 faba 	bl	8007822 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	785b      	ldrb	r3, [r3, #1]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d115      	bne.n	80072e2 <USB_EPStartXfer+0x26a>
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	4413      	add	r3, r2
 80072c0:	881b      	ldrh	r3, [r3, #0]
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072cc:	b29c      	uxth	r4, r3
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	441a      	add	r2, r3
 80072d8:	4b9a      	ldr	r3, [pc, #616]	; (8007544 <USB_EPStartXfer+0x4cc>)
 80072da:	4323      	orrs	r3, r4
 80072dc:	b29b      	uxth	r3, r3
 80072de:	8013      	strh	r3, [r2, #0]
 80072e0:	e018      	b.n	8007314 <USB_EPStartXfer+0x29c>
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	785b      	ldrb	r3, [r3, #1]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d114      	bne.n	8007314 <USB_EPStartXfer+0x29c>
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007300:	b29c      	uxth	r4, r3
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	441a      	add	r2, r3
 800730c:	4b8e      	ldr	r3, [pc, #568]	; (8007548 <USB_EPStartXfer+0x4d0>)
 800730e:	4323      	orrs	r3, r4
 8007310:	b29b      	uxth	r3, r3
 8007312:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	4413      	add	r3, r2
 800731e:	881b      	ldrh	r3, [r3, #0]
 8007320:	b29b      	uxth	r3, r3
 8007322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800732a:	b29c      	uxth	r4, r3
 800732c:	f084 0310 	eor.w	r3, r4, #16
 8007330:	b29c      	uxth	r4, r3
 8007332:	f084 0320 	eor.w	r3, r4, #32
 8007336:	b29c      	uxth	r4, r3
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	441a      	add	r2, r3
 8007342:	4b82      	ldr	r3, [pc, #520]	; (800754c <USB_EPStartXfer+0x4d4>)
 8007344:	4323      	orrs	r3, r4
 8007346:	b29b      	uxth	r3, r3
 8007348:	8013      	strh	r3, [r2, #0]
 800734a:	e146      	b.n	80075da <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	699a      	ldr	r2, [r3, #24]
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	429a      	cmp	r2, r3
 8007356:	d909      	bls.n	800736c <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	699a      	ldr	r2, [r3, #24]
 8007362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007364:	1ad2      	subs	r2, r2, r3
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	619a      	str	r2, [r3, #24]
 800736a:	e005      	b.n	8007378 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	2200      	movs	r2, #0
 8007376:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	7b1b      	ldrb	r3, [r3, #12]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d148      	bne.n	8007412 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007380:	687c      	ldr	r4, [r7, #4]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007388:	b29b      	uxth	r3, r3
 800738a:	441c      	add	r4, r3
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	00db      	lsls	r3, r3, #3
 8007392:	4423      	add	r3, r4
 8007394:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007398:	461c      	mov	r4, r3
 800739a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10e      	bne.n	80073be <USB_EPStartXfer+0x346>
 80073a0:	8823      	ldrh	r3, [r4, #0]
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	8023      	strh	r3, [r4, #0]
 80073ac:	8823      	ldrh	r3, [r4, #0]
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	8023      	strh	r3, [r4, #0]
 80073bc:	e0f2      	b.n	80075a4 <USB_EPStartXfer+0x52c>
 80073be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c0:	2b3e      	cmp	r3, #62	; 0x3e
 80073c2:	d810      	bhi.n	80073e6 <USB_EPStartXfer+0x36e>
 80073c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c6:	085b      	lsrs	r3, r3, #1
 80073c8:	61fb      	str	r3, [r7, #28]
 80073ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d002      	beq.n	80073da <USB_EPStartXfer+0x362>
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	3301      	adds	r3, #1
 80073d8:	61fb      	str	r3, [r7, #28]
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	b29b      	uxth	r3, r3
 80073de:	029b      	lsls	r3, r3, #10
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	8023      	strh	r3, [r4, #0]
 80073e4:	e0de      	b.n	80075a4 <USB_EPStartXfer+0x52c>
 80073e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e8:	095b      	lsrs	r3, r3, #5
 80073ea:	61fb      	str	r3, [r7, #28]
 80073ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ee:	f003 031f 	and.w	r3, r3, #31
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d102      	bne.n	80073fc <USB_EPStartXfer+0x384>
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	3b01      	subs	r3, #1
 80073fa:	61fb      	str	r3, [r7, #28]
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	b29b      	uxth	r3, r3
 8007400:	029b      	lsls	r3, r3, #10
 8007402:	b29b      	uxth	r3, r3
 8007404:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007408:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800740c:	b29b      	uxth	r3, r3
 800740e:	8023      	strh	r3, [r4, #0]
 8007410:	e0c8      	b.n	80075a4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	785b      	ldrb	r3, [r3, #1]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d148      	bne.n	80074ac <USB_EPStartXfer+0x434>
 800741a:	687c      	ldr	r4, [r7, #4]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007422:	b29b      	uxth	r3, r3
 8007424:	441c      	add	r4, r3
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	00db      	lsls	r3, r3, #3
 800742c:	4423      	add	r3, r4
 800742e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007432:	461c      	mov	r4, r3
 8007434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10e      	bne.n	8007458 <USB_EPStartXfer+0x3e0>
 800743a:	8823      	ldrh	r3, [r4, #0]
 800743c:	b29b      	uxth	r3, r3
 800743e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007442:	b29b      	uxth	r3, r3
 8007444:	8023      	strh	r3, [r4, #0]
 8007446:	8823      	ldrh	r3, [r4, #0]
 8007448:	b29b      	uxth	r3, r3
 800744a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800744e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007452:	b29b      	uxth	r3, r3
 8007454:	8023      	strh	r3, [r4, #0]
 8007456:	e03d      	b.n	80074d4 <USB_EPStartXfer+0x45c>
 8007458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745a:	2b3e      	cmp	r3, #62	; 0x3e
 800745c:	d810      	bhi.n	8007480 <USB_EPStartXfer+0x408>
 800745e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007460:	085b      	lsrs	r3, r3, #1
 8007462:	61bb      	str	r3, [r7, #24]
 8007464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b00      	cmp	r3, #0
 800746c:	d002      	beq.n	8007474 <USB_EPStartXfer+0x3fc>
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	3301      	adds	r3, #1
 8007472:	61bb      	str	r3, [r7, #24]
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	b29b      	uxth	r3, r3
 8007478:	029b      	lsls	r3, r3, #10
 800747a:	b29b      	uxth	r3, r3
 800747c:	8023      	strh	r3, [r4, #0]
 800747e:	e029      	b.n	80074d4 <USB_EPStartXfer+0x45c>
 8007480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007482:	095b      	lsrs	r3, r3, #5
 8007484:	61bb      	str	r3, [r7, #24]
 8007486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007488:	f003 031f 	and.w	r3, r3, #31
 800748c:	2b00      	cmp	r3, #0
 800748e:	d102      	bne.n	8007496 <USB_EPStartXfer+0x41e>
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	3b01      	subs	r3, #1
 8007494:	61bb      	str	r3, [r7, #24]
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	b29b      	uxth	r3, r3
 800749a:	029b      	lsls	r3, r3, #10
 800749c:	b29b      	uxth	r3, r3
 800749e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	8023      	strh	r3, [r4, #0]
 80074aa:	e013      	b.n	80074d4 <USB_EPStartXfer+0x45c>
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	785b      	ldrb	r3, [r3, #1]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d10f      	bne.n	80074d4 <USB_EPStartXfer+0x45c>
 80074b4:	687c      	ldr	r4, [r7, #4]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074bc:	b29b      	uxth	r3, r3
 80074be:	441c      	add	r4, r3
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	00db      	lsls	r3, r3, #3
 80074c6:	4423      	add	r3, r4
 80074c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074cc:	461c      	mov	r4, r3
 80074ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	8023      	strh	r3, [r4, #0]
 80074d4:	687c      	ldr	r4, [r7, #4]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	785b      	ldrb	r3, [r3, #1]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d14e      	bne.n	800757c <USB_EPStartXfer+0x504>
 80074de:	687c      	ldr	r4, [r7, #4]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	441c      	add	r4, r3
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	00db      	lsls	r3, r3, #3
 80074f0:	4423      	add	r3, r4
 80074f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074f6:	461c      	mov	r4, r3
 80074f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10e      	bne.n	800751c <USB_EPStartXfer+0x4a4>
 80074fe:	8823      	ldrh	r3, [r4, #0]
 8007500:	b29b      	uxth	r3, r3
 8007502:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007506:	b29b      	uxth	r3, r3
 8007508:	8023      	strh	r3, [r4, #0]
 800750a:	8823      	ldrh	r3, [r4, #0]
 800750c:	b29b      	uxth	r3, r3
 800750e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007516:	b29b      	uxth	r3, r3
 8007518:	8023      	strh	r3, [r4, #0]
 800751a:	e043      	b.n	80075a4 <USB_EPStartXfer+0x52c>
 800751c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751e:	2b3e      	cmp	r3, #62	; 0x3e
 8007520:	d816      	bhi.n	8007550 <USB_EPStartXfer+0x4d8>
 8007522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007524:	085b      	lsrs	r3, r3, #1
 8007526:	617b      	str	r3, [r7, #20]
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	2b00      	cmp	r3, #0
 8007530:	d002      	beq.n	8007538 <USB_EPStartXfer+0x4c0>
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	3301      	adds	r3, #1
 8007536:	617b      	str	r3, [r7, #20]
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	b29b      	uxth	r3, r3
 800753c:	029b      	lsls	r3, r3, #10
 800753e:	b29b      	uxth	r3, r3
 8007540:	8023      	strh	r3, [r4, #0]
 8007542:	e02f      	b.n	80075a4 <USB_EPStartXfer+0x52c>
 8007544:	ffff80c0 	.word	0xffff80c0
 8007548:	ffffc080 	.word	0xffffc080
 800754c:	ffff8080 	.word	0xffff8080
 8007550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007552:	095b      	lsrs	r3, r3, #5
 8007554:	617b      	str	r3, [r7, #20]
 8007556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007558:	f003 031f 	and.w	r3, r3, #31
 800755c:	2b00      	cmp	r3, #0
 800755e:	d102      	bne.n	8007566 <USB_EPStartXfer+0x4ee>
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	3b01      	subs	r3, #1
 8007564:	617b      	str	r3, [r7, #20]
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	b29b      	uxth	r3, r3
 800756a:	029b      	lsls	r3, r3, #10
 800756c:	b29b      	uxth	r3, r3
 800756e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007576:	b29b      	uxth	r3, r3
 8007578:	8023      	strh	r3, [r4, #0]
 800757a:	e013      	b.n	80075a4 <USB_EPStartXfer+0x52c>
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	785b      	ldrb	r3, [r3, #1]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d10f      	bne.n	80075a4 <USB_EPStartXfer+0x52c>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800758a:	b29b      	uxth	r3, r3
 800758c:	441c      	add	r4, r3
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	00db      	lsls	r3, r3, #3
 8007594:	4423      	add	r3, r4
 8007596:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800759a:	613b      	str	r3, [r7, #16]
 800759c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759e:	b29a      	uxth	r2, r3
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	881b      	ldrh	r3, [r3, #0]
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ba:	b29c      	uxth	r4, r3
 80075bc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80075c0:	b29c      	uxth	r4, r3
 80075c2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80075c6:	b29c      	uxth	r4, r3
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	441a      	add	r2, r3
 80075d2:	4b04      	ldr	r3, [pc, #16]	; (80075e4 <USB_EPStartXfer+0x56c>)
 80075d4:	4323      	orrs	r3, r4
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3734      	adds	r7, #52	; 0x34
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd90      	pop	{r4, r7, pc}
 80075e4:	ffff8080 	.word	0xffff8080

080075e8 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075e8:	b490      	push	{r4, r7}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	785b      	ldrb	r3, [r3, #1]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d018      	beq.n	800762c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4413      	add	r3, r2
 8007604:	881b      	ldrh	r3, [r3, #0]
 8007606:	b29b      	uxth	r3, r3
 8007608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800760c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007610:	b29c      	uxth	r4, r3
 8007612:	f084 0310 	eor.w	r3, r4, #16
 8007616:	b29c      	uxth	r4, r3
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	441a      	add	r2, r3
 8007622:	4b11      	ldr	r3, [pc, #68]	; (8007668 <USB_EPSetStall+0x80>)
 8007624:	4323      	orrs	r3, r4
 8007626:	b29b      	uxth	r3, r3
 8007628:	8013      	strh	r3, [r2, #0]
 800762a:	e017      	b.n	800765c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4413      	add	r3, r2
 8007636:	881b      	ldrh	r3, [r3, #0]
 8007638:	b29b      	uxth	r3, r3
 800763a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800763e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007642:	b29c      	uxth	r4, r3
 8007644:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007648:	b29c      	uxth	r4, r3
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	441a      	add	r2, r3
 8007654:	4b04      	ldr	r3, [pc, #16]	; (8007668 <USB_EPSetStall+0x80>)
 8007656:	4323      	orrs	r3, r4
 8007658:	b29b      	uxth	r3, r3
 800765a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bc90      	pop	{r4, r7}
 8007666:	4770      	bx	lr
 8007668:	ffff8080 	.word	0xffff8080

0800766c <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800766c:	b490      	push	{r4, r7}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	7b1b      	ldrb	r3, [r3, #12]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d17d      	bne.n	800777a <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	785b      	ldrb	r3, [r3, #1]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d03d      	beq.n	8007702 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	881b      	ldrh	r3, [r3, #0]
 8007692:	b29c      	uxth	r4, r3
 8007694:	4623      	mov	r3, r4
 8007696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769a:	2b00      	cmp	r3, #0
 800769c:	d014      	beq.n	80076c8 <USB_EPClearStall+0x5c>
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4413      	add	r3, r2
 80076a8:	881b      	ldrh	r3, [r3, #0]
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b4:	b29c      	uxth	r4, r3
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	441a      	add	r2, r3
 80076c0:	4b31      	ldr	r3, [pc, #196]	; (8007788 <USB_EPClearStall+0x11c>)
 80076c2:	4323      	orrs	r3, r4
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	78db      	ldrb	r3, [r3, #3]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d054      	beq.n	800777a <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	b29b      	uxth	r3, r3
 80076de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076e6:	b29c      	uxth	r4, r3
 80076e8:	f084 0320 	eor.w	r3, r4, #32
 80076ec:	b29c      	uxth	r4, r3
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	441a      	add	r2, r3
 80076f8:	4b24      	ldr	r3, [pc, #144]	; (800778c <USB_EPClearStall+0x120>)
 80076fa:	4323      	orrs	r3, r4
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	8013      	strh	r3, [r2, #0]
 8007700:	e03b      	b.n	800777a <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	881b      	ldrh	r3, [r3, #0]
 800770e:	b29c      	uxth	r4, r3
 8007710:	4623      	mov	r3, r4
 8007712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d014      	beq.n	8007744 <USB_EPClearStall+0xd8>
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	881b      	ldrh	r3, [r3, #0]
 8007726:	b29b      	uxth	r3, r3
 8007728:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800772c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007730:	b29c      	uxth	r4, r3
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	441a      	add	r2, r3
 800773c:	4b14      	ldr	r3, [pc, #80]	; (8007790 <USB_EPClearStall+0x124>)
 800773e:	4323      	orrs	r3, r4
 8007740:	b29b      	uxth	r3, r3
 8007742:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4413      	add	r3, r2
 800774e:	881b      	ldrh	r3, [r3, #0]
 8007750:	b29b      	uxth	r3, r3
 8007752:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800775a:	b29c      	uxth	r4, r3
 800775c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007760:	b29c      	uxth	r4, r3
 8007762:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007766:	b29c      	uxth	r4, r3
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	441a      	add	r2, r3
 8007772:	4b06      	ldr	r3, [pc, #24]	; (800778c <USB_EPClearStall+0x120>)
 8007774:	4323      	orrs	r3, r4
 8007776:	b29b      	uxth	r3, r3
 8007778:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3708      	adds	r7, #8
 8007780:	46bd      	mov	sp, r7
 8007782:	bc90      	pop	{r4, r7}
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	ffff80c0 	.word	0xffff80c0
 800778c:	ffff8080 	.word	0xffff8080
 8007790:	ffffc080 	.word	0xffffc080

08007794 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	460b      	mov	r3, r1
 800779e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80077a0:	78fb      	ldrb	r3, [r7, #3]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d103      	bne.n	80077ae <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2280      	movs	r2, #128	; 0x80
 80077aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b085      	sub	sp, #20
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80077fc:	68fb      	ldr	r3, [r7, #12]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3714      	adds	r7, #20
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800780a:	b480      	push	{r7}
 800780c:	b083      	sub	sp, #12
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007822:	b480      	push	{r7}
 8007824:	b08d      	sub	sp, #52	; 0x34
 8007826:	af00      	add	r7, sp, #0
 8007828:	60f8      	str	r0, [r7, #12]
 800782a:	60b9      	str	r1, [r7, #8]
 800782c:	4611      	mov	r1, r2
 800782e:	461a      	mov	r2, r3
 8007830:	460b      	mov	r3, r1
 8007832:	80fb      	strh	r3, [r7, #6]
 8007834:	4613      	mov	r3, r2
 8007836:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007838:	88bb      	ldrh	r3, [r7, #4]
 800783a:	3301      	adds	r3, #1
 800783c:	085b      	lsrs	r3, r3, #1
 800783e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007848:	88fa      	ldrh	r2, [r7, #6]
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	4413      	add	r3, r2
 800784e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007852:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007858:	e01b      	b.n	8007892 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	3301      	adds	r3, #1
 8007864:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	b29b      	uxth	r3, r3
 800786c:	021b      	lsls	r3, r3, #8
 800786e:	b29b      	uxth	r3, r3
 8007870:	461a      	mov	r2, r3
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	4313      	orrs	r3, r2
 8007876:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	b29a      	uxth	r2, r3
 800787c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007882:	3302      	adds	r3, #2
 8007884:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007888:	3301      	adds	r3, #1
 800788a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800788c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788e:	3b01      	subs	r3, #1
 8007890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1e0      	bne.n	800785a <USB_WritePMA+0x38>
  }
}
 8007898:	bf00      	nop
 800789a:	3734      	adds	r7, #52	; 0x34
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b08b      	sub	sp, #44	; 0x2c
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	4611      	mov	r1, r2
 80078b0:	461a      	mov	r2, r3
 80078b2:	460b      	mov	r3, r1
 80078b4:	80fb      	strh	r3, [r7, #6]
 80078b6:	4613      	mov	r3, r2
 80078b8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80078ba:	88bb      	ldrh	r3, [r7, #4]
 80078bc:	085b      	lsrs	r3, r3, #1
 80078be:	b29b      	uxth	r3, r3
 80078c0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80078ca:	88fa      	ldrh	r2, [r7, #6]
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	4413      	add	r3, r2
 80078d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078d4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	627b      	str	r3, [r7, #36]	; 0x24
 80078da:	e018      	b.n	800790e <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	881b      	ldrh	r3, [r3, #0]
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	3302      	adds	r3, #2
 80078e8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	3301      	adds	r3, #1
 80078f6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	0a1b      	lsrs	r3, r3, #8
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	3301      	adds	r3, #1
 8007906:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	3b01      	subs	r3, #1
 800790c:	627b      	str	r3, [r7, #36]	; 0x24
 800790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1e3      	bne.n	80078dc <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007914:	88bb      	ldrh	r3, [r7, #4]
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	b29b      	uxth	r3, r3
 800791c:	2b00      	cmp	r3, #0
 800791e:	d007      	beq.n	8007930 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	b29b      	uxth	r3, r3
 8007926:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	b2da      	uxtb	r2, r3
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	701a      	strb	r2, [r3, #0]
  }
}
 8007930:	bf00      	nop
 8007932:	372c      	adds	r7, #44	; 0x2c
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	460b      	mov	r3, r1
 8007946:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007948:	2300      	movs	r3, #0
 800794a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	7c1b      	ldrb	r3, [r3, #16]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d115      	bne.n	8007980 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007954:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007958:	2202      	movs	r2, #2
 800795a:	2181      	movs	r1, #129	; 0x81
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f002 ffea 	bl	800a936 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800796c:	2202      	movs	r2, #2
 800796e:	2101      	movs	r1, #1
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f002 ffe0 	bl	800a936 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800797e:	e012      	b.n	80079a6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007980:	2340      	movs	r3, #64	; 0x40
 8007982:	2202      	movs	r2, #2
 8007984:	2181      	movs	r1, #129	; 0x81
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f002 ffd5 	bl	800a936 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007992:	2340      	movs	r3, #64	; 0x40
 8007994:	2202      	movs	r2, #2
 8007996:	2101      	movs	r1, #1
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f002 ffcc 	bl	800a936 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80079a6:	2308      	movs	r3, #8
 80079a8:	2203      	movs	r2, #3
 80079aa:	2182      	movs	r1, #130	; 0x82
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f002 ffc2 	bl	800a936 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80079b8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80079bc:	f003 f912 	bl	800abe4 <USBD_static_malloc>
 80079c0:	4602      	mov	r2, r0
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d102      	bne.n	80079d8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80079d2:	2301      	movs	r3, #1
 80079d4:	73fb      	strb	r3, [r7, #15]
 80079d6:	e026      	b.n	8007a26 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079de:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	7c1b      	ldrb	r3, [r3, #16]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d109      	bne.n	8007a16 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f003 f87c 	bl	800ab0c <USBD_LL_PrepareReceive>
 8007a14:	e007      	b.n	8007a26 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a1c:	2340      	movs	r3, #64	; 0x40
 8007a1e:	2101      	movs	r1, #1
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f003 f873 	bl	800ab0c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007a40:	2181      	movs	r1, #129	; 0x81
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f002 ff9d 	bl	800a982 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007a4e:	2101      	movs	r1, #1
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f002 ff96 	bl	800a982 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007a5e:	2182      	movs	r1, #130	; 0x82
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f002 ff8e 	bl	800a982 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00e      	beq.n	8007a94 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a86:	4618      	mov	r0, r3
 8007a88:	f003 f8ba 	bl	800ac00 <USBD_static_free>
    pdev->pClassData = NULL;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b086      	sub	sp, #24
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
 8007aa6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aae:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d039      	beq.n	8007b3c <USBD_CDC_Setup+0x9e>
 8007ac8:	2b20      	cmp	r3, #32
 8007aca:	d17c      	bne.n	8007bc6 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	88db      	ldrh	r3, [r3, #6]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d029      	beq.n	8007b28 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	b25b      	sxtb	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	da11      	bge.n	8007b02 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007aea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	88d2      	ldrh	r2, [r2, #6]
 8007af0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007af2:	6939      	ldr	r1, [r7, #16]
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	88db      	ldrh	r3, [r3, #6]
 8007af8:	461a      	mov	r2, r3
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f001 f9fa 	bl	8008ef4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007b00:	e068      	b.n	8007bd4 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	785a      	ldrb	r2, [r3, #1]
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	88db      	ldrh	r3, [r3, #6]
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007b18:	6939      	ldr	r1, [r7, #16]
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	88db      	ldrh	r3, [r3, #6]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f001 fa15 	bl	8008f50 <USBD_CtlPrepareRx>
      break;
 8007b26:	e055      	b.n	8007bd4 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	683a      	ldr	r2, [r7, #0]
 8007b32:	7850      	ldrb	r0, [r2, #1]
 8007b34:	2200      	movs	r2, #0
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	4798      	blx	r3
      break;
 8007b3a:	e04b      	b.n	8007bd4 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	785b      	ldrb	r3, [r3, #1]
 8007b40:	2b0a      	cmp	r3, #10
 8007b42:	d017      	beq.n	8007b74 <USBD_CDC_Setup+0xd6>
 8007b44:	2b0b      	cmp	r3, #11
 8007b46:	d029      	beq.n	8007b9c <USBD_CDC_Setup+0xfe>
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d133      	bne.n	8007bb4 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b52:	2b03      	cmp	r3, #3
 8007b54:	d107      	bne.n	8007b66 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007b56:	f107 030c 	add.w	r3, r7, #12
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f001 f9c8 	bl	8008ef4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b64:	e02e      	b.n	8007bc4 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f001 f958 	bl	8008e1e <USBD_CtlError>
            ret = USBD_FAIL;
 8007b6e:	2302      	movs	r3, #2
 8007b70:	75fb      	strb	r3, [r7, #23]
          break;
 8007b72:	e027      	b.n	8007bc4 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b7a:	2b03      	cmp	r3, #3
 8007b7c:	d107      	bne.n	8007b8e <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b7e:	f107 030f 	add.w	r3, r7, #15
 8007b82:	2201      	movs	r2, #1
 8007b84:	4619      	mov	r1, r3
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f001 f9b4 	bl	8008ef4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b8c:	e01a      	b.n	8007bc4 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f001 f944 	bl	8008e1e <USBD_CtlError>
            ret = USBD_FAIL;
 8007b96:	2302      	movs	r3, #2
 8007b98:	75fb      	strb	r3, [r7, #23]
          break;
 8007b9a:	e013      	b.n	8007bc4 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	d00d      	beq.n	8007bc2 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8007ba6:	6839      	ldr	r1, [r7, #0]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f001 f938 	bl	8008e1e <USBD_CtlError>
            ret = USBD_FAIL;
 8007bae:	2302      	movs	r3, #2
 8007bb0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007bb2:	e006      	b.n	8007bc2 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f001 f931 	bl	8008e1e <USBD_CtlError>
          ret = USBD_FAIL;
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	75fb      	strb	r3, [r7, #23]
          break;
 8007bc0:	e000      	b.n	8007bc4 <USBD_CDC_Setup+0x126>
          break;
 8007bc2:	bf00      	nop
      }
      break;
 8007bc4:	e006      	b.n	8007bd4 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f001 f928 	bl	8008e1e <USBD_CtlError>
      ret = USBD_FAIL;
 8007bce:	2302      	movs	r3, #2
 8007bd0:	75fb      	strb	r3, [r7, #23]
      break;
 8007bd2:	bf00      	nop
  }

  return ret;
 8007bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b084      	sub	sp, #16
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
 8007be6:	460b      	mov	r3, r1
 8007be8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bf8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d037      	beq.n	8007c74 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007c04:	78fa      	ldrb	r2, [r7, #3]
 8007c06:	6879      	ldr	r1, [r7, #4]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	440b      	add	r3, r1
 8007c12:	331c      	adds	r3, #28
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d026      	beq.n	8007c68 <USBD_CDC_DataIn+0x8a>
 8007c1a:	78fa      	ldrb	r2, [r7, #3]
 8007c1c:	6879      	ldr	r1, [r7, #4]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	440b      	add	r3, r1
 8007c28:	331c      	adds	r3, #28
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	78fa      	ldrb	r2, [r7, #3]
 8007c2e:	68b9      	ldr	r1, [r7, #8]
 8007c30:	0152      	lsls	r2, r2, #5
 8007c32:	440a      	add	r2, r1
 8007c34:	3238      	adds	r2, #56	; 0x38
 8007c36:	6812      	ldr	r2, [r2, #0]
 8007c38:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c3c:	fb02 f201 	mul.w	r2, r2, r1
 8007c40:	1a9b      	subs	r3, r3, r2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d110      	bne.n	8007c68 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007c46:	78fa      	ldrb	r2, [r7, #3]
 8007c48:	6879      	ldr	r1, [r7, #4]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	440b      	add	r3, r1
 8007c54:	331c      	adds	r3, #28
 8007c56:	2200      	movs	r2, #0
 8007c58:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c5a:	78f9      	ldrb	r1, [r7, #3]
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	2200      	movs	r2, #0
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f002 ff30 	bl	800aac6 <USBD_LL_Transmit>
 8007c66:	e003      	b.n	8007c70 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	e000      	b.n	8007c76 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8007c74:	2302      	movs	r3, #2
  }
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b084      	sub	sp, #16
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	460b      	mov	r3, r1
 8007c88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c90:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007c92:	78fb      	ldrb	r3, [r7, #3]
 8007c94:	4619      	mov	r1, r3
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f002 ff5b 	bl	800ab52 <USBD_LL_GetRxDataSize>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00d      	beq.n	8007cca <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007cc2:	4611      	mov	r1, r2
 8007cc4:	4798      	blx	r3

    return USBD_OK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	e000      	b.n	8007ccc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007cca:	2302      	movs	r3, #2
  }
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d015      	beq.n	8007d1a <USBD_CDC_EP0_RxReady+0x46>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007cf4:	2bff      	cmp	r3, #255	; 0xff
 8007cf6:	d010      	beq.n	8007d1a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007d06:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d0e:	b292      	uxth	r2, r2
 8007d10:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	22ff      	movs	r2, #255	; 0xff
 8007d16:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2243      	movs	r2, #67	; 0x43
 8007d30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007d32:	4b03      	ldr	r3, [pc, #12]	; (8007d40 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr
 8007d40:	20000094 	.word	0x20000094

08007d44 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2243      	movs	r2, #67	; 0x43
 8007d50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007d52:	4b03      	ldr	r3, [pc, #12]	; (8007d60 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	20000050 	.word	0x20000050

08007d64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2243      	movs	r2, #67	; 0x43
 8007d70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007d72:	4b03      	ldr	r3, [pc, #12]	; (8007d80 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	200000d8 	.word	0x200000d8

08007d84 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	220a      	movs	r2, #10
 8007d90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007d92:	4b03      	ldr	r3, [pc, #12]	; (8007da0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	2000000c 	.word	0x2000000c

08007da4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007dae:	2302      	movs	r3, #2
 8007db0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d005      	beq.n	8007dc4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b087      	sub	sp, #28
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	60f8      	str	r0, [r7, #12]
 8007dda:	60b9      	str	r1, [r7, #8]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007df0:	88fa      	ldrh	r2, [r7, #6]
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	371c      	adds	r7, #28
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b085      	sub	sp, #20
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e16:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b084      	sub	sp, #16
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e3c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d017      	beq.n	8007e78 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	7c1b      	ldrb	r3, [r3, #16]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d109      	bne.n	8007e64 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f002 fe55 	bl	800ab0c <USBD_LL_PrepareReceive>
 8007e62:	e007      	b.n	8007e74 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e6a:	2340      	movs	r3, #64	; 0x40
 8007e6c:	2101      	movs	r1, #1
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f002 fe4c 	bl	800ab0c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	e000      	b.n	8007e7a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007e78:	2302      	movs	r3, #2
  }
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	60f8      	str	r0, [r7, #12]
 8007e8a:	60b9      	str	r1, [r7, #8]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d101      	bne.n	8007e9a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007e96:	2302      	movs	r3, #2
 8007e98:	e01a      	b.n	8007ed0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d003      	beq.n	8007eac <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	79fa      	ldrb	r2, [r7, #7]
 8007ec6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f002 fcb9 	bl	800a840 <USBD_LL_Init>

  return USBD_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d006      	beq.n	8007efa <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	73fb      	strb	r3, [r7, #15]
 8007ef8:	e001      	b.n	8007efe <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007efa:	2302      	movs	r3, #2
 8007efc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f002 fcf3 	bl	800a900 <USBD_LL_Start>

  return USBD_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr

08007f3a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	460b      	mov	r3, r1
 8007f44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007f46:	2302      	movs	r3, #2
 8007f48:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00c      	beq.n	8007f6e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	78fa      	ldrb	r2, [r7, #3]
 8007f5e:	4611      	mov	r1, r2
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	4798      	blx	r3
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	78fa      	ldrb	r2, [r7, #3]
 8007f8e:	4611      	mov	r1, r2
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	4798      	blx	r3

  return USBD_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b082      	sub	sp, #8
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007fae:	6839      	ldr	r1, [r7, #0]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 fef7 	bl	8008da4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007fd2:	f003 031f 	and.w	r3, r3, #31
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d00c      	beq.n	8007ff4 <USBD_LL_SetupStage+0x56>
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d302      	bcc.n	8007fe4 <USBD_LL_SetupStage+0x46>
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d010      	beq.n	8008004 <USBD_LL_SetupStage+0x66>
 8007fe2:	e017      	b.n	8008014 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007fea:	4619      	mov	r1, r3
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f9cd 	bl	800838c <USBD_StdDevReq>
      break;
 8007ff2:	e01a      	b.n	800802a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fa2f 	bl	8008460 <USBD_StdItfReq>
      break;
 8008002:	e012      	b.n	800802a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800800a:	4619      	mov	r1, r3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fa6d 	bl	80084ec <USBD_StdEPReq>
      break;
 8008012:	e00a      	b.n	800802a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800801a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800801e:	b2db      	uxtb	r3, r3
 8008020:	4619      	mov	r1, r3
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f002 fccc 	bl	800a9c0 <USBD_LL_StallEP>
      break;
 8008028:	bf00      	nop
  }

  return USBD_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	460b      	mov	r3, r1
 800803e:	607a      	str	r2, [r7, #4]
 8008040:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008042:	7afb      	ldrb	r3, [r7, #11]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d14b      	bne.n	80080e0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800804e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008056:	2b03      	cmp	r3, #3
 8008058:	d134      	bne.n	80080c4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	68da      	ldr	r2, [r3, #12]
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	429a      	cmp	r2, r3
 8008064:	d919      	bls.n	800809a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	68da      	ldr	r2, [r3, #12]
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	1ad2      	subs	r2, r2, r3
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	68da      	ldr	r2, [r3, #12]
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800807c:	429a      	cmp	r2, r3
 800807e:	d203      	bcs.n	8008088 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008084:	b29b      	uxth	r3, r3
 8008086:	e002      	b.n	800808e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800808c:	b29b      	uxth	r3, r3
 800808e:	461a      	mov	r2, r3
 8008090:	6879      	ldr	r1, [r7, #4]
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f000 ff7a 	bl	8008f8c <USBD_CtlContinueRx>
 8008098:	e038      	b.n	800810c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00a      	beq.n	80080bc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80080ac:	2b03      	cmp	r3, #3
 80080ae:	d105      	bne.n	80080bc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 ff77 	bl	8008fb0 <USBD_CtlSendStatus>
 80080c2:	e023      	b.n	800810c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080ca:	2b05      	cmp	r3, #5
 80080cc:	d11e      	bne.n	800810c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80080d6:	2100      	movs	r1, #0
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f002 fc71 	bl	800a9c0 <USBD_LL_StallEP>
 80080de:	e015      	b.n	800810c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00d      	beq.n	8008108 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d108      	bne.n	8008108 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	7afa      	ldrb	r2, [r7, #11]
 8008100:	4611      	mov	r1, r2
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	4798      	blx	r3
 8008106:	e001      	b.n	800810c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008108:	2302      	movs	r3, #2
 800810a:	e000      	b.n	800810e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3718      	adds	r7, #24
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b086      	sub	sp, #24
 800811a:	af00      	add	r7, sp, #0
 800811c:	60f8      	str	r0, [r7, #12]
 800811e:	460b      	mov	r3, r1
 8008120:	607a      	str	r2, [r7, #4]
 8008122:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008124:	7afb      	ldrb	r3, [r7, #11]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d17f      	bne.n	800822a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3314      	adds	r3, #20
 800812e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008136:	2b02      	cmp	r3, #2
 8008138:	d15c      	bne.n	80081f4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	68da      	ldr	r2, [r3, #12]
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	429a      	cmp	r2, r3
 8008144:	d915      	bls.n	8008172 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	68da      	ldr	r2, [r3, #12]
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	1ad2      	subs	r2, r2, r3
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	b29b      	uxth	r3, r3
 800815a:	461a      	mov	r2, r3
 800815c:	6879      	ldr	r1, [r7, #4]
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 fee4 	bl	8008f2c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008164:	2300      	movs	r3, #0
 8008166:	2200      	movs	r2, #0
 8008168:	2100      	movs	r1, #0
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f002 fcce 	bl	800ab0c <USBD_LL_PrepareReceive>
 8008170:	e04e      	b.n	8008210 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	6912      	ldr	r2, [r2, #16]
 800817a:	fbb3 f1f2 	udiv	r1, r3, r2
 800817e:	fb02 f201 	mul.w	r2, r2, r1
 8008182:	1a9b      	subs	r3, r3, r2
 8008184:	2b00      	cmp	r3, #0
 8008186:	d11c      	bne.n	80081c2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	689a      	ldr	r2, [r3, #8]
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008190:	429a      	cmp	r2, r3
 8008192:	d316      	bcc.n	80081c2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	689a      	ldr	r2, [r3, #8]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800819e:	429a      	cmp	r2, r3
 80081a0:	d20f      	bcs.n	80081c2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80081a2:	2200      	movs	r2, #0
 80081a4:	2100      	movs	r1, #0
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f000 fec0 	bl	8008f2c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081b4:	2300      	movs	r3, #0
 80081b6:	2200      	movs	r2, #0
 80081b8:	2100      	movs	r1, #0
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f002 fca6 	bl	800ab0c <USBD_LL_PrepareReceive>
 80081c0:	e026      	b.n	8008210 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00a      	beq.n	80081e4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80081d4:	2b03      	cmp	r3, #3
 80081d6:	d105      	bne.n	80081e4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80081e4:	2180      	movs	r1, #128	; 0x80
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f002 fbea 	bl	800a9c0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 fef2 	bl	8008fd6 <USBD_CtlReceiveStatus>
 80081f2:	e00d      	b.n	8008210 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081fa:	2b04      	cmp	r3, #4
 80081fc:	d004      	beq.n	8008208 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008204:	2b00      	cmp	r3, #0
 8008206:	d103      	bne.n	8008210 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008208:	2180      	movs	r1, #128	; 0x80
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f002 fbd8 	bl	800a9c0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008216:	2b01      	cmp	r3, #1
 8008218:	d11d      	bne.n	8008256 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f7ff fe82 	bl	8007f24 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008228:	e015      	b.n	8008256 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00d      	beq.n	8008252 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800823c:	2b03      	cmp	r3, #3
 800823e:	d108      	bne.n	8008252 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	7afa      	ldrb	r2, [r7, #11]
 800824a:	4611      	mov	r1, r2
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	4798      	blx	r3
 8008250:	e001      	b.n	8008256 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008252:	2302      	movs	r3, #2
 8008254:	e000      	b.n	8008258 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3718      	adds	r7, #24
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008268:	2340      	movs	r3, #64	; 0x40
 800826a:	2200      	movs	r2, #0
 800826c:	2100      	movs	r1, #0
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f002 fb61 	bl	800a936 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2240      	movs	r2, #64	; 0x40
 8008280:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008284:	2340      	movs	r3, #64	; 0x40
 8008286:	2200      	movs	r2, #0
 8008288:	2180      	movs	r1, #128	; 0x80
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f002 fb53 	bl	800a936 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2240      	movs	r2, #64	; 0x40
 800829a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d009      	beq.n	80082d8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	6852      	ldr	r2, [r2, #4]
 80082d0:	b2d2      	uxtb	r2, r2
 80082d2:	4611      	mov	r1, r2
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	4798      	blx	r3
  }

  return USBD_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3708      	adds	r7, #8
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b083      	sub	sp, #12
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	460b      	mov	r3, r1
 80082ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	78fa      	ldrb	r2, [r7, #3]
 80082f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008302:	b480      	push	{r7}
 8008304:	b083      	sub	sp, #12
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2204      	movs	r2, #4
 800831a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800833a:	2b04      	cmp	r3, #4
 800833c:	d105      	bne.n	800834a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008366:	2b03      	cmp	r3, #3
 8008368:	d10b      	bne.n	8008382 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008370:	69db      	ldr	r3, [r3, #28]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d005      	beq.n	8008382 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800837c:	69db      	ldr	r3, [r3, #28]
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083a2:	2b20      	cmp	r3, #32
 80083a4:	d004      	beq.n	80083b0 <USBD_StdDevReq+0x24>
 80083a6:	2b40      	cmp	r3, #64	; 0x40
 80083a8:	d002      	beq.n	80083b0 <USBD_StdDevReq+0x24>
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d008      	beq.n	80083c0 <USBD_StdDevReq+0x34>
 80083ae:	e04c      	b.n	800844a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	6839      	ldr	r1, [r7, #0]
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	4798      	blx	r3
      break;
 80083be:	e049      	b.n	8008454 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	785b      	ldrb	r3, [r3, #1]
 80083c4:	2b09      	cmp	r3, #9
 80083c6:	d83a      	bhi.n	800843e <USBD_StdDevReq+0xb2>
 80083c8:	a201      	add	r2, pc, #4	; (adr r2, 80083d0 <USBD_StdDevReq+0x44>)
 80083ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ce:	bf00      	nop
 80083d0:	08008421 	.word	0x08008421
 80083d4:	08008435 	.word	0x08008435
 80083d8:	0800843f 	.word	0x0800843f
 80083dc:	0800842b 	.word	0x0800842b
 80083e0:	0800843f 	.word	0x0800843f
 80083e4:	08008403 	.word	0x08008403
 80083e8:	080083f9 	.word	0x080083f9
 80083ec:	0800843f 	.word	0x0800843f
 80083f0:	08008417 	.word	0x08008417
 80083f4:	0800840d 	.word	0x0800840d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f9d4 	bl	80087a8 <USBD_GetDescriptor>
          break;
 8008400:	e022      	b.n	8008448 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fb61 	bl	8008acc <USBD_SetAddress>
          break;
 800840a:	e01d      	b.n	8008448 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800840c:	6839      	ldr	r1, [r7, #0]
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fb9e 	bl	8008b50 <USBD_SetConfig>
          break;
 8008414:	e018      	b.n	8008448 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fc27 	bl	8008c6c <USBD_GetConfig>
          break;
 800841e:	e013      	b.n	8008448 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008420:	6839      	ldr	r1, [r7, #0]
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fc56 	bl	8008cd4 <USBD_GetStatus>
          break;
 8008428:	e00e      	b.n	8008448 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fc84 	bl	8008d3a <USBD_SetFeature>
          break;
 8008432:	e009      	b.n	8008448 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008434:	6839      	ldr	r1, [r7, #0]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fc93 	bl	8008d62 <USBD_ClrFeature>
          break;
 800843c:	e004      	b.n	8008448 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800843e:	6839      	ldr	r1, [r7, #0]
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fcec 	bl	8008e1e <USBD_CtlError>
          break;
 8008446:	bf00      	nop
      }
      break;
 8008448:	e004      	b.n	8008454 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800844a:	6839      	ldr	r1, [r7, #0]
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fce6 	bl	8008e1e <USBD_CtlError>
      break;
 8008452:	bf00      	nop
  }

  return ret;
 8008454:	7bfb      	ldrb	r3, [r7, #15]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop

08008460 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008476:	2b20      	cmp	r3, #32
 8008478:	d003      	beq.n	8008482 <USBD_StdItfReq+0x22>
 800847a:	2b40      	cmp	r3, #64	; 0x40
 800847c:	d001      	beq.n	8008482 <USBD_StdItfReq+0x22>
 800847e:	2b00      	cmp	r3, #0
 8008480:	d12a      	bne.n	80084d8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008488:	3b01      	subs	r3, #1
 800848a:	2b02      	cmp	r3, #2
 800848c:	d81d      	bhi.n	80084ca <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	889b      	ldrh	r3, [r3, #4]
 8008492:	b2db      	uxtb	r3, r3
 8008494:	2b01      	cmp	r3, #1
 8008496:	d813      	bhi.n	80084c0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	6839      	ldr	r1, [r7, #0]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	4798      	blx	r3
 80084a6:	4603      	mov	r3, r0
 80084a8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	88db      	ldrh	r3, [r3, #6]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d110      	bne.n	80084d4 <USBD_StdItfReq+0x74>
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10d      	bne.n	80084d4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fd79 	bl	8008fb0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80084be:	e009      	b.n	80084d4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80084c0:	6839      	ldr	r1, [r7, #0]
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fcab 	bl	8008e1e <USBD_CtlError>
          break;
 80084c8:	e004      	b.n	80084d4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fca6 	bl	8008e1e <USBD_CtlError>
          break;
 80084d2:	e000      	b.n	80084d6 <USBD_StdItfReq+0x76>
          break;
 80084d4:	bf00      	nop
      }
      break;
 80084d6:	e004      	b.n	80084e2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fc9f 	bl	8008e1e <USBD_CtlError>
      break;
 80084e0:	bf00      	nop
  }

  return USBD_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	889b      	ldrh	r3, [r3, #4]
 80084fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008508:	2b20      	cmp	r3, #32
 800850a:	d004      	beq.n	8008516 <USBD_StdEPReq+0x2a>
 800850c:	2b40      	cmp	r3, #64	; 0x40
 800850e:	d002      	beq.n	8008516 <USBD_StdEPReq+0x2a>
 8008510:	2b00      	cmp	r3, #0
 8008512:	d008      	beq.n	8008526 <USBD_StdEPReq+0x3a>
 8008514:	e13d      	b.n	8008792 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	6839      	ldr	r1, [r7, #0]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	4798      	blx	r3
      break;
 8008524:	e13a      	b.n	800879c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800852e:	2b20      	cmp	r3, #32
 8008530:	d10a      	bne.n	8008548 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	4798      	blx	r3
 8008540:	4603      	mov	r3, r0
 8008542:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008544:	7bfb      	ldrb	r3, [r7, #15]
 8008546:	e12a      	b.n	800879e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	785b      	ldrb	r3, [r3, #1]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d03e      	beq.n	80085ce <USBD_StdEPReq+0xe2>
 8008550:	2b03      	cmp	r3, #3
 8008552:	d002      	beq.n	800855a <USBD_StdEPReq+0x6e>
 8008554:	2b00      	cmp	r3, #0
 8008556:	d070      	beq.n	800863a <USBD_StdEPReq+0x14e>
 8008558:	e115      	b.n	8008786 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008560:	2b02      	cmp	r3, #2
 8008562:	d002      	beq.n	800856a <USBD_StdEPReq+0x7e>
 8008564:	2b03      	cmp	r3, #3
 8008566:	d015      	beq.n	8008594 <USBD_StdEPReq+0xa8>
 8008568:	e02b      	b.n	80085c2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800856a:	7bbb      	ldrb	r3, [r7, #14]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00c      	beq.n	800858a <USBD_StdEPReq+0x9e>
 8008570:	7bbb      	ldrb	r3, [r7, #14]
 8008572:	2b80      	cmp	r3, #128	; 0x80
 8008574:	d009      	beq.n	800858a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008576:	7bbb      	ldrb	r3, [r7, #14]
 8008578:	4619      	mov	r1, r3
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f002 fa20 	bl	800a9c0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008580:	2180      	movs	r1, #128	; 0x80
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f002 fa1c 	bl	800a9c0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008588:	e020      	b.n	80085cc <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800858a:	6839      	ldr	r1, [r7, #0]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fc46 	bl	8008e1e <USBD_CtlError>
              break;
 8008592:	e01b      	b.n	80085cc <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	885b      	ldrh	r3, [r3, #2]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10e      	bne.n	80085ba <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800859c:	7bbb      	ldrb	r3, [r7, #14]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00b      	beq.n	80085ba <USBD_StdEPReq+0xce>
 80085a2:	7bbb      	ldrb	r3, [r7, #14]
 80085a4:	2b80      	cmp	r3, #128	; 0x80
 80085a6:	d008      	beq.n	80085ba <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	88db      	ldrh	r3, [r3, #6]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d104      	bne.n	80085ba <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80085b0:	7bbb      	ldrb	r3, [r7, #14]
 80085b2:	4619      	mov	r1, r3
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f002 fa03 	bl	800a9c0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 fcf8 	bl	8008fb0 <USBD_CtlSendStatus>

              break;
 80085c0:	e004      	b.n	80085cc <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fc2a 	bl	8008e1e <USBD_CtlError>
              break;
 80085ca:	bf00      	nop
          }
          break;
 80085cc:	e0e0      	b.n	8008790 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d002      	beq.n	80085de <USBD_StdEPReq+0xf2>
 80085d8:	2b03      	cmp	r3, #3
 80085da:	d015      	beq.n	8008608 <USBD_StdEPReq+0x11c>
 80085dc:	e026      	b.n	800862c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085de:	7bbb      	ldrb	r3, [r7, #14]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00c      	beq.n	80085fe <USBD_StdEPReq+0x112>
 80085e4:	7bbb      	ldrb	r3, [r7, #14]
 80085e6:	2b80      	cmp	r3, #128	; 0x80
 80085e8:	d009      	beq.n	80085fe <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80085ea:	7bbb      	ldrb	r3, [r7, #14]
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f002 f9e6 	bl	800a9c0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80085f4:	2180      	movs	r1, #128	; 0x80
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f002 f9e2 	bl	800a9c0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085fc:	e01c      	b.n	8008638 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80085fe:	6839      	ldr	r1, [r7, #0]
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fc0c 	bl	8008e1e <USBD_CtlError>
              break;
 8008606:	e017      	b.n	8008638 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	885b      	ldrh	r3, [r3, #2]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d112      	bne.n	8008636 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008610:	7bbb      	ldrb	r3, [r7, #14]
 8008612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008616:	2b00      	cmp	r3, #0
 8008618:	d004      	beq.n	8008624 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800861a:	7bbb      	ldrb	r3, [r7, #14]
 800861c:	4619      	mov	r1, r3
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f002 f9ed 	bl	800a9fe <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 fcc3 	bl	8008fb0 <USBD_CtlSendStatus>
              }
              break;
 800862a:	e004      	b.n	8008636 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fbf5 	bl	8008e1e <USBD_CtlError>
              break;
 8008634:	e000      	b.n	8008638 <USBD_StdEPReq+0x14c>
              break;
 8008636:	bf00      	nop
          }
          break;
 8008638:	e0aa      	b.n	8008790 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008640:	2b02      	cmp	r3, #2
 8008642:	d002      	beq.n	800864a <USBD_StdEPReq+0x15e>
 8008644:	2b03      	cmp	r3, #3
 8008646:	d032      	beq.n	80086ae <USBD_StdEPReq+0x1c2>
 8008648:	e097      	b.n	800877a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800864a:	7bbb      	ldrb	r3, [r7, #14]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d007      	beq.n	8008660 <USBD_StdEPReq+0x174>
 8008650:	7bbb      	ldrb	r3, [r7, #14]
 8008652:	2b80      	cmp	r3, #128	; 0x80
 8008654:	d004      	beq.n	8008660 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8008656:	6839      	ldr	r1, [r7, #0]
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fbe0 	bl	8008e1e <USBD_CtlError>
                break;
 800865e:	e091      	b.n	8008784 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008660:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008664:	2b00      	cmp	r3, #0
 8008666:	da0b      	bge.n	8008680 <USBD_StdEPReq+0x194>
 8008668:	7bbb      	ldrb	r3, [r7, #14]
 800866a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800866e:	4613      	mov	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4413      	add	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	3310      	adds	r3, #16
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	4413      	add	r3, r2
 800867c:	3304      	adds	r3, #4
 800867e:	e00b      	b.n	8008698 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008680:	7bbb      	ldrb	r3, [r7, #14]
 8008682:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008686:	4613      	mov	r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	4413      	add	r3, r2
 8008696:	3304      	adds	r3, #4
 8008698:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	2200      	movs	r2, #0
 800869e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	2202      	movs	r2, #2
 80086a4:	4619      	mov	r1, r3
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fc24 	bl	8008ef4 <USBD_CtlSendData>
              break;
 80086ac:	e06a      	b.n	8008784 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80086ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	da11      	bge.n	80086da <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086b6:	7bbb      	ldrb	r3, [r7, #14]
 80086b8:	f003 020f 	and.w	r2, r3, #15
 80086bc:	6879      	ldr	r1, [r7, #4]
 80086be:	4613      	mov	r3, r2
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	4413      	add	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	440b      	add	r3, r1
 80086c8:	3318      	adds	r3, #24
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d117      	bne.n	8008700 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fba3 	bl	8008e1e <USBD_CtlError>
                  break;
 80086d8:	e054      	b.n	8008784 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086da:	7bbb      	ldrb	r3, [r7, #14]
 80086dc:	f003 020f 	and.w	r2, r3, #15
 80086e0:	6879      	ldr	r1, [r7, #4]
 80086e2:	4613      	mov	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	440b      	add	r3, r1
 80086ec:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d104      	bne.n	8008700 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fb90 	bl	8008e1e <USBD_CtlError>
                  break;
 80086fe:	e041      	b.n	8008784 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008700:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008704:	2b00      	cmp	r3, #0
 8008706:	da0b      	bge.n	8008720 <USBD_StdEPReq+0x234>
 8008708:	7bbb      	ldrb	r3, [r7, #14]
 800870a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800870e:	4613      	mov	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	3310      	adds	r3, #16
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	4413      	add	r3, r2
 800871c:	3304      	adds	r3, #4
 800871e:	e00b      	b.n	8008738 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008720:	7bbb      	ldrb	r3, [r7, #14]
 8008722:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008726:	4613      	mov	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4413      	add	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	4413      	add	r3, r2
 8008736:	3304      	adds	r3, #4
 8008738:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800873a:	7bbb      	ldrb	r3, [r7, #14]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d002      	beq.n	8008746 <USBD_StdEPReq+0x25a>
 8008740:	7bbb      	ldrb	r3, [r7, #14]
 8008742:	2b80      	cmp	r3, #128	; 0x80
 8008744:	d103      	bne.n	800874e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	2200      	movs	r2, #0
 800874a:	601a      	str	r2, [r3, #0]
 800874c:	e00e      	b.n	800876c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800874e:	7bbb      	ldrb	r3, [r7, #14]
 8008750:	4619      	mov	r1, r3
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f002 f972 	bl	800aa3c <USBD_LL_IsStallEP>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d003      	beq.n	8008766 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	2201      	movs	r2, #1
 8008762:	601a      	str	r2, [r3, #0]
 8008764:	e002      	b.n	800876c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	2200      	movs	r2, #0
 800876a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	2202      	movs	r2, #2
 8008770:	4619      	mov	r1, r3
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 fbbe 	bl	8008ef4 <USBD_CtlSendData>
              break;
 8008778:	e004      	b.n	8008784 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800877a:	6839      	ldr	r1, [r7, #0]
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 fb4e 	bl	8008e1e <USBD_CtlError>
              break;
 8008782:	bf00      	nop
          }
          break;
 8008784:	e004      	b.n	8008790 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008786:	6839      	ldr	r1, [r7, #0]
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fb48 	bl	8008e1e <USBD_CtlError>
          break;
 800878e:	bf00      	nop
      }
      break;
 8008790:	e004      	b.n	800879c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fb42 	bl	8008e1e <USBD_CtlError>
      break;
 800879a:	bf00      	nop
  }

  return ret;
 800879c:	7bfb      	ldrb	r3, [r7, #15]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
	...

080087a8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087b2:	2300      	movs	r3, #0
 80087b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80087b6:	2300      	movs	r3, #0
 80087b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80087ba:	2300      	movs	r3, #0
 80087bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	885b      	ldrh	r3, [r3, #2]
 80087c2:	0a1b      	lsrs	r3, r3, #8
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	3b01      	subs	r3, #1
 80087c8:	2b0e      	cmp	r3, #14
 80087ca:	f200 8152 	bhi.w	8008a72 <USBD_GetDescriptor+0x2ca>
 80087ce:	a201      	add	r2, pc, #4	; (adr r2, 80087d4 <USBD_GetDescriptor+0x2c>)
 80087d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d4:	08008845 	.word	0x08008845
 80087d8:	0800885d 	.word	0x0800885d
 80087dc:	0800889d 	.word	0x0800889d
 80087e0:	08008a73 	.word	0x08008a73
 80087e4:	08008a73 	.word	0x08008a73
 80087e8:	08008a13 	.word	0x08008a13
 80087ec:	08008a3f 	.word	0x08008a3f
 80087f0:	08008a73 	.word	0x08008a73
 80087f4:	08008a73 	.word	0x08008a73
 80087f8:	08008a73 	.word	0x08008a73
 80087fc:	08008a73 	.word	0x08008a73
 8008800:	08008a73 	.word	0x08008a73
 8008804:	08008a73 	.word	0x08008a73
 8008808:	08008a73 	.word	0x08008a73
 800880c:	08008811 	.word	0x08008811
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008816:	69db      	ldr	r3, [r3, #28]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00b      	beq.n	8008834 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008822:	69db      	ldr	r3, [r3, #28]
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	7c12      	ldrb	r2, [r2, #16]
 8008828:	f107 0108 	add.w	r1, r7, #8
 800882c:	4610      	mov	r0, r2
 800882e:	4798      	blx	r3
 8008830:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008832:	e126      	b.n	8008a82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008834:	6839      	ldr	r1, [r7, #0]
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 faf1 	bl	8008e1e <USBD_CtlError>
        err++;
 800883c:	7afb      	ldrb	r3, [r7, #11]
 800883e:	3301      	adds	r3, #1
 8008840:	72fb      	strb	r3, [r7, #11]
      break;
 8008842:	e11e      	b.n	8008a82 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	7c12      	ldrb	r2, [r2, #16]
 8008850:	f107 0108 	add.w	r1, r7, #8
 8008854:	4610      	mov	r0, r2
 8008856:	4798      	blx	r3
 8008858:	60f8      	str	r0, [r7, #12]
      break;
 800885a:	e112      	b.n	8008a82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	7c1b      	ldrb	r3, [r3, #16]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d10d      	bne.n	8008880 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800886a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886c:	f107 0208 	add.w	r2, r7, #8
 8008870:	4610      	mov	r0, r2
 8008872:	4798      	blx	r3
 8008874:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	3301      	adds	r3, #1
 800887a:	2202      	movs	r2, #2
 800887c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800887e:	e100      	b.n	8008a82 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008888:	f107 0208 	add.w	r2, r7, #8
 800888c:	4610      	mov	r0, r2
 800888e:	4798      	blx	r3
 8008890:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	3301      	adds	r3, #1
 8008896:	2202      	movs	r2, #2
 8008898:	701a      	strb	r2, [r3, #0]
      break;
 800889a:	e0f2      	b.n	8008a82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	885b      	ldrh	r3, [r3, #2]
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	2b05      	cmp	r3, #5
 80088a4:	f200 80ac 	bhi.w	8008a00 <USBD_GetDescriptor+0x258>
 80088a8:	a201      	add	r2, pc, #4	; (adr r2, 80088b0 <USBD_GetDescriptor+0x108>)
 80088aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ae:	bf00      	nop
 80088b0:	080088c9 	.word	0x080088c9
 80088b4:	080088fd 	.word	0x080088fd
 80088b8:	08008931 	.word	0x08008931
 80088bc:	08008965 	.word	0x08008965
 80088c0:	08008999 	.word	0x08008999
 80088c4:	080089cd 	.word	0x080089cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00b      	beq.n	80088ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	7c12      	ldrb	r2, [r2, #16]
 80088e0:	f107 0108 	add.w	r1, r7, #8
 80088e4:	4610      	mov	r0, r2
 80088e6:	4798      	blx	r3
 80088e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088ea:	e091      	b.n	8008a10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80088ec:	6839      	ldr	r1, [r7, #0]
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fa95 	bl	8008e1e <USBD_CtlError>
            err++;
 80088f4:	7afb      	ldrb	r3, [r7, #11]
 80088f6:	3301      	adds	r3, #1
 80088f8:	72fb      	strb	r3, [r7, #11]
          break;
 80088fa:	e089      	b.n	8008a10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00b      	beq.n	8008920 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	7c12      	ldrb	r2, [r2, #16]
 8008914:	f107 0108 	add.w	r1, r7, #8
 8008918:	4610      	mov	r0, r2
 800891a:	4798      	blx	r3
 800891c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800891e:	e077      	b.n	8008a10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fa7b 	bl	8008e1e <USBD_CtlError>
            err++;
 8008928:	7afb      	ldrb	r3, [r7, #11]
 800892a:	3301      	adds	r3, #1
 800892c:	72fb      	strb	r3, [r7, #11]
          break;
 800892e:	e06f      	b.n	8008a10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00b      	beq.n	8008954 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	7c12      	ldrb	r2, [r2, #16]
 8008948:	f107 0108 	add.w	r1, r7, #8
 800894c:	4610      	mov	r0, r2
 800894e:	4798      	blx	r3
 8008950:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008952:	e05d      	b.n	8008a10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008954:	6839      	ldr	r1, [r7, #0]
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 fa61 	bl	8008e1e <USBD_CtlError>
            err++;
 800895c:	7afb      	ldrb	r3, [r7, #11]
 800895e:	3301      	adds	r3, #1
 8008960:	72fb      	strb	r3, [r7, #11]
          break;
 8008962:	e055      	b.n	8008a10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00b      	beq.n	8008988 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	7c12      	ldrb	r2, [r2, #16]
 800897c:	f107 0108 	add.w	r1, r7, #8
 8008980:	4610      	mov	r0, r2
 8008982:	4798      	blx	r3
 8008984:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008986:	e043      	b.n	8008a10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fa47 	bl	8008e1e <USBD_CtlError>
            err++;
 8008990:	7afb      	ldrb	r3, [r7, #11]
 8008992:	3301      	adds	r3, #1
 8008994:	72fb      	strb	r3, [r7, #11]
          break;
 8008996:	e03b      	b.n	8008a10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800899e:	695b      	ldr	r3, [r3, #20]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00b      	beq.n	80089bc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089aa:	695b      	ldr	r3, [r3, #20]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	7c12      	ldrb	r2, [r2, #16]
 80089b0:	f107 0108 	add.w	r1, r7, #8
 80089b4:	4610      	mov	r0, r2
 80089b6:	4798      	blx	r3
 80089b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ba:	e029      	b.n	8008a10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fa2d 	bl	8008e1e <USBD_CtlError>
            err++;
 80089c4:	7afb      	ldrb	r3, [r7, #11]
 80089c6:	3301      	adds	r3, #1
 80089c8:	72fb      	strb	r3, [r7, #11]
          break;
 80089ca:	e021      	b.n	8008a10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00b      	beq.n	80089f0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089de:	699b      	ldr	r3, [r3, #24]
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	7c12      	ldrb	r2, [r2, #16]
 80089e4:	f107 0108 	add.w	r1, r7, #8
 80089e8:	4610      	mov	r0, r2
 80089ea:	4798      	blx	r3
 80089ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ee:	e00f      	b.n	8008a10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fa13 	bl	8008e1e <USBD_CtlError>
            err++;
 80089f8:	7afb      	ldrb	r3, [r7, #11]
 80089fa:	3301      	adds	r3, #1
 80089fc:	72fb      	strb	r3, [r7, #11]
          break;
 80089fe:	e007      	b.n	8008a10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fa0b 	bl	8008e1e <USBD_CtlError>
          err++;
 8008a08:	7afb      	ldrb	r3, [r7, #11]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008a0e:	e038      	b.n	8008a82 <USBD_GetDescriptor+0x2da>
 8008a10:	e037      	b.n	8008a82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	7c1b      	ldrb	r3, [r3, #16]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d109      	bne.n	8008a2e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a22:	f107 0208 	add.w	r2, r7, #8
 8008a26:	4610      	mov	r0, r2
 8008a28:	4798      	blx	r3
 8008a2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a2c:	e029      	b.n	8008a82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008a2e:	6839      	ldr	r1, [r7, #0]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f9f4 	bl	8008e1e <USBD_CtlError>
        err++;
 8008a36:	7afb      	ldrb	r3, [r7, #11]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	72fb      	strb	r3, [r7, #11]
      break;
 8008a3c:	e021      	b.n	8008a82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	7c1b      	ldrb	r3, [r3, #16]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d10d      	bne.n	8008a62 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4e:	f107 0208 	add.w	r2, r7, #8
 8008a52:	4610      	mov	r0, r2
 8008a54:	4798      	blx	r3
 8008a56:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	2207      	movs	r2, #7
 8008a5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a60:	e00f      	b.n	8008a82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f9da 	bl	8008e1e <USBD_CtlError>
        err++;
 8008a6a:	7afb      	ldrb	r3, [r7, #11]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	72fb      	strb	r3, [r7, #11]
      break;
 8008a70:	e007      	b.n	8008a82 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008a72:	6839      	ldr	r1, [r7, #0]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f9d2 	bl	8008e1e <USBD_CtlError>
      err++;
 8008a7a:	7afb      	ldrb	r3, [r7, #11]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	72fb      	strb	r3, [r7, #11]
      break;
 8008a80:	bf00      	nop
  }

  if (err != 0U)
 8008a82:	7afb      	ldrb	r3, [r7, #11]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d11c      	bne.n	8008ac2 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008a88:	893b      	ldrh	r3, [r7, #8]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d011      	beq.n	8008ab2 <USBD_GetDescriptor+0x30a>
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	88db      	ldrh	r3, [r3, #6]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00d      	beq.n	8008ab2 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	88da      	ldrh	r2, [r3, #6]
 8008a9a:	893b      	ldrh	r3, [r7, #8]
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	bf28      	it	cs
 8008aa0:	4613      	movcs	r3, r2
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008aa6:	893b      	ldrh	r3, [r7, #8]
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	68f9      	ldr	r1, [r7, #12]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fa21 	bl	8008ef4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	88db      	ldrh	r3, [r3, #6]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d104      	bne.n	8008ac4 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fa78 	bl	8008fb0 <USBD_CtlSendStatus>
 8008ac0:	e000      	b.n	8008ac4 <USBD_GetDescriptor+0x31c>
    return;
 8008ac2:	bf00      	nop
    }
  }
}
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop

08008acc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	889b      	ldrh	r3, [r3, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d130      	bne.n	8008b40 <USBD_SetAddress+0x74>
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	88db      	ldrh	r3, [r3, #6]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d12c      	bne.n	8008b40 <USBD_SetAddress+0x74>
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	885b      	ldrh	r3, [r3, #2]
 8008aea:	2b7f      	cmp	r3, #127	; 0x7f
 8008aec:	d828      	bhi.n	8008b40 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	885b      	ldrh	r3, [r3, #2]
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008af8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b00:	2b03      	cmp	r3, #3
 8008b02:	d104      	bne.n	8008b0e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008b04:	6839      	ldr	r1, [r7, #0]
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f989 	bl	8008e1e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b0c:	e01c      	b.n	8008b48 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	7bfa      	ldrb	r2, [r7, #15]
 8008b12:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
 8008b18:	4619      	mov	r1, r3
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f001 ffb4 	bl	800aa88 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fa45 	bl	8008fb0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b26:	7bfb      	ldrb	r3, [r7, #15]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d004      	beq.n	8008b36 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2202      	movs	r2, #2
 8008b30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b34:	e008      	b.n	8008b48 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b3e:	e003      	b.n	8008b48 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b40:	6839      	ldr	r1, [r7, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f96b 	bl	8008e1e <USBD_CtlError>
  }
}
 8008b48:	bf00      	nop
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	885b      	ldrh	r3, [r3, #2]
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	4b41      	ldr	r3, [pc, #260]	; (8008c68 <USBD_SetConfig+0x118>)
 8008b62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b64:	4b40      	ldr	r3, [pc, #256]	; (8008c68 <USBD_SetConfig+0x118>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d904      	bls.n	8008b76 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008b6c:	6839      	ldr	r1, [r7, #0]
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f955 	bl	8008e1e <USBD_CtlError>
 8008b74:	e075      	b.n	8008c62 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d002      	beq.n	8008b86 <USBD_SetConfig+0x36>
 8008b80:	2b03      	cmp	r3, #3
 8008b82:	d023      	beq.n	8008bcc <USBD_SetConfig+0x7c>
 8008b84:	e062      	b.n	8008c4c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008b86:	4b38      	ldr	r3, [pc, #224]	; (8008c68 <USBD_SetConfig+0x118>)
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d01a      	beq.n	8008bc4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008b8e:	4b36      	ldr	r3, [pc, #216]	; (8008c68 <USBD_SetConfig+0x118>)
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	461a      	mov	r2, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2203      	movs	r2, #3
 8008b9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ba0:	4b31      	ldr	r3, [pc, #196]	; (8008c68 <USBD_SetConfig+0x118>)
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f7ff f9c7 	bl	8007f3a <USBD_SetClassConfig>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d104      	bne.n	8008bbc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f932 	bl	8008e1e <USBD_CtlError>
            return;
 8008bba:	e052      	b.n	8008c62 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f9f7 	bl	8008fb0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008bc2:	e04e      	b.n	8008c62 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 f9f3 	bl	8008fb0 <USBD_CtlSendStatus>
        break;
 8008bca:	e04a      	b.n	8008c62 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008bcc:	4b26      	ldr	r3, [pc, #152]	; (8008c68 <USBD_SetConfig+0x118>)
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d112      	bne.n	8008bfa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008bdc:	4b22      	ldr	r3, [pc, #136]	; (8008c68 <USBD_SetConfig+0x118>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	461a      	mov	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008be6:	4b20      	ldr	r3, [pc, #128]	; (8008c68 <USBD_SetConfig+0x118>)
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	4619      	mov	r1, r3
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f7ff f9c3 	bl	8007f78 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f9dc 	bl	8008fb0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008bf8:	e033      	b.n	8008c62 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008bfa:	4b1b      	ldr	r3, [pc, #108]	; (8008c68 <USBD_SetConfig+0x118>)
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d01d      	beq.n	8008c44 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	4619      	mov	r1, r3
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f7ff f9b1 	bl	8007f78 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008c16:	4b14      	ldr	r3, [pc, #80]	; (8008c68 <USBD_SetConfig+0x118>)
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008c20:	4b11      	ldr	r3, [pc, #68]	; (8008c68 <USBD_SetConfig+0x118>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	4619      	mov	r1, r3
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7ff f987 	bl	8007f3a <USBD_SetClassConfig>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d104      	bne.n	8008c3c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 f8f2 	bl	8008e1e <USBD_CtlError>
            return;
 8008c3a:	e012      	b.n	8008c62 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 f9b7 	bl	8008fb0 <USBD_CtlSendStatus>
        break;
 8008c42:	e00e      	b.n	8008c62 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 f9b3 	bl	8008fb0 <USBD_CtlSendStatus>
        break;
 8008c4a:	e00a      	b.n	8008c62 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008c4c:	6839      	ldr	r1, [r7, #0]
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f8e5 	bl	8008e1e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008c54:	4b04      	ldr	r3, [pc, #16]	; (8008c68 <USBD_SetConfig+0x118>)
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7ff f98c 	bl	8007f78 <USBD_ClrClassConfig>
        break;
 8008c60:	bf00      	nop
    }
  }
}
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	20001406 	.word	0x20001406

08008c6c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	88db      	ldrh	r3, [r3, #6]
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d004      	beq.n	8008c88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c7e:	6839      	ldr	r1, [r7, #0]
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f8cc 	bl	8008e1e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c86:	e021      	b.n	8008ccc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	db17      	blt.n	8008cc2 <USBD_GetConfig+0x56>
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	dd02      	ble.n	8008c9c <USBD_GetConfig+0x30>
 8008c96:	2b03      	cmp	r3, #3
 8008c98:	d00b      	beq.n	8008cb2 <USBD_GetConfig+0x46>
 8008c9a:	e012      	b.n	8008cc2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	3308      	adds	r3, #8
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f922 	bl	8008ef4 <USBD_CtlSendData>
        break;
 8008cb0:	e00c      	b.n	8008ccc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	3304      	adds	r3, #4
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 f91a 	bl	8008ef4 <USBD_CtlSendData>
        break;
 8008cc0:	e004      	b.n	8008ccc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f8aa 	bl	8008e1e <USBD_CtlError>
        break;
 8008cca:	bf00      	nop
}
 8008ccc:	bf00      	nop
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d81e      	bhi.n	8008d28 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	88db      	ldrh	r3, [r3, #6]
 8008cee:	2b02      	cmp	r3, #2
 8008cf0:	d004      	beq.n	8008cfc <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 f892 	bl	8008e1e <USBD_CtlError>
        break;
 8008cfa:	e01a      	b.n	8008d32 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d005      	beq.n	8008d18 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	f043 0202 	orr.w	r2, r3, #2
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	330c      	adds	r3, #12
 8008d1c:	2202      	movs	r2, #2
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 f8e7 	bl	8008ef4 <USBD_CtlSendData>
      break;
 8008d26:	e004      	b.n	8008d32 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008d28:	6839      	ldr	r1, [r7, #0]
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f877 	bl	8008e1e <USBD_CtlError>
      break;
 8008d30:	bf00      	nop
  }
}
 8008d32:	bf00      	nop
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b082      	sub	sp, #8
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
 8008d42:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	885b      	ldrh	r3, [r3, #2]
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d106      	bne.n	8008d5a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f92b 	bl	8008fb0 <USBD_CtlSendStatus>
  }
}
 8008d5a:	bf00      	nop
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b082      	sub	sp, #8
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
 8008d6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d72:	3b01      	subs	r3, #1
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d80b      	bhi.n	8008d90 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	885b      	ldrh	r3, [r3, #2]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d10c      	bne.n	8008d9a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f911 	bl	8008fb0 <USBD_CtlSendStatus>
      }
      break;
 8008d8e:	e004      	b.n	8008d9a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008d90:	6839      	ldr	r1, [r7, #0]
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 f843 	bl	8008e1e <USBD_CtlError>
      break;
 8008d98:	e000      	b.n	8008d9c <USBD_ClrFeature+0x3a>
      break;
 8008d9a:	bf00      	nop
  }
}
 8008d9c:	bf00      	nop
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	781a      	ldrb	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	785a      	ldrb	r2, [r3, #1]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	3302      	adds	r3, #2
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	3303      	adds	r3, #3
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	021b      	lsls	r3, r3, #8
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	4413      	add	r3, r2
 8008dd4:	b29a      	uxth	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	3304      	adds	r3, #4
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	b29a      	uxth	r2, r3
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	3305      	adds	r3, #5
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	021b      	lsls	r3, r3, #8
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	4413      	add	r3, r2
 8008df0:	b29a      	uxth	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	3306      	adds	r3, #6
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	3307      	adds	r3, #7
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	021b      	lsls	r3, r3, #8
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	4413      	add	r3, r2
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	80da      	strh	r2, [r3, #6]

}
 8008e12:	bf00      	nop
 8008e14:	370c      	adds	r7, #12
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b082      	sub	sp, #8
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008e28:	2180      	movs	r1, #128	; 0x80
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f001 fdc8 	bl	800a9c0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008e30:	2100      	movs	r1, #0
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f001 fdc4 	bl	800a9c0 <USBD_LL_StallEP>
}
 8008e38:	bf00      	nop
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d032      	beq.n	8008ebc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f000 f834 	bl	8008ec4 <USBD_GetLen>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	3301      	adds	r3, #1
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	005b      	lsls	r3, r3, #1
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008e6a:	7dfb      	ldrb	r3, [r7, #23]
 8008e6c:	1c5a      	adds	r2, r3, #1
 8008e6e:	75fa      	strb	r2, [r7, #23]
 8008e70:	461a      	mov	r2, r3
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	4413      	add	r3, r2
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	7812      	ldrb	r2, [r2, #0]
 8008e7a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008e7c:	7dfb      	ldrb	r3, [r7, #23]
 8008e7e:	1c5a      	adds	r2, r3, #1
 8008e80:	75fa      	strb	r2, [r7, #23]
 8008e82:	461a      	mov	r2, r3
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	4413      	add	r3, r2
 8008e88:	2203      	movs	r2, #3
 8008e8a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008e8c:	e012      	b.n	8008eb4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	1c5a      	adds	r2, r3, #1
 8008e92:	60fa      	str	r2, [r7, #12]
 8008e94:	7dfa      	ldrb	r2, [r7, #23]
 8008e96:	1c51      	adds	r1, r2, #1
 8008e98:	75f9      	strb	r1, [r7, #23]
 8008e9a:	4611      	mov	r1, r2
 8008e9c:	68ba      	ldr	r2, [r7, #8]
 8008e9e:	440a      	add	r2, r1
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008ea4:	7dfb      	ldrb	r3, [r7, #23]
 8008ea6:	1c5a      	adds	r2, r3, #1
 8008ea8:	75fa      	strb	r2, [r7, #23]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	4413      	add	r3, r2
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1e8      	bne.n	8008e8e <USBD_GetString+0x4e>
    }
  }
}
 8008ebc:	bf00      	nop
 8008ebe:	3718      	adds	r7, #24
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008ed0:	e005      	b.n	8008ede <USBD_GetLen+0x1a>
  {
    len++;
 8008ed2:	7bfb      	ldrb	r3, [r7, #15]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	3301      	adds	r3, #1
 8008edc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1f5      	bne.n	8008ed2 <USBD_GetLen+0xe>
  }

  return len;
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	4613      	mov	r3, r2
 8008f00:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2202      	movs	r2, #2
 8008f06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f0a:	88fa      	ldrh	r2, [r7, #6]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008f10:	88fa      	ldrh	r2, [r7, #6]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f16:	88fb      	ldrh	r3, [r7, #6]
 8008f18:	68ba      	ldr	r2, [r7, #8]
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f001 fdd2 	bl	800aac6 <USBD_LL_Transmit>

  return USBD_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	4613      	mov	r3, r2
 8008f38:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f3a:	88fb      	ldrh	r3, [r7, #6]
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	2100      	movs	r1, #0
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	f001 fdc0 	bl	800aac6 <USBD_LL_Transmit>

  return USBD_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3710      	adds	r7, #16
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2203      	movs	r2, #3
 8008f62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008f66:	88fa      	ldrh	r2, [r7, #6]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008f6e:	88fa      	ldrh	r2, [r7, #6]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f76:	88fb      	ldrh	r3, [r7, #6]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f001 fdc5 	bl	800ab0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	4613      	mov	r3, r2
 8008f98:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f9a:	88fb      	ldrh	r3, [r7, #6]
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f001 fdb3 	bl	800ab0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2204      	movs	r2, #4
 8008fbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f001 fd7d 	bl	800aac6 <USBD_LL_Transmit>

  return USBD_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b082      	sub	sp, #8
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2205      	movs	r2, #5
 8008fe2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	2200      	movs	r2, #0
 8008fea:	2100      	movs	r1, #0
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f001 fd8d 	bl	800ab0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	4603      	mov	r3, r0
 8009004:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009006:	2300      	movs	r3, #0
 8009008:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800900a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800900e:	2b84      	cmp	r3, #132	; 0x84
 8009010:	d005      	beq.n	800901e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009012:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	4413      	add	r3, r2
 800901a:	3303      	adds	r3, #3
 800901c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800901e:	68fb      	ldr	r3, [r7, #12]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009030:	f000 fa58 	bl	80094e4 <vTaskStartScheduler>
  
  return osOK;
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	bd80      	pop	{r7, pc}

0800903a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800903a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800903c:	b087      	sub	sp, #28
 800903e:	af02      	add	r7, sp, #8
 8009040:	6078      	str	r0, [r7, #4]
 8009042:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	685c      	ldr	r4, [r3, #4]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009050:	b29e      	uxth	r6, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009058:	4618      	mov	r0, r3
 800905a:	f7ff ffcf 	bl	8008ffc <makeFreeRtosPriority>
 800905e:	4602      	mov	r2, r0
 8009060:	f107 030c 	add.w	r3, r7, #12
 8009064:	9301      	str	r3, [sp, #4]
 8009066:	9200      	str	r2, [sp, #0]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	4632      	mov	r2, r6
 800906c:	4629      	mov	r1, r5
 800906e:	4620      	mov	r0, r4
 8009070:	f000 f8d2 	bl	8009218 <xTaskCreate>
 8009074:	4603      	mov	r3, r0
 8009076:	2b01      	cmp	r3, #1
 8009078:	d001      	beq.n	800907e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800907a:	2300      	movs	r3, #0
 800907c:	e000      	b.n	8009080 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800907e:	68fb      	ldr	r3, [r7, #12]
}
 8009080:	4618      	mov	r0, r3
 8009082:	3714      	adds	r7, #20
 8009084:	46bd      	mov	sp, r7
 8009086:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009088 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d001      	beq.n	800909e <osDelay+0x16>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	e000      	b.n	80090a0 <osDelay+0x18>
 800909e:	2301      	movs	r3, #1
 80090a0:	4618      	mov	r0, r3
 80090a2:	f000 f9eb 	bl	800947c <vTaskDelay>
  
  return osOK;
 80090a6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f103 0208 	add.w	r2, r3, #8
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f04f 32ff 	mov.w	r2, #4294967295
 80090c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f103 0208 	add.w	r2, r3, #8
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f103 0208 	add.w	r2, r3, #8
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80090e4:	bf00      	nop
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80090fe:	bf00      	nop
 8009100:	370c      	adds	r7, #12
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr

0800910a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800910a:	b480      	push	{r7}
 800910c:	b085      	sub	sp, #20
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	68fa      	ldr	r2, [r7, #12]
 800911e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	689a      	ldr	r2, [r3, #8]
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	683a      	ldr	r2, [r7, #0]
 800912e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	1c5a      	adds	r2, r3, #1
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	601a      	str	r2, [r3, #0]
}
 8009146:	bf00      	nop
 8009148:	3714      	adds	r7, #20
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr

08009152 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009152:	b480      	push	{r7}
 8009154:	b085      	sub	sp, #20
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
 800915a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009168:	d103      	bne.n	8009172 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	60fb      	str	r3, [r7, #12]
 8009170:	e00c      	b.n	800918c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	3308      	adds	r3, #8
 8009176:	60fb      	str	r3, [r7, #12]
 8009178:	e002      	b.n	8009180 <vListInsert+0x2e>
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	60fb      	str	r3, [r7, #12]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	429a      	cmp	r2, r3
 800918a:	d2f6      	bcs.n	800917a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	685a      	ldr	r2, [r3, #4]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	683a      	ldr	r2, [r7, #0]
 800919a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	683a      	ldr	r2, [r7, #0]
 80091a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	1c5a      	adds	r2, r3, #1
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	601a      	str	r2, [r3, #0]
}
 80091b8:	bf00      	nop
 80091ba:	3714      	adds	r7, #20
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80091c4:	b480      	push	{r7}
 80091c6:	b085      	sub	sp, #20
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	6892      	ldr	r2, [r2, #8]
 80091da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	6852      	ldr	r2, [r2, #4]
 80091e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d103      	bne.n	80091f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	689a      	ldr	r2, [r3, #8]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	1e5a      	subs	r2, r3, #1
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
}
 800920c:	4618      	mov	r0, r3
 800920e:	3714      	adds	r7, #20
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009218:	b580      	push	{r7, lr}
 800921a:	b08c      	sub	sp, #48	; 0x30
 800921c:	af04      	add	r7, sp, #16
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	603b      	str	r3, [r7, #0]
 8009224:	4613      	mov	r3, r2
 8009226:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009228:	88fb      	ldrh	r3, [r7, #6]
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4618      	mov	r0, r3
 800922e:	f000 fe79 	bl	8009f24 <pvPortMalloc>
 8009232:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00e      	beq.n	8009258 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800923a:	2054      	movs	r0, #84	; 0x54
 800923c:	f000 fe72 	bl	8009f24 <pvPortMalloc>
 8009240:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d003      	beq.n	8009250 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	697a      	ldr	r2, [r7, #20]
 800924c:	631a      	str	r2, [r3, #48]	; 0x30
 800924e:	e005      	b.n	800925c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009250:	6978      	ldr	r0, [r7, #20]
 8009252:	f000 ff29 	bl	800a0a8 <vPortFree>
 8009256:	e001      	b.n	800925c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009258:	2300      	movs	r3, #0
 800925a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d013      	beq.n	800928a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009262:	88fa      	ldrh	r2, [r7, #6]
 8009264:	2300      	movs	r3, #0
 8009266:	9303      	str	r3, [sp, #12]
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	9302      	str	r3, [sp, #8]
 800926c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800926e:	9301      	str	r3, [sp, #4]
 8009270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	68b9      	ldr	r1, [r7, #8]
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f000 f80e 	bl	800929a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800927e:	69f8      	ldr	r0, [r7, #28]
 8009280:	f000 f892 	bl	80093a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009284:	2301      	movs	r3, #1
 8009286:	61bb      	str	r3, [r7, #24]
 8009288:	e002      	b.n	8009290 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800928a:	f04f 33ff 	mov.w	r3, #4294967295
 800928e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009290:	69bb      	ldr	r3, [r7, #24]
	}
 8009292:	4618      	mov	r0, r3
 8009294:	3720      	adds	r7, #32
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b088      	sub	sp, #32
 800929e:	af00      	add	r7, sp, #0
 80092a0:	60f8      	str	r0, [r7, #12]
 80092a2:	60b9      	str	r1, [r7, #8]
 80092a4:	607a      	str	r2, [r7, #4]
 80092a6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80092a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80092b2:	3b01      	subs	r3, #1
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	4413      	add	r3, r2
 80092b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	f023 0307 	bic.w	r3, r3, #7
 80092c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	f003 0307 	and.w	r3, r3, #7
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d009      	beq.n	80092e0 <prvInitialiseNewTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80092cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d0:	f383 8811 	msr	BASEPRI, r3
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	617b      	str	r3, [r7, #20]
 80092de:	e7fe      	b.n	80092de <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d01f      	beq.n	8009326 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092e6:	2300      	movs	r3, #0
 80092e8:	61fb      	str	r3, [r7, #28]
 80092ea:	e012      	b.n	8009312 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	4413      	add	r3, r2
 80092f2:	7819      	ldrb	r1, [r3, #0]
 80092f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	4413      	add	r3, r2
 80092fa:	3334      	adds	r3, #52	; 0x34
 80092fc:	460a      	mov	r2, r1
 80092fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009300:	68ba      	ldr	r2, [r7, #8]
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	4413      	add	r3, r2
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d006      	beq.n	800931a <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	3301      	adds	r3, #1
 8009310:	61fb      	str	r3, [r7, #28]
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	2b0f      	cmp	r3, #15
 8009316:	d9e9      	bls.n	80092ec <prvInitialiseNewTask+0x52>
 8009318:	e000      	b.n	800931c <prvInitialiseNewTask+0x82>
			{
				break;
 800931a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800931c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931e:	2200      	movs	r2, #0
 8009320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009324:	e003      	b.n	800932e <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009328:	2200      	movs	r2, #0
 800932a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800932e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009330:	2b06      	cmp	r3, #6
 8009332:	d901      	bls.n	8009338 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009334:	2306      	movs	r3, #6
 8009336:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800933c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800933e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009342:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009346:	2200      	movs	r2, #0
 8009348:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800934a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934c:	3304      	adds	r3, #4
 800934e:	4618      	mov	r0, r3
 8009350:	f7ff fece 	bl	80090f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009356:	3318      	adds	r3, #24
 8009358:	4618      	mov	r0, r3
 800935a:	f7ff fec9 	bl	80090f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800935e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009362:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009366:	f1c3 0207 	rsb	r2, r3, #7
 800936a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800936e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009372:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009376:	2200      	movs	r2, #0
 8009378:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800937a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937c:	2200      	movs	r2, #0
 800937e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	68f9      	ldr	r1, [r7, #12]
 8009386:	69b8      	ldr	r0, [r7, #24]
 8009388:	f000 fbc8 	bl	8009b1c <pxPortInitialiseStack>
 800938c:	4602      	mov	r2, r0
 800938e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009390:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009394:	2b00      	cmp	r3, #0
 8009396:	d002      	beq.n	800939e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800939c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800939e:	bf00      	nop
 80093a0:	3720      	adds	r7, #32
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
	...

080093a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80093b0:	f000 fcdc 	bl	8009d6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80093b4:	4b2a      	ldr	r3, [pc, #168]	; (8009460 <prvAddNewTaskToReadyList+0xb8>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	3301      	adds	r3, #1
 80093ba:	4a29      	ldr	r2, [pc, #164]	; (8009460 <prvAddNewTaskToReadyList+0xb8>)
 80093bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80093be:	4b29      	ldr	r3, [pc, #164]	; (8009464 <prvAddNewTaskToReadyList+0xbc>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d109      	bne.n	80093da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80093c6:	4a27      	ldr	r2, [pc, #156]	; (8009464 <prvAddNewTaskToReadyList+0xbc>)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80093cc:	4b24      	ldr	r3, [pc, #144]	; (8009460 <prvAddNewTaskToReadyList+0xb8>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d110      	bne.n	80093f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80093d4:	f000 faa0 	bl	8009918 <prvInitialiseTaskLists>
 80093d8:	e00d      	b.n	80093f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80093da:	4b23      	ldr	r3, [pc, #140]	; (8009468 <prvAddNewTaskToReadyList+0xc0>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d109      	bne.n	80093f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80093e2:	4b20      	ldr	r3, [pc, #128]	; (8009464 <prvAddNewTaskToReadyList+0xbc>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d802      	bhi.n	80093f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80093f0:	4a1c      	ldr	r2, [pc, #112]	; (8009464 <prvAddNewTaskToReadyList+0xbc>)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80093f6:	4b1d      	ldr	r3, [pc, #116]	; (800946c <prvAddNewTaskToReadyList+0xc4>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3301      	adds	r3, #1
 80093fc:	4a1b      	ldr	r2, [pc, #108]	; (800946c <prvAddNewTaskToReadyList+0xc4>)
 80093fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009404:	2201      	movs	r2, #1
 8009406:	409a      	lsls	r2, r3
 8009408:	4b19      	ldr	r3, [pc, #100]	; (8009470 <prvAddNewTaskToReadyList+0xc8>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4313      	orrs	r3, r2
 800940e:	4a18      	ldr	r2, [pc, #96]	; (8009470 <prvAddNewTaskToReadyList+0xc8>)
 8009410:	6013      	str	r3, [r2, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009416:	4613      	mov	r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	4413      	add	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4a15      	ldr	r2, [pc, #84]	; (8009474 <prvAddNewTaskToReadyList+0xcc>)
 8009420:	441a      	add	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	3304      	adds	r3, #4
 8009426:	4619      	mov	r1, r3
 8009428:	4610      	mov	r0, r2
 800942a:	f7ff fe6e 	bl	800910a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800942e:	f000 fccb 	bl	8009dc8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009432:	4b0d      	ldr	r3, [pc, #52]	; (8009468 <prvAddNewTaskToReadyList+0xc0>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00e      	beq.n	8009458 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800943a:	4b0a      	ldr	r3, [pc, #40]	; (8009464 <prvAddNewTaskToReadyList+0xbc>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009444:	429a      	cmp	r2, r3
 8009446:	d207      	bcs.n	8009458 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009448:	4b0b      	ldr	r3, [pc, #44]	; (8009478 <prvAddNewTaskToReadyList+0xd0>)
 800944a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800944e:	601a      	str	r2, [r3, #0]
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009458:	bf00      	nop
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	20001508 	.word	0x20001508
 8009464:	20001408 	.word	0x20001408
 8009468:	20001514 	.word	0x20001514
 800946c:	20001524 	.word	0x20001524
 8009470:	20001510 	.word	0x20001510
 8009474:	2000140c 	.word	0x2000140c
 8009478:	e000ed04 	.word	0xe000ed04

0800947c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009484:	2300      	movs	r3, #0
 8009486:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d016      	beq.n	80094bc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800948e:	4b13      	ldr	r3, [pc, #76]	; (80094dc <vTaskDelay+0x60>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d009      	beq.n	80094aa <vTaskDelay+0x2e>
 8009496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949a:	f383 8811 	msr	BASEPRI, r3
 800949e:	f3bf 8f6f 	isb	sy
 80094a2:	f3bf 8f4f 	dsb	sy
 80094a6:	60bb      	str	r3, [r7, #8]
 80094a8:	e7fe      	b.n	80094a8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80094aa:	f000 f861 	bl	8009570 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80094ae:	2100      	movs	r1, #0
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 facd 	bl	8009a50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80094b6:	f000 f869 	bl	800958c <xTaskResumeAll>
 80094ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d107      	bne.n	80094d2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80094c2:	4b07      	ldr	r3, [pc, #28]	; (80094e0 <vTaskDelay+0x64>)
 80094c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094c8:	601a      	str	r2, [r3, #0]
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094d2:	bf00      	nop
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	20001530 	.word	0x20001530
 80094e0:	e000ed04 	.word	0xe000ed04

080094e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b086      	sub	sp, #24
 80094e8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80094ea:	4b1b      	ldr	r3, [pc, #108]	; (8009558 <vTaskStartScheduler+0x74>)
 80094ec:	9301      	str	r3, [sp, #4]
 80094ee:	2300      	movs	r3, #0
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	2300      	movs	r3, #0
 80094f4:	2280      	movs	r2, #128	; 0x80
 80094f6:	4919      	ldr	r1, [pc, #100]	; (800955c <vTaskStartScheduler+0x78>)
 80094f8:	4819      	ldr	r0, [pc, #100]	; (8009560 <vTaskStartScheduler+0x7c>)
 80094fa:	f7ff fe8d 	bl	8009218 <xTaskCreate>
 80094fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2b01      	cmp	r3, #1
 8009504:	d115      	bne.n	8009532 <vTaskStartScheduler+0x4e>
 8009506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950a:	f383 8811 	msr	BASEPRI, r3
 800950e:	f3bf 8f6f 	isb	sy
 8009512:	f3bf 8f4f 	dsb	sy
 8009516:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009518:	4b12      	ldr	r3, [pc, #72]	; (8009564 <vTaskStartScheduler+0x80>)
 800951a:	f04f 32ff 	mov.w	r2, #4294967295
 800951e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009520:	4b11      	ldr	r3, [pc, #68]	; (8009568 <vTaskStartScheduler+0x84>)
 8009522:	2201      	movs	r2, #1
 8009524:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009526:	4b11      	ldr	r3, [pc, #68]	; (800956c <vTaskStartScheduler+0x88>)
 8009528:	2200      	movs	r2, #0
 800952a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800952c:	f000 fb80 	bl	8009c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009530:	e00d      	b.n	800954e <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009538:	d109      	bne.n	800954e <vTaskStartScheduler+0x6a>
 800953a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953e:	f383 8811 	msr	BASEPRI, r3
 8009542:	f3bf 8f6f 	isb	sy
 8009546:	f3bf 8f4f 	dsb	sy
 800954a:	607b      	str	r3, [r7, #4]
 800954c:	e7fe      	b.n	800954c <vTaskStartScheduler+0x68>
}
 800954e:	bf00      	nop
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	2000152c 	.word	0x2000152c
 800955c:	0800af90 	.word	0x0800af90
 8009560:	080098e9 	.word	0x080098e9
 8009564:	20001528 	.word	0x20001528
 8009568:	20001514 	.word	0x20001514
 800956c:	2000150c 	.word	0x2000150c

08009570 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009570:	b480      	push	{r7}
 8009572:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009574:	4b04      	ldr	r3, [pc, #16]	; (8009588 <vTaskSuspendAll+0x18>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	3301      	adds	r3, #1
 800957a:	4a03      	ldr	r2, [pc, #12]	; (8009588 <vTaskSuspendAll+0x18>)
 800957c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800957e:	bf00      	nop
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr
 8009588:	20001530 	.word	0x20001530

0800958c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009592:	2300      	movs	r3, #0
 8009594:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009596:	2300      	movs	r3, #0
 8009598:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800959a:	4b41      	ldr	r3, [pc, #260]	; (80096a0 <xTaskResumeAll+0x114>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d109      	bne.n	80095b6 <xTaskResumeAll+0x2a>
 80095a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a6:	f383 8811 	msr	BASEPRI, r3
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	603b      	str	r3, [r7, #0]
 80095b4:	e7fe      	b.n	80095b4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80095b6:	f000 fbd9 	bl	8009d6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80095ba:	4b39      	ldr	r3, [pc, #228]	; (80096a0 <xTaskResumeAll+0x114>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	3b01      	subs	r3, #1
 80095c0:	4a37      	ldr	r2, [pc, #220]	; (80096a0 <xTaskResumeAll+0x114>)
 80095c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095c4:	4b36      	ldr	r3, [pc, #216]	; (80096a0 <xTaskResumeAll+0x114>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d161      	bne.n	8009690 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80095cc:	4b35      	ldr	r3, [pc, #212]	; (80096a4 <xTaskResumeAll+0x118>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d05d      	beq.n	8009690 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095d4:	e02e      	b.n	8009634 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095d6:	4b34      	ldr	r3, [pc, #208]	; (80096a8 <xTaskResumeAll+0x11c>)
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	3318      	adds	r3, #24
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7ff fdee 	bl	80091c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	3304      	adds	r3, #4
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7ff fde9 	bl	80091c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f6:	2201      	movs	r2, #1
 80095f8:	409a      	lsls	r2, r3
 80095fa:	4b2c      	ldr	r3, [pc, #176]	; (80096ac <xTaskResumeAll+0x120>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4313      	orrs	r3, r2
 8009600:	4a2a      	ldr	r2, [pc, #168]	; (80096ac <xTaskResumeAll+0x120>)
 8009602:	6013      	str	r3, [r2, #0]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009608:	4613      	mov	r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4413      	add	r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	4a27      	ldr	r2, [pc, #156]	; (80096b0 <xTaskResumeAll+0x124>)
 8009612:	441a      	add	r2, r3
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	3304      	adds	r3, #4
 8009618:	4619      	mov	r1, r3
 800961a:	4610      	mov	r0, r2
 800961c:	f7ff fd75 	bl	800910a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009624:	4b23      	ldr	r3, [pc, #140]	; (80096b4 <xTaskResumeAll+0x128>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800962a:	429a      	cmp	r2, r3
 800962c:	d302      	bcc.n	8009634 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800962e:	4b22      	ldr	r3, [pc, #136]	; (80096b8 <xTaskResumeAll+0x12c>)
 8009630:	2201      	movs	r2, #1
 8009632:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009634:	4b1c      	ldr	r3, [pc, #112]	; (80096a8 <xTaskResumeAll+0x11c>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1cc      	bne.n	80095d6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d001      	beq.n	8009646 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009642:	f000 f9e5 	bl	8009a10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009646:	4b1d      	ldr	r3, [pc, #116]	; (80096bc <xTaskResumeAll+0x130>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d010      	beq.n	8009674 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009652:	f000 f837 	bl	80096c4 <xTaskIncrementTick>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d002      	beq.n	8009662 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800965c:	4b16      	ldr	r3, [pc, #88]	; (80096b8 <xTaskResumeAll+0x12c>)
 800965e:	2201      	movs	r2, #1
 8009660:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	3b01      	subs	r3, #1
 8009666:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1f1      	bne.n	8009652 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800966e:	4b13      	ldr	r3, [pc, #76]	; (80096bc <xTaskResumeAll+0x130>)
 8009670:	2200      	movs	r2, #0
 8009672:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009674:	4b10      	ldr	r3, [pc, #64]	; (80096b8 <xTaskResumeAll+0x12c>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d009      	beq.n	8009690 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800967c:	2301      	movs	r3, #1
 800967e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009680:	4b0f      	ldr	r3, [pc, #60]	; (80096c0 <xTaskResumeAll+0x134>)
 8009682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009686:	601a      	str	r2, [r3, #0]
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009690:	f000 fb9a 	bl	8009dc8 <vPortExitCritical>

	return xAlreadyYielded;
 8009694:	68bb      	ldr	r3, [r7, #8]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	20001530 	.word	0x20001530
 80096a4:	20001508 	.word	0x20001508
 80096a8:	200014c8 	.word	0x200014c8
 80096ac:	20001510 	.word	0x20001510
 80096b0:	2000140c 	.word	0x2000140c
 80096b4:	20001408 	.word	0x20001408
 80096b8:	2000151c 	.word	0x2000151c
 80096bc:	20001518 	.word	0x20001518
 80096c0:	e000ed04 	.word	0xe000ed04

080096c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80096ca:	2300      	movs	r3, #0
 80096cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096ce:	4b4e      	ldr	r3, [pc, #312]	; (8009808 <xTaskIncrementTick+0x144>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	f040 8087 	bne.w	80097e6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80096d8:	4b4c      	ldr	r3, [pc, #304]	; (800980c <xTaskIncrementTick+0x148>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	3301      	adds	r3, #1
 80096de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80096e0:	4a4a      	ldr	r2, [pc, #296]	; (800980c <xTaskIncrementTick+0x148>)
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d11f      	bne.n	800972c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80096ec:	4b48      	ldr	r3, [pc, #288]	; (8009810 <xTaskIncrementTick+0x14c>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d009      	beq.n	800970a <xTaskIncrementTick+0x46>
 80096f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fa:	f383 8811 	msr	BASEPRI, r3
 80096fe:	f3bf 8f6f 	isb	sy
 8009702:	f3bf 8f4f 	dsb	sy
 8009706:	603b      	str	r3, [r7, #0]
 8009708:	e7fe      	b.n	8009708 <xTaskIncrementTick+0x44>
 800970a:	4b41      	ldr	r3, [pc, #260]	; (8009810 <xTaskIncrementTick+0x14c>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	60fb      	str	r3, [r7, #12]
 8009710:	4b40      	ldr	r3, [pc, #256]	; (8009814 <xTaskIncrementTick+0x150>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a3e      	ldr	r2, [pc, #248]	; (8009810 <xTaskIncrementTick+0x14c>)
 8009716:	6013      	str	r3, [r2, #0]
 8009718:	4a3e      	ldr	r2, [pc, #248]	; (8009814 <xTaskIncrementTick+0x150>)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6013      	str	r3, [r2, #0]
 800971e:	4b3e      	ldr	r3, [pc, #248]	; (8009818 <xTaskIncrementTick+0x154>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	3301      	adds	r3, #1
 8009724:	4a3c      	ldr	r2, [pc, #240]	; (8009818 <xTaskIncrementTick+0x154>)
 8009726:	6013      	str	r3, [r2, #0]
 8009728:	f000 f972 	bl	8009a10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800972c:	4b3b      	ldr	r3, [pc, #236]	; (800981c <xTaskIncrementTick+0x158>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	693a      	ldr	r2, [r7, #16]
 8009732:	429a      	cmp	r2, r3
 8009734:	d348      	bcc.n	80097c8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009736:	4b36      	ldr	r3, [pc, #216]	; (8009810 <xTaskIncrementTick+0x14c>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d104      	bne.n	800974a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009740:	4b36      	ldr	r3, [pc, #216]	; (800981c <xTaskIncrementTick+0x158>)
 8009742:	f04f 32ff 	mov.w	r2, #4294967295
 8009746:	601a      	str	r2, [r3, #0]
					break;
 8009748:	e03e      	b.n	80097c8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800974a:	4b31      	ldr	r3, [pc, #196]	; (8009810 <xTaskIncrementTick+0x14c>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800975a:	693a      	ldr	r2, [r7, #16]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	429a      	cmp	r2, r3
 8009760:	d203      	bcs.n	800976a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009762:	4a2e      	ldr	r2, [pc, #184]	; (800981c <xTaskIncrementTick+0x158>)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009768:	e02e      	b.n	80097c8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	3304      	adds	r3, #4
 800976e:	4618      	mov	r0, r3
 8009770:	f7ff fd28 	bl	80091c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009778:	2b00      	cmp	r3, #0
 800977a:	d004      	beq.n	8009786 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	3318      	adds	r3, #24
 8009780:	4618      	mov	r0, r3
 8009782:	f7ff fd1f 	bl	80091c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978a:	2201      	movs	r2, #1
 800978c:	409a      	lsls	r2, r3
 800978e:	4b24      	ldr	r3, [pc, #144]	; (8009820 <xTaskIncrementTick+0x15c>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4313      	orrs	r3, r2
 8009794:	4a22      	ldr	r2, [pc, #136]	; (8009820 <xTaskIncrementTick+0x15c>)
 8009796:	6013      	str	r3, [r2, #0]
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800979c:	4613      	mov	r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	4413      	add	r3, r2
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	4a1f      	ldr	r2, [pc, #124]	; (8009824 <xTaskIncrementTick+0x160>)
 80097a6:	441a      	add	r2, r3
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	3304      	adds	r3, #4
 80097ac:	4619      	mov	r1, r3
 80097ae:	4610      	mov	r0, r2
 80097b0:	f7ff fcab 	bl	800910a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097b8:	4b1b      	ldr	r3, [pc, #108]	; (8009828 <xTaskIncrementTick+0x164>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097be:	429a      	cmp	r2, r3
 80097c0:	d3b9      	bcc.n	8009736 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80097c2:	2301      	movs	r3, #1
 80097c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097c6:	e7b6      	b.n	8009736 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80097c8:	4b17      	ldr	r3, [pc, #92]	; (8009828 <xTaskIncrementTick+0x164>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ce:	4915      	ldr	r1, [pc, #84]	; (8009824 <xTaskIncrementTick+0x160>)
 80097d0:	4613      	mov	r3, r2
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	4413      	add	r3, r2
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	440b      	add	r3, r1
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d907      	bls.n	80097f0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80097e0:	2301      	movs	r3, #1
 80097e2:	617b      	str	r3, [r7, #20]
 80097e4:	e004      	b.n	80097f0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80097e6:	4b11      	ldr	r3, [pc, #68]	; (800982c <xTaskIncrementTick+0x168>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3301      	adds	r3, #1
 80097ec:	4a0f      	ldr	r2, [pc, #60]	; (800982c <xTaskIncrementTick+0x168>)
 80097ee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80097f0:	4b0f      	ldr	r3, [pc, #60]	; (8009830 <xTaskIncrementTick+0x16c>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d001      	beq.n	80097fc <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80097f8:	2301      	movs	r3, #1
 80097fa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80097fc:	697b      	ldr	r3, [r7, #20]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3718      	adds	r7, #24
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	20001530 	.word	0x20001530
 800980c:	2000150c 	.word	0x2000150c
 8009810:	200014c0 	.word	0x200014c0
 8009814:	200014c4 	.word	0x200014c4
 8009818:	20001520 	.word	0x20001520
 800981c:	20001528 	.word	0x20001528
 8009820:	20001510 	.word	0x20001510
 8009824:	2000140c 	.word	0x2000140c
 8009828:	20001408 	.word	0x20001408
 800982c:	20001518 	.word	0x20001518
 8009830:	2000151c 	.word	0x2000151c

08009834 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009834:	b480      	push	{r7}
 8009836:	b087      	sub	sp, #28
 8009838:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800983a:	4b26      	ldr	r3, [pc, #152]	; (80098d4 <vTaskSwitchContext+0xa0>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d003      	beq.n	800984a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009842:	4b25      	ldr	r3, [pc, #148]	; (80098d8 <vTaskSwitchContext+0xa4>)
 8009844:	2201      	movs	r2, #1
 8009846:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009848:	e03e      	b.n	80098c8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800984a:	4b23      	ldr	r3, [pc, #140]	; (80098d8 <vTaskSwitchContext+0xa4>)
 800984c:	2200      	movs	r2, #0
 800984e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009850:	4b22      	ldr	r3, [pc, #136]	; (80098dc <vTaskSwitchContext+0xa8>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	fab3 f383 	clz	r3, r3
 800985c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800985e:	7afb      	ldrb	r3, [r7, #11]
 8009860:	f1c3 031f 	rsb	r3, r3, #31
 8009864:	617b      	str	r3, [r7, #20]
 8009866:	491e      	ldr	r1, [pc, #120]	; (80098e0 <vTaskSwitchContext+0xac>)
 8009868:	697a      	ldr	r2, [r7, #20]
 800986a:	4613      	mov	r3, r2
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	4413      	add	r3, r2
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	440b      	add	r3, r1
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d109      	bne.n	800988e <vTaskSwitchContext+0x5a>
	__asm volatile
 800987a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987e:	f383 8811 	msr	BASEPRI, r3
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	607b      	str	r3, [r7, #4]
 800988c:	e7fe      	b.n	800988c <vTaskSwitchContext+0x58>
 800988e:	697a      	ldr	r2, [r7, #20]
 8009890:	4613      	mov	r3, r2
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	4413      	add	r3, r2
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	4a11      	ldr	r2, [pc, #68]	; (80098e0 <vTaskSwitchContext+0xac>)
 800989a:	4413      	add	r3, r2
 800989c:	613b      	str	r3, [r7, #16]
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	685a      	ldr	r2, [r3, #4]
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	605a      	str	r2, [r3, #4]
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	685a      	ldr	r2, [r3, #4]
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	3308      	adds	r3, #8
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d104      	bne.n	80098be <vTaskSwitchContext+0x8a>
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	685a      	ldr	r2, [r3, #4]
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	605a      	str	r2, [r3, #4]
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	4a07      	ldr	r2, [pc, #28]	; (80098e4 <vTaskSwitchContext+0xb0>)
 80098c6:	6013      	str	r3, [r2, #0]
}
 80098c8:	bf00      	nop
 80098ca:	371c      	adds	r7, #28
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr
 80098d4:	20001530 	.word	0x20001530
 80098d8:	2000151c 	.word	0x2000151c
 80098dc:	20001510 	.word	0x20001510
 80098e0:	2000140c 	.word	0x2000140c
 80098e4:	20001408 	.word	0x20001408

080098e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80098f0:	f000 f852 	bl	8009998 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80098f4:	4b06      	ldr	r3, [pc, #24]	; (8009910 <prvIdleTask+0x28>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d9f9      	bls.n	80098f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80098fc:	4b05      	ldr	r3, [pc, #20]	; (8009914 <prvIdleTask+0x2c>)
 80098fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009902:	601a      	str	r2, [r3, #0]
 8009904:	f3bf 8f4f 	dsb	sy
 8009908:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800990c:	e7f0      	b.n	80098f0 <prvIdleTask+0x8>
 800990e:	bf00      	nop
 8009910:	2000140c 	.word	0x2000140c
 8009914:	e000ed04 	.word	0xe000ed04

08009918 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800991e:	2300      	movs	r3, #0
 8009920:	607b      	str	r3, [r7, #4]
 8009922:	e00c      	b.n	800993e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	4613      	mov	r3, r2
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	4413      	add	r3, r2
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	4a12      	ldr	r2, [pc, #72]	; (8009978 <prvInitialiseTaskLists+0x60>)
 8009930:	4413      	add	r3, r2
 8009932:	4618      	mov	r0, r3
 8009934:	f7ff fbbc 	bl	80090b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	3301      	adds	r3, #1
 800993c:	607b      	str	r3, [r7, #4]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2b06      	cmp	r3, #6
 8009942:	d9ef      	bls.n	8009924 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009944:	480d      	ldr	r0, [pc, #52]	; (800997c <prvInitialiseTaskLists+0x64>)
 8009946:	f7ff fbb3 	bl	80090b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800994a:	480d      	ldr	r0, [pc, #52]	; (8009980 <prvInitialiseTaskLists+0x68>)
 800994c:	f7ff fbb0 	bl	80090b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009950:	480c      	ldr	r0, [pc, #48]	; (8009984 <prvInitialiseTaskLists+0x6c>)
 8009952:	f7ff fbad 	bl	80090b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009956:	480c      	ldr	r0, [pc, #48]	; (8009988 <prvInitialiseTaskLists+0x70>)
 8009958:	f7ff fbaa 	bl	80090b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800995c:	480b      	ldr	r0, [pc, #44]	; (800998c <prvInitialiseTaskLists+0x74>)
 800995e:	f7ff fba7 	bl	80090b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009962:	4b0b      	ldr	r3, [pc, #44]	; (8009990 <prvInitialiseTaskLists+0x78>)
 8009964:	4a05      	ldr	r2, [pc, #20]	; (800997c <prvInitialiseTaskLists+0x64>)
 8009966:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009968:	4b0a      	ldr	r3, [pc, #40]	; (8009994 <prvInitialiseTaskLists+0x7c>)
 800996a:	4a05      	ldr	r2, [pc, #20]	; (8009980 <prvInitialiseTaskLists+0x68>)
 800996c:	601a      	str	r2, [r3, #0]
}
 800996e:	bf00      	nop
 8009970:	3708      	adds	r7, #8
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	2000140c 	.word	0x2000140c
 800997c:	20001498 	.word	0x20001498
 8009980:	200014ac 	.word	0x200014ac
 8009984:	200014c8 	.word	0x200014c8
 8009988:	200014dc 	.word	0x200014dc
 800998c:	200014f4 	.word	0x200014f4
 8009990:	200014c0 	.word	0x200014c0
 8009994:	200014c4 	.word	0x200014c4

08009998 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800999e:	e019      	b.n	80099d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80099a0:	f000 f9e4 	bl	8009d6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099a4:	4b0f      	ldr	r3, [pc, #60]	; (80099e4 <prvCheckTasksWaitingTermination+0x4c>)
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	3304      	adds	r3, #4
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7ff fc07 	bl	80091c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80099b6:	4b0c      	ldr	r3, [pc, #48]	; (80099e8 <prvCheckTasksWaitingTermination+0x50>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	3b01      	subs	r3, #1
 80099bc:	4a0a      	ldr	r2, [pc, #40]	; (80099e8 <prvCheckTasksWaitingTermination+0x50>)
 80099be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80099c0:	4b0a      	ldr	r3, [pc, #40]	; (80099ec <prvCheckTasksWaitingTermination+0x54>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	3b01      	subs	r3, #1
 80099c6:	4a09      	ldr	r2, [pc, #36]	; (80099ec <prvCheckTasksWaitingTermination+0x54>)
 80099c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80099ca:	f000 f9fd 	bl	8009dc8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f80e 	bl	80099f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099d4:	4b05      	ldr	r3, [pc, #20]	; (80099ec <prvCheckTasksWaitingTermination+0x54>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1e1      	bne.n	80099a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80099dc:	bf00      	nop
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	200014dc 	.word	0x200014dc
 80099e8:	20001508 	.word	0x20001508
 80099ec:	200014f0 	.word	0x200014f0

080099f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099fc:	4618      	mov	r0, r3
 80099fe:	f000 fb53 	bl	800a0a8 <vPortFree>
			vPortFree( pxTCB );
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 fb50 	bl	800a0a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a08:	bf00      	nop
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a16:	4b0c      	ldr	r3, [pc, #48]	; (8009a48 <prvResetNextTaskUnblockTime+0x38>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d104      	bne.n	8009a2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a20:	4b0a      	ldr	r3, [pc, #40]	; (8009a4c <prvResetNextTaskUnblockTime+0x3c>)
 8009a22:	f04f 32ff 	mov.w	r2, #4294967295
 8009a26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a28:	e008      	b.n	8009a3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a2a:	4b07      	ldr	r3, [pc, #28]	; (8009a48 <prvResetNextTaskUnblockTime+0x38>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	4a04      	ldr	r2, [pc, #16]	; (8009a4c <prvResetNextTaskUnblockTime+0x3c>)
 8009a3a:	6013      	str	r3, [r2, #0]
}
 8009a3c:	bf00      	nop
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr
 8009a48:	200014c0 	.word	0x200014c0
 8009a4c:	20001528 	.word	0x20001528

08009a50 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a5a:	4b29      	ldr	r3, [pc, #164]	; (8009b00 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a60:	4b28      	ldr	r3, [pc, #160]	; (8009b04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	3304      	adds	r3, #4
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7ff fbac 	bl	80091c4 <uxListRemove>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10b      	bne.n	8009a8a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009a72:	4b24      	ldr	r3, [pc, #144]	; (8009b04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a78:	2201      	movs	r2, #1
 8009a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a7e:	43da      	mvns	r2, r3
 8009a80:	4b21      	ldr	r3, [pc, #132]	; (8009b08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4013      	ands	r3, r2
 8009a86:	4a20      	ldr	r2, [pc, #128]	; (8009b08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009a88:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a90:	d10a      	bne.n	8009aa8 <prvAddCurrentTaskToDelayedList+0x58>
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d007      	beq.n	8009aa8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a98:	4b1a      	ldr	r3, [pc, #104]	; (8009b04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	3304      	adds	r3, #4
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	481a      	ldr	r0, [pc, #104]	; (8009b0c <prvAddCurrentTaskToDelayedList+0xbc>)
 8009aa2:	f7ff fb32 	bl	800910a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009aa6:	e026      	b.n	8009af6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4413      	add	r3, r2
 8009aae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009ab0:	4b14      	ldr	r3, [pc, #80]	; (8009b04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68ba      	ldr	r2, [r7, #8]
 8009ab6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ab8:	68ba      	ldr	r2, [r7, #8]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d209      	bcs.n	8009ad4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ac0:	4b13      	ldr	r3, [pc, #76]	; (8009b10 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	4b0f      	ldr	r3, [pc, #60]	; (8009b04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	3304      	adds	r3, #4
 8009aca:	4619      	mov	r1, r3
 8009acc:	4610      	mov	r0, r2
 8009ace:	f7ff fb40 	bl	8009152 <vListInsert>
}
 8009ad2:	e010      	b.n	8009af6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ad4:	4b0f      	ldr	r3, [pc, #60]	; (8009b14 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	4b0a      	ldr	r3, [pc, #40]	; (8009b04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	3304      	adds	r3, #4
 8009ade:	4619      	mov	r1, r3
 8009ae0:	4610      	mov	r0, r2
 8009ae2:	f7ff fb36 	bl	8009152 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009ae6:	4b0c      	ldr	r3, [pc, #48]	; (8009b18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d202      	bcs.n	8009af6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009af0:	4a09      	ldr	r2, [pc, #36]	; (8009b18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	6013      	str	r3, [r2, #0]
}
 8009af6:	bf00      	nop
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	2000150c 	.word	0x2000150c
 8009b04:	20001408 	.word	0x20001408
 8009b08:	20001510 	.word	0x20001510
 8009b0c:	200014f4 	.word	0x200014f4
 8009b10:	200014c4 	.word	0x200014c4
 8009b14:	200014c0 	.word	0x200014c0
 8009b18:	20001528 	.word	0x20001528

08009b1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b085      	sub	sp, #20
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	3b04      	subs	r3, #4
 8009b2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009b34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	3b04      	subs	r3, #4
 8009b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	f023 0201 	bic.w	r2, r3, #1
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	3b04      	subs	r3, #4
 8009b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b4c:	4a0c      	ldr	r2, [pc, #48]	; (8009b80 <pxPortInitialiseStack+0x64>)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	3b14      	subs	r3, #20
 8009b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	3b04      	subs	r3, #4
 8009b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f06f 0202 	mvn.w	r2, #2
 8009b6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	3b20      	subs	r3, #32
 8009b70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b72:	68fb      	ldr	r3, [r7, #12]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3714      	adds	r7, #20
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr
 8009b80:	08009b85 	.word	0x08009b85

08009b84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009b8e:	4b11      	ldr	r3, [pc, #68]	; (8009bd4 <prvTaskExitError+0x50>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b96:	d009      	beq.n	8009bac <prvTaskExitError+0x28>
 8009b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9c:	f383 8811 	msr	BASEPRI, r3
 8009ba0:	f3bf 8f6f 	isb	sy
 8009ba4:	f3bf 8f4f 	dsb	sy
 8009ba8:	60fb      	str	r3, [r7, #12]
 8009baa:	e7fe      	b.n	8009baa <prvTaskExitError+0x26>
 8009bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb0:	f383 8811 	msr	BASEPRI, r3
 8009bb4:	f3bf 8f6f 	isb	sy
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009bbe:	bf00      	nop
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d0fc      	beq.n	8009bc0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009bc6:	bf00      	nop
 8009bc8:	3714      	adds	r7, #20
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	2000011c 	.word	0x2000011c
	...

08009be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009be0:	4b07      	ldr	r3, [pc, #28]	; (8009c00 <pxCurrentTCBConst2>)
 8009be2:	6819      	ldr	r1, [r3, #0]
 8009be4:	6808      	ldr	r0, [r1, #0]
 8009be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bea:	f380 8809 	msr	PSP, r0
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f04f 0000 	mov.w	r0, #0
 8009bf6:	f380 8811 	msr	BASEPRI, r0
 8009bfa:	4770      	bx	lr
 8009bfc:	f3af 8000 	nop.w

08009c00 <pxCurrentTCBConst2>:
 8009c00:	20001408 	.word	0x20001408
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c04:	bf00      	nop
 8009c06:	bf00      	nop

08009c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c08:	4808      	ldr	r0, [pc, #32]	; (8009c2c <prvPortStartFirstTask+0x24>)
 8009c0a:	6800      	ldr	r0, [r0, #0]
 8009c0c:	6800      	ldr	r0, [r0, #0]
 8009c0e:	f380 8808 	msr	MSP, r0
 8009c12:	f04f 0000 	mov.w	r0, #0
 8009c16:	f380 8814 	msr	CONTROL, r0
 8009c1a:	b662      	cpsie	i
 8009c1c:	b661      	cpsie	f
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	df00      	svc	0
 8009c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c2a:	bf00      	nop
 8009c2c:	e000ed08 	.word	0xe000ed08

08009c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009c36:	4b44      	ldr	r3, [pc, #272]	; (8009d48 <xPortStartScheduler+0x118>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a44      	ldr	r2, [pc, #272]	; (8009d4c <xPortStartScheduler+0x11c>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d109      	bne.n	8009c54 <xPortStartScheduler+0x24>
 8009c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	613b      	str	r3, [r7, #16]
 8009c52:	e7fe      	b.n	8009c52 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009c54:	4b3c      	ldr	r3, [pc, #240]	; (8009d48 <xPortStartScheduler+0x118>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a3d      	ldr	r2, [pc, #244]	; (8009d50 <xPortStartScheduler+0x120>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d109      	bne.n	8009c72 <xPortStartScheduler+0x42>
 8009c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	60fb      	str	r3, [r7, #12]
 8009c70:	e7fe      	b.n	8009c70 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009c72:	4b38      	ldr	r3, [pc, #224]	; (8009d54 <xPortStartScheduler+0x124>)
 8009c74:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	22ff      	movs	r2, #255	; 0xff
 8009c82:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c8c:	78fb      	ldrb	r3, [r7, #3]
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c94:	b2da      	uxtb	r2, r3
 8009c96:	4b30      	ldr	r3, [pc, #192]	; (8009d58 <xPortStartScheduler+0x128>)
 8009c98:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c9a:	4b30      	ldr	r3, [pc, #192]	; (8009d5c <xPortStartScheduler+0x12c>)
 8009c9c:	2207      	movs	r2, #7
 8009c9e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ca0:	e009      	b.n	8009cb6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009ca2:	4b2e      	ldr	r3, [pc, #184]	; (8009d5c <xPortStartScheduler+0x12c>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	4a2c      	ldr	r2, [pc, #176]	; (8009d5c <xPortStartScheduler+0x12c>)
 8009caa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009cac:	78fb      	ldrb	r3, [r7, #3]
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	005b      	lsls	r3, r3, #1
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cb6:	78fb      	ldrb	r3, [r7, #3]
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cbe:	2b80      	cmp	r3, #128	; 0x80
 8009cc0:	d0ef      	beq.n	8009ca2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009cc2:	4b26      	ldr	r3, [pc, #152]	; (8009d5c <xPortStartScheduler+0x12c>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f1c3 0307 	rsb	r3, r3, #7
 8009cca:	2b04      	cmp	r3, #4
 8009ccc:	d009      	beq.n	8009ce2 <xPortStartScheduler+0xb2>
 8009cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd2:	f383 8811 	msr	BASEPRI, r3
 8009cd6:	f3bf 8f6f 	isb	sy
 8009cda:	f3bf 8f4f 	dsb	sy
 8009cde:	60bb      	str	r3, [r7, #8]
 8009ce0:	e7fe      	b.n	8009ce0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ce2:	4b1e      	ldr	r3, [pc, #120]	; (8009d5c <xPortStartScheduler+0x12c>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	021b      	lsls	r3, r3, #8
 8009ce8:	4a1c      	ldr	r2, [pc, #112]	; (8009d5c <xPortStartScheduler+0x12c>)
 8009cea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009cec:	4b1b      	ldr	r3, [pc, #108]	; (8009d5c <xPortStartScheduler+0x12c>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009cf4:	4a19      	ldr	r2, [pc, #100]	; (8009d5c <xPortStartScheduler+0x12c>)
 8009cf6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	b2da      	uxtb	r2, r3
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d00:	4b17      	ldr	r3, [pc, #92]	; (8009d60 <xPortStartScheduler+0x130>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a16      	ldr	r2, [pc, #88]	; (8009d60 <xPortStartScheduler+0x130>)
 8009d06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009d0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d0c:	4b14      	ldr	r3, [pc, #80]	; (8009d60 <xPortStartScheduler+0x130>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a13      	ldr	r2, [pc, #76]	; (8009d60 <xPortStartScheduler+0x130>)
 8009d12:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009d16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d18:	f000 f8d6 	bl	8009ec8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d1c:	4b11      	ldr	r3, [pc, #68]	; (8009d64 <xPortStartScheduler+0x134>)
 8009d1e:	2200      	movs	r2, #0
 8009d20:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d22:	f000 f8f5 	bl	8009f10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009d26:	4b10      	ldr	r3, [pc, #64]	; (8009d68 <xPortStartScheduler+0x138>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a0f      	ldr	r2, [pc, #60]	; (8009d68 <xPortStartScheduler+0x138>)
 8009d2c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009d30:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d32:	f7ff ff69 	bl	8009c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d36:	f7ff fd7d 	bl	8009834 <vTaskSwitchContext>
	prvTaskExitError();
 8009d3a:	f7ff ff23 	bl	8009b84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3718      	adds	r7, #24
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	e000ed00 	.word	0xe000ed00
 8009d4c:	410fc271 	.word	0x410fc271
 8009d50:	410fc270 	.word	0x410fc270
 8009d54:	e000e400 	.word	0xe000e400
 8009d58:	20001534 	.word	0x20001534
 8009d5c:	20001538 	.word	0x20001538
 8009d60:	e000ed20 	.word	0xe000ed20
 8009d64:	2000011c 	.word	0x2000011c
 8009d68:	e000ef34 	.word	0xe000ef34

08009d6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d76:	f383 8811 	msr	BASEPRI, r3
 8009d7a:	f3bf 8f6f 	isb	sy
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d84:	4b0e      	ldr	r3, [pc, #56]	; (8009dc0 <vPortEnterCritical+0x54>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	4a0d      	ldr	r2, [pc, #52]	; (8009dc0 <vPortEnterCritical+0x54>)
 8009d8c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d8e:	4b0c      	ldr	r3, [pc, #48]	; (8009dc0 <vPortEnterCritical+0x54>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d10e      	bne.n	8009db4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d96:	4b0b      	ldr	r3, [pc, #44]	; (8009dc4 <vPortEnterCritical+0x58>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d009      	beq.n	8009db4 <vPortEnterCritical+0x48>
 8009da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	603b      	str	r3, [r7, #0]
 8009db2:	e7fe      	b.n	8009db2 <vPortEnterCritical+0x46>
	}
}
 8009db4:	bf00      	nop
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr
 8009dc0:	2000011c 	.word	0x2000011c
 8009dc4:	e000ed04 	.word	0xe000ed04

08009dc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009dce:	4b11      	ldr	r3, [pc, #68]	; (8009e14 <vPortExitCritical+0x4c>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d109      	bne.n	8009dea <vPortExitCritical+0x22>
 8009dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dda:	f383 8811 	msr	BASEPRI, r3
 8009dde:	f3bf 8f6f 	isb	sy
 8009de2:	f3bf 8f4f 	dsb	sy
 8009de6:	607b      	str	r3, [r7, #4]
 8009de8:	e7fe      	b.n	8009de8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009dea:	4b0a      	ldr	r3, [pc, #40]	; (8009e14 <vPortExitCritical+0x4c>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	3b01      	subs	r3, #1
 8009df0:	4a08      	ldr	r2, [pc, #32]	; (8009e14 <vPortExitCritical+0x4c>)
 8009df2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009df4:	4b07      	ldr	r3, [pc, #28]	; (8009e14 <vPortExitCritical+0x4c>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d104      	bne.n	8009e06 <vPortExitCritical+0x3e>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e06:	bf00      	nop
 8009e08:	370c      	adds	r7, #12
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	2000011c 	.word	0x2000011c
	...

08009e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e20:	f3ef 8009 	mrs	r0, PSP
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	4b15      	ldr	r3, [pc, #84]	; (8009e80 <pxCurrentTCBConst>)
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	f01e 0f10 	tst.w	lr, #16
 8009e30:	bf08      	it	eq
 8009e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3a:	6010      	str	r0, [r2, #0]
 8009e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009e44:	f380 8811 	msr	BASEPRI, r0
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	f3bf 8f6f 	isb	sy
 8009e50:	f7ff fcf0 	bl	8009834 <vTaskSwitchContext>
 8009e54:	f04f 0000 	mov.w	r0, #0
 8009e58:	f380 8811 	msr	BASEPRI, r0
 8009e5c:	bc09      	pop	{r0, r3}
 8009e5e:	6819      	ldr	r1, [r3, #0]
 8009e60:	6808      	ldr	r0, [r1, #0]
 8009e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e66:	f01e 0f10 	tst.w	lr, #16
 8009e6a:	bf08      	it	eq
 8009e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009e70:	f380 8809 	msr	PSP, r0
 8009e74:	f3bf 8f6f 	isb	sy
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	f3af 8000 	nop.w

08009e80 <pxCurrentTCBConst>:
 8009e80:	20001408 	.word	0x20001408
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e84:	bf00      	nop
 8009e86:	bf00      	nop

08009e88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ea0:	f7ff fc10 	bl	80096c4 <xTaskIncrementTick>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d003      	beq.n	8009eb2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009eaa:	4b06      	ldr	r3, [pc, #24]	; (8009ec4 <SysTick_Handler+0x3c>)
 8009eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eb0:	601a      	str	r2, [r3, #0]
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ebc:	bf00      	nop
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	e000ed04 	.word	0xe000ed04

08009ec8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009ec8:	b480      	push	{r7}
 8009eca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ecc:	4b0b      	ldr	r3, [pc, #44]	; (8009efc <vPortSetupTimerInterrupt+0x34>)
 8009ece:	2200      	movs	r2, #0
 8009ed0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ed2:	4b0b      	ldr	r3, [pc, #44]	; (8009f00 <vPortSetupTimerInterrupt+0x38>)
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009ed8:	4b0a      	ldr	r3, [pc, #40]	; (8009f04 <vPortSetupTimerInterrupt+0x3c>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a0a      	ldr	r2, [pc, #40]	; (8009f08 <vPortSetupTimerInterrupt+0x40>)
 8009ede:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee2:	099b      	lsrs	r3, r3, #6
 8009ee4:	4a09      	ldr	r2, [pc, #36]	; (8009f0c <vPortSetupTimerInterrupt+0x44>)
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009eea:	4b04      	ldr	r3, [pc, #16]	; (8009efc <vPortSetupTimerInterrupt+0x34>)
 8009eec:	2207      	movs	r2, #7
 8009eee:	601a      	str	r2, [r3, #0]
}
 8009ef0:	bf00      	nop
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	e000e010 	.word	0xe000e010
 8009f00:	e000e018 	.word	0xe000e018
 8009f04:	20000000 	.word	0x20000000
 8009f08:	10624dd3 	.word	0x10624dd3
 8009f0c:	e000e014 	.word	0xe000e014

08009f10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009f20 <vPortEnableVFP+0x10>
 8009f14:	6801      	ldr	r1, [r0, #0]
 8009f16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009f1a:	6001      	str	r1, [r0, #0]
 8009f1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009f1e:	bf00      	nop
 8009f20:	e000ed88 	.word	0xe000ed88

08009f24 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b08a      	sub	sp, #40	; 0x28
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009f30:	f7ff fb1e 	bl	8009570 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009f34:	4b57      	ldr	r3, [pc, #348]	; (800a094 <pvPortMalloc+0x170>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d101      	bne.n	8009f40 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009f3c:	f000 f90c 	bl	800a158 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009f40:	4b55      	ldr	r3, [pc, #340]	; (800a098 <pvPortMalloc+0x174>)
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4013      	ands	r3, r2
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f040 808c 	bne.w	800a066 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d01c      	beq.n	8009f8e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009f54:	2208      	movs	r2, #8
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4413      	add	r3, r2
 8009f5a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f003 0307 	and.w	r3, r3, #7
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d013      	beq.n	8009f8e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f023 0307 	bic.w	r3, r3, #7
 8009f6c:	3308      	adds	r3, #8
 8009f6e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f003 0307 	and.w	r3, r3, #7
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d009      	beq.n	8009f8e <pvPortMalloc+0x6a>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	617b      	str	r3, [r7, #20]
 8009f8c:	e7fe      	b.n	8009f8c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d068      	beq.n	800a066 <pvPortMalloc+0x142>
 8009f94:	4b41      	ldr	r3, [pc, #260]	; (800a09c <pvPortMalloc+0x178>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d863      	bhi.n	800a066 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f9e:	4b40      	ldr	r3, [pc, #256]	; (800a0a0 <pvPortMalloc+0x17c>)
 8009fa0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009fa2:	4b3f      	ldr	r3, [pc, #252]	; (800a0a0 <pvPortMalloc+0x17c>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009fa8:	e004      	b.n	8009fb4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d903      	bls.n	8009fc6 <pvPortMalloc+0xa2>
 8009fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d1f1      	bne.n	8009faa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009fc6:	4b33      	ldr	r3, [pc, #204]	; (800a094 <pvPortMalloc+0x170>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d04a      	beq.n	800a066 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009fd0:	6a3b      	ldr	r3, [r7, #32]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2208      	movs	r2, #8
 8009fd6:	4413      	add	r3, r2
 8009fd8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	6a3b      	ldr	r3, [r7, #32]
 8009fe0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe4:	685a      	ldr	r2, [r3, #4]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	1ad2      	subs	r2, r2, r3
 8009fea:	2308      	movs	r3, #8
 8009fec:	005b      	lsls	r3, r3, #1
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d91e      	bls.n	800a030 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4413      	add	r3, r2
 8009ff8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	f003 0307 	and.w	r3, r3, #7
 800a000:	2b00      	cmp	r3, #0
 800a002:	d009      	beq.n	800a018 <pvPortMalloc+0xf4>
 800a004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a008:	f383 8811 	msr	BASEPRI, r3
 800a00c:	f3bf 8f6f 	isb	sy
 800a010:	f3bf 8f4f 	dsb	sy
 800a014:	613b      	str	r3, [r7, #16]
 800a016:	e7fe      	b.n	800a016 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01a:	685a      	ldr	r2, [r3, #4]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	1ad2      	subs	r2, r2, r3
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a02a:	69b8      	ldr	r0, [r7, #24]
 800a02c:	f000 f8f6 	bl	800a21c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a030:	4b1a      	ldr	r3, [pc, #104]	; (800a09c <pvPortMalloc+0x178>)
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	4a18      	ldr	r2, [pc, #96]	; (800a09c <pvPortMalloc+0x178>)
 800a03c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a03e:	4b17      	ldr	r3, [pc, #92]	; (800a09c <pvPortMalloc+0x178>)
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	4b18      	ldr	r3, [pc, #96]	; (800a0a4 <pvPortMalloc+0x180>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	429a      	cmp	r2, r3
 800a048:	d203      	bcs.n	800a052 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a04a:	4b14      	ldr	r3, [pc, #80]	; (800a09c <pvPortMalloc+0x178>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a15      	ldr	r2, [pc, #84]	; (800a0a4 <pvPortMalloc+0x180>)
 800a050:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a054:	685a      	ldr	r2, [r3, #4]
 800a056:	4b10      	ldr	r3, [pc, #64]	; (800a098 <pvPortMalloc+0x174>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	431a      	orrs	r2, r3
 800a05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a062:	2200      	movs	r2, #0
 800a064:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a066:	f7ff fa91 	bl	800958c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	f003 0307 	and.w	r3, r3, #7
 800a070:	2b00      	cmp	r3, #0
 800a072:	d009      	beq.n	800a088 <pvPortMalloc+0x164>
 800a074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a078:	f383 8811 	msr	BASEPRI, r3
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	60fb      	str	r3, [r7, #12]
 800a086:	e7fe      	b.n	800a086 <pvPortMalloc+0x162>
	return pvReturn;
 800a088:	69fb      	ldr	r3, [r7, #28]
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3728      	adds	r7, #40	; 0x28
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	20002144 	.word	0x20002144
 800a098:	20002150 	.word	0x20002150
 800a09c:	20002148 	.word	0x20002148
 800a0a0:	2000213c 	.word	0x2000213c
 800a0a4:	2000214c 	.word	0x2000214c

0800a0a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b086      	sub	sp, #24
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d046      	beq.n	800a148 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a0ba:	2308      	movs	r3, #8
 800a0bc:	425b      	negs	r3, r3
 800a0be:	697a      	ldr	r2, [r7, #20]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	685a      	ldr	r2, [r3, #4]
 800a0cc:	4b20      	ldr	r3, [pc, #128]	; (800a150 <vPortFree+0xa8>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4013      	ands	r3, r2
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d109      	bne.n	800a0ea <vPortFree+0x42>
 800a0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0da:	f383 8811 	msr	BASEPRI, r3
 800a0de:	f3bf 8f6f 	isb	sy
 800a0e2:	f3bf 8f4f 	dsb	sy
 800a0e6:	60fb      	str	r3, [r7, #12]
 800a0e8:	e7fe      	b.n	800a0e8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d009      	beq.n	800a106 <vPortFree+0x5e>
 800a0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f6:	f383 8811 	msr	BASEPRI, r3
 800a0fa:	f3bf 8f6f 	isb	sy
 800a0fe:	f3bf 8f4f 	dsb	sy
 800a102:	60bb      	str	r3, [r7, #8]
 800a104:	e7fe      	b.n	800a104 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	685a      	ldr	r2, [r3, #4]
 800a10a:	4b11      	ldr	r3, [pc, #68]	; (800a150 <vPortFree+0xa8>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4013      	ands	r3, r2
 800a110:	2b00      	cmp	r3, #0
 800a112:	d019      	beq.n	800a148 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d115      	bne.n	800a148 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	685a      	ldr	r2, [r3, #4]
 800a120:	4b0b      	ldr	r3, [pc, #44]	; (800a150 <vPortFree+0xa8>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	43db      	mvns	r3, r3
 800a126:	401a      	ands	r2, r3
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a12c:	f7ff fa20 	bl	8009570 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	685a      	ldr	r2, [r3, #4]
 800a134:	4b07      	ldr	r3, [pc, #28]	; (800a154 <vPortFree+0xac>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4413      	add	r3, r2
 800a13a:	4a06      	ldr	r2, [pc, #24]	; (800a154 <vPortFree+0xac>)
 800a13c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a13e:	6938      	ldr	r0, [r7, #16]
 800a140:	f000 f86c 	bl	800a21c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a144:	f7ff fa22 	bl	800958c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a148:	bf00      	nop
 800a14a:	3718      	adds	r7, #24
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	20002150 	.word	0x20002150
 800a154:	20002148 	.word	0x20002148

0800a158 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a15e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a162:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a164:	4b27      	ldr	r3, [pc, #156]	; (800a204 <prvHeapInit+0xac>)
 800a166:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f003 0307 	and.w	r3, r3, #7
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00c      	beq.n	800a18c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	3307      	adds	r3, #7
 800a176:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f023 0307 	bic.w	r3, r3, #7
 800a17e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a180:	68ba      	ldr	r2, [r7, #8]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	1ad3      	subs	r3, r2, r3
 800a186:	4a1f      	ldr	r2, [pc, #124]	; (800a204 <prvHeapInit+0xac>)
 800a188:	4413      	add	r3, r2
 800a18a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a190:	4a1d      	ldr	r2, [pc, #116]	; (800a208 <prvHeapInit+0xb0>)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a196:	4b1c      	ldr	r3, [pc, #112]	; (800a208 <prvHeapInit+0xb0>)
 800a198:	2200      	movs	r2, #0
 800a19a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	68ba      	ldr	r2, [r7, #8]
 800a1a0:	4413      	add	r3, r2
 800a1a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a1a4:	2208      	movs	r2, #8
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	1a9b      	subs	r3, r3, r2
 800a1aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f023 0307 	bic.w	r3, r3, #7
 800a1b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	4a15      	ldr	r2, [pc, #84]	; (800a20c <prvHeapInit+0xb4>)
 800a1b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a1ba:	4b14      	ldr	r3, [pc, #80]	; (800a20c <prvHeapInit+0xb4>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a1c2:	4b12      	ldr	r3, [pc, #72]	; (800a20c <prvHeapInit+0xb4>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	68fa      	ldr	r2, [r7, #12]
 800a1d2:	1ad2      	subs	r2, r2, r3
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a1d8:	4b0c      	ldr	r3, [pc, #48]	; (800a20c <prvHeapInit+0xb4>)
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	4a0a      	ldr	r2, [pc, #40]	; (800a210 <prvHeapInit+0xb8>)
 800a1e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	4a09      	ldr	r2, [pc, #36]	; (800a214 <prvHeapInit+0xbc>)
 800a1ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a1f0:	4b09      	ldr	r3, [pc, #36]	; (800a218 <prvHeapInit+0xc0>)
 800a1f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a1f6:	601a      	str	r2, [r3, #0]
}
 800a1f8:	bf00      	nop
 800a1fa:	3714      	adds	r7, #20
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr
 800a204:	2000153c 	.word	0x2000153c
 800a208:	2000213c 	.word	0x2000213c
 800a20c:	20002144 	.word	0x20002144
 800a210:	2000214c 	.word	0x2000214c
 800a214:	20002148 	.word	0x20002148
 800a218:	20002150 	.word	0x20002150

0800a21c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a21c:	b480      	push	{r7}
 800a21e:	b085      	sub	sp, #20
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a224:	4b28      	ldr	r3, [pc, #160]	; (800a2c8 <prvInsertBlockIntoFreeList+0xac>)
 800a226:	60fb      	str	r3, [r7, #12]
 800a228:	e002      	b.n	800a230 <prvInsertBlockIntoFreeList+0x14>
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	60fb      	str	r3, [r7, #12]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	429a      	cmp	r2, r3
 800a238:	d8f7      	bhi.n	800a22a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	68ba      	ldr	r2, [r7, #8]
 800a244:	4413      	add	r3, r2
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	429a      	cmp	r2, r3
 800a24a:	d108      	bne.n	800a25e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	685a      	ldr	r2, [r3, #4]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	441a      	add	r2, r3
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	441a      	add	r2, r3
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	429a      	cmp	r2, r3
 800a270:	d118      	bne.n	800a2a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	4b15      	ldr	r3, [pc, #84]	; (800a2cc <prvInsertBlockIntoFreeList+0xb0>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d00d      	beq.n	800a29a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	685a      	ldr	r2, [r3, #4]
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	441a      	add	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	601a      	str	r2, [r3, #0]
 800a298:	e008      	b.n	800a2ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a29a:	4b0c      	ldr	r3, [pc, #48]	; (800a2cc <prvInsertBlockIntoFreeList+0xb0>)
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	601a      	str	r2, [r3, #0]
 800a2a2:	e003      	b.n	800a2ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a2ac:	68fa      	ldr	r2, [r7, #12]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d002      	beq.n	800a2ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2ba:	bf00      	nop
 800a2bc:	3714      	adds	r7, #20
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	2000213c 	.word	0x2000213c
 800a2cc:	20002144 	.word	0x20002144

0800a2d0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	4912      	ldr	r1, [pc, #72]	; (800a320 <MX_USB_Device_Init+0x50>)
 800a2d8:	4812      	ldr	r0, [pc, #72]	; (800a324 <MX_USB_Device_Init+0x54>)
 800a2da:	f7fd fdd2 	bl	8007e82 <USBD_Init>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d001      	beq.n	800a2e8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a2e4:	f7f6 f952 	bl	800058c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a2e8:	490f      	ldr	r1, [pc, #60]	; (800a328 <MX_USB_Device_Init+0x58>)
 800a2ea:	480e      	ldr	r0, [pc, #56]	; (800a324 <MX_USB_Device_Init+0x54>)
 800a2ec:	f7fd fdf4 	bl	8007ed8 <USBD_RegisterClass>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d001      	beq.n	800a2fa <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a2f6:	f7f6 f949 	bl	800058c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a2fa:	490c      	ldr	r1, [pc, #48]	; (800a32c <MX_USB_Device_Init+0x5c>)
 800a2fc:	4809      	ldr	r0, [pc, #36]	; (800a324 <MX_USB_Device_Init+0x54>)
 800a2fe:	f7fd fd51 	bl	8007da4 <USBD_CDC_RegisterInterface>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d001      	beq.n	800a30c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a308:	f7f6 f940 	bl	800058c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a30c:	4805      	ldr	r0, [pc, #20]	; (800a324 <MX_USB_Device_Init+0x54>)
 800a30e:	f7fd fdfd 	bl	8007f0c <USBD_Start>
 800a312:	4603      	mov	r3, r0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d001      	beq.n	800a31c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a318:	f7f6 f938 	bl	800058c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a31c:	bf00      	nop
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	20000130 	.word	0x20000130
 800a324:	20002650 	.word	0x20002650
 800a328:	20000018 	.word	0x20000018
 800a32c:	20000120 	.word	0x20000120

0800a330 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a334:	2200      	movs	r2, #0
 800a336:	4905      	ldr	r1, [pc, #20]	; (800a34c <CDC_Init_FS+0x1c>)
 800a338:	4805      	ldr	r0, [pc, #20]	; (800a350 <CDC_Init_FS+0x20>)
 800a33a:	f7fd fd4a 	bl	8007dd2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a33e:	4905      	ldr	r1, [pc, #20]	; (800a354 <CDC_Init_FS+0x24>)
 800a340:	4803      	ldr	r0, [pc, #12]	; (800a350 <CDC_Init_FS+0x20>)
 800a342:	f7fd fd60 	bl	8007e06 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a346:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a348:	4618      	mov	r0, r3
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	20002cfc 	.word	0x20002cfc
 800a350:	20002650 	.word	0x20002650
 800a354:	20002914 	.word	0x20002914

0800a358 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a358:	b480      	push	{r7}
 800a35a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a35c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a35e:	4618      	mov	r0, r3
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	4603      	mov	r3, r0
 800a370:	6039      	str	r1, [r7, #0]
 800a372:	71fb      	strb	r3, [r7, #7]
 800a374:	4613      	mov	r3, r2
 800a376:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a378:	79fb      	ldrb	r3, [r7, #7]
 800a37a:	2b23      	cmp	r3, #35	; 0x23
 800a37c:	d84a      	bhi.n	800a414 <CDC_Control_FS+0xac>
 800a37e:	a201      	add	r2, pc, #4	; (adr r2, 800a384 <CDC_Control_FS+0x1c>)
 800a380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a384:	0800a415 	.word	0x0800a415
 800a388:	0800a415 	.word	0x0800a415
 800a38c:	0800a415 	.word	0x0800a415
 800a390:	0800a415 	.word	0x0800a415
 800a394:	0800a415 	.word	0x0800a415
 800a398:	0800a415 	.word	0x0800a415
 800a39c:	0800a415 	.word	0x0800a415
 800a3a0:	0800a415 	.word	0x0800a415
 800a3a4:	0800a415 	.word	0x0800a415
 800a3a8:	0800a415 	.word	0x0800a415
 800a3ac:	0800a415 	.word	0x0800a415
 800a3b0:	0800a415 	.word	0x0800a415
 800a3b4:	0800a415 	.word	0x0800a415
 800a3b8:	0800a415 	.word	0x0800a415
 800a3bc:	0800a415 	.word	0x0800a415
 800a3c0:	0800a415 	.word	0x0800a415
 800a3c4:	0800a415 	.word	0x0800a415
 800a3c8:	0800a415 	.word	0x0800a415
 800a3cc:	0800a415 	.word	0x0800a415
 800a3d0:	0800a415 	.word	0x0800a415
 800a3d4:	0800a415 	.word	0x0800a415
 800a3d8:	0800a415 	.word	0x0800a415
 800a3dc:	0800a415 	.word	0x0800a415
 800a3e0:	0800a415 	.word	0x0800a415
 800a3e4:	0800a415 	.word	0x0800a415
 800a3e8:	0800a415 	.word	0x0800a415
 800a3ec:	0800a415 	.word	0x0800a415
 800a3f0:	0800a415 	.word	0x0800a415
 800a3f4:	0800a415 	.word	0x0800a415
 800a3f8:	0800a415 	.word	0x0800a415
 800a3fc:	0800a415 	.word	0x0800a415
 800a400:	0800a415 	.word	0x0800a415
 800a404:	0800a415 	.word	0x0800a415
 800a408:	0800a415 	.word	0x0800a415
 800a40c:	0800a415 	.word	0x0800a415
 800a410:	0800a415 	.word	0x0800a415
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a414:	bf00      	nop
  }

  return (USBD_OK);
 800a416:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a418:	4618      	mov	r0, r3
 800a41a:	370c      	adds	r7, #12
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a42e:	6879      	ldr	r1, [r7, #4]
 800a430:	4805      	ldr	r0, [pc, #20]	; (800a448 <CDC_Receive_FS+0x24>)
 800a432:	f7fd fce8 	bl	8007e06 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a436:	4804      	ldr	r0, [pc, #16]	; (800a448 <CDC_Receive_FS+0x24>)
 800a438:	f7fd fcf9 	bl	8007e2e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a43c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3708      	adds	r7, #8
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	20002650 	.word	0x20002650

0800a44c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	4603      	mov	r3, r0
 800a454:	6039      	str	r1, [r7, #0]
 800a456:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	2212      	movs	r2, #18
 800a45c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800a45e:	4b03      	ldr	r3, [pc, #12]	; (800a46c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800a460:	4618      	mov	r0, r3
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr
 800a46c:	20000150 	.word	0x20000150

0800a470 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
 800a476:	4603      	mov	r3, r0
 800a478:	6039      	str	r1, [r7, #0]
 800a47a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	2204      	movs	r2, #4
 800a480:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a482:	4b03      	ldr	r3, [pc, #12]	; (800a490 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800a484:	4618      	mov	r0, r3
 800a486:	370c      	adds	r7, #12
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr
 800a490:	20000164 	.word	0x20000164

0800a494 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	4603      	mov	r3, r0
 800a49c:	6039      	str	r1, [r7, #0]
 800a49e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a4a0:	79fb      	ldrb	r3, [r7, #7]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d105      	bne.n	800a4b2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a4a6:	683a      	ldr	r2, [r7, #0]
 800a4a8:	4907      	ldr	r1, [pc, #28]	; (800a4c8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800a4aa:	4808      	ldr	r0, [pc, #32]	; (800a4cc <USBD_CDC_ProductStrDescriptor+0x38>)
 800a4ac:	f7fe fcc8 	bl	8008e40 <USBD_GetString>
 800a4b0:	e004      	b.n	800a4bc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a4b2:	683a      	ldr	r2, [r7, #0]
 800a4b4:	4904      	ldr	r1, [pc, #16]	; (800a4c8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800a4b6:	4805      	ldr	r0, [pc, #20]	; (800a4cc <USBD_CDC_ProductStrDescriptor+0x38>)
 800a4b8:	f7fe fcc2 	bl	8008e40 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4bc:	4b02      	ldr	r3, [pc, #8]	; (800a4c8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	200030e4 	.word	0x200030e4
 800a4cc:	0800af98 	.word	0x0800af98

0800a4d0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	6039      	str	r1, [r7, #0]
 800a4da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a4dc:	683a      	ldr	r2, [r7, #0]
 800a4de:	4904      	ldr	r1, [pc, #16]	; (800a4f0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800a4e0:	4804      	ldr	r0, [pc, #16]	; (800a4f4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800a4e2:	f7fe fcad 	bl	8008e40 <USBD_GetString>
  return USBD_StrDesc;
 800a4e6:	4b02      	ldr	r3, [pc, #8]	; (800a4f0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3708      	adds	r7, #8
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	200030e4 	.word	0x200030e4
 800a4f4:	0800afb0 	.word	0x0800afb0

0800a4f8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	4603      	mov	r3, r0
 800a500:	6039      	str	r1, [r7, #0]
 800a502:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	221a      	movs	r2, #26
 800a508:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a50a:	f000 f843 	bl	800a594 <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a50e:	4b02      	ldr	r3, [pc, #8]	; (800a518 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800a510:	4618      	mov	r0, r3
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	20000168 	.word	0x20000168

0800a51c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	4603      	mov	r3, r0
 800a524:	6039      	str	r1, [r7, #0]
 800a526:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a528:	79fb      	ldrb	r3, [r7, #7]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d105      	bne.n	800a53a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a52e:	683a      	ldr	r2, [r7, #0]
 800a530:	4907      	ldr	r1, [pc, #28]	; (800a550 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a532:	4808      	ldr	r0, [pc, #32]	; (800a554 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a534:	f7fe fc84 	bl	8008e40 <USBD_GetString>
 800a538:	e004      	b.n	800a544 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a53a:	683a      	ldr	r2, [r7, #0]
 800a53c:	4904      	ldr	r1, [pc, #16]	; (800a550 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a53e:	4805      	ldr	r0, [pc, #20]	; (800a554 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a540:	f7fe fc7e 	bl	8008e40 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a544:	4b02      	ldr	r3, [pc, #8]	; (800a550 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800a546:	4618      	mov	r0, r3
 800a548:	3708      	adds	r7, #8
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	200030e4 	.word	0x200030e4
 800a554:	0800afc4 	.word	0x0800afc4

0800a558 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	4603      	mov	r3, r0
 800a560:	6039      	str	r1, [r7, #0]
 800a562:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a564:	79fb      	ldrb	r3, [r7, #7]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d105      	bne.n	800a576 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a56a:	683a      	ldr	r2, [r7, #0]
 800a56c:	4907      	ldr	r1, [pc, #28]	; (800a58c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a56e:	4808      	ldr	r0, [pc, #32]	; (800a590 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a570:	f7fe fc66 	bl	8008e40 <USBD_GetString>
 800a574:	e004      	b.n	800a580 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a576:	683a      	ldr	r2, [r7, #0]
 800a578:	4904      	ldr	r1, [pc, #16]	; (800a58c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a57a:	4805      	ldr	r0, [pc, #20]	; (800a590 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a57c:	f7fe fc60 	bl	8008e40 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a580:	4b02      	ldr	r3, [pc, #8]	; (800a58c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800a582:	4618      	mov	r0, r3
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	200030e4 	.word	0x200030e4
 800a590:	0800afd0 	.word	0x0800afd0

0800a594 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a59a:	4b0f      	ldr	r3, [pc, #60]	; (800a5d8 <Get_SerialNum+0x44>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a5a0:	4b0e      	ldr	r3, [pc, #56]	; (800a5dc <Get_SerialNum+0x48>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a5a6:	4b0e      	ldr	r3, [pc, #56]	; (800a5e0 <Get_SerialNum+0x4c>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d009      	beq.n	800a5ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a5ba:	2208      	movs	r2, #8
 800a5bc:	4909      	ldr	r1, [pc, #36]	; (800a5e4 <Get_SerialNum+0x50>)
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f000 f814 	bl	800a5ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a5c4:	2204      	movs	r2, #4
 800a5c6:	4908      	ldr	r1, [pc, #32]	; (800a5e8 <Get_SerialNum+0x54>)
 800a5c8:	68b8      	ldr	r0, [r7, #8]
 800a5ca:	f000 f80f 	bl	800a5ec <IntToUnicode>
  }
}
 800a5ce:	bf00      	nop
 800a5d0:	3710      	adds	r7, #16
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	1fff7590 	.word	0x1fff7590
 800a5dc:	1fff7594 	.word	0x1fff7594
 800a5e0:	1fff7598 	.word	0x1fff7598
 800a5e4:	2000016a 	.word	0x2000016a
 800a5e8:	2000017a 	.word	0x2000017a

0800a5ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b087      	sub	sp, #28
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	60b9      	str	r1, [r7, #8]
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a5fe:	2300      	movs	r3, #0
 800a600:	75fb      	strb	r3, [r7, #23]
 800a602:	e027      	b.n	800a654 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	0f1b      	lsrs	r3, r3, #28
 800a608:	2b09      	cmp	r3, #9
 800a60a:	d80b      	bhi.n	800a624 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	0f1b      	lsrs	r3, r3, #28
 800a610:	b2da      	uxtb	r2, r3
 800a612:	7dfb      	ldrb	r3, [r7, #23]
 800a614:	005b      	lsls	r3, r3, #1
 800a616:	4619      	mov	r1, r3
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	440b      	add	r3, r1
 800a61c:	3230      	adds	r2, #48	; 0x30
 800a61e:	b2d2      	uxtb	r2, r2
 800a620:	701a      	strb	r2, [r3, #0]
 800a622:	e00a      	b.n	800a63a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	0f1b      	lsrs	r3, r3, #28
 800a628:	b2da      	uxtb	r2, r3
 800a62a:	7dfb      	ldrb	r3, [r7, #23]
 800a62c:	005b      	lsls	r3, r3, #1
 800a62e:	4619      	mov	r1, r3
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	440b      	add	r3, r1
 800a634:	3237      	adds	r2, #55	; 0x37
 800a636:	b2d2      	uxtb	r2, r2
 800a638:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	011b      	lsls	r3, r3, #4
 800a63e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a640:	7dfb      	ldrb	r3, [r7, #23]
 800a642:	005b      	lsls	r3, r3, #1
 800a644:	3301      	adds	r3, #1
 800a646:	68ba      	ldr	r2, [r7, #8]
 800a648:	4413      	add	r3, r2
 800a64a:	2200      	movs	r2, #0
 800a64c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a64e:	7dfb      	ldrb	r3, [r7, #23]
 800a650:	3301      	adds	r3, #1
 800a652:	75fb      	strb	r3, [r7, #23]
 800a654:	7dfa      	ldrb	r2, [r7, #23]
 800a656:	79fb      	ldrb	r3, [r7, #7]
 800a658:	429a      	cmp	r2, r3
 800a65a:	d3d3      	bcc.n	800a604 <IntToUnicode+0x18>
  }
}
 800a65c:	bf00      	nop
 800a65e:	371c      	adds	r7, #28
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b08a      	sub	sp, #40	; 0x28
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a670:	f107 0314 	add.w	r3, r7, #20
 800a674:	2200      	movs	r2, #0
 800a676:	601a      	str	r2, [r3, #0]
 800a678:	605a      	str	r2, [r3, #4]
 800a67a:	609a      	str	r2, [r3, #8]
 800a67c:	60da      	str	r2, [r3, #12]
 800a67e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a1a      	ldr	r2, [pc, #104]	; (800a6f0 <HAL_PCD_MspInit+0x88>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d12d      	bne.n	800a6e6 <HAL_PCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a68a:	4b1a      	ldr	r3, [pc, #104]	; (800a6f4 <HAL_PCD_MspInit+0x8c>)
 800a68c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a68e:	4a19      	ldr	r2, [pc, #100]	; (800a6f4 <HAL_PCD_MspInit+0x8c>)
 800a690:	f043 0301 	orr.w	r3, r3, #1
 800a694:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a696:	4b17      	ldr	r3, [pc, #92]	; (800a6f4 <HAL_PCD_MspInit+0x8c>)
 800a698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a69a:	f003 0301 	and.w	r3, r3, #1
 800a69e:	613b      	str	r3, [r7, #16]
 800a6a0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a6a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a6a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a6a8:	2303      	movs	r3, #3
 800a6aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6b0:	f107 0314 	add.w	r3, r7, #20
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a6ba:	f7f7 f845 	bl	8001748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a6be:	4b0d      	ldr	r3, [pc, #52]	; (800a6f4 <HAL_PCD_MspInit+0x8c>)
 800a6c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6c2:	4a0c      	ldr	r2, [pc, #48]	; (800a6f4 <HAL_PCD_MspInit+0x8c>)
 800a6c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a6c8:	6593      	str	r3, [r2, #88]	; 0x58
 800a6ca:	4b0a      	ldr	r3, [pc, #40]	; (800a6f4 <HAL_PCD_MspInit+0x8c>)
 800a6cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a6d2:	60fb      	str	r3, [r7, #12]
 800a6d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	2105      	movs	r1, #5
 800a6da:	2014      	movs	r0, #20
 800a6dc:	f7f6 fc9e 	bl	800101c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a6e0:	2014      	movs	r0, #20
 800a6e2:	f7f6 fcc5 	bl	8001070 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a6e6:	bf00      	nop
 800a6e8:	3728      	adds	r7, #40	; 0x28
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	40005c00 	.word	0x40005c00
 800a6f4:	40021000 	.word	0x40021000

0800a6f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800a70c:	4619      	mov	r1, r3
 800a70e:	4610      	mov	r0, r2
 800a710:	f7fd fc45 	bl	8007f9e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a714:	bf00      	nop
 800a716:	3708      	adds	r7, #8
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	460b      	mov	r3, r1
 800a726:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800a72e:	78fb      	ldrb	r3, [r7, #3]
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	015b      	lsls	r3, r3, #5
 800a734:	4413      	add	r3, r2
 800a736:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	78fb      	ldrb	r3, [r7, #3]
 800a73e:	4619      	mov	r1, r3
 800a740:	f7fd fc78 	bl	8008034 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a744:	bf00      	nop
 800a746:	3708      	adds	r7, #8
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	460b      	mov	r3, r1
 800a756:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800a75e:	78fb      	ldrb	r3, [r7, #3]
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	015b      	lsls	r3, r3, #5
 800a764:	4413      	add	r3, r2
 800a766:	333c      	adds	r3, #60	; 0x3c
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	78fb      	ldrb	r3, [r7, #3]
 800a76c:	4619      	mov	r1, r3
 800a76e:	f7fd fcd2 	bl	8008116 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a772:	bf00      	nop
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b082      	sub	sp, #8
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a788:	4618      	mov	r0, r3
 800a78a:	f7fd fde5 	bl	8008358 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a78e:	bf00      	nop
 800a790:	3708      	adds	r7, #8
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800a796:	b580      	push	{r7, lr}
 800a798:	b084      	sub	sp, #16
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	2b02      	cmp	r3, #2
 800a7a8:	d001      	beq.n	800a7ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a7aa:	f7f5 feef 	bl	800058c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a7b4:	7bfa      	ldrb	r2, [r7, #15]
 800a7b6:	4611      	mov	r1, r2
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7fd fd92 	bl	80082e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7fd fd4b 	bl	8008260 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a7ca:	bf00      	nop
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
	...

0800a7d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fd fd8d 	bl	8008302 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	699b      	ldr	r3, [r3, #24]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d005      	beq.n	800a7fc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a7f0:	4b04      	ldr	r3, [pc, #16]	; (800a804 <HAL_PCD_SuspendCallback+0x30>)
 800a7f2:	691b      	ldr	r3, [r3, #16]
 800a7f4:	4a03      	ldr	r2, [pc, #12]	; (800a804 <HAL_PCD_SuspendCallback+0x30>)
 800a7f6:	f043 0306 	orr.w	r3, r3, #6
 800a7fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a7fc:	bf00      	nop
 800a7fe:	3708      	adds	r7, #8
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}
 800a804:	e000ed00 	.word	0xe000ed00

0800a808 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	699b      	ldr	r3, [r3, #24]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d007      	beq.n	800a828 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a818:	4b08      	ldr	r3, [pc, #32]	; (800a83c <HAL_PCD_ResumeCallback+0x34>)
 800a81a:	691b      	ldr	r3, [r3, #16]
 800a81c:	4a07      	ldr	r2, [pc, #28]	; (800a83c <HAL_PCD_ResumeCallback+0x34>)
 800a81e:	f023 0306 	bic.w	r3, r3, #6
 800a822:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a824:	f000 f9f6 	bl	800ac14 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a82e:	4618      	mov	r0, r3
 800a830:	f7fd fd7c 	bl	800832c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a834:	bf00      	nop
 800a836:	3708      	adds	r7, #8
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	e000ed00 	.word	0xe000ed00

0800a840 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a848:	4a2b      	ldr	r2, [pc, #172]	; (800a8f8 <USBD_LL_Init+0xb8>)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a29      	ldr	r2, [pc, #164]	; (800a8f8 <USBD_LL_Init+0xb8>)
 800a854:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a858:	4b27      	ldr	r3, [pc, #156]	; (800a8f8 <USBD_LL_Init+0xb8>)
 800a85a:	4a28      	ldr	r2, [pc, #160]	; (800a8fc <USBD_LL_Init+0xbc>)
 800a85c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a85e:	4b26      	ldr	r3, [pc, #152]	; (800a8f8 <USBD_LL_Init+0xb8>)
 800a860:	2208      	movs	r2, #8
 800a862:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a864:	4b24      	ldr	r3, [pc, #144]	; (800a8f8 <USBD_LL_Init+0xb8>)
 800a866:	2202      	movs	r2, #2
 800a868:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a86a:	4b23      	ldr	r3, [pc, #140]	; (800a8f8 <USBD_LL_Init+0xb8>)
 800a86c:	2202      	movs	r2, #2
 800a86e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a870:	4b21      	ldr	r3, [pc, #132]	; (800a8f8 <USBD_LL_Init+0xb8>)
 800a872:	2200      	movs	r2, #0
 800a874:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a876:	4b20      	ldr	r3, [pc, #128]	; (800a8f8 <USBD_LL_Init+0xb8>)
 800a878:	2200      	movs	r2, #0
 800a87a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a87c:	4b1e      	ldr	r3, [pc, #120]	; (800a8f8 <USBD_LL_Init+0xb8>)
 800a87e:	2200      	movs	r2, #0
 800a880:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a882:	4b1d      	ldr	r3, [pc, #116]	; (800a8f8 <USBD_LL_Init+0xb8>)
 800a884:	2200      	movs	r2, #0
 800a886:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a888:	481b      	ldr	r0, [pc, #108]	; (800a8f8 <USBD_LL_Init+0xb8>)
 800a88a:	f7f7 f9e5 	bl	8001c58 <HAL_PCD_Init>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d001      	beq.n	800a898 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a894:	f7f5 fe7a 	bl	800058c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a89e:	2318      	movs	r3, #24
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	f7f8 f894 	bl	80029d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8ae:	2358      	movs	r3, #88	; 0x58
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	2180      	movs	r1, #128	; 0x80
 800a8b4:	f7f8 f88c 	bl	80029d0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8be:	23c0      	movs	r3, #192	; 0xc0
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	2181      	movs	r1, #129	; 0x81
 800a8c4:	f7f8 f884 	bl	80029d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8ce:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	2101      	movs	r1, #1
 800a8d6:	f7f8 f87b 	bl	80029d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	2182      	movs	r1, #130	; 0x82
 800a8e8:	f7f8 f872 	bl	80029d0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3708      	adds	r7, #8
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	200032e4 	.word	0x200032e4
 800a8fc:	40005c00 	.word	0x40005c00

0800a900 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a908:	2300      	movs	r3, #0
 800a90a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a90c:	2300      	movs	r3, #0
 800a90e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a916:	4618      	mov	r0, r3
 800a918:	f7f7 fa66 	bl	8001de8 <HAL_PCD_Start>
 800a91c:	4603      	mov	r3, r0
 800a91e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800a920:	7bfb      	ldrb	r3, [r7, #15]
 800a922:	4618      	mov	r0, r3
 800a924:	f000 f97c 	bl	800ac20 <USBD_Get_USB_Status>
 800a928:	4603      	mov	r3, r0
 800a92a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a92c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b084      	sub	sp, #16
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	4608      	mov	r0, r1
 800a940:	4611      	mov	r1, r2
 800a942:	461a      	mov	r2, r3
 800a944:	4603      	mov	r3, r0
 800a946:	70fb      	strb	r3, [r7, #3]
 800a948:	460b      	mov	r3, r1
 800a94a:	70bb      	strb	r3, [r7, #2]
 800a94c:	4613      	mov	r3, r2
 800a94e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a950:	2300      	movs	r3, #0
 800a952:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a954:	2300      	movs	r3, #0
 800a956:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a95e:	78bb      	ldrb	r3, [r7, #2]
 800a960:	883a      	ldrh	r2, [r7, #0]
 800a962:	78f9      	ldrb	r1, [r7, #3]
 800a964:	f7f7 fbd5 	bl	8002112 <HAL_PCD_EP_Open>
 800a968:	4603      	mov	r3, r0
 800a96a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a96c:	7bfb      	ldrb	r3, [r7, #15]
 800a96e:	4618      	mov	r0, r3
 800a970:	f000 f956 	bl	800ac20 <USBD_Get_USB_Status>
 800a974:	4603      	mov	r3, r0
 800a976:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800a978:	7bbb      	ldrb	r3, [r7, #14]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b084      	sub	sp, #16
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
 800a98a:	460b      	mov	r3, r1
 800a98c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a98e:	2300      	movs	r3, #0
 800a990:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a99c:	78fa      	ldrb	r2, [r7, #3]
 800a99e:	4611      	mov	r1, r2
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7f7 fc16 	bl	80021d2 <HAL_PCD_EP_Close>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9aa:	7bfb      	ldrb	r3, [r7, #15]
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f000 f937 	bl	800ac20 <USBD_Get_USB_Status>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800a9b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3710      	adds	r7, #16
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9da:	78fa      	ldrb	r2, [r7, #3]
 800a9dc:	4611      	mov	r1, r2
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7f7 fcc1 	bl	8002366 <HAL_PCD_EP_SetStall>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9e8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f000 f918 	bl	800ac20 <USBD_Get_USB_Status>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800a9f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b084      	sub	sp, #16
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	460b      	mov	r3, r1
 800aa08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa18:	78fa      	ldrb	r2, [r7, #3]
 800aa1a:	4611      	mov	r1, r2
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7f7 fcfc 	bl	800241a <HAL_PCD_EP_ClrStall>
 800aa22:	4603      	mov	r3, r0
 800aa24:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa26:	7bfb      	ldrb	r3, [r7, #15]
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f000 f8f9 	bl	800ac20 <USBD_Get_USB_Status>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800aa32:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3710      	adds	r7, #16
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b085      	sub	sp, #20
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	460b      	mov	r3, r1
 800aa46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa4e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800aa50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	da08      	bge.n	800aa6a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800aa58:	78fb      	ldrb	r3, [r7, #3]
 800aa5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	015b      	lsls	r3, r3, #5
 800aa62:	4413      	add	r3, r2
 800aa64:	332a      	adds	r3, #42	; 0x2a
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	e008      	b.n	800aa7c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800aa6a:	78fb      	ldrb	r3, [r7, #3]
 800aa6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	015b      	lsls	r3, r3, #5
 800aa74:	4413      	add	r3, r2
 800aa76:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800aa7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3714      	adds	r7, #20
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	460b      	mov	r3, r1
 800aa92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa94:	2300      	movs	r3, #0
 800aa96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaa2:	78fa      	ldrb	r2, [r7, #3]
 800aaa4:	4611      	mov	r1, r2
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7f7 fb0e 	bl	80020c8 <HAL_PCD_SetAddress>
 800aaac:	4603      	mov	r3, r0
 800aaae:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800aab0:	7bfb      	ldrb	r3, [r7, #15]
 800aab2:	4618      	mov	r0, r3
 800aab4:	f000 f8b4 	bl	800ac20 <USBD_Get_USB_Status>
 800aab8:	4603      	mov	r3, r0
 800aaba:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800aabc:	7bbb      	ldrb	r3, [r7, #14]
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3710      	adds	r7, #16
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b086      	sub	sp, #24
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	60f8      	str	r0, [r7, #12]
 800aace:	607a      	str	r2, [r7, #4]
 800aad0:	461a      	mov	r2, r3
 800aad2:	460b      	mov	r3, r1
 800aad4:	72fb      	strb	r3, [r7, #11]
 800aad6:	4613      	mov	r3, r2
 800aad8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aada:	2300      	movs	r3, #0
 800aadc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aade:	2300      	movs	r3, #0
 800aae0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aae8:	893b      	ldrh	r3, [r7, #8]
 800aaea:	7af9      	ldrb	r1, [r7, #11]
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	f7f7 fc01 	bl	80022f4 <HAL_PCD_EP_Transmit>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaf6:	7dfb      	ldrb	r3, [r7, #23]
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f000 f891 	bl	800ac20 <USBD_Get_USB_Status>
 800aafe:	4603      	mov	r3, r0
 800ab00:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800ab02:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3718      	adds	r7, #24
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b086      	sub	sp, #24
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	607a      	str	r2, [r7, #4]
 800ab16:	461a      	mov	r2, r3
 800ab18:	460b      	mov	r3, r1
 800ab1a:	72fb      	strb	r3, [r7, #11]
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab20:	2300      	movs	r3, #0
 800ab22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab24:	2300      	movs	r3, #0
 800ab26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab2e:	893b      	ldrh	r3, [r7, #8]
 800ab30:	7af9      	ldrb	r1, [r7, #11]
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	f7f7 fb8f 	bl	8002256 <HAL_PCD_EP_Receive>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab3c:	7dfb      	ldrb	r3, [r7, #23]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f000 f86e 	bl	800ac20 <USBD_Get_USB_Status>
 800ab44:	4603      	mov	r3, r0
 800ab46:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800ab48:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3718      	adds	r7, #24
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b082      	sub	sp, #8
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab64:	78fa      	ldrb	r2, [r7, #3]
 800ab66:	4611      	mov	r1, r2
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7f7 fbae 	bl	80022ca <HAL_PCD_EP_GetRxCount>
 800ab6e:	4603      	mov	r3, r0
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3708      	adds	r7, #8
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	460b      	mov	r3, r1
 800ab82:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800ab84:	78fb      	ldrb	r3, [r7, #3]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d002      	beq.n	800ab90 <HAL_PCDEx_LPM_Callback+0x18>
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d013      	beq.n	800abb6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 800ab8e:	e023      	b.n	800abd8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	699b      	ldr	r3, [r3, #24]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d007      	beq.n	800aba8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ab98:	f000 f83c 	bl	800ac14 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab9c:	4b10      	ldr	r3, [pc, #64]	; (800abe0 <HAL_PCDEx_LPM_Callback+0x68>)
 800ab9e:	691b      	ldr	r3, [r3, #16]
 800aba0:	4a0f      	ldr	r2, [pc, #60]	; (800abe0 <HAL_PCDEx_LPM_Callback+0x68>)
 800aba2:	f023 0306 	bic.w	r3, r3, #6
 800aba6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800abae:	4618      	mov	r0, r3
 800abb0:	f7fd fbbc 	bl	800832c <USBD_LL_Resume>
    break;
 800abb4:	e010      	b.n	800abd8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800abbc:	4618      	mov	r0, r3
 800abbe:	f7fd fba0 	bl	8008302 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	699b      	ldr	r3, [r3, #24]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d005      	beq.n	800abd6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800abca:	4b05      	ldr	r3, [pc, #20]	; (800abe0 <HAL_PCDEx_LPM_Callback+0x68>)
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	4a04      	ldr	r2, [pc, #16]	; (800abe0 <HAL_PCDEx_LPM_Callback+0x68>)
 800abd0:	f043 0306 	orr.w	r3, r3, #6
 800abd4:	6113      	str	r3, [r2, #16]
    break;   
 800abd6:	bf00      	nop
}
 800abd8:	bf00      	nop
 800abda:	3708      	adds	r7, #8
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}
 800abe0:	e000ed00 	.word	0xe000ed00

0800abe4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800abec:	4b03      	ldr	r3, [pc, #12]	; (800abfc <USBD_static_malloc+0x18>)
}
 800abee:	4618      	mov	r0, r3
 800abf0:	370c      	adds	r7, #12
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	20002154 	.word	0x20002154

0800ac00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]

}
 800ac08:	bf00      	nop
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ac18:	f7f5 fc41 	bl	800049e <SystemClock_Config>
}
 800ac1c:	bf00      	nop
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b085      	sub	sp, #20
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	4603      	mov	r3, r0
 800ac28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ac2e:	79fb      	ldrb	r3, [r7, #7]
 800ac30:	2b03      	cmp	r3, #3
 800ac32:	d817      	bhi.n	800ac64 <USBD_Get_USB_Status+0x44>
 800ac34:	a201      	add	r2, pc, #4	; (adr r2, 800ac3c <USBD_Get_USB_Status+0x1c>)
 800ac36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac3a:	bf00      	nop
 800ac3c:	0800ac4d 	.word	0x0800ac4d
 800ac40:	0800ac53 	.word	0x0800ac53
 800ac44:	0800ac59 	.word	0x0800ac59
 800ac48:	0800ac5f 	.word	0x0800ac5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ac50:	e00b      	b.n	800ac6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac52:	2302      	movs	r3, #2
 800ac54:	73fb      	strb	r3, [r7, #15]
    break;
 800ac56:	e008      	b.n	800ac6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac5c:	e005      	b.n	800ac6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac5e:	2302      	movs	r3, #2
 800ac60:	73fb      	strb	r3, [r7, #15]
    break;
 800ac62:	e002      	b.n	800ac6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ac64:	2302      	movs	r3, #2
 800ac66:	73fb      	strb	r3, [r7, #15]
    break;
 800ac68:	bf00      	nop
  }
  return usb_status;
 800ac6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3714      	adds	r7, #20
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <__libc_init_array>:
 800ac78:	b570      	push	{r4, r5, r6, lr}
 800ac7a:	4e0d      	ldr	r6, [pc, #52]	; (800acb0 <__libc_init_array+0x38>)
 800ac7c:	4c0d      	ldr	r4, [pc, #52]	; (800acb4 <__libc_init_array+0x3c>)
 800ac7e:	1ba4      	subs	r4, r4, r6
 800ac80:	10a4      	asrs	r4, r4, #2
 800ac82:	2500      	movs	r5, #0
 800ac84:	42a5      	cmp	r5, r4
 800ac86:	d109      	bne.n	800ac9c <__libc_init_array+0x24>
 800ac88:	4e0b      	ldr	r6, [pc, #44]	; (800acb8 <__libc_init_array+0x40>)
 800ac8a:	4c0c      	ldr	r4, [pc, #48]	; (800acbc <__libc_init_array+0x44>)
 800ac8c:	f000 f820 	bl	800acd0 <_init>
 800ac90:	1ba4      	subs	r4, r4, r6
 800ac92:	10a4      	asrs	r4, r4, #2
 800ac94:	2500      	movs	r5, #0
 800ac96:	42a5      	cmp	r5, r4
 800ac98:	d105      	bne.n	800aca6 <__libc_init_array+0x2e>
 800ac9a:	bd70      	pop	{r4, r5, r6, pc}
 800ac9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aca0:	4798      	blx	r3
 800aca2:	3501      	adds	r5, #1
 800aca4:	e7ee      	b.n	800ac84 <__libc_init_array+0xc>
 800aca6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800acaa:	4798      	blx	r3
 800acac:	3501      	adds	r5, #1
 800acae:	e7f2      	b.n	800ac96 <__libc_init_array+0x1e>
 800acb0:	0800aff8 	.word	0x0800aff8
 800acb4:	0800aff8 	.word	0x0800aff8
 800acb8:	0800aff8 	.word	0x0800aff8
 800acbc:	0800affc 	.word	0x0800affc

0800acc0 <memset>:
 800acc0:	4402      	add	r2, r0
 800acc2:	4603      	mov	r3, r0
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d100      	bne.n	800acca <memset+0xa>
 800acc8:	4770      	bx	lr
 800acca:	f803 1b01 	strb.w	r1, [r3], #1
 800acce:	e7f9      	b.n	800acc4 <memset+0x4>

0800acd0 <_init>:
 800acd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd2:	bf00      	nop
 800acd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acd6:	bc08      	pop	{r3}
 800acd8:	469e      	mov	lr, r3
 800acda:	4770      	bx	lr

0800acdc <_fini>:
 800acdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acde:	bf00      	nop
 800ace0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ace2:	bc08      	pop	{r3}
 800ace4:	469e      	mov	lr, r3
 800ace6:	4770      	bx	lr
