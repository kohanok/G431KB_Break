
G431KB_Break.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2b8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  0800b498  0800b498  0001b498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7a8  0800b7a8  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  0800b7a8  0800b7a8  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b7a8  0800b7a8  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7a8  0800b7a8  0001b7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b7ac  0800b7ac  0001b7ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800b7b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033ec  20000184  0800b934  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003570  0800b934  00023570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026b32  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000050bf  00000000  00000000  00046ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ba0  00000000  00000000  0004bda8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001948  00000000  00000000  0004d948  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023b2a  00000000  00000000  0004f290  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e4a1  00000000  00000000  00072dba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cffa1  00000000  00000000  0009125b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001611fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007084  00000000  00000000  00161278  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000184 	.word	0x20000184
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b480 	.word	0x0800b480

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000188 	.word	0x20000188
 800021c:	0800b480 	.word	0x0800b480

08000220 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b090      	sub	sp, #64	; 0x40
 8000224:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Break_Task */
  osThreadDef(Break_Task, StartBreak_Task, osPriorityNormal, 0, 128);
 8000226:	4b1a      	ldr	r3, [pc, #104]	; (8000290 <MX_FREERTOS_Init+0x70>)
 8000228:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800022c:	461d      	mov	r5, r3
 800022e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000230:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000232:	682b      	ldr	r3, [r5, #0]
 8000234:	6023      	str	r3, [r4, #0]
  Break_TaskHandle = osThreadCreate(osThread(Break_Task), NULL);
 8000236:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800023a:	2100      	movs	r1, #0
 800023c:	4618      	mov	r0, r3
 800023e:	f009 fad6 	bl	80097ee <osThreadCreate>
 8000242:	4602      	mov	r2, r0
 8000244:	4b13      	ldr	r3, [pc, #76]	; (8000294 <MX_FREERTOS_Init+0x74>)
 8000246:	601a      	str	r2, [r3, #0]

  /* definition and creation of RainBow_Task */
  osThreadDef(RainBow_Task, StartRainBow_Task, osPriorityIdle, 0, 128);
 8000248:	4b13      	ldr	r3, [pc, #76]	; (8000298 <MX_FREERTOS_Init+0x78>)
 800024a:	f107 0418 	add.w	r4, r7, #24
 800024e:	461d      	mov	r5, r3
 8000250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000254:	682b      	ldr	r3, [r5, #0]
 8000256:	6023      	str	r3, [r4, #0]
  RainBow_TaskHandle = osThreadCreate(osThread(RainBow_Task), NULL);
 8000258:	f107 0318 	add.w	r3, r7, #24
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f009 fac5 	bl	80097ee <osThreadCreate>
 8000264:	4602      	mov	r2, r0
 8000266:	4b0d      	ldr	r3, [pc, #52]	; (800029c <MX_FREERTOS_Init+0x7c>)
 8000268:	601a      	str	r2, [r3, #0]

  /* definition and creation of AS504X_Task */
  osThreadDef(AS504X_Task, StartAS504X_Task, osPriorityIdle, 0, 128);
 800026a:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <MX_FREERTOS_Init+0x80>)
 800026c:	1d3c      	adds	r4, r7, #4
 800026e:	461d      	mov	r5, r3
 8000270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000274:	682b      	ldr	r3, [r5, #0]
 8000276:	6023      	str	r3, [r4, #0]
  AS504X_TaskHandle = osThreadCreate(osThread(AS504X_Task), NULL);
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	2100      	movs	r1, #0
 800027c:	4618      	mov	r0, r3
 800027e:	f009 fab6 	bl	80097ee <osThreadCreate>
 8000282:	4602      	mov	r2, r0
 8000284:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <MX_FREERTOS_Init+0x84>)
 8000286:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000288:	bf00      	nop
 800028a:	3740      	adds	r7, #64	; 0x40
 800028c:	46bd      	mov	sp, r7
 800028e:	bdb0      	pop	{r4, r5, r7, pc}
 8000290:	0800b4a4 	.word	0x0800b4a4
 8000294:	20002384 	.word	0x20002384
 8000298:	0800b4c8 	.word	0x0800b4c8
 800029c:	20002390 	.word	0x20002390
 80002a0:	0800b4e8 	.word	0x0800b4e8
 80002a4:	20002380 	.word	0x20002380

080002a8 <StartBreak_Task>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartBreak_Task */
void StartBreak_Task(void const * argument)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b08e      	sub	sp, #56	; 0x38
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBreak_Task */
  /* Infinite loop */

  uint32_t pre_time = 0;
 80002b0:	2300      	movs	r3, #0
 80002b2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t led_time = 200;
 80002b4:	23c8      	movs	r3, #200	; 0xc8
 80002b6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t firstled = 0;
 80002b8:	2300      	movs	r3, #0
 80002ba:	613b      	str	r3, [r7, #16]
	uint32_t halfled = 0;
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
	uint32_t led_index = 0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t led_mask= 0b1110000111;
 80002c4:	f240 3387 	movw	r3, #903	; 0x387
 80002c8:	60bb      	str	r3, [r7, #8]


	bool led_flg=false;
 80002ca:	2300      	movs	r3, #0
 80002cc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t led_count = 0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	627b      	str	r3, [r7, #36]	; 0x24
  for(;;)
  {

		if(millis()-pre_time >= led_time)
 80002d2:	f000 fabf 	bl	8000854 <millis>
 80002d6:	4602      	mov	r2, r0
 80002d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002da:	1ad3      	subs	r3, r2, r3
 80002dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80002de:	429a      	cmp	r2, r3
 80002e0:	f200 80ae 	bhi.w	8000440 <StartBreak_Task+0x198>
		{
			pre_time = millis();
 80002e4:	f000 fab6 	bl	8000854 <millis>
 80002e8:	6378      	str	r0, [r7, #52]	; 0x34
			if(g_break_flg == false) {
 80002ea:	4b57      	ldr	r3, [pc, #348]	; (8000448 <StartBreak_Task+0x1a0>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d16e      	bne.n	80003d0 <StartBreak_Task+0x128>
					led_time = 200;
				}
				else {
					led_time = 50;
				}*/
				led_time = g_speed/10;
 80002f2:	4b56      	ldr	r3, [pc, #344]	; (800044c <StartBreak_Task+0x1a4>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a56      	ldr	r2, [pc, #344]	; (8000450 <StartBreak_Task+0x1a8>)
 80002f8:	fba2 2303 	umull	r2, r3, r2, r3
 80002fc:	08db      	lsrs	r3, r3, #3
 80002fe:	633b      	str	r3, [r7, #48]	; 0x30
				if(led_time < 50)
 8000300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000302:	2b31      	cmp	r3, #49	; 0x31
 8000304:	d801      	bhi.n	800030a <StartBreak_Task+0x62>
					led_time = 50;
 8000306:	2332      	movs	r3, #50	; 0x32
 8000308:	633b      	str	r3, [r7, #48]	; 0x30
				led_count = 0;
 800030a:	2300      	movs	r3, #0
 800030c:	627b      	str	r3, [r7, #36]	; 0x24
				firstled = rotateLeft(led_mask, led_index%B_LED_CNT);
 800030e:	68b8      	ldr	r0, [r7, #8]
 8000310:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000312:	4b4f      	ldr	r3, [pc, #316]	; (8000450 <StartBreak_Task+0x1a8>)
 8000314:	fba3 2301 	umull	r2, r3, r3, r1
 8000318:	091a      	lsrs	r2, r3, #4
 800031a:	4613      	mov	r3, r2
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	4413      	add	r3, r2
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	1aca      	subs	r2, r1, r3
 8000324:	4611      	mov	r1, r2
 8000326:	f000 fa9d 	bl	8000864 <rotateLeft>
 800032a:	4603      	mov	r3, r0
 800032c:	613b      	str	r3, [r7, #16]
				halfled = rotateRight(led_mask, led_index%B_LED_CNT);
 800032e:	68b8      	ldr	r0, [r7, #8]
 8000330:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000332:	4b47      	ldr	r3, [pc, #284]	; (8000450 <StartBreak_Task+0x1a8>)
 8000334:	fba3 2301 	umull	r2, r3, r3, r1
 8000338:	091a      	lsrs	r2, r3, #4
 800033a:	4613      	mov	r3, r2
 800033c:	009b      	lsls	r3, r3, #2
 800033e:	4413      	add	r3, r2
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	1aca      	subs	r2, r1, r3
 8000344:	4611      	mov	r1, r2
 8000346:	f000 fab7 	bl	80008b8 <rotateRight>
 800034a:	4603      	mov	r3, r0
 800034c:	60fb      	str	r3, [r7, #12]

				led_index++;
 800034e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000350:	3301      	adds	r3, #1
 8000352:	62fb      	str	r3, [r7, #44]	; 0x2c
				for(uint32_t j=0; j<12; j++) {
 8000354:	2300      	movs	r3, #0
 8000356:	623b      	str	r3, [r7, #32]
 8000358:	e017      	b.n	800038a <StartBreak_Task+0xe2>
					if( firstled >> j & 0x01){
 800035a:	693a      	ldr	r2, [r7, #16]
 800035c:	6a3b      	ldr	r3, [r7, #32]
 800035e:	fa22 f303 	lsr.w	r3, r2, r3
 8000362:	f003 0301 	and.w	r3, r3, #1
 8000366:	2b00      	cmp	r3, #0
 8000368:	d006      	beq.n	8000378 <StartBreak_Task+0xd0>
							ws2812SetColor(j, 255, 255, 255);
 800036a:	23ff      	movs	r3, #255	; 0xff
 800036c:	22ff      	movs	r2, #255	; 0xff
 800036e:	21ff      	movs	r1, #255	; 0xff
 8000370:	6a38      	ldr	r0, [r7, #32]
 8000372:	f000 fefb 	bl	800116c <ws2812SetColor>
 8000376:	e005      	b.n	8000384 <StartBreak_Task+0xdc>
					}else {
						ws2812SetColor(j, 0, 0, 0);
 8000378:	2300      	movs	r3, #0
 800037a:	2200      	movs	r2, #0
 800037c:	2100      	movs	r1, #0
 800037e:	6a38      	ldr	r0, [r7, #32]
 8000380:	f000 fef4 	bl	800116c <ws2812SetColor>
				for(uint32_t j=0; j<12; j++) {
 8000384:	6a3b      	ldr	r3, [r7, #32]
 8000386:	3301      	adds	r3, #1
 8000388:	623b      	str	r3, [r7, #32]
 800038a:	6a3b      	ldr	r3, [r7, #32]
 800038c:	2b0b      	cmp	r3, #11
 800038e:	d9e4      	bls.n	800035a <StartBreak_Task+0xb2>
					}
				}
				for(uint32_t j=20; j>11; j--) {
 8000390:	2314      	movs	r3, #20
 8000392:	61fb      	str	r3, [r7, #28]
 8000394:	e018      	b.n	80003c8 <StartBreak_Task+0x120>
					if( halfled >> (j-11) & 0x01){
 8000396:	69fb      	ldr	r3, [r7, #28]
 8000398:	3b0b      	subs	r3, #11
 800039a:	68fa      	ldr	r2, [r7, #12]
 800039c:	fa22 f303 	lsr.w	r3, r2, r3
 80003a0:	f003 0301 	and.w	r3, r3, #1
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d006      	beq.n	80003b6 <StartBreak_Task+0x10e>
							ws2812SetColor(j, 255, 255, 255);
 80003a8:	23ff      	movs	r3, #255	; 0xff
 80003aa:	22ff      	movs	r2, #255	; 0xff
 80003ac:	21ff      	movs	r1, #255	; 0xff
 80003ae:	69f8      	ldr	r0, [r7, #28]
 80003b0:	f000 fedc 	bl	800116c <ws2812SetColor>
 80003b4:	e005      	b.n	80003c2 <StartBreak_Task+0x11a>
					}else {
						ws2812SetColor(j, 0, 0, 0);
 80003b6:	2300      	movs	r3, #0
 80003b8:	2200      	movs	r2, #0
 80003ba:	2100      	movs	r1, #0
 80003bc:	69f8      	ldr	r0, [r7, #28]
 80003be:	f000 fed5 	bl	800116c <ws2812SetColor>
				for(uint32_t j=20; j>11; j--) {
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	3b01      	subs	r3, #1
 80003c6:	61fb      	str	r3, [r7, #28]
 80003c8:	69fb      	ldr	r3, [r7, #28]
 80003ca:	2b0b      	cmp	r3, #11
 80003cc:	d8e3      	bhi.n	8000396 <StartBreak_Task+0xee>
 80003ce:	e037      	b.n	8000440 <StartBreak_Task+0x198>
					}
				}
			}
			else{ // break
				led_count++;
 80003d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003d2:	3301      	adds	r3, #1
 80003d4:	627b      	str	r3, [r7, #36]	; 0x24
				if(led_count > 30) {
 80003d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003d8:	2b1e      	cmp	r3, #30
 80003da:	d903      	bls.n	80003e4 <StartBreak_Task+0x13c>
					led_time = 500;
 80003dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80003e0:	633b      	str	r3, [r7, #48]	; 0x30
 80003e2:	e001      	b.n	80003e8 <StartBreak_Task+0x140>
				}else {
					led_time = 50;
 80003e4:	2332      	movs	r3, #50	; 0x32
 80003e6:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if(led_count > 40) {
 80003e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ea:	2b28      	cmp	r3, #40	; 0x28
 80003ec:	d902      	bls.n	80003f4 <StartBreak_Task+0x14c>
						//led_count = 0;
						g_break_flg =false;
 80003ee:	4b16      	ldr	r3, [pc, #88]	; (8000448 <StartBreak_Task+0x1a0>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
				}

				if(led_flg) {
 80003f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d011      	beq.n	800041e <StartBreak_Task+0x176>
					for(int i = 0; i < B_LED_CNT; i++) {
 80003fa:	2300      	movs	r3, #0
 80003fc:	61bb      	str	r3, [r7, #24]
 80003fe:	e00a      	b.n	8000416 <StartBreak_Task+0x16e>
						ws2812SetColor(i, 255, 0, 0);
 8000400:	69b8      	ldr	r0, [r7, #24]
 8000402:	2300      	movs	r3, #0
 8000404:	2200      	movs	r2, #0
 8000406:	21ff      	movs	r1, #255	; 0xff
 8000408:	f000 feb0 	bl	800116c <ws2812SetColor>
						led_flg = false;
 800040c:	2300      	movs	r3, #0
 800040e:	62bb      	str	r3, [r7, #40]	; 0x28
					for(int i = 0; i < B_LED_CNT; i++) {
 8000410:	69bb      	ldr	r3, [r7, #24]
 8000412:	3301      	adds	r3, #1
 8000414:	61bb      	str	r3, [r7, #24]
 8000416:	69bb      	ldr	r3, [r7, #24]
 8000418:	2b13      	cmp	r3, #19
 800041a:	ddf1      	ble.n	8000400 <StartBreak_Task+0x158>
 800041c:	e010      	b.n	8000440 <StartBreak_Task+0x198>
					}
				}else {
					for(int i = 0; i < B_LED_CNT; i++) {
 800041e:	2300      	movs	r3, #0
 8000420:	617b      	str	r3, [r7, #20]
 8000422:	e00a      	b.n	800043a <StartBreak_Task+0x192>
						ws2812SetColor(i, 0, 0, 0);
 8000424:	6978      	ldr	r0, [r7, #20]
 8000426:	2300      	movs	r3, #0
 8000428:	2200      	movs	r2, #0
 800042a:	2100      	movs	r1, #0
 800042c:	f000 fe9e 	bl	800116c <ws2812SetColor>
						led_flg = true;
 8000430:	2301      	movs	r3, #1
 8000432:	62bb      	str	r3, [r7, #40]	; 0x28
					for(int i = 0; i < B_LED_CNT; i++) {
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	3301      	adds	r3, #1
 8000438:	617b      	str	r3, [r7, #20]
 800043a:	697b      	ldr	r3, [r7, #20]
 800043c:	2b13      	cmp	r3, #19
 800043e:	ddf1      	ble.n	8000424 <StartBreak_Task+0x17c>
					}
				}
			}
		}
    osDelay(1);
 8000440:	2001      	movs	r0, #1
 8000442:	f009 f9fb 	bl	800983c <osDelay>
		if(millis()-pre_time >= led_time)
 8000446:	e744      	b.n	80002d2 <StartBreak_Task+0x2a>
 8000448:	200001a0 	.word	0x200001a0
 800044c:	200001a4 	.word	0x200001a4
 8000450:	cccccccd 	.word	0xcccccccd

08000454 <StartRainBow_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRainBow_Task */
void StartRainBow_Task(void const * argument)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b08a      	sub	sp, #40	; 0x28
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRainBow_Task */
  /* Infinite loop */

	uint32_t rainbow_pre_time=0;
 800045c:	2300      	movs	r3, #0
 800045e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t rainbow_led_time=10;
 8000460:	230a      	movs	r3, #10
 8000462:	623b      	str	r3, [r7, #32]
	bool led_flg=false;
 8000464:	2300      	movs	r3, #0
 8000466:	61fb      	str	r3, [r7, #28]
	uint32_t led_count = 0;
 8000468:	2300      	movs	r3, #0
 800046a:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		uint16_t i, j;
		for(j=0; j<256*5;) { // 5 cycles of all colors on wheel
 800046c:	2300      	movs	r3, #0
 800046e:	833b      	strh	r3, [r7, #24]
 8000470:	e06e      	b.n	8000550 <StartRainBow_Task+0xfc>
			if(millis()-rainbow_pre_time >= rainbow_led_time)
 8000472:	f000 f9ef 	bl	8000854 <millis>
 8000476:	4602      	mov	r2, r0
 8000478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800047a:	1ad3      	subs	r3, r2, r3
 800047c:	6a3a      	ldr	r2, [r7, #32]
 800047e:	429a      	cmp	r2, r3
 8000480:	d866      	bhi.n	8000550 <StartRainBow_Task+0xfc>
			{
				rainbow_pre_time = millis();
 8000482:	f000 f9e7 	bl	8000854 <millis>
 8000486:	6278      	str	r0, [r7, #36]	; 0x24
				j++;
 8000488:	8b3b      	ldrh	r3, [r7, #24]
 800048a:	3301      	adds	r3, #1
 800048c:	833b      	strh	r3, [r7, #24]
				led_count = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]
				rainbow_led_time = 10;
 8000492:	230a      	movs	r3, #10
 8000494:	623b      	str	r3, [r7, #32]
				if(g_break_flg == false) {
 8000496:	4b32      	ldr	r3, [pc, #200]	; (8000560 <StartRainBow_Task+0x10c>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d11f      	bne.n	80004de <StartRainBow_Task+0x8a>
					led_count = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	60fb      	str	r3, [r7, #12]
					for(i=0; i< R_LED_CNT; i++) {
 80004a2:	2300      	movs	r3, #0
 80004a4:	837b      	strh	r3, [r7, #26]
 80004a6:	e016      	b.n	80004d6 <StartRainBow_Task+0x82>
						setPixelColor(i, Wheel(((i * 256 / R_LED_CNT) + j) & 255));
 80004a8:	8b7b      	ldrh	r3, [r7, #26]
 80004aa:	021b      	lsls	r3, r3, #8
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <StartRainBow_Task+0x5e>
 80004b0:	337f      	adds	r3, #127	; 0x7f
 80004b2:	11db      	asrs	r3, r3, #7
 80004b4:	b2da      	uxtb	r2, r3
 80004b6:	8b3b      	ldrh	r3, [r7, #24]
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	4413      	add	r3, r2
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 fff4 	bl	80014ac <Wheel>
 80004c4:	4602      	mov	r2, r0
 80004c6:	8b7b      	ldrh	r3, [r7, #26]
 80004c8:	4611      	mov	r1, r2
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 ff6a 	bl	80013a4 <setPixelColor>
					for(i=0; i< R_LED_CNT; i++) {
 80004d0:	8b7b      	ldrh	r3, [r7, #26]
 80004d2:	3301      	adds	r3, #1
 80004d4:	837b      	strh	r3, [r7, #26]
 80004d6:	8b7b      	ldrh	r3, [r7, #26]
 80004d8:	2b7f      	cmp	r3, #127	; 0x7f
 80004da:	d9e5      	bls.n	80004a8 <StartRainBow_Task+0x54>
 80004dc:	e038      	b.n	8000550 <StartRainBow_Task+0xfc>
					}
				}
				else{ // break
					led_count++;
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	3301      	adds	r3, #1
 80004e2:	60fb      	str	r3, [r7, #12]
					if(led_count > 30) {
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	2b1e      	cmp	r3, #30
 80004e8:	d903      	bls.n	80004f2 <StartRainBow_Task+0x9e>
						rainbow_led_time = 500;
 80004ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004ee:	623b      	str	r3, [r7, #32]
 80004f0:	e001      	b.n	80004f6 <StartRainBow_Task+0xa2>
					}else {
						rainbow_led_time = 50;
 80004f2:	2332      	movs	r3, #50	; 0x32
 80004f4:	623b      	str	r3, [r7, #32]
					}
					if(led_count > 40) {
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	2b28      	cmp	r3, #40	; 0x28
 80004fa:	d902      	bls.n	8000502 <StartRainBow_Task+0xae>
							//led_count = 0;
							g_break_flg =false;
 80004fc:	4b18      	ldr	r3, [pc, #96]	; (8000560 <StartRainBow_Task+0x10c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
					}

					if(led_flg) {
 8000502:	69fb      	ldr	r3, [r7, #28]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d012      	beq.n	800052e <StartRainBow_Task+0xda>
						for(int i = 0; i < B_LED_CNT; i++) {
 8000508:	2300      	movs	r3, #0
 800050a:	617b      	str	r3, [r7, #20]
 800050c:	e00b      	b.n	8000526 <StartRainBow_Task+0xd2>
							setPixelColor(i, 0xff0000);
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	b29b      	uxth	r3, r3
 8000512:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8000516:	4618      	mov	r0, r3
 8000518:	f000 ff44 	bl	80013a4 <setPixelColor>
							led_flg = false;
 800051c:	2300      	movs	r3, #0
 800051e:	61fb      	str	r3, [r7, #28]
						for(int i = 0; i < B_LED_CNT; i++) {
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	3301      	adds	r3, #1
 8000524:	617b      	str	r3, [r7, #20]
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	2b13      	cmp	r3, #19
 800052a:	ddf0      	ble.n	800050e <StartRainBow_Task+0xba>
 800052c:	e010      	b.n	8000550 <StartRainBow_Task+0xfc>
						}
					}else {
						for(int i = 0; i < B_LED_CNT; i++) {
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]
 8000532:	e00a      	b.n	800054a <StartRainBow_Task+0xf6>
							setPixelColor(i, 0);
 8000534:	693b      	ldr	r3, [r7, #16]
 8000536:	b29b      	uxth	r3, r3
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f000 ff32 	bl	80013a4 <setPixelColor>
							led_flg = true;
 8000540:	2301      	movs	r3, #1
 8000542:	61fb      	str	r3, [r7, #28]
						for(int i = 0; i < B_LED_CNT; i++) {
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	3301      	adds	r3, #1
 8000548:	613b      	str	r3, [r7, #16]
 800054a:	693b      	ldr	r3, [r7, #16]
 800054c:	2b13      	cmp	r3, #19
 800054e:	ddf1      	ble.n	8000534 <StartRainBow_Task+0xe0>
		for(j=0; j<256*5;) { // 5 cycles of all colors on wheel
 8000550:	8b3b      	ldrh	r3, [r7, #24]
 8000552:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000556:	d38c      	bcc.n	8000472 <StartRainBow_Task+0x1e>
						}
					}
				}
			}
		}
		osDelay(1);
 8000558:	2001      	movs	r0, #1
 800055a:	f009 f96f 	bl	800983c <osDelay>
	{
 800055e:	e785      	b.n	800046c <StartRainBow_Task+0x18>
 8000560:	200001a0 	.word	0x200001a0

08000564 <StartAS504X_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAS504X_Task */
void StartAS504X_Task(void const * argument)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAS504X_Task */
  /* Infinite loop */
  uint32_t Task03_pre_time = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
  uint32_t Task03_led_time = 100;
 8000570:	2364      	movs	r3, #100	; 0x64
 8000572:	60bb      	str	r3, [r7, #8]
  //uint32_t speed = 0;
  for(;;)
  {
		if (millis()-Task03_pre_time >= Task03_led_time)
 8000574:	f000 f96e 	bl	8000854 <millis>
 8000578:	4602      	mov	r2, r0
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	1ad3      	subs	r3, r2, r3
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	429a      	cmp	r2, r3
 8000582:	d816      	bhi.n	80005b2 <StartAS504X_Task+0x4e>
		{
			Task03_pre_time = millis();
 8000584:	f000 f966 	bl	8000854 <millis>
 8000588:	60f8      	str	r0, [r7, #12]
			g_speed += 10;
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <StartAS504X_Task+0x58>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	330a      	adds	r3, #10
 8000590:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <StartAS504X_Task+0x58>)
 8000592:	6013      	str	r3, [r2, #0]
			if(g_speed>1000) {
 8000594:	4b09      	ldr	r3, [pc, #36]	; (80005bc <StartAS504X_Task+0x58>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800059c:	d902      	bls.n	80005a4 <StartAS504X_Task+0x40>
				g_speed = 0;
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <StartAS504X_Task+0x58>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
			}
			if(g_break_flg == false) {
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <StartAS504X_Task+0x5c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d002      	beq.n	80005b2 <StartAS504X_Task+0x4e>
				//g_break_flg = true;
			}
			else {
				g_break_flg = false;
 80005ac:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <StartAS504X_Task+0x5c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
			}
		}
    osDelay(1);
 80005b2:	2001      	movs	r0, #1
 80005b4:	f009 f942 	bl	800983c <osDelay>
		if (millis()-Task03_pre_time >= Task03_led_time)
 80005b8:	e7dc      	b.n	8000574 <StartAS504X_Task+0x10>
 80005ba:	bf00      	nop
 80005bc:	200001a4 	.word	0x200001a4
 80005c0:	200001a0 	.word	0x200001a0

080005c4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80005ca:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <MX_DMA_Init+0x80>)
 80005cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005ce:	4a1d      	ldr	r2, [pc, #116]	; (8000644 <MX_DMA_Init+0x80>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	6493      	str	r3, [r2, #72]	; 0x48
 80005d6:	4b1b      	ldr	r3, [pc, #108]	; (8000644 <MX_DMA_Init+0x80>)
 80005d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <MX_DMA_Init+0x80>)
 80005e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <MX_DMA_Init+0x80>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6493      	str	r3, [r2, #72]	; 0x48
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <MX_DMA_Init+0x80>)
 80005f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2105      	movs	r1, #5
 80005fe:	200b      	movs	r0, #11
 8000600:	f001 f8e6 	bl	80017d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000604:	200b      	movs	r0, #11
 8000606:	f001 f90d 	bl	8001824 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2105      	movs	r1, #5
 800060e:	200c      	movs	r0, #12
 8000610:	f001 f8de 	bl	80017d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000614:	200c      	movs	r0, #12
 8000616:	f001 f905 	bl	8001824 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2105      	movs	r1, #5
 800061e:	200d      	movs	r0, #13
 8000620:	f001 f8d6 	bl	80017d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000624:	200d      	movs	r0, #13
 8000626:	f001 f8fd 	bl	8001824 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2105      	movs	r1, #5
 800062e:	200e      	movs	r0, #14
 8000630:	f001 f8ce 	bl	80017d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000634:	200e      	movs	r0, #14
 8000636:	f001 f8f5 	bl	8001824 <HAL_NVIC_EnableIRQ>

}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000

08000648 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800065e:	4b39      	ldr	r3, [pc, #228]	; (8000744 <MX_GPIO_Init+0xfc>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	4a38      	ldr	r2, [pc, #224]	; (8000744 <MX_GPIO_Init+0xfc>)
 8000664:	f043 0320 	orr.w	r3, r3, #32
 8000668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066a:	4b36      	ldr	r3, [pc, #216]	; (8000744 <MX_GPIO_Init+0xfc>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	f003 0320 	and.w	r3, r3, #32
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000676:	4b33      	ldr	r3, [pc, #204]	; (8000744 <MX_GPIO_Init+0xfc>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	4a32      	ldr	r2, [pc, #200]	; (8000744 <MX_GPIO_Init+0xfc>)
 800067c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000682:	4b30      	ldr	r3, [pc, #192]	; (8000744 <MX_GPIO_Init+0xfc>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b2d      	ldr	r3, [pc, #180]	; (8000744 <MX_GPIO_Init+0xfc>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a2c      	ldr	r2, [pc, #176]	; (8000744 <MX_GPIO_Init+0xfc>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <MX_GPIO_Init+0xfc>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	4b27      	ldr	r3, [pc, #156]	; (8000744 <MX_GPIO_Init+0xfc>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a26      	ldr	r2, [pc, #152]	; (8000744 <MX_GPIO_Init+0xfc>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b24      	ldr	r3, [pc, #144]	; (8000744 <MX_GPIO_Init+0xfc>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE0_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f44f 7188 	mov.w	r1, #272	; 0x110
 80006c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c8:	f001 fe70 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d2:	2303      	movs	r3, #3
 80006d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	4819      	ldr	r0, [pc, #100]	; (8000748 <MX_GPIO_Init+0x100>)
 80006e2:	f001 fc0b 	bl	8001efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA9 
                           PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9 
 80006e6:	f248 630e 	movw	r3, #34318	; 0x860e
 80006ea:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ec:	2303      	movs	r3, #3
 80006ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	4619      	mov	r1, r3
 80006fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fe:	f001 fbfd 	bl	8001efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA8 */
  GPIO_InitStruct.Pin = CE0_Pin|GPIO_PIN_8;
 8000702:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000708:	2301      	movs	r3, #1
 800070a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4619      	mov	r1, r3
 800071a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071e:	f001 fbed 	bl	8001efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 PB4 PB6 
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6 
 8000722:	f240 13d9 	movw	r3, #473	; 0x1d9
 8000726:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000728:	2303      	movs	r3, #3
 800072a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	4619      	mov	r1, r3
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_GPIO_Init+0x104>)
 8000738:	f001 fbe0 	bl	8001efc <HAL_GPIO_Init>

}
 800073c:	bf00      	nop
 800073e:	3728      	adds	r7, #40	; 0x28
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40021000 	.word	0x40021000
 8000748:	48001800 	.word	0x48001800
 800074c:	48000400 	.word	0x48000400

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000754:	f000 ff37 	bl	80015c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000758:	f000 f817 	bl	800078a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075c:	f7ff ff74 	bl	8000648 <MX_GPIO_Init>
  MX_DMA_Init();
 8000760:	f7ff ff30 	bl	80005c4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000764:	f000 f8fa 	bl	800095c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000768:	f000 faf2 	bl	8000d50 <MX_TIM2_Init>
  MX_TIM17_Init();
 800076c:	f000 fb48 	bl	8000e00 <MX_TIM17_Init>
  MX_USB_Device_Init();
 8000770:	f00a f986 	bl	800aa80 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  ws2812Init();
 8000774:	f000 fcac 	bl	80010d0 <ws2812Init>
  ws2812Begin(B_LED_CNT, R_LED_CNT);
 8000778:	2180      	movs	r1, #128	; 0x80
 800077a:	2014      	movs	r0, #20
 800077c:	f000 fcbe 	bl	80010fc <ws2812Begin>

	//uint32_t led_index=0;
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000780:	f7ff fd4e 	bl	8000220 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000784:	f009 f82c 	bl	80097e0 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000788:	e7fe      	b.n	8000788 <main+0x38>

0800078a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b0a4      	sub	sp, #144	; 0x90
 800078e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000790:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000794:	2238      	movs	r2, #56	; 0x38
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f00a fe69 	bl	800b470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ae:	463b      	mov	r3, r7
 80007b0:	2244      	movs	r2, #68	; 0x44
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f00a fe5b 	bl	800b470 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007ba:	2000      	movs	r0, #0
 80007bc:	f002 fd4a 	bl	8003254 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007c0:	2321      	movs	r3, #33	; 0x21
 80007c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007ca:	2301      	movs	r3, #1
 80007cc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ce:	2302      	movs	r3, #2
 80007d0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d2:	2303      	movs	r3, #3
 80007d4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007d6:	2304      	movs	r3, #4
 80007d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007da:	2355      	movs	r3, #85	; 0x55
 80007dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 fde0 	bl	80033bc <HAL_RCC_OscConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000802:	f000 f899 	bl	8000938 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000806:	230f      	movs	r3, #15
 8000808:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080a:	2303      	movs	r3, #3
 800080c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 800081a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800081e:	2108      	movs	r1, #8
 8000820:	4618      	mov	r0, r3
 8000822:	f003 f9dd 	bl	8003be0 <HAL_RCC_ClockConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800082c:	f000 f884 	bl	8000938 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000830:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000834:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000836:	2300      	movs	r3, #0
 8000838:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800083a:	463b      	mov	r3, r7
 800083c:	4618      	mov	r0, r3
 800083e:	f003 fcd7 	bl	80041f0 <HAL_RCCEx_PeriphCLKConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000848:	f000 f876 	bl	8000938 <Error_Handler>
  }
}
 800084c:	bf00      	nop
 800084e:	3790      	adds	r7, #144	; 0x90
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <millis>:
{
  HAL_Delay(ms);
}

uint32_t millis(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000858:	f000 fee0 	bl	800161c <HAL_GetTick>
 800085c:	4603      	mov	r3, r0
}
 800085e:	4618      	mov	r0, r3
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <rotateLeft>:
 *
 * @num         Number to rotate.
 * @rotation    Number of times to rotate left.
 */
int rotateLeft(int num, unsigned int rotation)
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
    int DROPPED_MSB;

    // The effective rotation
    rotation %= INT_BITS;
 800086e:	683a      	ldr	r2, [r7, #0]
 8000870:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <rotateLeft+0x50>)
 8000872:	fba3 1302 	umull	r1, r3, r3, r2
 8000876:	0919      	lsrs	r1, r3, #4
 8000878:	460b      	mov	r3, r1
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	440b      	add	r3, r1
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	603b      	str	r3, [r7, #0]


    // Loop till rotation becomes 0
    while(rotation--)
 8000884:	e009      	b.n	800089a <rotateLeft+0x36>
    {
        // Get MSB of num before it gets dropped
        DROPPED_MSB = (num >> INT_BITS) & 1;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	151b      	asrs	r3, r3, #20
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60fb      	str	r3, [r7, #12]

        // Left rotate num by 1 and
        // Set its dropped MSB as new LSB
        num = (num << 1) | DROPPED_MSB;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	68fa      	ldr	r2, [r7, #12]
 8000896:	4313      	orrs	r3, r2
 8000898:	607b      	str	r3, [r7, #4]
    while(rotation--)
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	1e5a      	subs	r2, r3, #1
 800089e:	603a      	str	r2, [r7, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d1f0      	bne.n	8000886 <rotateLeft+0x22>
    }

    return num;
 80008a4:	687b      	ldr	r3, [r7, #4]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	cccccccd 	.word	0xcccccccd

080008b8 <rotateRight>:
 *
 * @num         Number to rotate.
 * @rotation    Number of times to rotate right.
 */
int rotateRight(int num, unsigned int rotation)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
    int DROPPED_LSB;

    // The effective rotation
    rotation %= INT_BITS;
 80008c2:	683a      	ldr	r2, [r7, #0]
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <rotateRight+0x58>)
 80008c6:	fba3 1302 	umull	r1, r3, r3, r2
 80008ca:	0919      	lsrs	r1, r3, #4
 80008cc:	460b      	mov	r3, r1
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	440b      	add	r3, r1
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	603b      	str	r3, [r7, #0]


    // Loop till rotation becomes 0
    while(rotation--)
 80008d8:	e00d      	b.n	80008f6 <rotateRight+0x3e>
    {
        // Get LSB of num before it gets dropped
        DROPPED_LSB = num & 1;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	60fb      	str	r3, [r7, #12]

        // Right shift num by 1 and
        // Clear its MSB
        num = (num >> 1) & (~(1 << INT_BITS));
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	105b      	asrs	r3, r3, #1
 80008e6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80008ea:	607b      	str	r3, [r7, #4]

        // Set its dropped LSB as new MSB
        num = num | (DROPPED_LSB << INT_BITS);
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	051b      	lsls	r3, r3, #20
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	607b      	str	r3, [r7, #4]
    while(rotation--)
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	1e5a      	subs	r2, r3, #1
 80008fa:	603a      	str	r2, [r7, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1ec      	bne.n	80008da <rotateRight+0x22>
    }

    return num;
 8000900:	687b      	ldr	r3, [r7, #4]
}
 8000902:	4618      	mov	r0, r3
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	cccccccd 	.word	0xcccccccd

08000914 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a04      	ldr	r2, [pc, #16]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d101      	bne.n	800092a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000926:	f000 fe67 	bl	80015f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40012c00 	.word	0x40012c00

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
 800094e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <MX_SPI1_Init+0x74>)
 8000962:	4a1c      	ldr	r2, [pc, #112]	; (80009d4 <MX_SPI1_Init+0x78>)
 8000964:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000966:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <MX_SPI1_Init+0x74>)
 8000968:	f44f 7282 	mov.w	r2, #260	; 0x104
 800096c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800096e:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <MX_SPI1_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000974:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_SPI1_Init+0x74>)
 8000976:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800097a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_SPI1_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <MX_SPI1_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_SPI1_Init+0x74>)
 800098a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800098e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_SPI1_Init+0x74>)
 8000992:	2218      	movs	r2, #24
 8000994:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_SPI1_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_SPI1_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_SPI1_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_SPI1_Init+0x74>)
 80009aa:	2207      	movs	r2, #7
 80009ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_SPI1_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_SPI1_Init+0x74>)
 80009b6:	2208      	movs	r2, #8
 80009b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_SPI1_Init+0x74>)
 80009bc:	f003 ffb8 	bl	8004930 <HAL_SPI_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009c6:	f7ff ffb7 	bl	8000938 <Error_Handler>
  }

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20002398 	.word	0x20002398
 80009d4:	40013000 	.word	0x40013000

080009d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a51      	ldr	r2, [pc, #324]	; (8000b3c <HAL_SPI_MspInit+0x164>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	f040 809b 	bne.w	8000b32 <HAL_SPI_MspInit+0x15a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009fc:	4b50      	ldr	r3, [pc, #320]	; (8000b40 <HAL_SPI_MspInit+0x168>)
 80009fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a00:	4a4f      	ldr	r2, [pc, #316]	; (8000b40 <HAL_SPI_MspInit+0x168>)
 8000a02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a06:	6613      	str	r3, [r2, #96]	; 0x60
 8000a08:	4b4d      	ldr	r3, [pc, #308]	; (8000b40 <HAL_SPI_MspInit+0x168>)
 8000a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	4b4a      	ldr	r3, [pc, #296]	; (8000b40 <HAL_SPI_MspInit+0x168>)
 8000a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a18:	4a49      	ldr	r2, [pc, #292]	; (8000b40 <HAL_SPI_MspInit+0x168>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a20:	4b47      	ldr	r3, [pc, #284]	; (8000b40 <HAL_SPI_MspInit+0x168>)
 8000a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2c:	4b44      	ldr	r3, [pc, #272]	; (8000b40 <HAL_SPI_MspInit+0x168>)
 8000a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a30:	4a43      	ldr	r2, [pc, #268]	; (8000b40 <HAL_SPI_MspInit+0x168>)
 8000a32:	f043 0302 	orr.w	r3, r3, #2
 8000a36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a38:	4b41      	ldr	r3, [pc, #260]	; (8000b40 <HAL_SPI_MspInit+0x168>)
 8000a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3c:	f003 0302 	and.w	r3, r3, #2
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000a44:	2360      	movs	r3, #96	; 0x60
 8000a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a54:	2305      	movs	r3, #5
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a62:	f001 fa4b 	bl	8001efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a66:	2320      	movs	r3, #32
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a76:	2305      	movs	r3, #5
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4830      	ldr	r0, [pc, #192]	; (8000b44 <HAL_SPI_MspInit+0x16c>)
 8000a82:	f001 fa3b 	bl	8001efc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 8000a86:	4b30      	ldr	r3, [pc, #192]	; (8000b48 <HAL_SPI_MspInit+0x170>)
 8000a88:	4a30      	ldr	r2, [pc, #192]	; (8000b4c <HAL_SPI_MspInit+0x174>)
 8000a8a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000a8c:	4b2e      	ldr	r3, [pc, #184]	; (8000b48 <HAL_SPI_MspInit+0x170>)
 8000a8e:	220a      	movs	r2, #10
 8000a90:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a92:	4b2d      	ldr	r3, [pc, #180]	; (8000b48 <HAL_SPI_MspInit+0x170>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a98:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <HAL_SPI_MspInit+0x170>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a9e:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <HAL_SPI_MspInit+0x170>)
 8000aa0:	2280      	movs	r2, #128	; 0x80
 8000aa2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aa4:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <HAL_SPI_MspInit+0x170>)
 8000aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aaa:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aac:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <HAL_SPI_MspInit+0x170>)
 8000aae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ab2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000ab4:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <HAL_SPI_MspInit+0x170>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000aba:	4b23      	ldr	r3, [pc, #140]	; (8000b48 <HAL_SPI_MspInit+0x170>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000ac0:	4821      	ldr	r0, [pc, #132]	; (8000b48 <HAL_SPI_MspInit+0x170>)
 8000ac2:	f000 fec7 	bl	8001854 <HAL_DMA_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8000acc:	f7ff ff34 	bl	8000938 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a1d      	ldr	r2, [pc, #116]	; (8000b48 <HAL_SPI_MspInit+0x170>)
 8000ad4:	659a      	str	r2, [r3, #88]	; 0x58
 8000ad6:	4a1c      	ldr	r2, [pc, #112]	; (8000b48 <HAL_SPI_MspInit+0x170>)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <HAL_SPI_MspInit+0x178>)
 8000ade:	4a1d      	ldr	r2, [pc, #116]	; (8000b54 <HAL_SPI_MspInit+0x17c>)
 8000ae0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <HAL_SPI_MspInit+0x178>)
 8000ae4:	220b      	movs	r2, #11
 8000ae6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <HAL_SPI_MspInit+0x178>)
 8000aea:	2210      	movs	r2, #16
 8000aec:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_SPI_MspInit+0x178>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_SPI_MspInit+0x178>)
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_SPI_MspInit+0x178>)
 8000afc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b00:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <HAL_SPI_MspInit+0x178>)
 8000b04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b08:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_SPI_MspInit+0x178>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_SPI_MspInit+0x178>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000b16:	480e      	ldr	r0, [pc, #56]	; (8000b50 <HAL_SPI_MspInit+0x178>)
 8000b18:	f000 fe9c 	bl	8001854 <HAL_DMA_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 8000b22:	f7ff ff09 	bl	8000938 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a09      	ldr	r2, [pc, #36]	; (8000b50 <HAL_SPI_MspInit+0x178>)
 8000b2a:	655a      	str	r2, [r3, #84]	; 0x54
 8000b2c:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_SPI_MspInit+0x178>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b32:	bf00      	nop
 8000b34:	3728      	adds	r7, #40	; 0x28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40013000 	.word	0x40013000
 8000b40:	40021000 	.word	0x40021000
 8000b44:	48000400 	.word	0x48000400
 8000b48:	200023fc 	.word	0x200023fc
 8000b4c:	40020008 	.word	0x40020008
 8000b50:	2000245c 	.word	0x2000245c
 8000b54:	4002001c 	.word	0x4002001c

08000b58 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b66:	6093      	str	r3, [r2, #8]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40007000 	.word	0x40007000

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_MspInit+0x50>)
 8000b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b82:	4a11      	ldr	r2, [pc, #68]	; (8000bc8 <HAL_MspInit+0x50>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6613      	str	r3, [r2, #96]	; 0x60
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <HAL_MspInit+0x50>)
 8000b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <HAL_MspInit+0x50>)
 8000b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9a:	4a0b      	ldr	r2, [pc, #44]	; (8000bc8 <HAL_MspInit+0x50>)
 8000b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HAL_MspInit+0x50>)
 8000ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	210f      	movs	r1, #15
 8000bb2:	f06f 0001 	mvn.w	r0, #1
 8000bb6:	f000 fe0b 	bl	80017d0 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000bba:	f7ff ffcd 	bl	8000b58 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40021000 	.word	0x40021000

08000bcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08c      	sub	sp, #48	; 0x30
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8000bdc:	2200      	movs	r2, #0
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	2019      	movs	r0, #25
 8000be2:	f000 fdf5 	bl	80017d0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8000be6:	2019      	movs	r0, #25
 8000be8:	f000 fe1c 	bl	8001824 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bec:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <HAL_InitTick+0x9c>)
 8000bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf0:	4a1d      	ldr	r2, [pc, #116]	; (8000c68 <HAL_InitTick+0x9c>)
 8000bf2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bf6:	6613      	str	r3, [r2, #96]	; 0x60
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <HAL_InitTick+0x9c>)
 8000bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c04:	f107 0210 	add.w	r2, r7, #16
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f003 fa68 	bl	80040e4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c14:	f003 fa50 	bl	80040b8 <HAL_RCC_GetPCLK2Freq>
 8000c18:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c1c:	4a13      	ldr	r2, [pc, #76]	; (8000c6c <HAL_InitTick+0xa0>)
 8000c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c22:	0c9b      	lsrs	r3, r3, #18
 8000c24:	3b01      	subs	r3, #1
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <HAL_InitTick+0xa4>)
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <HAL_InitTick+0xa8>)
 8000c2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <HAL_InitTick+0xa4>)
 8000c30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c34:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c36:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <HAL_InitTick+0xa4>)
 8000c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c3a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <HAL_InitTick+0xa4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_InitTick+0xa4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c48:	4809      	ldr	r0, [pc, #36]	; (8000c70 <HAL_InitTick+0xa4>)
 8000c4a:	f004 f803 	bl	8004c54 <HAL_TIM_Base_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d104      	bne.n	8000c5e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c54:	4806      	ldr	r0, [pc, #24]	; (8000c70 <HAL_InitTick+0xa4>)
 8000c56:	f004 f8d9 	bl	8004e0c <HAL_TIM_Base_Start_IT>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	e000      	b.n	8000c60 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3730      	adds	r7, #48	; 0x30
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	431bde83 	.word	0x431bde83
 8000c70:	200024bc 	.word	0x200024bc
 8000c74:	40012c00 	.word	0x40012c00

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <MemManage_Handler+0x4>

08000c92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <UsageFault_Handler+0x4>

08000c9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <DMA1_Channel1_IRQHandler+0x10>)
 8000cb2:	f000 ffd3 	bl	8001c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200023fc 	.word	0x200023fc

08000cc0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <DMA1_Channel2_IRQHandler+0x10>)
 8000cc6:	f000 ffc9 	bl	8001c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000245c 	.word	0x2000245c

08000cd4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <DMA1_Channel3_IRQHandler+0x10>)
 8000cda:	f000 ffbf 	bl	8001c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20002600 	.word	0x20002600

08000ce8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <DMA1_Channel4_IRQHandler+0x10>)
 8000cee:	f000 ffb5 	bl	8001c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20002508 	.word	0x20002508

08000cfc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <USB_LP_IRQHandler+0x10>)
 8000d02:	f001 fc6d 	bl	80025e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200032fc 	.word	0x200032fc

08000d10 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d14:	4802      	ldr	r0, [pc, #8]	; (8000d20 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d16:	f004 fc49 	bl	80055ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200024bc 	.word	0x200024bc

08000d24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <SystemInit+0x28>)
 8000d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2e:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <SystemInit+0x28>)
 8000d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <SystemInit+0x28>)
 8000d3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d3e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim2_ch1;
DMA_HandleTypeDef hdma_tim17_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d62:	463b      	mov	r3, r7
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
 8000d70:	615a      	str	r2, [r3, #20]
 8000d72:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000d74:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <MX_TIM2_Init+0xac>)
 8000d76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d7c:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <MX_TIM2_Init+0xac>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d82:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <MX_TIM2_Init+0xac>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 212;
 8000d88:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <MX_TIM2_Init+0xac>)
 8000d8a:	22d4      	movs	r2, #212	; 0xd4
 8000d8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8e:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <MX_TIM2_Init+0xac>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d94:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <MX_TIM2_Init+0xac>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d9a:	4818      	ldr	r0, [pc, #96]	; (8000dfc <MX_TIM2_Init+0xac>)
 8000d9c:	f004 f8b6 	bl	8004f0c <HAL_TIM_PWM_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000da6:	f7ff fdc7 	bl	8000938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	4619      	mov	r1, r3
 8000db8:	4810      	ldr	r0, [pc, #64]	; (8000dfc <MX_TIM2_Init+0xac>)
 8000dba:	f005 fd53 	bl	8006864 <HAL_TIMEx_MasterConfigSynchronization>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000dc4:	f7ff fdb8 	bl	8000938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc8:	2360      	movs	r3, #96	; 0x60
 8000dca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4807      	ldr	r0, [pc, #28]	; (8000dfc <MX_TIM2_Init+0xac>)
 8000de0:	f004 fd64 	bl	80058ac <HAL_TIM_PWM_ConfigChannel>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000dea:	f7ff fda5 	bl	8000938 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000dee:	4803      	ldr	r0, [pc, #12]	; (8000dfc <MX_TIM2_Init+0xac>)
 8000df0:	f000 f914 	bl	800101c <HAL_TIM_MspPostInit>

}
 8000df4:	bf00      	nop
 8000df6:	3728      	adds	r7, #40	; 0x28
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	200025b4 	.word	0x200025b4

08000e00 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b094      	sub	sp, #80	; 0x50
 8000e04:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]
 8000e16:	615a      	str	r2, [r3, #20]
 8000e18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	2234      	movs	r2, #52	; 0x34
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f00a fb25 	bl	800b470 <memset>

  htim17.Instance = TIM17;
 8000e26:	4b30      	ldr	r3, [pc, #192]	; (8000ee8 <MX_TIM17_Init+0xe8>)
 8000e28:	4a30      	ldr	r2, [pc, #192]	; (8000eec <MX_TIM17_Init+0xec>)
 8000e2a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000e2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ee8 <MX_TIM17_Init+0xe8>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e32:	4b2d      	ldr	r3, [pc, #180]	; (8000ee8 <MX_TIM17_Init+0xe8>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 212;
 8000e38:	4b2b      	ldr	r3, [pc, #172]	; (8000ee8 <MX_TIM17_Init+0xe8>)
 8000e3a:	22d4      	movs	r2, #212	; 0xd4
 8000e3c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <MX_TIM17_Init+0xe8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000e44:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <MX_TIM17_Init+0xe8>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4a:	4b27      	ldr	r3, [pc, #156]	; (8000ee8 <MX_TIM17_Init+0xe8>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000e50:	4825      	ldr	r0, [pc, #148]	; (8000ee8 <MX_TIM17_Init+0xe8>)
 8000e52:	f003 feff 	bl	8004c54 <HAL_TIM_Base_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8000e5c:	f7ff fd6c 	bl	8000938 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000e60:	4821      	ldr	r0, [pc, #132]	; (8000ee8 <MX_TIM17_Init+0xe8>)
 8000e62:	f004 f853 	bl	8004f0c <HAL_TIM_PWM_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8000e6c:	f7ff fd64 	bl	8000938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e70:	2360      	movs	r3, #96	; 0x60
 8000e72:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e84:	2300      	movs	r3, #0
 8000e86:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e90:	2200      	movs	r2, #0
 8000e92:	4619      	mov	r1, r3
 8000e94:	4814      	ldr	r0, [pc, #80]	; (8000ee8 <MX_TIM17_Init+0xe8>)
 8000e96:	f004 fd09 	bl	80058ac <HAL_TIM_PWM_ConfigChannel>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 8000ea0:	f7ff fd4a 	bl	8000938 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ebc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <MX_TIM17_Init+0xe8>)
 8000ecc:	f005 fe0e 	bl	8006aec <HAL_TIMEx_ConfigBreakDeadTime>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8000ed6:	f7ff fd2f 	bl	8000938 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim17);
 8000eda:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <MX_TIM17_Init+0xe8>)
 8000edc:	f000 f89e 	bl	800101c <HAL_TIM_MspPostInit>

}
 8000ee0:	bf00      	nop
 8000ee2:	3750      	adds	r7, #80	; 0x50
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20002568 	.word	0x20002568
 8000eec:	40014800 	.word	0x40014800

08000ef0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f00:	d135      	bne.n	8000f6e <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f02:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <HAL_TIM_PWM_MspInit+0x88>)
 8000f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f06:	4a1c      	ldr	r2, [pc, #112]	; (8000f78 <HAL_TIM_PWM_MspInit+0x88>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <HAL_TIM_PWM_MspInit+0x88>)
 8000f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel4;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_TIM_PWM_MspInit+0x8c>)
 8000f1c:	4a18      	ldr	r2, [pc, #96]	; (8000f80 <HAL_TIM_PWM_MspInit+0x90>)
 8000f1e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <HAL_TIM_PWM_MspInit+0x8c>)
 8000f22:	2238      	movs	r2, #56	; 0x38
 8000f24:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_TIM_PWM_MspInit+0x8c>)
 8000f28:	2210      	movs	r2, #16
 8000f2a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <HAL_TIM_PWM_MspInit+0x8c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_TIM_PWM_MspInit+0x8c>)
 8000f34:	2280      	movs	r2, #128	; 0x80
 8000f36:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f38:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <HAL_TIM_PWM_MspInit+0x8c>)
 8000f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f3e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <HAL_TIM_PWM_MspInit+0x8c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <HAL_TIM_PWM_MspInit+0x8c>)
 8000f48:	2220      	movs	r2, #32
 8000f4a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <HAL_TIM_PWM_MspInit+0x8c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000f52:	480a      	ldr	r0, [pc, #40]	; (8000f7c <HAL_TIM_PWM_MspInit+0x8c>)
 8000f54:	f000 fc7e 	bl	8001854 <HAL_DMA_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_TIM_PWM_MspInit+0x72>
    {
      Error_Handler();
 8000f5e:	f7ff fceb 	bl	8000938 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <HAL_TIM_PWM_MspInit+0x8c>)
 8000f66:	625a      	str	r2, [r3, #36]	; 0x24
 8000f68:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <HAL_TIM_PWM_MspInit+0x8c>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	20002508 	.word	0x20002508
 8000f80:	40020044 	.word	0x40020044

08000f84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a1e      	ldr	r2, [pc, #120]	; (800100c <HAL_TIM_Base_MspInit+0x88>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d135      	bne.n	8001002 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000f96:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <HAL_TIM_Base_MspInit+0x8c>)
 8000f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9a:	4a1d      	ldr	r2, [pc, #116]	; (8001010 <HAL_TIM_Base_MspInit+0x8c>)
 8000f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <HAL_TIM_Base_MspInit+0x8c>)
 8000fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM17 DMA Init */
    /* TIM17_CH1 Init */
    hdma_tim17_ch1.Instance = DMA1_Channel3;
 8000fae:	4b19      	ldr	r3, [pc, #100]	; (8001014 <HAL_TIM_Base_MspInit+0x90>)
 8000fb0:	4a19      	ldr	r2, [pc, #100]	; (8001018 <HAL_TIM_Base_MspInit+0x94>)
 8000fb2:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <HAL_TIM_Base_MspInit+0x90>)
 8000fb6:	2254      	movs	r2, #84	; 0x54
 8000fb8:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <HAL_TIM_Base_MspInit+0x90>)
 8000fbc:	2210      	movs	r2, #16
 8000fbe:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <HAL_TIM_Base_MspInit+0x90>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <HAL_TIM_Base_MspInit+0x90>)
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_TIM_Base_MspInit+0x90>)
 8000fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fd2:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <HAL_TIM_Base_MspInit+0x90>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1.Init.Mode = DMA_CIRCULAR;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <HAL_TIM_Base_MspInit+0x90>)
 8000fdc:	2220      	movs	r2, #32
 8000fde:	61da      	str	r2, [r3, #28]
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <HAL_TIM_Base_MspInit+0x90>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 8000fe6:	480b      	ldr	r0, [pc, #44]	; (8001014 <HAL_TIM_Base_MspInit+0x90>)
 8000fe8:	f000 fc34 	bl	8001854 <HAL_DMA_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8000ff2:	f7ff fca1 	bl	8000938 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a06      	ldr	r2, [pc, #24]	; (8001014 <HAL_TIM_Base_MspInit+0x90>)
 8000ffa:	625a      	str	r2, [r3, #36]	; 0x24
 8000ffc:	4a05      	ldr	r2, [pc, #20]	; (8001014 <HAL_TIM_Base_MspInit+0x90>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40014800 	.word	0x40014800
 8001010:	40021000 	.word	0x40021000
 8001014:	20002600 	.word	0x20002600
 8001018:	40020030 	.word	0x40020030

0800101c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800103c:	d11d      	bne.n	800107a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <HAL_TIM_MspPostInit+0xac>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <HAL_TIM_MspPostInit+0xac>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104a:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <HAL_TIM_MspPostInit+0xac>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = B_NP_Pin;
 8001056:	2301      	movs	r3, #1
 8001058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001066:	2301      	movs	r3, #1
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(B_NP_GPIO_Port, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001074:	f000 ff42 	bl	8001efc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001078:	e021      	b.n	80010be <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM17)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a13      	ldr	r2, [pc, #76]	; (80010cc <HAL_TIM_MspPostInit+0xb0>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d11c      	bne.n	80010be <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <HAL_TIM_MspPostInit+0xac>)
 8001086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001088:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <HAL_TIM_MspPostInit+0xac>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <HAL_TIM_MspPostInit+0xac>)
 8001092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = R_NP_Pin;
 800109c:	2380      	movs	r3, #128	; 0x80
 800109e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a8:	2303      	movs	r3, #3
 80010aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80010ac:	2301      	movs	r3, #1
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(R_NP_GPIO_Port, &GPIO_InitStruct);
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ba:	f000 ff1f 	bl	8001efc <HAL_GPIO_Init>
}
 80010be:	bf00      	nop
 80010c0:	3728      	adds	r7, #40	; 0x28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40014800 	.word	0x40014800

080010d0 <ws2812Init>:
extern TIM_HandleTypeDef htim17;



bool ws2812Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  memset(led_buf, 0, sizeof(led_buf));
 80010d4:	f240 6232 	movw	r2, #1586	; 0x632
 80010d8:	2100      	movs	r1, #0
 80010da:	4806      	ldr	r0, [pc, #24]	; (80010f4 <ws2812Init+0x24>)
 80010dc:	f00a f9c8 	bl	800b470 <memset>
  memset(led_buf_rainbow, 0, sizeof(led_buf));
 80010e0:	f240 6232 	movw	r2, #1586	; 0x632
 80010e4:	2100      	movs	r1, #0
 80010e6:	4804      	ldr	r0, [pc, #16]	; (80010f8 <ws2812Init+0x28>)
 80010e8:	f00a f9c2 	bl	800b470 <memset>

  return true;
 80010ec:	2301      	movs	r3, #1
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200001a8 	.word	0x200001a8
 80010f8:	200007dc 	.word	0x200007dc

080010fc <ws2812Begin>:

void ws2812Begin(uint32_t break_led_cnt, uint32_t ranbow_led_cnt)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  ws2812.break_led_cnt = break_led_cnt;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	b29a      	uxth	r2, r3
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <ws2812Begin+0x5c>)
 800110c:	801a      	strh	r2, [r3, #0]
  ws2812.ranbow_led_cnt = ranbow_led_cnt;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b29a      	uxth	r2, r3
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <ws2812Begin+0x5c>)
 8001114:	805a      	strh	r2, [r3, #2]


  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)led_buf, (50 + 24 *  ws2812.break_led_cnt) * 1);
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <ws2812Begin+0x5c>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	0052      	lsls	r2, r2, #1
 800111e:	4413      	add	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	b29b      	uxth	r3, r3
 8001124:	3332      	adds	r3, #50	; 0x32
 8001126:	b29b      	uxth	r3, r3
 8001128:	4a0c      	ldr	r2, [pc, #48]	; (800115c <ws2812Begin+0x60>)
 800112a:	2100      	movs	r1, #0
 800112c:	480c      	ldr	r0, [pc, #48]	; (8001160 <ws2812Begin+0x64>)
 800112e:	f003 ffc9 	bl	80050c4 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t *)led_buf_rainbow, (50 + 24 *  ws2812.ranbow_led_cnt) * 1);
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <ws2812Begin+0x5c>)
 8001134:	885b      	ldrh	r3, [r3, #2]
 8001136:	461a      	mov	r2, r3
 8001138:	0052      	lsls	r2, r2, #1
 800113a:	4413      	add	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	b29b      	uxth	r3, r3
 8001140:	3332      	adds	r3, #50	; 0x32
 8001142:	b29b      	uxth	r3, r3
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <ws2812Begin+0x68>)
 8001146:	2100      	movs	r1, #0
 8001148:	4807      	ldr	r0, [pc, #28]	; (8001168 <ws2812Begin+0x6c>)
 800114a:	f003 ffbb 	bl	80050c4 <HAL_TIM_PWM_Start_DMA>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20002660 	.word	0x20002660
 800115c:	200001a8 	.word	0x200001a8
 8001160:	200025b4 	.word	0x200025b4
 8001164:	200007dc 	.word	0x200007dc
 8001168:	20002568 	.word	0x20002568

0800116c <ws2812SetColor>:

void ws2812SetColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 800116c:	b480      	push	{r7}
 800116e:	b08b      	sub	sp, #44	; 0x2c
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	4608      	mov	r0, r1
 8001176:	4611      	mov	r1, r2
 8001178:	461a      	mov	r2, r3
 800117a:	4603      	mov	r3, r0
 800117c:	70fb      	strb	r3, [r7, #3]
 800117e:	460b      	mov	r3, r1
 8001180:	70bb      	strb	r3, [r7, #2]
 8001182:	4613      	mov	r3, r2
 8001184:	707b      	strb	r3, [r7, #1]
  uint8_t b_bit[8];

  uint32_t offset;


  for (int i=0; i<8; i++)
 8001186:	2300      	movs	r3, #0
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
 800118a:	e03e      	b.n	800120a <ws2812SetColor+0x9e>
  {
    if (red & (1<<7))
 800118c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001190:	2b00      	cmp	r3, #0
 8001192:	da06      	bge.n	80011a2 <ws2812SetColor+0x36>
    {
      r_bit[i] = BIT_HIGH;
 8001194:	f107 0218 	add.w	r2, r7, #24
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	4413      	add	r3, r2
 800119c:	2287      	movs	r2, #135	; 0x87
 800119e:	701a      	strb	r2, [r3, #0]
 80011a0:	e005      	b.n	80011ae <ws2812SetColor+0x42>
    }
    else
    {
      r_bit[i] = BIT_LOW;
 80011a2:	f107 0218 	add.w	r2, r7, #24
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	4413      	add	r3, r2
 80011aa:	2243      	movs	r2, #67	; 0x43
 80011ac:	701a      	strb	r2, [r3, #0]
    }
    red <<= 1;
 80011ae:	78fb      	ldrb	r3, [r7, #3]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	70fb      	strb	r3, [r7, #3]

    if (green & (1<<7))
 80011b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	da06      	bge.n	80011ca <ws2812SetColor+0x5e>
    {
      g_bit[i] = BIT_HIGH;
 80011bc:	f107 0210 	add.w	r2, r7, #16
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	4413      	add	r3, r2
 80011c4:	2287      	movs	r2, #135	; 0x87
 80011c6:	701a      	strb	r2, [r3, #0]
 80011c8:	e005      	b.n	80011d6 <ws2812SetColor+0x6a>
    }
    else
    {
      g_bit[i] = BIT_LOW;
 80011ca:	f107 0210 	add.w	r2, r7, #16
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	4413      	add	r3, r2
 80011d2:	2243      	movs	r2, #67	; 0x43
 80011d4:	701a      	strb	r2, [r3, #0]
    }
    green <<= 1;
 80011d6:	78bb      	ldrb	r3, [r7, #2]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	70bb      	strb	r3, [r7, #2]

    if (blue & (1<<7))
 80011dc:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	da06      	bge.n	80011f2 <ws2812SetColor+0x86>
    {
      b_bit[i] = BIT_HIGH;
 80011e4:	f107 0208 	add.w	r2, r7, #8
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	4413      	add	r3, r2
 80011ec:	2287      	movs	r2, #135	; 0x87
 80011ee:	701a      	strb	r2, [r3, #0]
 80011f0:	e005      	b.n	80011fe <ws2812SetColor+0x92>
    }
    else
    {
      b_bit[i] = BIT_LOW;
 80011f2:	f107 0208 	add.w	r2, r7, #8
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	4413      	add	r3, r2
 80011fa:	2243      	movs	r2, #67	; 0x43
 80011fc:	701a      	strb	r2, [r3, #0]
    }
    blue <<= 1;
 80011fe:	787b      	ldrb	r3, [r7, #1]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	707b      	strb	r3, [r7, #1]
  for (int i=0; i<8; i++)
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	3301      	adds	r3, #1
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	2b07      	cmp	r3, #7
 800120e:	ddbd      	ble.n	800118c <ws2812SetColor+0x20>
  }

  offset = 50;
 8001210:	2332      	movs	r3, #50	; 0x32
 8001212:	623b      	str	r3, [r7, #32]

  memcpy(&led_buf[offset + index*24 + 8*0], g_bit, 8*1);
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	4413      	add	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	461a      	mov	r2, r3
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	4413      	add	r3, r2
 8001224:	4a17      	ldr	r2, [pc, #92]	; (8001284 <ws2812SetColor+0x118>)
 8001226:	4413      	add	r3, r2
 8001228:	461a      	mov	r2, r3
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	cb03      	ldmia	r3!, {r0, r1}
 8001230:	6010      	str	r0, [r2, #0]
 8001232:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf[offset + index*24 + 8*1], r_bit, 8*1);
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	4613      	mov	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4413      	add	r3, r2
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	461a      	mov	r2, r3
 8001240:	6a3b      	ldr	r3, [r7, #32]
 8001242:	4413      	add	r3, r2
 8001244:	3308      	adds	r3, #8
 8001246:	4a0f      	ldr	r2, [pc, #60]	; (8001284 <ws2812SetColor+0x118>)
 8001248:	4413      	add	r3, r2
 800124a:	461a      	mov	r2, r3
 800124c:	f107 0318 	add.w	r3, r7, #24
 8001250:	cb03      	ldmia	r3!, {r0, r1}
 8001252:	6010      	str	r0, [r2, #0]
 8001254:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf[offset + index*24 + 8*2], b_bit, 8*1);
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	4613      	mov	r3, r2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4413      	add	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	461a      	mov	r2, r3
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	4413      	add	r3, r2
 8001266:	3310      	adds	r3, #16
 8001268:	4a06      	ldr	r2, [pc, #24]	; (8001284 <ws2812SetColor+0x118>)
 800126a:	4413      	add	r3, r2
 800126c:	461a      	mov	r2, r3
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	cb03      	ldmia	r3!, {r0, r1}
 8001274:	6010      	str	r0, [r2, #0]
 8001276:	6051      	str	r1, [r2, #4]
}
 8001278:	bf00      	nop
 800127a:	372c      	adds	r7, #44	; 0x2c
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	200001a8 	.word	0x200001a8

08001288 <ws2812SetRanbowColor>:

void ws2812SetRanbowColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 8001288:	b480      	push	{r7}
 800128a:	b08b      	sub	sp, #44	; 0x2c
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	4608      	mov	r0, r1
 8001292:	4611      	mov	r1, r2
 8001294:	461a      	mov	r2, r3
 8001296:	4603      	mov	r3, r0
 8001298:	70fb      	strb	r3, [r7, #3]
 800129a:	460b      	mov	r3, r1
 800129c:	70bb      	strb	r3, [r7, #2]
 800129e:	4613      	mov	r3, r2
 80012a0:	707b      	strb	r3, [r7, #1]
  uint8_t b_bit[8];

  uint32_t offset;


  for (int i=0; i<8; i++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
 80012a6:	e03e      	b.n	8001326 <ws2812SetRanbowColor+0x9e>
  {
    if (red & (1<<7))
 80012a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	da06      	bge.n	80012be <ws2812SetRanbowColor+0x36>
    {
      r_bit[i] = BIT_HIGH;
 80012b0:	f107 0218 	add.w	r2, r7, #24
 80012b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b6:	4413      	add	r3, r2
 80012b8:	2287      	movs	r2, #135	; 0x87
 80012ba:	701a      	strb	r2, [r3, #0]
 80012bc:	e005      	b.n	80012ca <ws2812SetRanbowColor+0x42>
    }
    else
    {
      r_bit[i] = BIT_LOW;
 80012be:	f107 0218 	add.w	r2, r7, #24
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	4413      	add	r3, r2
 80012c6:	2243      	movs	r2, #67	; 0x43
 80012c8:	701a      	strb	r2, [r3, #0]
    }
    red <<= 1;
 80012ca:	78fb      	ldrb	r3, [r7, #3]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	70fb      	strb	r3, [r7, #3]

    if (green & (1<<7))
 80012d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	da06      	bge.n	80012e6 <ws2812SetRanbowColor+0x5e>
    {
      g_bit[i] = BIT_HIGH;
 80012d8:	f107 0210 	add.w	r2, r7, #16
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	4413      	add	r3, r2
 80012e0:	2287      	movs	r2, #135	; 0x87
 80012e2:	701a      	strb	r2, [r3, #0]
 80012e4:	e005      	b.n	80012f2 <ws2812SetRanbowColor+0x6a>
    }
    else
    {
      g_bit[i] = BIT_LOW;
 80012e6:	f107 0210 	add.w	r2, r7, #16
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	4413      	add	r3, r2
 80012ee:	2243      	movs	r2, #67	; 0x43
 80012f0:	701a      	strb	r2, [r3, #0]
    }
    green <<= 1;
 80012f2:	78bb      	ldrb	r3, [r7, #2]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	70bb      	strb	r3, [r7, #2]

    if (blue & (1<<7))
 80012f8:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	da06      	bge.n	800130e <ws2812SetRanbowColor+0x86>
    {
      b_bit[i] = BIT_HIGH;
 8001300:	f107 0208 	add.w	r2, r7, #8
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	4413      	add	r3, r2
 8001308:	2287      	movs	r2, #135	; 0x87
 800130a:	701a      	strb	r2, [r3, #0]
 800130c:	e005      	b.n	800131a <ws2812SetRanbowColor+0x92>
    }
    else
    {
      b_bit[i] = BIT_LOW;
 800130e:	f107 0208 	add.w	r2, r7, #8
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	4413      	add	r3, r2
 8001316:	2243      	movs	r2, #67	; 0x43
 8001318:	701a      	strb	r2, [r3, #0]
    }
    blue <<= 1;
 800131a:	787b      	ldrb	r3, [r7, #1]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	707b      	strb	r3, [r7, #1]
  for (int i=0; i<8; i++)
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	3301      	adds	r3, #1
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	2b07      	cmp	r3, #7
 800132a:	ddbd      	ble.n	80012a8 <ws2812SetRanbowColor+0x20>
  }

  offset = 50;
 800132c:	2332      	movs	r3, #50	; 0x32
 800132e:	623b      	str	r3, [r7, #32]

  memcpy(&led_buf_rainbow[offset + index*24 + 8*0], g_bit, 8*1);
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	461a      	mov	r2, r3
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	4413      	add	r3, r2
 8001340:	4a17      	ldr	r2, [pc, #92]	; (80013a0 <ws2812SetRanbowColor+0x118>)
 8001342:	4413      	add	r3, r2
 8001344:	461a      	mov	r2, r3
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	cb03      	ldmia	r3!, {r0, r1}
 800134c:	6010      	str	r0, [r2, #0]
 800134e:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf_rainbow[offset + index*24 + 8*1], r_bit, 8*1);
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	461a      	mov	r2, r3
 800135c:	6a3b      	ldr	r3, [r7, #32]
 800135e:	4413      	add	r3, r2
 8001360:	3308      	adds	r3, #8
 8001362:	4a0f      	ldr	r2, [pc, #60]	; (80013a0 <ws2812SetRanbowColor+0x118>)
 8001364:	4413      	add	r3, r2
 8001366:	461a      	mov	r2, r3
 8001368:	f107 0318 	add.w	r3, r7, #24
 800136c:	cb03      	ldmia	r3!, {r0, r1}
 800136e:	6010      	str	r0, [r2, #0]
 8001370:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf_rainbow[offset + index*24 + 8*2], b_bit, 8*1);
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	4413      	add	r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	461a      	mov	r2, r3
 800137e:	6a3b      	ldr	r3, [r7, #32]
 8001380:	4413      	add	r3, r2
 8001382:	3310      	adds	r3, #16
 8001384:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <ws2812SetRanbowColor+0x118>)
 8001386:	4413      	add	r3, r2
 8001388:	461a      	mov	r2, r3
 800138a:	f107 0308 	add.w	r3, r7, #8
 800138e:	cb03      	ldmia	r3!, {r0, r1}
 8001390:	6010      	str	r0, [r2, #0]
 8001392:	6051      	str	r1, [r2, #4]
}
 8001394:	bf00      	nop
 8001396:	372c      	adds	r7, #44	; 0x2c
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	200007dc 	.word	0x200007dc

080013a4 <setPixelColor>:
    }
    brightness = newBrightness;
  }
}

void setPixelColor(uint16_t n, uint32_t c) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	80fb      	strh	r3, [r7, #6]
  if(n < ws2812.ranbow_led_cnt) {
 80013b0:	4b37      	ldr	r3, [pc, #220]	; (8001490 <setPixelColor+0xec>)
 80013b2:	885b      	ldrh	r3, [r3, #2]
 80013b4:	88fa      	ldrh	r2, [r7, #6]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d266      	bcs.n	8001488 <setPixelColor+0xe4>
    uint8_t *p,
      r = (uint8_t)(c >> 16),
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	0c1b      	lsrs	r3, r3, #16
 80013be:	72fb      	strb	r3, [r7, #11]
      g = (uint8_t)(c >>  8),
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	0a1b      	lsrs	r3, r3, #8
 80013c4:	72bb      	strb	r3, [r7, #10]
      b = (uint8_t)c;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	727b      	strb	r3, [r7, #9]
    if(brightness) { // See notes in setBrightness()
 80013ca:	4b32      	ldr	r3, [pc, #200]	; (8001494 <setPixelColor+0xf0>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d014      	beq.n	80013fc <setPixelColor+0x58>
      r = (r * brightness) >> 8;
 80013d2:	7afb      	ldrb	r3, [r7, #11]
 80013d4:	4a2f      	ldr	r2, [pc, #188]	; (8001494 <setPixelColor+0xf0>)
 80013d6:	7812      	ldrb	r2, [r2, #0]
 80013d8:	fb02 f303 	mul.w	r3, r2, r3
 80013dc:	121b      	asrs	r3, r3, #8
 80013de:	72fb      	strb	r3, [r7, #11]
      g = (g * brightness) >> 8;
 80013e0:	7abb      	ldrb	r3, [r7, #10]
 80013e2:	4a2c      	ldr	r2, [pc, #176]	; (8001494 <setPixelColor+0xf0>)
 80013e4:	7812      	ldrb	r2, [r2, #0]
 80013e6:	fb02 f303 	mul.w	r3, r2, r3
 80013ea:	121b      	asrs	r3, r3, #8
 80013ec:	72bb      	strb	r3, [r7, #10]
      b = (b * brightness) >> 8;
 80013ee:	7a7b      	ldrb	r3, [r7, #9]
 80013f0:	4a28      	ldr	r2, [pc, #160]	; (8001494 <setPixelColor+0xf0>)
 80013f2:	7812      	ldrb	r2, [r2, #0]
 80013f4:	fb02 f303 	mul.w	r3, r2, r3
 80013f8:	121b      	asrs	r3, r3, #8
 80013fa:	727b      	strb	r3, [r7, #9]
    }
    if(wOffset == rOffset) {
 80013fc:	4b26      	ldr	r3, [pc, #152]	; (8001498 <setPixelColor+0xf4>)
 80013fe:	781a      	ldrb	r2, [r3, #0]
 8001400:	4b26      	ldr	r3, [pc, #152]	; (800149c <setPixelColor+0xf8>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d108      	bne.n	800141a <setPixelColor+0x76>
      p = &pixels[n * 3];
 8001408:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <setPixelColor+0xfc>)
 800140a:	6819      	ldr	r1, [r3, #0]
 800140c:	88fa      	ldrh	r2, [r7, #6]
 800140e:	4613      	mov	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4413      	add	r3, r2
 8001414:	440b      	add	r3, r1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	e01b      	b.n	8001452 <setPixelColor+0xae>
    } else {
      p = &pixels[n * 4];
 800141a:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <setPixelColor+0xfc>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	88fa      	ldrh	r2, [r7, #6]
 8001420:	0092      	lsls	r2, r2, #2
 8001422:	4413      	add	r3, r2
 8001424:	60fb      	str	r3, [r7, #12]
      uint8_t w = (uint8_t)(c >> 24);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	0e1b      	lsrs	r3, r3, #24
 800142a:	723b      	strb	r3, [r7, #8]
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
 800142c:	4b19      	ldr	r3, [pc, #100]	; (8001494 <setPixelColor+0xf0>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d007      	beq.n	8001444 <setPixelColor+0xa0>
 8001434:	7a3b      	ldrb	r3, [r7, #8]
 8001436:	4a17      	ldr	r2, [pc, #92]	; (8001494 <setPixelColor+0xf0>)
 8001438:	7812      	ldrb	r2, [r2, #0]
 800143a:	fb02 f303 	mul.w	r3, r2, r3
 800143e:	121b      	asrs	r3, r3, #8
 8001440:	b2db      	uxtb	r3, r3
 8001442:	e000      	b.n	8001446 <setPixelColor+0xa2>
 8001444:	7a3b      	ldrb	r3, [r7, #8]
 8001446:	4a14      	ldr	r2, [pc, #80]	; (8001498 <setPixelColor+0xf4>)
 8001448:	7812      	ldrb	r2, [r2, #0]
 800144a:	4611      	mov	r1, r2
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	440a      	add	r2, r1
 8001450:	7013      	strb	r3, [r2, #0]
    }
    p[rOffset] = r;
 8001452:	4b12      	ldr	r3, [pc, #72]	; (800149c <setPixelColor+0xf8>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4413      	add	r3, r2
 800145c:	7afa      	ldrb	r2, [r7, #11]
 800145e:	701a      	strb	r2, [r3, #0]
    p[gOffset] = g;
 8001460:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <setPixelColor+0x100>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4413      	add	r3, r2
 800146a:	7aba      	ldrb	r2, [r7, #10]
 800146c:	701a      	strb	r2, [r3, #0]
    p[bOffset] = b;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <setPixelColor+0x104>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4413      	add	r3, r2
 8001478:	7a7a      	ldrb	r2, [r7, #9]
 800147a:	701a      	strb	r2, [r3, #0]
    ws2812SetRanbowColor(n, r, g , b);
 800147c:	88f8      	ldrh	r0, [r7, #6]
 800147e:	7a7b      	ldrb	r3, [r7, #9]
 8001480:	7aba      	ldrb	r2, [r7, #10]
 8001482:	7af9      	ldrb	r1, [r7, #11]
 8001484:	f7ff ff00 	bl	8001288 <ws2812SetRanbowColor>
  }

}
 8001488:	bf00      	nop
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20002660 	.word	0x20002660
 8001494:	20002394 	.word	0x20002394
 8001498:	20002388 	.word	0x20002388
 800149c:	20002396 	.word	0x20002396
 80014a0:	2000237c 	.word	0x2000237c
 80014a4:	2000238c 	.word	0x2000238c
 80014a8:	20002395 	.word	0x20002395

080014ac <Wheel>:

uint32_t Wheel(uint8_t WheelPos) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
  WheelPos = 255 - WheelPos;
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	71fb      	strb	r3, [r7, #7]
  if(WheelPos < 85) {
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	2b54      	cmp	r3, #84	; 0x54
 80014c0:	d811      	bhi.n	80014e6 <Wheel+0x3a>
    return Color(255 - WheelPos * 3, 0, WheelPos * 3);
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	461a      	mov	r2, r3
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	3b01      	subs	r3, #1
 80014ce:	b2d8      	uxtb	r0, r3
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	461a      	mov	r2, r3
 80014d4:	0052      	lsls	r2, r2, #1
 80014d6:	4413      	add	r3, r2
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	2100      	movs	r1, #0
 80014de:	f000 f832 	bl	8001546 <Color>
 80014e2:	4603      	mov	r3, r0
 80014e4:	e02b      	b.n	800153e <Wheel+0x92>
  }
  if(WheelPos < 170) {
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	2ba9      	cmp	r3, #169	; 0xa9
 80014ea:	d814      	bhi.n	8001516 <Wheel+0x6a>
  		WheelPos -= 85;
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	3b55      	subs	r3, #85	; 0x55
 80014f0:	71fb      	strb	r3, [r7, #7]
    return Color(0, WheelPos * 3, 255 - WheelPos * 3);
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	461a      	mov	r2, r3
 80014f6:	0052      	lsls	r2, r2, #1
 80014f8:	4413      	add	r3, r2
 80014fa:	b2d9      	uxtb	r1, r3
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	461a      	mov	r2, r3
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	b2db      	uxtb	r3, r3
 8001506:	3b01      	subs	r3, #1
 8001508:	b2db      	uxtb	r3, r3
 800150a:	461a      	mov	r2, r3
 800150c:	2000      	movs	r0, #0
 800150e:	f000 f81a 	bl	8001546 <Color>
 8001512:	4603      	mov	r3, r0
 8001514:	e013      	b.n	800153e <Wheel+0x92>
  }
  WheelPos -= 170;
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	3356      	adds	r3, #86	; 0x56
 800151a:	71fb      	strb	r3, [r7, #7]
  return Color(WheelPos * 3, 255 - WheelPos * 3, 0);
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	461a      	mov	r2, r3
 8001520:	0052      	lsls	r2, r2, #1
 8001522:	4413      	add	r3, r2
 8001524:	b2d8      	uxtb	r0, r3
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	461a      	mov	r2, r3
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	3b01      	subs	r3, #1
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2200      	movs	r2, #0
 8001536:	4619      	mov	r1, r3
 8001538:	f000 f805 	bl	8001546 <Color>
 800153c:	4603      	mov	r3, r0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <Color>:

uint32_t Color(uint8_t r, uint8_t g, uint8_t b) {
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	71fb      	strb	r3, [r7, #7]
 8001550:	460b      	mov	r3, r1
 8001552:	71bb      	strb	r3, [r7, #6]
 8001554:	4613      	mov	r3, r2
 8001556:	717b      	strb	r3, [r7, #5]
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	041a      	lsls	r2, r3, #16
 800155c:	79bb      	ldrb	r3, [r7, #6]
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	431a      	orrs	r2, r3
 8001562:	797b      	ldrb	r3, [r7, #5]
 8001564:	4313      	orrs	r3, r2
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001574:	480d      	ldr	r0, [pc, #52]	; (80015ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001576:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001578:	480d      	ldr	r0, [pc, #52]	; (80015b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800157a:	490e      	ldr	r1, [pc, #56]	; (80015b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800157c:	4a0e      	ldr	r2, [pc, #56]	; (80015b8 <LoopForever+0xe>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001580:	e002      	b.n	8001588 <LoopCopyDataInit>

08001582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001586:	3304      	adds	r3, #4

08001588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800158c:	d3f9      	bcc.n	8001582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158e:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001590:	4c0b      	ldr	r4, [pc, #44]	; (80015c0 <LoopForever+0x16>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001594:	e001      	b.n	800159a <LoopFillZerobss>

08001596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001598:	3204      	adds	r2, #4

0800159a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800159c:	d3fb      	bcc.n	8001596 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800159e:	f7ff fbc1 	bl	8000d24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015a2:	f009 ff41 	bl	800b428 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015a6:	f7ff f8d3 	bl	8000750 <main>

080015aa <LoopForever>:

LoopForever:
    b LoopForever
 80015aa:	e7fe      	b.n	80015aa <LoopForever>
  ldr   r0, =_estack
 80015ac:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80015b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b4:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80015b8:	0800b7b0 	.word	0x0800b7b0
  ldr r2, =_sbss
 80015bc:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80015c0:	20003570 	.word	0x20003570

080015c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015c4:	e7fe      	b.n	80015c4 <ADC1_2_IRQHandler>

080015c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d0:	2003      	movs	r0, #3
 80015d2:	f000 f8dd 	bl	8001790 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015d6:	2000      	movs	r0, #0
 80015d8:	f7ff faf8 	bl	8000bcc <HAL_InitTick>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d002      	beq.n	80015e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	71fb      	strb	r3, [r7, #7]
 80015e6:	e001      	b.n	80015ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015e8:	f7ff fac6 	bl	8000b78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015ec:	79fb      	ldrb	r3, [r7, #7]

}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_IncTick+0x1c>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_IncTick+0x20>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4413      	add	r3, r2
 8001606:	4a03      	ldr	r2, [pc, #12]	; (8001614 <HAL_IncTick+0x1c>)
 8001608:	6013      	str	r3, [r2, #0]
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	20002664 	.word	0x20002664
 8001618:	20000008 	.word	0x20000008

0800161c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return uwTick;
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <HAL_GetTick+0x14>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	20002664 	.word	0x20002664

08001634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001650:	4013      	ands	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800165c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001666:	4a04      	ldr	r2, [pc, #16]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	60d3      	str	r3, [r2, #12]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <__NVIC_GetPriorityGrouping+0x18>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	f003 0307 	and.w	r3, r3, #7
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	db0b      	blt.n	80016c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 021f 	and.w	r2, r3, #31
 80016b0:	4907      	ldr	r1, [pc, #28]	; (80016d0 <__NVIC_EnableIRQ+0x38>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	095b      	lsrs	r3, r3, #5
 80016b8:	2001      	movs	r0, #1
 80016ba:	fa00 f202 	lsl.w	r2, r0, r2
 80016be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000e100 	.word	0xe000e100

080016d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	db0a      	blt.n	80016fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	490c      	ldr	r1, [pc, #48]	; (8001720 <__NVIC_SetPriority+0x4c>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	0112      	lsls	r2, r2, #4
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	440b      	add	r3, r1
 80016f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016fc:	e00a      	b.n	8001714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4908      	ldr	r1, [pc, #32]	; (8001724 <__NVIC_SetPriority+0x50>)
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	3b04      	subs	r3, #4
 800170c:	0112      	lsls	r2, r2, #4
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	440b      	add	r3, r1
 8001712:	761a      	strb	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000e100 	.word	0xe000e100
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	; 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f1c3 0307 	rsb	r3, r3, #7
 8001742:	2b04      	cmp	r3, #4
 8001744:	bf28      	it	cs
 8001746:	2304      	movcs	r3, #4
 8001748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3304      	adds	r3, #4
 800174e:	2b06      	cmp	r3, #6
 8001750:	d902      	bls.n	8001758 <NVIC_EncodePriority+0x30>
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3b03      	subs	r3, #3
 8001756:	e000      	b.n	800175a <NVIC_EncodePriority+0x32>
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	f04f 32ff 	mov.w	r2, #4294967295
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	401a      	ands	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001770:	f04f 31ff 	mov.w	r1, #4294967295
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	43d9      	mvns	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	4313      	orrs	r3, r2
         );
}
 8001782:	4618      	mov	r0, r3
 8001784:	3724      	adds	r7, #36	; 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b07      	cmp	r3, #7
 800179c:	d00f      	beq.n	80017be <HAL_NVIC_SetPriorityGrouping+0x2e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b06      	cmp	r3, #6
 80017a2:	d00c      	beq.n	80017be <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b05      	cmp	r3, #5
 80017a8:	d009      	beq.n	80017be <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d006      	beq.n	80017be <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d003      	beq.n	80017be <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017b6:	21a7      	movs	r1, #167	; 0xa7
 80017b8:	4804      	ldr	r0, [pc, #16]	; (80017cc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80017ba:	f7ff f8c4 	bl	8000946 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ff38 	bl	8001634 <__NVIC_SetPriorityGrouping>
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	0800b4fc 	.word	0x0800b4fc

080017d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
 80017dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b0f      	cmp	r3, #15
 80017e2:	d903      	bls.n	80017ec <HAL_NVIC_SetPriority+0x1c>
 80017e4:	21bf      	movs	r1, #191	; 0xbf
 80017e6:	480e      	ldr	r0, [pc, #56]	; (8001820 <HAL_NVIC_SetPriority+0x50>)
 80017e8:	f7ff f8ad 	bl	8000946 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	2b0f      	cmp	r3, #15
 80017f0:	d903      	bls.n	80017fa <HAL_NVIC_SetPriority+0x2a>
 80017f2:	21c0      	movs	r1, #192	; 0xc0
 80017f4:	480a      	ldr	r0, [pc, #40]	; (8001820 <HAL_NVIC_SetPriority+0x50>)
 80017f6:	f7ff f8a6 	bl	8000946 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 80017fa:	f7ff ff3f 	bl	800167c <__NVIC_GetPriorityGrouping>
 80017fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	68b9      	ldr	r1, [r7, #8]
 8001804:	6978      	ldr	r0, [r7, #20]
 8001806:	f7ff ff8f 	bl	8001728 <NVIC_EncodePriority>
 800180a:	4602      	mov	r2, r0
 800180c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff5e 	bl	80016d4 <__NVIC_SetPriority>
}
 8001818:	bf00      	nop
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	0800b4fc 	.word	0x0800b4fc

08001824 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	2b00      	cmp	r3, #0
 8001834:	da03      	bge.n	800183e <HAL_NVIC_EnableIRQ+0x1a>
 8001836:	21d3      	movs	r1, #211	; 0xd3
 8001838:	4805      	ldr	r0, [pc, #20]	; (8001850 <HAL_NVIC_EnableIRQ+0x2c>)
 800183a:	f7ff f884 	bl	8000946 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff28 	bl	8001698 <__NVIC_EnableIRQ>
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	0800b4fc 	.word	0x0800b4fc

08001854 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e16b      	b.n	8001b3e <HAL_DMA_Init+0x2ea>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a97      	ldr	r2, [pc, #604]	; (8001ac8 <HAL_DMA_Init+0x274>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d03a      	beq.n	80018e6 <HAL_DMA_Init+0x92>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a95      	ldr	r2, [pc, #596]	; (8001acc <HAL_DMA_Init+0x278>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d035      	beq.n	80018e6 <HAL_DMA_Init+0x92>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a94      	ldr	r2, [pc, #592]	; (8001ad0 <HAL_DMA_Init+0x27c>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d030      	beq.n	80018e6 <HAL_DMA_Init+0x92>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a92      	ldr	r2, [pc, #584]	; (8001ad4 <HAL_DMA_Init+0x280>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d02b      	beq.n	80018e6 <HAL_DMA_Init+0x92>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a91      	ldr	r2, [pc, #580]	; (8001ad8 <HAL_DMA_Init+0x284>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d026      	beq.n	80018e6 <HAL_DMA_Init+0x92>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a8f      	ldr	r2, [pc, #572]	; (8001adc <HAL_DMA_Init+0x288>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d021      	beq.n	80018e6 <HAL_DMA_Init+0x92>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a8e      	ldr	r2, [pc, #568]	; (8001ae0 <HAL_DMA_Init+0x28c>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d01c      	beq.n	80018e6 <HAL_DMA_Init+0x92>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a8c      	ldr	r2, [pc, #560]	; (8001ae4 <HAL_DMA_Init+0x290>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d017      	beq.n	80018e6 <HAL_DMA_Init+0x92>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a8b      	ldr	r2, [pc, #556]	; (8001ae8 <HAL_DMA_Init+0x294>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d012      	beq.n	80018e6 <HAL_DMA_Init+0x92>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a89      	ldr	r2, [pc, #548]	; (8001aec <HAL_DMA_Init+0x298>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d00d      	beq.n	80018e6 <HAL_DMA_Init+0x92>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a88      	ldr	r2, [pc, #544]	; (8001af0 <HAL_DMA_Init+0x29c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d008      	beq.n	80018e6 <HAL_DMA_Init+0x92>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a86      	ldr	r2, [pc, #536]	; (8001af4 <HAL_DMA_Init+0x2a0>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d003      	beq.n	80018e6 <HAL_DMA_Init+0x92>
 80018de:	21a3      	movs	r1, #163	; 0xa3
 80018e0:	4885      	ldr	r0, [pc, #532]	; (8001af8 <HAL_DMA_Init+0x2a4>)
 80018e2:	f7ff f830 	bl	8000946 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00c      	beq.n	8001908 <HAL_DMA_Init+0xb4>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b10      	cmp	r3, #16
 80018f4:	d008      	beq.n	8001908 <HAL_DMA_Init+0xb4>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018fe:	d003      	beq.n	8001908 <HAL_DMA_Init+0xb4>
 8001900:	21a4      	movs	r1, #164	; 0xa4
 8001902:	487d      	ldr	r0, [pc, #500]	; (8001af8 <HAL_DMA_Init+0x2a4>)
 8001904:	f7ff f81f 	bl	8000946 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	2b40      	cmp	r3, #64	; 0x40
 800190e:	d007      	beq.n	8001920 <HAL_DMA_Init+0xcc>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_DMA_Init+0xcc>
 8001918:	21a5      	movs	r1, #165	; 0xa5
 800191a:	4877      	ldr	r0, [pc, #476]	; (8001af8 <HAL_DMA_Init+0x2a4>)
 800191c:	f7ff f813 	bl	8000946 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	2b80      	cmp	r3, #128	; 0x80
 8001926:	d007      	beq.n	8001938 <HAL_DMA_Init+0xe4>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_DMA_Init+0xe4>
 8001930:	21a6      	movs	r1, #166	; 0xa6
 8001932:	4871      	ldr	r0, [pc, #452]	; (8001af8 <HAL_DMA_Init+0x2a4>)
 8001934:	f7ff f807 	bl	8000946 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00d      	beq.n	800195c <HAL_DMA_Init+0x108>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001948:	d008      	beq.n	800195c <HAL_DMA_Init+0x108>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001952:	d003      	beq.n	800195c <HAL_DMA_Init+0x108>
 8001954:	21a7      	movs	r1, #167	; 0xa7
 8001956:	4868      	ldr	r0, [pc, #416]	; (8001af8 <HAL_DMA_Init+0x2a4>)
 8001958:	f7fe fff5 	bl	8000946 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00d      	beq.n	8001980 <HAL_DMA_Init+0x12c>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800196c:	d008      	beq.n	8001980 <HAL_DMA_Init+0x12c>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001976:	d003      	beq.n	8001980 <HAL_DMA_Init+0x12c>
 8001978:	21a8      	movs	r1, #168	; 0xa8
 800197a:	485f      	ldr	r0, [pc, #380]	; (8001af8 <HAL_DMA_Init+0x2a4>)
 800197c:	f7fe ffe3 	bl	8000946 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d007      	beq.n	8001998 <HAL_DMA_Init+0x144>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	2b20      	cmp	r3, #32
 800198e:	d003      	beq.n	8001998 <HAL_DMA_Init+0x144>
 8001990:	21a9      	movs	r1, #169	; 0xa9
 8001992:	4859      	ldr	r0, [pc, #356]	; (8001af8 <HAL_DMA_Init+0x2a4>)
 8001994:	f7fe ffd7 	bl	8000946 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d012      	beq.n	80019c6 <HAL_DMA_Init+0x172>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019a8:	d00d      	beq.n	80019c6 <HAL_DMA_Init+0x172>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019b2:	d008      	beq.n	80019c6 <HAL_DMA_Init+0x172>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80019bc:	d003      	beq.n	80019c6 <HAL_DMA_Init+0x172>
 80019be:	21aa      	movs	r1, #170	; 0xaa
 80019c0:	484d      	ldr	r0, [pc, #308]	; (8001af8 <HAL_DMA_Init+0x2a4>)
 80019c2:	f7fe ffc0 	bl	8000946 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b73      	cmp	r3, #115	; 0x73
 80019cc:	d903      	bls.n	80019d6 <HAL_DMA_Init+0x182>
 80019ce:	21ac      	movs	r1, #172	; 0xac
 80019d0:	4849      	ldr	r0, [pc, #292]	; (8001af8 <HAL_DMA_Init+0x2a4>)
 80019d2:	f7fe ffb8 	bl	8000946 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	4b47      	ldr	r3, [pc, #284]	; (8001afc <HAL_DMA_Init+0x2a8>)
 80019de:	429a      	cmp	r2, r3
 80019e0:	d80f      	bhi.n	8001a02 <HAL_DMA_Init+0x1ae>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	4b45      	ldr	r3, [pc, #276]	; (8001b00 <HAL_DMA_Init+0x2ac>)
 80019ea:	4413      	add	r3, r2
 80019ec:	4a45      	ldr	r2, [pc, #276]	; (8001b04 <HAL_DMA_Init+0x2b0>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	091b      	lsrs	r3, r3, #4
 80019f4:	009a      	lsls	r2, r3, #2
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a42      	ldr	r2, [pc, #264]	; (8001b08 <HAL_DMA_Init+0x2b4>)
 80019fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001a00:	e00e      	b.n	8001a20 <HAL_DMA_Init+0x1cc>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	4b40      	ldr	r3, [pc, #256]	; (8001b0c <HAL_DMA_Init+0x2b8>)
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4a3d      	ldr	r2, [pc, #244]	; (8001b04 <HAL_DMA_Init+0x2b0>)
 8001a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a12:	091b      	lsrs	r3, r3, #4
 8001a14:	009a      	lsls	r2, r3, #2
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a3c      	ldr	r2, [pc, #240]	; (8001b10 <HAL_DMA_Init+0x2bc>)
 8001a1e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2202      	movs	r2, #2
 8001a24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f9e0 	bl	8001e38 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a80:	d102      	bne.n	8001a88 <HAL_DMA_Init+0x234>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a9c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d036      	beq.n	8001b14 <HAL_DMA_Init+0x2c0>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d832      	bhi.n	8001b14 <HAL_DMA_Init+0x2c0>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 fa00 	bl	8001eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	e02e      	b.n	8001b26 <HAL_DMA_Init+0x2d2>
 8001ac8:	40020008 	.word	0x40020008
 8001acc:	4002001c 	.word	0x4002001c
 8001ad0:	40020030 	.word	0x40020030
 8001ad4:	40020044 	.word	0x40020044
 8001ad8:	40020058 	.word	0x40020058
 8001adc:	4002006c 	.word	0x4002006c
 8001ae0:	40020408 	.word	0x40020408
 8001ae4:	4002041c 	.word	0x4002041c
 8001ae8:	40020430 	.word	0x40020430
 8001aec:	40020444 	.word	0x40020444
 8001af0:	40020458 	.word	0x40020458
 8001af4:	4002046c 	.word	0x4002046c
 8001af8:	0800b538 	.word	0x0800b538
 8001afc:	40020407 	.word	0x40020407
 8001b00:	bffdfff8 	.word	0xbffdfff8
 8001b04:	cccccccd 	.word	0xcccccccd
 8001b08:	40020000 	.word	0x40020000
 8001b0c:	bffdfbf8 	.word	0xbffdfbf8
 8001b10:	40020400 	.word	0x40020400
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop

08001b48 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
 8001b54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_DMA_Start_IT+0x20>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b66:	d304      	bcc.n	8001b72 <HAL_DMA_Start_IT+0x2a>
 8001b68:	f240 11ab 	movw	r1, #427	; 0x1ab
 8001b6c:	483a      	ldr	r0, [pc, #232]	; (8001c58 <HAL_DMA_Start_IT+0x110>)
 8001b6e:	f7fe feea 	bl	8000946 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_DMA_Start_IT+0x38>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e066      	b.n	8001c4e <HAL_DMA_Start_IT+0x106>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d155      	bne.n	8001c40 <HAL_DMA_Start_IT+0xf8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2202      	movs	r2, #2
 8001b98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0201 	bic.w	r2, r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	68b9      	ldr	r1, [r7, #8]
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 f8fe 	bl	8001dba <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d008      	beq.n	8001bd8 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 020e 	orr.w	r2, r2, #14
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	e00f      	b.n	8001bf8 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0204 	bic.w	r2, r2, #4
 8001be6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 020a 	orr.w	r2, r2, #10
 8001bf6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d007      	beq.n	8001c16 <HAL_DMA_Start_IT+0xce>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c14:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d007      	beq.n	8001c2e <HAL_DMA_Start_IT+0xe6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c2c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 0201 	orr.w	r2, r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	e005      	b.n	8001c4c <HAL_DMA_Start_IT+0x104>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	0800b538 	.word	0x0800b538

08001c5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c78:	f003 031f 	and.w	r3, r3, #31
 8001c7c:	2204      	movs	r2, #4
 8001c7e:	409a      	lsls	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d026      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0x7a>
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d021      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0320 	and.w	r3, r3, #32
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d107      	bne.n	8001cb0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0204 	bic.w	r2, r2, #4
 8001cae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb4:	f003 021f 	and.w	r2, r3, #31
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	2104      	movs	r1, #4
 8001cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d071      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001cd4:	e06c      	b.n	8001db0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	f003 031f 	and.w	r3, r3, #31
 8001cde:	2202      	movs	r2, #2
 8001ce0:	409a      	lsls	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d02e      	beq.n	8001d48 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d029      	beq.n	8001d48 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0320 	and.w	r3, r3, #32
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10b      	bne.n	8001d1a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 020a 	bic.w	r2, r2, #10
 8001d10:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	f003 021f 	and.w	r2, r3, #31
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	2102      	movs	r1, #2
 8001d28:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d038      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001d46:	e033      	b.n	8001db0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4c:	f003 031f 	and.w	r3, r3, #31
 8001d50:	2208      	movs	r2, #8
 8001d52:	409a      	lsls	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d02a      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d025      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 020e 	bic.w	r2, r2, #14
 8001d74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	f003 021f 	and.w	r2, r3, #31
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	2101      	movs	r1, #1
 8001d84:	fa01 f202 	lsl.w	r2, r1, r2
 8001d88:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d004      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001db0:	bf00      	nop
 8001db2:	bf00      	nop
}
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b085      	sub	sp, #20
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001dd0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d004      	beq.n	8001de4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001de2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de8:	f003 021f 	and.w	r2, r3, #31
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	2101      	movs	r1, #1
 8001df2:	fa01 f202 	lsl.w	r2, r1, r2
 8001df6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b10      	cmp	r3, #16
 8001e06:	d108      	bne.n	8001e1a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e18:	e007      	b.n	8001e2a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	60da      	str	r2, [r3, #12]
}
 8001e2a:	bf00      	nop
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b087      	sub	sp, #28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d802      	bhi.n	8001e52 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001e4c:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	e001      	b.n	8001e56 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001e54:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	3b08      	subs	r3, #8
 8001e62:	4a12      	ldr	r2, [pc, #72]	; (8001eac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001e64:	fba2 2303 	umull	r2, r3, r2, r3
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e70:	089b      	lsrs	r3, r3, #2
 8001e72:	009a      	lsls	r2, r3, #2
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4413      	add	r3, r2
 8001e78:	461a      	mov	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a0b      	ldr	r2, [pc, #44]	; (8001eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001e82:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 031f 	and.w	r3, r3, #31
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e92:	bf00      	nop
 8001e94:	371c      	adds	r7, #28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40020407 	.word	0x40020407
 8001ea4:	40020800 	.word	0x40020800
 8001ea8:	40020820 	.word	0x40020820
 8001eac:	cccccccd 	.word	0xcccccccd
 8001eb0:	40020880 	.word	0x40020880

08001eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	461a      	mov	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001ed6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	f003 031f 	and.w	r3, r3, #31
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	1000823f 	.word	0x1000823f
 8001ef8:	40020940 	.word	0x40020940

08001efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f10:	d01b      	beq.n	8001f4a <HAL_GPIO_Init+0x4e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a3b      	ldr	r2, [pc, #236]	; (8002004 <HAL_GPIO_Init+0x108>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d017      	beq.n	8001f4a <HAL_GPIO_Init+0x4e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a3a      	ldr	r2, [pc, #232]	; (8002008 <HAL_GPIO_Init+0x10c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d013      	beq.n	8001f4a <HAL_GPIO_Init+0x4e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a39      	ldr	r2, [pc, #228]	; (800200c <HAL_GPIO_Init+0x110>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00f      	beq.n	8001f4a <HAL_GPIO_Init+0x4e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a38      	ldr	r2, [pc, #224]	; (8002010 <HAL_GPIO_Init+0x114>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00b      	beq.n	8001f4a <HAL_GPIO_Init+0x4e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a37      	ldr	r2, [pc, #220]	; (8002014 <HAL_GPIO_Init+0x118>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d007      	beq.n	8001f4a <HAL_GPIO_Init+0x4e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a36      	ldr	r2, [pc, #216]	; (8002018 <HAL_GPIO_Init+0x11c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x4e>
 8001f42:	21b1      	movs	r1, #177	; 0xb1
 8001f44:	4835      	ldr	r0, [pc, #212]	; (800201c <HAL_GPIO_Init+0x120>)
 8001f46:	f7fe fcfe 	bl	8000946 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_GPIO_Init+0x64>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	0c1b      	lsrs	r3, r3, #16
 8001f5a:	041b      	lsls	r3, r3, #16
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_GPIO_Init+0x6c>
 8001f60:	21b2      	movs	r1, #178	; 0xb2
 8001f62:	482e      	ldr	r0, [pc, #184]	; (800201c <HAL_GPIO_Init+0x120>)
 8001f64:	f7fe fcef 	bl	8000946 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d035      	beq.n	8001fdc <HAL_GPIO_Init+0xe0>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d031      	beq.n	8001fdc <HAL_GPIO_Init+0xe0>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b11      	cmp	r3, #17
 8001f7e:	d02d      	beq.n	8001fdc <HAL_GPIO_Init+0xe0>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d029      	beq.n	8001fdc <HAL_GPIO_Init+0xe0>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b12      	cmp	r3, #18
 8001f8e:	d025      	beq.n	8001fdc <HAL_GPIO_Init+0xe0>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	4a22      	ldr	r2, [pc, #136]	; (8002020 <HAL_GPIO_Init+0x124>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d020      	beq.n	8001fdc <HAL_GPIO_Init+0xe0>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	4a21      	ldr	r2, [pc, #132]	; (8002024 <HAL_GPIO_Init+0x128>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d01b      	beq.n	8001fdc <HAL_GPIO_Init+0xe0>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4a1f      	ldr	r2, [pc, #124]	; (8002028 <HAL_GPIO_Init+0x12c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d016      	beq.n	8001fdc <HAL_GPIO_Init+0xe0>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	4a1e      	ldr	r2, [pc, #120]	; (800202c <HAL_GPIO_Init+0x130>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d011      	beq.n	8001fdc <HAL_GPIO_Init+0xe0>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <HAL_GPIO_Init+0x134>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00c      	beq.n	8001fdc <HAL_GPIO_Init+0xe0>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4a1b      	ldr	r2, [pc, #108]	; (8002034 <HAL_GPIO_Init+0x138>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d007      	beq.n	8001fdc <HAL_GPIO_Init+0xe0>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0xe0>
 8001fd4:	21b3      	movs	r1, #179	; 0xb3
 8001fd6:	4811      	ldr	r0, [pc, #68]	; (800201c <HAL_GPIO_Init+0x120>)
 8001fd8:	f7fe fcb5 	bl	8000946 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 81d2 	beq.w	800238a <HAL_GPIO_Init+0x48e>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	f000 81cd 	beq.w	800238a <HAL_GPIO_Init+0x48e>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	f000 81c8 	beq.w	800238a <HAL_GPIO_Init+0x48e>
 8001ffa:	21b4      	movs	r1, #180	; 0xb4
 8001ffc:	4807      	ldr	r0, [pc, #28]	; (800201c <HAL_GPIO_Init+0x120>)
 8001ffe:	f7fe fca2 	bl	8000946 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002002:	e1c2      	b.n	800238a <HAL_GPIO_Init+0x48e>
 8002004:	48000400 	.word	0x48000400
 8002008:	48000800 	.word	0x48000800
 800200c:	48000c00 	.word	0x48000c00
 8002010:	48001000 	.word	0x48001000
 8002014:	48001400 	.word	0x48001400
 8002018:	48001800 	.word	0x48001800
 800201c:	0800b570 	.word	0x0800b570
 8002020:	10110000 	.word	0x10110000
 8002024:	10210000 	.word	0x10210000
 8002028:	10310000 	.word	0x10310000
 800202c:	10120000 	.word	0x10120000
 8002030:	10220000 	.word	0x10220000
 8002034:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2101      	movs	r1, #1
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	fa01 f303 	lsl.w	r3, r1, r3
 8002044:	4013      	ands	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 819a 	beq.w	8002384 <HAL_GPIO_Init+0x488>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d00b      	beq.n	8002070 <HAL_GPIO_Init+0x174>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b02      	cmp	r3, #2
 800205e:	d007      	beq.n	8002070 <HAL_GPIO_Init+0x174>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002064:	2b11      	cmp	r3, #17
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_Init+0x174>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b12      	cmp	r3, #18
 800206e:	d144      	bne.n	80020fa <HAL_GPIO_Init+0x1fe>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00f      	beq.n	8002098 <HAL_GPIO_Init+0x19c>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d00b      	beq.n	8002098 <HAL_GPIO_Init+0x19c>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	2b02      	cmp	r3, #2
 8002086:	d007      	beq.n	8002098 <HAL_GPIO_Init+0x19c>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	2b03      	cmp	r3, #3
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x19c>
 8002090:	21c4      	movs	r1, #196	; 0xc4
 8002092:	4881      	ldr	r0, [pc, #516]	; (8002298 <HAL_GPIO_Init+0x39c>)
 8002094:	f7fe fc57 	bl	8000946 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	2203      	movs	r2, #3
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4013      	ands	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020ce:	2201      	movs	r2, #1
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4013      	ands	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	091b      	lsrs	r3, r3, #4
 80020e4:	f003 0201 	and.w	r2, r3, #1
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	2203      	movs	r2, #3
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4013      	ands	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x23e>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b12      	cmp	r3, #18
 8002138:	d14b      	bne.n	80021d2 <HAL_GPIO_Init+0x2d6>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002140:	d01b      	beq.n	800217a <HAL_GPIO_Init+0x27e>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a55      	ldr	r2, [pc, #340]	; (800229c <HAL_GPIO_Init+0x3a0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d017      	beq.n	800217a <HAL_GPIO_Init+0x27e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a54      	ldr	r2, [pc, #336]	; (80022a0 <HAL_GPIO_Init+0x3a4>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d013      	beq.n	800217a <HAL_GPIO_Init+0x27e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a53      	ldr	r2, [pc, #332]	; (80022a4 <HAL_GPIO_Init+0x3a8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00f      	beq.n	800217a <HAL_GPIO_Init+0x27e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a52      	ldr	r2, [pc, #328]	; (80022a8 <HAL_GPIO_Init+0x3ac>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00b      	beq.n	800217a <HAL_GPIO_Init+0x27e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a51      	ldr	r2, [pc, #324]	; (80022ac <HAL_GPIO_Init+0x3b0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d007      	beq.n	800217a <HAL_GPIO_Init+0x27e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a50      	ldr	r2, [pc, #320]	; (80022b0 <HAL_GPIO_Init+0x3b4>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d003      	beq.n	800217a <HAL_GPIO_Init+0x27e>
 8002172:	21dc      	movs	r1, #220	; 0xdc
 8002174:	4848      	ldr	r0, [pc, #288]	; (8002298 <HAL_GPIO_Init+0x39c>)
 8002176:	f7fe fbe6 	bl	8000946 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	2b0f      	cmp	r3, #15
 8002180:	d903      	bls.n	800218a <HAL_GPIO_Init+0x28e>
 8002182:	21dd      	movs	r1, #221	; 0xdd
 8002184:	4844      	ldr	r0, [pc, #272]	; (8002298 <HAL_GPIO_Init+0x39c>)
 8002186:	f7fe fbde 	bl	8000946 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	08da      	lsrs	r2, r3, #3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3208      	adds	r2, #8
 8002192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002196:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	220f      	movs	r2, #15
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4013      	ands	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	691a      	ldr	r2, [r3, #16]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	08da      	lsrs	r2, r3, #3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3208      	adds	r2, #8
 80021cc:	6939      	ldr	r1, [r7, #16]
 80021ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	2203      	movs	r2, #3
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4013      	ands	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 0203 	and.w	r2, r3, #3
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 80b8 	beq.w	8002384 <HAL_GPIO_Init+0x488>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002214:	4b27      	ldr	r3, [pc, #156]	; (80022b4 <HAL_GPIO_Init+0x3b8>)
 8002216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002218:	4a26      	ldr	r2, [pc, #152]	; (80022b4 <HAL_GPIO_Init+0x3b8>)
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	6613      	str	r3, [r2, #96]	; 0x60
 8002220:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <HAL_GPIO_Init+0x3b8>)
 8002222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800222c:	4a22      	ldr	r2, [pc, #136]	; (80022b8 <HAL_GPIO_Init+0x3bc>)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	089b      	lsrs	r3, r3, #2
 8002232:	3302      	adds	r3, #2
 8002234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	220f      	movs	r2, #15
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002256:	d031      	beq.n	80022bc <HAL_GPIO_Init+0x3c0>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a10      	ldr	r2, [pc, #64]	; (800229c <HAL_GPIO_Init+0x3a0>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d019      	beq.n	8002294 <HAL_GPIO_Init+0x398>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a0f      	ldr	r2, [pc, #60]	; (80022a0 <HAL_GPIO_Init+0x3a4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d013      	beq.n	8002290 <HAL_GPIO_Init+0x394>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a0e      	ldr	r2, [pc, #56]	; (80022a4 <HAL_GPIO_Init+0x3a8>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d00d      	beq.n	800228c <HAL_GPIO_Init+0x390>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a0d      	ldr	r2, [pc, #52]	; (80022a8 <HAL_GPIO_Init+0x3ac>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d007      	beq.n	8002288 <HAL_GPIO_Init+0x38c>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a0c      	ldr	r2, [pc, #48]	; (80022ac <HAL_GPIO_Init+0x3b0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d101      	bne.n	8002284 <HAL_GPIO_Init+0x388>
 8002280:	2305      	movs	r3, #5
 8002282:	e01c      	b.n	80022be <HAL_GPIO_Init+0x3c2>
 8002284:	2306      	movs	r3, #6
 8002286:	e01a      	b.n	80022be <HAL_GPIO_Init+0x3c2>
 8002288:	2304      	movs	r3, #4
 800228a:	e018      	b.n	80022be <HAL_GPIO_Init+0x3c2>
 800228c:	2303      	movs	r3, #3
 800228e:	e016      	b.n	80022be <HAL_GPIO_Init+0x3c2>
 8002290:	2302      	movs	r3, #2
 8002292:	e014      	b.n	80022be <HAL_GPIO_Init+0x3c2>
 8002294:	2301      	movs	r3, #1
 8002296:	e012      	b.n	80022be <HAL_GPIO_Init+0x3c2>
 8002298:	0800b570 	.word	0x0800b570
 800229c:	48000400 	.word	0x48000400
 80022a0:	48000800 	.word	0x48000800
 80022a4:	48000c00 	.word	0x48000c00
 80022a8:	48001000 	.word	0x48001000
 80022ac:	48001400 	.word	0x48001400
 80022b0:	48001800 	.word	0x48001800
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40010000 	.word	0x40010000
 80022bc:	2300      	movs	r3, #0
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	f002 0203 	and.w	r2, r2, #3
 80022c4:	0092      	lsls	r2, r2, #2
 80022c6:	4093      	lsls	r3, r2
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022ce:	4935      	ldr	r1, [pc, #212]	; (80023a4 <HAL_GPIO_Init+0x4a8>)
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	089b      	lsrs	r3, r3, #2
 80022d4:	3302      	adds	r3, #2
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022dc:	4b32      	ldr	r3, [pc, #200]	; (80023a8 <HAL_GPIO_Init+0x4ac>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x404>
        {
          temp |= iocurrent;
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002300:	4a29      	ldr	r2, [pc, #164]	; (80023a8 <HAL_GPIO_Init+0x4ac>)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002306:	4b28      	ldr	r3, [pc, #160]	; (80023a8 <HAL_GPIO_Init+0x4ac>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	43db      	mvns	r3, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_Init+0x42e>
        {
          temp |= iocurrent;
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800232a:	4a1f      	ldr	r2, [pc, #124]	; (80023a8 <HAL_GPIO_Init+0x4ac>)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002330:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_GPIO_Init+0x4ac>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	43db      	mvns	r3, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x458>
        {
          temp |= iocurrent;
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <HAL_GPIO_Init+0x4ac>)
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800235a:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <HAL_GPIO_Init+0x4ac>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	43db      	mvns	r3, r3
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x482>
        {
          temp |= iocurrent;
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800237e:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <HAL_GPIO_Init+0x4ac>)
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	3301      	adds	r3, #1
 8002388:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	fa22 f303 	lsr.w	r3, r2, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	f47f ae4f 	bne.w	8002038 <HAL_GPIO_Init+0x13c>
  }
}
 800239a:	bf00      	nop
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40010000 	.word	0x40010000
 80023a8:	40010400 	.word	0x40010400

080023ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	807b      	strh	r3, [r7, #2]
 80023b8:	4613      	mov	r3, r2
 80023ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80023bc:	887b      	ldrh	r3, [r7, #2]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d004      	beq.n	80023cc <HAL_GPIO_WritePin+0x20>
 80023c2:	887b      	ldrh	r3, [r7, #2]
 80023c4:	0c1b      	lsrs	r3, r3, #16
 80023c6:	041b      	lsls	r3, r3, #16
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d004      	beq.n	80023d6 <HAL_GPIO_WritePin+0x2a>
 80023cc:	f240 119d 	movw	r1, #413	; 0x19d
 80023d0:	480d      	ldr	r0, [pc, #52]	; (8002408 <HAL_GPIO_WritePin+0x5c>)
 80023d2:	f7fe fab8 	bl	8000946 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80023d6:	787b      	ldrb	r3, [r7, #1]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d007      	beq.n	80023ec <HAL_GPIO_WritePin+0x40>
 80023dc:	787b      	ldrb	r3, [r7, #1]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d004      	beq.n	80023ec <HAL_GPIO_WritePin+0x40>
 80023e2:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80023e6:	4808      	ldr	r0, [pc, #32]	; (8002408 <HAL_GPIO_WritePin+0x5c>)
 80023e8:	f7fe faad 	bl	8000946 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80023ec:	787b      	ldrb	r3, [r7, #1]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023f2:	887a      	ldrh	r2, [r7, #2]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023f8:	e002      	b.n	8002400 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023fa:	887a      	ldrh	r2, [r7, #2]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	0800b570 	.word	0x0800b570

0800240c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800240c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800240e:	b08b      	sub	sp, #44	; 0x2c
 8002410:	af06      	add	r7, sp, #24
 8002412:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e0b6      	b.n	800258c <HAL_PCD_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a5c      	ldr	r2, [pc, #368]	; (8002594 <HAL_PCD_Init+0x188>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d003      	beq.n	8002430 <HAL_PCD_Init+0x24>
 8002428:	2183      	movs	r1, #131	; 0x83
 800242a:	485b      	ldr	r0, [pc, #364]	; (8002598 <HAL_PCD_Init+0x18c>)
 800242c:	f7fe fa8b 	bl	8000946 <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d106      	bne.n	800244a <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f008 fce7 	bl	800ae18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2203      	movs	r2, #3
 800244e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f004 fd23 	bl	8006ea2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245c:	2300      	movs	r3, #0
 800245e:	73fb      	strb	r3, [r7, #15]
 8002460:	e035      	b.n	80024ce <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	015b      	lsls	r3, r3, #5
 8002468:	4413      	add	r3, r2
 800246a:	3329      	adds	r3, #41	; 0x29
 800246c:	2201      	movs	r2, #1
 800246e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	015b      	lsls	r3, r3, #5
 8002476:	4413      	add	r3, r2
 8002478:	3328      	adds	r3, #40	; 0x28
 800247a:	7bfa      	ldrb	r2, [r7, #15]
 800247c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	7bfa      	ldrb	r2, [r7, #15]
 8002482:	b291      	uxth	r1, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	015b      	lsls	r3, r3, #5
 8002488:	4413      	add	r3, r2
 800248a:	3336      	adds	r3, #54	; 0x36
 800248c:	460a      	mov	r2, r1
 800248e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	015b      	lsls	r3, r3, #5
 8002496:	4413      	add	r3, r2
 8002498:	332b      	adds	r3, #43	; 0x2b
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	015b      	lsls	r3, r3, #5
 80024a4:	4413      	add	r3, r2
 80024a6:	3338      	adds	r3, #56	; 0x38
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	015b      	lsls	r3, r3, #5
 80024b2:	4413      	add	r3, r2
 80024b4:	333c      	adds	r3, #60	; 0x3c
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	3302      	adds	r3, #2
 80024c0:	015b      	lsls	r3, r3, #5
 80024c2:	4413      	add	r3, r2
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	3301      	adds	r3, #1
 80024cc:	73fb      	strb	r3, [r7, #15]
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d3c4      	bcc.n	8002462 <HAL_PCD_Init+0x56>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024d8:	2300      	movs	r3, #0
 80024da:	73fb      	strb	r3, [r7, #15]
 80024dc:	e031      	b.n	8002542 <HAL_PCD_Init+0x136>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	015b      	lsls	r3, r3, #5
 80024e4:	4413      	add	r3, r2
 80024e6:	f203 1329 	addw	r3, r3, #297	; 0x129
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	015b      	lsls	r3, r3, #5
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80024fa:	7bfa      	ldrb	r2, [r7, #15]
 80024fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	015b      	lsls	r3, r3, #5
 8002504:	4413      	add	r3, r2
 8002506:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	015b      	lsls	r3, r3, #5
 8002514:	4413      	add	r3, r2
 8002516:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	015b      	lsls	r3, r3, #5
 8002524:	4413      	add	r3, r2
 8002526:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	330a      	adds	r3, #10
 8002534:	015b      	lsls	r3, r3, #5
 8002536:	4413      	add	r3, r2
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	3301      	adds	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
 8002542:	7bfa      	ldrb	r2, [r7, #15]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	429a      	cmp	r2, r3
 800254a:	d3c8      	bcc.n	80024de <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	603b      	str	r3, [r7, #0]
 8002552:	687e      	ldr	r6, [r7, #4]
 8002554:	466d      	mov	r5, sp
 8002556:	f106 0410 	add.w	r4, r6, #16
 800255a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800255c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800255e:	6823      	ldr	r3, [r4, #0]
 8002560:	602b      	str	r3, [r5, #0]
 8002562:	1d33      	adds	r3, r6, #4
 8002564:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002566:	6838      	ldr	r0, [r7, #0]
 8002568:	f004 fcb6 	bl	8006ed8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d102      	bne.n	800258a <HAL_PCD_Init+0x17e>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 fe3a 	bl	80031fe <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002594:	40005c00 	.word	0x40005c00
 8002598:	0800b5ac 	.word	0x0800b5ac

0800259c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_PCD_Start+0x16>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e012      	b.n	80025d8 <HAL_PCD_Start+0x3c>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f005 fcd6 	bl	8007f70 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f004 fc51 	bl	8006e70 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f005 fcd6 	bl	8007f9e <USB_ReadInterrupts>
 80025f2:	4603      	mov	r3, r0
 80025f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025fc:	d102      	bne.n	8002604 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 fb34 	bl	8002c6c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f005 fcc8 	bl	8007f9e <USB_ReadInterrupts>
 800260e:	4603      	mov	r3, r0
 8002610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002618:	d112      	bne.n	8002640 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002622:	b29a      	uxth	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800262c:	b292      	uxth	r2, r2
 800262e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f008 fc87 	bl	800af46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002638:	2100      	movs	r1, #0
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f91e 	bl	800287c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f005 fcaa 	bl	8007f9e <USB_ReadInterrupts>
 800264a:	4603      	mov	r3, r0
 800264c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002650:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002654:	d10b      	bne.n	800266e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800265e:	b29a      	uxth	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002668:	b292      	uxth	r2, r2
 800266a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f005 fc93 	bl	8007f9e <USB_ReadInterrupts>
 8002678:	4603      	mov	r3, r0
 800267a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800267e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002682:	d10b      	bne.n	800269c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800268c:	b29a      	uxth	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002696:	b292      	uxth	r2, r2
 8002698:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f005 fc7c 	bl	8007f9e <USB_ReadInterrupts>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b0:	d133      	bne.n	800271a <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0204 	bic.w	r2, r2, #4
 80026c4:	b292      	uxth	r2, r2
 80026c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0208 	bic.w	r2, r2, #8
 80026dc:	b292      	uxth	r2, r2
 80026de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d107      	bne.n	80026fc <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026f4:	2100      	movs	r1, #0
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f008 fe16 	bl	800b328 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f008 fc5b 	bl	800afb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800270a:	b29a      	uxth	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002714:	b292      	uxth	r2, r2
 8002716:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f005 fc3d 	bl	8007f9e <USB_ReadInterrupts>
 8002724:	4603      	mov	r3, r0
 8002726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800272a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800272e:	d126      	bne.n	800277e <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002738:	b29a      	uxth	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0208 	orr.w	r2, r2, #8
 8002742:	b292      	uxth	r2, r2
 8002744:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002750:	b29a      	uxth	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800275a:	b292      	uxth	r2, r2
 800275c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002768:	b29a      	uxth	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0204 	orr.w	r2, r2, #4
 8002772:	b292      	uxth	r2, r2
 8002774:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f008 fc03 	bl	800af84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f005 fc0b 	bl	8007f9e <USB_ReadInterrupts>
 8002788:	4603      	mov	r3, r0
 800278a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278e:	2b80      	cmp	r3, #128	; 0x80
 8002790:	d13f      	bne.n	8002812 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800279a:	b29a      	uxth	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027a4:	b292      	uxth	r2, r2
 80027a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d12b      	bne.n	800280c <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027bc:	b29a      	uxth	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0204 	orr.w	r2, r2, #4
 80027c6:	b292      	uxth	r2, r2
 80027c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0208 	orr.w	r2, r2, #8
 80027de:	b292      	uxth	r2, r2
 80027e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	089b      	lsrs	r3, r3, #2
 80027f8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002802:	2101      	movs	r1, #1
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f008 fd8f 	bl	800b328 <HAL_PCDEx_LPM_Callback>
 800280a:	e002      	b.n	8002812 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f008 fbb9 	bl	800af84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f005 fbc1 	bl	8007f9e <USB_ReadInterrupts>
 800281c:	4603      	mov	r3, r0
 800281e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002826:	d10e      	bne.n	8002846 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002830:	b29a      	uxth	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800283a:	b292      	uxth	r2, r2
 800283c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f008 fb72 	bl	800af2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f005 fba7 	bl	8007f9e <USB_ReadInterrupts>
 8002850:	4603      	mov	r3, r0
 8002852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800285a:	d10b      	bne.n	8002874 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002864:	b29a      	uxth	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800286e:	b292      	uxth	r2, r2
 8002870:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_PCD_SetAddress+0x1a>
 8002892:	2302      	movs	r3, #2
 8002894:	e013      	b.n	80028be <HAL_PCD_SetAddress+0x42>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	78fa      	ldrb	r2, [r7, #3]
 80028ac:	4611      	mov	r1, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f005 fb4a 	bl	8007f48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	4608      	mov	r0, r1
 80028d0:	4611      	mov	r1, r2
 80028d2:	461a      	mov	r2, r3
 80028d4:	4603      	mov	r3, r0
 80028d6:	70fb      	strb	r3, [r7, #3]
 80028d8:	460b      	mov	r3, r1
 80028da:	803b      	strh	r3, [r7, #0]
 80028dc:	4613      	mov	r3, r2
 80028de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	da0b      	bge.n	8002904 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028ec:	78fb      	ldrb	r3, [r7, #3]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	015b      	lsls	r3, r3, #5
 80028f4:	3328      	adds	r3, #40	; 0x28
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	4413      	add	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2201      	movs	r2, #1
 8002900:	705a      	strb	r2, [r3, #1]
 8002902:	e00b      	b.n	800291c <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	015b      	lsls	r3, r3, #5
 800290c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	4413      	add	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	b2da      	uxtb	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002928:	883a      	ldrh	r2, [r7, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	78ba      	ldrb	r2, [r7, #2]
 8002932:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	785b      	ldrb	r3, [r3, #1]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d004      	beq.n	8002946 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002946:	78bb      	ldrb	r3, [r7, #2]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d102      	bne.n	8002952 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_PCD_EP_Open+0x9a>
 800295c:	2302      	movs	r3, #2
 800295e:	e00e      	b.n	800297e <HAL_PCD_EP_Open+0xb8>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68f9      	ldr	r1, [r7, #12]
 800296e:	4618      	mov	r0, r3
 8002970:	f004 fad6 	bl	8006f20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800297c:	7afb      	ldrb	r3, [r7, #11]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	460b      	mov	r3, r1
 8002990:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002992:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002996:	2b00      	cmp	r3, #0
 8002998:	da0b      	bge.n	80029b2 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	015b      	lsls	r3, r3, #5
 80029a2:	3328      	adds	r3, #40	; 0x28
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	4413      	add	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	705a      	strb	r2, [r3, #1]
 80029b0:	e00b      	b.n	80029ca <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	015b      	lsls	r3, r3, #5
 80029ba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_PCD_EP_Close+0x5e>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e00e      	b.n	8002a02 <HAL_PCD_EP_Close+0x7c>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68f9      	ldr	r1, [r7, #12]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f004 fd84 	bl	8007500 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b086      	sub	sp, #24
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	603b      	str	r3, [r7, #0]
 8002a16:	460b      	mov	r3, r1
 8002a18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a1a:	7afb      	ldrb	r3, [r7, #11]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	015b      	lsls	r3, r3, #5
 8002a22:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4413      	add	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2200      	movs	r2, #0
 8002a42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a44:	7afb      	ldrb	r3, [r7, #11]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a50:	7afb      	ldrb	r3, [r7, #11]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6979      	ldr	r1, [r7, #20]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f004 fee3 	bl	800782c <USB_EPStartXfer>
 8002a66:	e005      	b.n	8002a74 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6979      	ldr	r1, [r7, #20]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f004 fedc 	bl	800782c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	460b      	mov	r3, r1
 8002a88:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a8a:	78fb      	ldrb	r3, [r7, #3]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	330a      	adds	r3, #10
 8002a94:	015b      	lsls	r3, r3, #5
 8002a96:	4413      	add	r3, r2
 8002a98:	3304      	adds	r3, #4
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ab8:	7afb      	ldrb	r3, [r7, #11]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	015b      	lsls	r3, r3, #5
 8002ac0:	3328      	adds	r3, #40	; 0x28
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2201      	movs	r2, #1
 8002ade:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ae0:	7afb      	ldrb	r3, [r7, #11]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002aec:	7afb      	ldrb	r3, [r7, #11]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d106      	bne.n	8002b04 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6979      	ldr	r1, [r7, #20]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f004 fe95 	bl	800782c <USB_EPStartXfer>
 8002b02:	e005      	b.n	8002b10 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6979      	ldr	r1, [r7, #20]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f004 fe8e 	bl	800782c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	460b      	mov	r3, r1
 8002b24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	f003 0207 	and.w	r2, r3, #7
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d901      	bls.n	8002b38 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e046      	b.n	8002bc6 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	da0b      	bge.n	8002b58 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	015b      	lsls	r3, r3, #5
 8002b48:	3328      	adds	r3, #40	; 0x28
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2201      	movs	r2, #1
 8002b54:	705a      	strb	r2, [r3, #1]
 8002b56:	e009      	b.n	8002b6c <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b58:	78fb      	ldrb	r3, [r7, #3]
 8002b5a:	015b      	lsls	r3, r3, #5
 8002b5c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	4413      	add	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_PCD_EP_SetStall+0x72>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e01c      	b.n	8002bc6 <HAL_PCD_EP_SetStall+0xac>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68f9      	ldr	r1, [r7, #12]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f005 f8fe 	bl	8007d9c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ba0:	78fb      	ldrb	r3, [r7, #3]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d108      	bne.n	8002bbc <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	f005 fa01 	bl	8007fbe <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002bda:	78fb      	ldrb	r3, [r7, #3]
 8002bdc:	f003 020f 	and.w	r2, r3, #15
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d901      	bls.n	8002bec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e03a      	b.n	8002c62 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	da0b      	bge.n	8002c0c <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	015b      	lsls	r3, r3, #5
 8002bfc:	3328      	adds	r3, #40	; 0x28
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	4413      	add	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2201      	movs	r2, #1
 8002c08:	705a      	strb	r2, [r3, #1]
 8002c0a:	e00b      	b.n	8002c24 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	015b      	lsls	r3, r3, #5
 8002c14:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c2a:	78fb      	ldrb	r3, [r7, #3]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_PCD_EP_ClrStall+0x76>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e00e      	b.n	8002c62 <HAL_PCD_EP_ClrStall+0x94>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68f9      	ldr	r1, [r7, #12]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f005 f8e4 	bl	8007e20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002c6c:	b590      	push	{r4, r7, lr}
 8002c6e:	b089      	sub	sp, #36	; 0x24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c74:	e274      	b.n	8003160 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c7e:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002c80:	8afb      	ldrh	r3, [r7, #22]
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	f003 030f 	and.w	r3, r3, #15
 8002c88:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8002c8a:	7d7b      	ldrb	r3, [r7, #21]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f040 813c 	bne.w	8002f0a <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002c92:	8afb      	ldrh	r3, [r7, #22]
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d14f      	bne.n	8002d3c <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cac:	b29c      	uxth	r4, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3328      	adds	r3, #40	; 0x28
 8002cc2:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	695a      	ldr	r2, [r3, #20]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	441a      	add	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f008 f8fd 	bl	800aefc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8228 	beq.w	8003160 <PCD_EP_ISR_Handler+0x4f4>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f040 8223 	bne.w	8003160 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	b292      	uxth	r2, r2
 8002d2e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d3a:	e211      	b.n	8003160 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d42:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002d4c:	8a7b      	ldrh	r3, [r7, #18]
 8002d4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d031      	beq.n	8002dba <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4413      	add	r3, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6812      	ldr	r2, [r2, #0]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	f005 f961 	bl	8008058 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002da2:	4013      	ands	r3, r2
 8002da4:	b29c      	uxth	r4, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002dae:	b292      	uxth	r2, r2
 8002db0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f008 f878 	bl	800aea8 <HAL_PCD_SetupStageCallback>
 8002db8:	e1d2      	b.n	8003160 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002dba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f280 81ce 	bge.w	8003160 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	b29c      	uxth	r4, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002ddc:	b292      	uxth	r2, r2
 8002dde:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4413      	add	r3, r2
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d019      	beq.n	8002e44 <PCD_EP_ISR_Handler+0x1d8>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d015      	beq.n	8002e44 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6959      	ldr	r1, [r3, #20]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	f005 f915 	bl	8008058 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	441a      	add	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f008 f844 	bl	800aecc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	461c      	mov	r4, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	441c      	add	r4, r3
 8002e56:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8002e5a:	461c      	mov	r4, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10e      	bne.n	8002e82 <PCD_EP_ISR_Handler+0x216>
 8002e64:	8823      	ldrh	r3, [r4, #0]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	8023      	strh	r3, [r4, #0]
 8002e70:	8823      	ldrh	r3, [r4, #0]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	8023      	strh	r3, [r4, #0]
 8002e80:	e02d      	b.n	8002ede <PCD_EP_ISR_Handler+0x272>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b3e      	cmp	r3, #62	; 0x3e
 8002e88:	d812      	bhi.n	8002eb0 <PCD_EP_ISR_Handler+0x244>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	085b      	lsrs	r3, r3, #1
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <PCD_EP_ISR_Handler+0x238>
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	61bb      	str	r3, [r7, #24]
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	029b      	lsls	r3, r3, #10
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	8023      	strh	r3, [r4, #0]
 8002eae:	e016      	b.n	8002ede <PCD_EP_ISR_Handler+0x272>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	095b      	lsrs	r3, r3, #5
 8002eb6:	61bb      	str	r3, [r7, #24]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	f003 031f 	and.w	r3, r3, #31
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d102      	bne.n	8002eca <PCD_EP_ISR_Handler+0x25e>
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	61bb      	str	r3, [r7, #24]
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	029b      	lsls	r3, r3, #10
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ed6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eee:	b29c      	uxth	r4, r3
 8002ef0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002ef4:	b29c      	uxth	r4, r3
 8002ef6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002efa:	b29c      	uxth	r4, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4b9e      	ldr	r3, [pc, #632]	; (800317c <PCD_EP_ISR_Handler+0x510>)
 8002f02:	4323      	orrs	r3, r4
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	8013      	strh	r3, [r2, #0]
 8002f08:	e12a      	b.n	8003160 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	7d7b      	ldrb	r3, [r7, #21]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	881b      	ldrh	r3, [r3, #0]
 8002f18:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002f1a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f280 80cb 	bge.w	80030ba <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	7d7b      	ldrb	r3, [r7, #21]
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002f38:	4013      	ands	r3, r2
 8002f3a:	b29c      	uxth	r4, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	461a      	mov	r2, r3
 8002f42:	7d7b      	ldrb	r3, [r7, #21]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002f4c:	b292      	uxth	r2, r2
 8002f4e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002f50:	7d7b      	ldrb	r3, [r7, #21]
 8002f52:	015b      	lsls	r3, r3, #5
 8002f54:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	7b1b      	ldrb	r3, [r3, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d11f      	bne.n	8002fa6 <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	461a      	mov	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4413      	add	r3, r2
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6812      	ldr	r2, [r2, #0]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f8a:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002f8c:	8bfb      	ldrh	r3, [r7, #30]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d06e      	beq.n	8003070 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6959      	ldr	r1, [r3, #20]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	88da      	ldrh	r2, [r3, #6]
 8002f9e:	8bfb      	ldrh	r3, [r7, #30]
 8002fa0:	f005 f85a 	bl	8008058 <USB_ReadPMA>
 8002fa4:	e064      	b.n	8003070 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc0:	b29c      	uxth	r4, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	441a      	add	r2, r3
 8002fd0:	4b6b      	ldr	r3, [pc, #428]	; (8003180 <PCD_EP_ISR_Handler+0x514>)
 8002fd2:	4323      	orrs	r3, r4
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d01f      	beq.n	8003032 <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6812      	ldr	r2, [r2, #0]
 800300a:	4413      	add	r3, r2
 800300c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003016:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003018:	8bfb      	ldrh	r3, [r7, #30]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d028      	beq.n	8003070 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6959      	ldr	r1, [r3, #20]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	891a      	ldrh	r2, [r3, #8]
 800302a:	8bfb      	ldrh	r3, [r7, #30]
 800302c:	f005 f814 	bl	8008058 <USB_ReadPMA>
 8003030:	e01e      	b.n	8003070 <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800303a:	b29b      	uxth	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4413      	add	r3, r2
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6812      	ldr	r2, [r2, #0]
 800304a:	4413      	add	r3, r2
 800304c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003056:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003058:	8bfb      	ldrh	r3, [r7, #30]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d008      	beq.n	8003070 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6959      	ldr	r1, [r3, #20]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	895a      	ldrh	r2, [r3, #10]
 800306a:	8bfb      	ldrh	r3, [r7, #30]
 800306c:	f004 fff4 	bl	8008058 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	69da      	ldr	r2, [r3, #28]
 8003074:	8bfb      	ldrh	r3, [r7, #30]
 8003076:	441a      	add	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	695a      	ldr	r2, [r3, #20]
 8003080:	8bfb      	ldrh	r3, [r7, #30]
 8003082:	441a      	add	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d004      	beq.n	800309a <PCD_EP_ISR_Handler+0x42e>
 8003090:	8bfa      	ldrh	r2, [r7, #30]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	429a      	cmp	r2, r3
 8003098:	d206      	bcs.n	80030a8 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	4619      	mov	r1, r3
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f007 ff13 	bl	800aecc <HAL_PCD_DataOutStageCallback>
 80030a6:	e008      	b.n	80030ba <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	7819      	ldrb	r1, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	695a      	ldr	r2, [r3, #20]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff fca8 	bl	8002a0a <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80030ba:	8a7b      	ldrh	r3, [r7, #18]
 80030bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d04d      	beq.n	8003160 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 80030c4:	7d7b      	ldrb	r3, [r7, #21]
 80030c6:	015b      	lsls	r3, r3, #5
 80030c8:	3328      	adds	r3, #40	; 0x28
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	4413      	add	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	7d7b      	ldrb	r3, [r7, #21]
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	881b      	ldrh	r3, [r3, #0]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80030e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e8:	b29c      	uxth	r4, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	7d7b      	ldrb	r3, [r7, #21]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	441a      	add	r2, r3
 80030f6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80030fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030fe:	b29b      	uxth	r3, r3
 8003100:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800310a:	b29b      	uxth	r3, r3
 800310c:	461a      	mov	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6812      	ldr	r2, [r2, #0]
 800311a:	4413      	add	r3, r2
 800311c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	695a      	ldr	r2, [r3, #20]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	441a      	add	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d106      	bne.n	800314e <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	4619      	mov	r1, r3
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f007 fed8 	bl	800aefc <HAL_PCD_DataInStageCallback>
 800314c:	e008      	b.n	8003160 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	7819      	ldrb	r1, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	695a      	ldr	r2, [r3, #20]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff fca4 	bl	8002aa8 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003168:	b29b      	uxth	r3, r3
 800316a:	b21b      	sxth	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	f6ff ad82 	blt.w	8002c76 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3724      	adds	r7, #36	; 0x24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd90      	pop	{r4, r7, pc}
 800317c:	ffff8080 	.word	0xffff8080
 8003180:	ffff80c0 	.word	0xffff80c0

08003184 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	607b      	str	r3, [r7, #4]
 800318e:	460b      	mov	r3, r1
 8003190:	817b      	strh	r3, [r7, #10]
 8003192:	4613      	mov	r3, r2
 8003194:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003196:	897b      	ldrh	r3, [r7, #10]
 8003198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319c:	b29b      	uxth	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d008      	beq.n	80031b4 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031a2:	897b      	ldrh	r3, [r7, #10]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	015b      	lsls	r3, r3, #5
 80031aa:	3328      	adds	r3, #40	; 0x28
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4413      	add	r3, r2
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	e006      	b.n	80031c2 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031b4:	897b      	ldrh	r3, [r7, #10]
 80031b6:	015b      	lsls	r3, r3, #5
 80031b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	4413      	add	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80031c2:	893b      	ldrh	r3, [r7, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d107      	bne.n	80031d8 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2200      	movs	r2, #0
 80031cc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	80da      	strh	r2, [r3, #6]
 80031d6:	e00b      	b.n	80031f0 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2201      	movs	r2, #1
 80031dc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	0c1b      	lsrs	r3, r3, #16
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	371c      	adds	r7, #28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80031fe:	b480      	push	{r7}
 8003200:	b085      	sub	sp, #20
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003222:	b29b      	uxth	r3, r3
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003236:	b29b      	uxth	r3, r3
 8003238:	f043 0302 	orr.w	r3, r3, #2
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
	...

08003254 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <HAL_PWREx_ControlVoltageScaling+0x26>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003268:	d007      	beq.n	800327a <HAL_PWREx_ControlVoltageScaling+0x26>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003270:	d003      	beq.n	800327a <HAL_PWREx_ControlVoltageScaling+0x26>
 8003272:	219e      	movs	r1, #158	; 0x9e
 8003274:	484d      	ldr	r0, [pc, #308]	; (80033ac <HAL_PWREx_ControlVoltageScaling+0x158>)
 8003276:	f7fd fb66 	bl	8000946 <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d141      	bne.n	8003304 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003280:	4b4b      	ldr	r3, [pc, #300]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328c:	d131      	bne.n	80032f2 <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800328e:	4b48      	ldr	r3, [pc, #288]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003294:	4a46      	ldr	r2, [pc, #280]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003296:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800329a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800329e:	4b44      	ldr	r3, [pc, #272]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032a6:	4a42      	ldr	r2, [pc, #264]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80032a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032ae:	4b41      	ldr	r3, [pc, #260]	; (80033b4 <HAL_PWREx_ControlVoltageScaling+0x160>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2232      	movs	r2, #50	; 0x32
 80032b4:	fb02 f303 	mul.w	r3, r2, r3
 80032b8:	4a3f      	ldr	r2, [pc, #252]	; (80033b8 <HAL_PWREx_ControlVoltageScaling+0x164>)
 80032ba:	fba2 2303 	umull	r2, r3, r2, r3
 80032be:	0c9b      	lsrs	r3, r3, #18
 80032c0:	3301      	adds	r3, #1
 80032c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032c4:	e002      	b.n	80032cc <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	3b01      	subs	r3, #1
 80032ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032cc:	4b38      	ldr	r3, [pc, #224]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d8:	d102      	bne.n	80032e0 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f2      	bne.n	80032c6 <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032e0:	4b33      	ldr	r3, [pc, #204]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ec:	d158      	bne.n	80033a0 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e057      	b.n	80033a2 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032f2:	4b2f      	ldr	r3, [pc, #188]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80032f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032f8:	4a2d      	ldr	r2, [pc, #180]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80032fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032fe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003302:	e04d      	b.n	80033a0 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800330a:	d141      	bne.n	8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800330c:	4b28      	ldr	r3, [pc, #160]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003318:	d131      	bne.n	800337e <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800331a:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800331c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003320:	4a23      	ldr	r2, [pc, #140]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003326:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800332a:	4b21      	ldr	r3, [pc, #132]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003332:	4a1f      	ldr	r2, [pc, #124]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003334:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003338:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800333a:	4b1e      	ldr	r3, [pc, #120]	; (80033b4 <HAL_PWREx_ControlVoltageScaling+0x160>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2232      	movs	r2, #50	; 0x32
 8003340:	fb02 f303 	mul.w	r3, r2, r3
 8003344:	4a1c      	ldr	r2, [pc, #112]	; (80033b8 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8003346:	fba2 2303 	umull	r2, r3, r2, r3
 800334a:	0c9b      	lsrs	r3, r3, #18
 800334c:	3301      	adds	r3, #1
 800334e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003350:	e002      	b.n	8003358 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	3b01      	subs	r3, #1
 8003356:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003358:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003364:	d102      	bne.n	800336c <HAL_PWREx_ControlVoltageScaling+0x118>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1f2      	bne.n	8003352 <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800336c:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003378:	d112      	bne.n	80033a0 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e011      	b.n	80033a2 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800337e:	4b0c      	ldr	r3, [pc, #48]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003384:	4a0a      	ldr	r2, [pc, #40]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800338a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800338e:	e007      	b.n	80033a0 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003390:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003398:	4a05      	ldr	r2, [pc, #20]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800339a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800339e:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	0800b5e4 	.word	0x0800b5e4
 80033b0:	40007000 	.word	0x40007000
 80033b4:	20000000 	.word	0x20000000
 80033b8:	431bde83 	.word	0x431bde83

080033bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d102      	bne.n	80033d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	f000 bc03 	b.w	8003bd6 <HAL_RCC_OscConfig+0x81a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d022      	beq.n	800341e <HAL_RCC_OscConfig+0x62>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d11c      	bne.n	800341e <HAL_RCC_OscConfig+0x62>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d116      	bne.n	800341e <HAL_RCC_OscConfig+0x62>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0320 	and.w	r3, r3, #32
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d110      	bne.n	800341e <HAL_RCC_OscConfig+0x62>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10a      	bne.n	800341e <HAL_RCC_OscConfig+0x62>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d104      	bne.n	800341e <HAL_RCC_OscConfig+0x62>
 8003414:	f240 114b 	movw	r1, #331	; 0x14b
 8003418:	48a4      	ldr	r0, [pc, #656]	; (80036ac <HAL_RCC_OscConfig+0x2f0>)
 800341a:	f7fd fa94 	bl	8000946 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 8089 	beq.w	800353e <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00e      	beq.n	8003452 <HAL_RCC_OscConfig+0x96>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343c:	d009      	beq.n	8003452 <HAL_RCC_OscConfig+0x96>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003446:	d004      	beq.n	8003452 <HAL_RCC_OscConfig+0x96>
 8003448:	f240 1151 	movw	r1, #337	; 0x151
 800344c:	4897      	ldr	r0, [pc, #604]	; (80036ac <HAL_RCC_OscConfig+0x2f0>)
 800344e:	f7fd fa7a 	bl	8000946 <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003452:	4b97      	ldr	r3, [pc, #604]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800345c:	4b94      	ldr	r3, [pc, #592]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	2b0c      	cmp	r3, #12
 800346a:	d102      	bne.n	8003472 <HAL_RCC_OscConfig+0xb6>
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	2b03      	cmp	r3, #3
 8003470:	d002      	beq.n	8003478 <HAL_RCC_OscConfig+0xbc>
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2b08      	cmp	r3, #8
 8003476:	d10b      	bne.n	8003490 <HAL_RCC_OscConfig+0xd4>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003478:	4b8d      	ldr	r3, [pc, #564]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d05b      	beq.n	800353c <HAL_RCC_OscConfig+0x180>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d157      	bne.n	800353c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e3a2      	b.n	8003bd6 <HAL_RCC_OscConfig+0x81a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003498:	d106      	bne.n	80034a8 <HAL_RCC_OscConfig+0xec>
 800349a:	4b85      	ldr	r3, [pc, #532]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a84      	ldr	r2, [pc, #528]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 80034a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	e01d      	b.n	80034e4 <HAL_RCC_OscConfig+0x128>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034b0:	d10c      	bne.n	80034cc <HAL_RCC_OscConfig+0x110>
 80034b2:	4b7f      	ldr	r3, [pc, #508]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a7e      	ldr	r2, [pc, #504]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 80034b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	4b7c      	ldr	r3, [pc, #496]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a7b      	ldr	r2, [pc, #492]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 80034c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	e00b      	b.n	80034e4 <HAL_RCC_OscConfig+0x128>
 80034cc:	4b78      	ldr	r3, [pc, #480]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a77      	ldr	r2, [pc, #476]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 80034d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	4b75      	ldr	r3, [pc, #468]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a74      	ldr	r2, [pc, #464]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 80034de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d013      	beq.n	8003514 <HAL_RCC_OscConfig+0x158>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ec:	f7fe f896 	bl	800161c <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f4:	f7fe f892 	bl	800161c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b64      	cmp	r3, #100	; 0x64
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e367      	b.n	8003bd6 <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003506:	4b6a      	ldr	r3, [pc, #424]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCC_OscConfig+0x138>
 8003512:	e014      	b.n	800353e <HAL_RCC_OscConfig+0x182>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7fe f882 	bl	800161c <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800351c:	f7fe f87e 	bl	800161c <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b64      	cmp	r3, #100	; 0x64
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e353      	b.n	8003bd6 <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800352e:	4b60      	ldr	r3, [pc, #384]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x160>
 800353a:	e000      	b.n	800353e <HAL_RCC_OscConfig+0x182>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800353c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 808d 	beq.w	8003666 <HAL_RCC_OscConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d009      	beq.n	8003568 <HAL_RCC_OscConfig+0x1ac>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355c:	d004      	beq.n	8003568 <HAL_RCC_OscConfig+0x1ac>
 800355e:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8003562:	4852      	ldr	r0, [pc, #328]	; (80036ac <HAL_RCC_OscConfig+0x2f0>)
 8003564:	f7fd f9ef 	bl	8000946 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	2b7f      	cmp	r3, #127	; 0x7f
 800356e:	d904      	bls.n	800357a <HAL_RCC_OscConfig+0x1be>
 8003570:	f240 1187 	movw	r1, #391	; 0x187
 8003574:	484d      	ldr	r0, [pc, #308]	; (80036ac <HAL_RCC_OscConfig+0x2f0>)
 8003576:	f7fd f9e6 	bl	8000946 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800357a:	4b4d      	ldr	r3, [pc, #308]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003584:	4b4a      	ldr	r3, [pc, #296]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	2b0c      	cmp	r3, #12
 8003592:	d102      	bne.n	800359a <HAL_RCC_OscConfig+0x1de>
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d002      	beq.n	80035a0 <HAL_RCC_OscConfig+0x1e4>
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	2b04      	cmp	r3, #4
 800359e:	d11f      	bne.n	80035e0 <HAL_RCC_OscConfig+0x224>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035a0:	4b43      	ldr	r3, [pc, #268]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_OscConfig+0x1fc>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_RCC_OscConfig+0x1fc>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e30e      	b.n	8003bd6 <HAL_RCC_OscConfig+0x81a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b8:	4b3d      	ldr	r3, [pc, #244]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	061b      	lsls	r3, r3, #24
 80035c6:	493a      	ldr	r1, [pc, #232]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035cc:	4b39      	ldr	r3, [pc, #228]	; (80036b4 <HAL_RCC_OscConfig+0x2f8>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fd fafb 	bl	8000bcc <HAL_InitTick>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d043      	beq.n	8003664 <HAL_RCC_OscConfig+0x2a8>
        {
          return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e2fa      	b.n	8003bd6 <HAL_RCC_OscConfig+0x81a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d023      	beq.n	8003630 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e8:	4b31      	ldr	r3, [pc, #196]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a30      	ldr	r2, [pc, #192]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 80035ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fe f812 	bl	800161c <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x252>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035fc:	f7fe f80e 	bl	800161c <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x252>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e2e3      	b.n	8003bd6 <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800360e:	4b28      	ldr	r3, [pc, #160]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f0      	beq.n	80035fc <HAL_RCC_OscConfig+0x240>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361a:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	061b      	lsls	r3, r3, #24
 8003628:	4921      	ldr	r1, [pc, #132]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 800362a:	4313      	orrs	r3, r2
 800362c:	604b      	str	r3, [r1, #4]
 800362e:	e01a      	b.n	8003666 <HAL_RCC_OscConfig+0x2aa>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003630:	4b1f      	ldr	r3, [pc, #124]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a1e      	ldr	r2, [pc, #120]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 8003636:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800363a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7fd ffee 	bl	800161c <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x29a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003644:	f7fd ffea 	bl	800161c <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e2bf      	b.n	8003bd6 <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003656:	4b16      	ldr	r3, [pc, #88]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0x288>
 8003662:	e000      	b.n	8003666 <HAL_RCC_OscConfig+0x2aa>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003664:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d04f      	beq.n	8003712 <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d008      	beq.n	800368c <HAL_RCC_OscConfig+0x2d0>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d004      	beq.n	800368c <HAL_RCC_OscConfig+0x2d0>
 8003682:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8003686:	4809      	ldr	r0, [pc, #36]	; (80036ac <HAL_RCC_OscConfig+0x2f0>)
 8003688:	f7fd f95d 	bl	8000946 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d022      	beq.n	80036da <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003694:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 8003696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800369a:	4a05      	ldr	r2, [pc, #20]	; (80036b0 <HAL_RCC_OscConfig+0x2f4>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a4:	f7fd ffba 	bl	800161c <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036aa:	e00e      	b.n	80036ca <HAL_RCC_OscConfig+0x30e>
 80036ac:	0800b620 	.word	0x0800b620
 80036b0:	40021000 	.word	0x40021000
 80036b4:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b8:	f7fd ffb0 	bl	800161c <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e285      	b.n	8003bd6 <HAL_RCC_OscConfig+0x81a>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036ca:	4b95      	ldr	r3, [pc, #596]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 80036cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0ef      	beq.n	80036b8 <HAL_RCC_OscConfig+0x2fc>
 80036d8:	e01b      	b.n	8003712 <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036da:	4b91      	ldr	r3, [pc, #580]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 80036dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e0:	4a8f      	ldr	r2, [pc, #572]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ea:	f7fd ff97 	bl	800161c <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f2:	f7fd ff93 	bl	800161c <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e268      	b.n	8003bd6 <HAL_RCC_OscConfig+0x81a>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003704:	4b86      	ldr	r3, [pc, #536]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 8003706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1ef      	bne.n	80036f2 <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 80b7 	beq.w	800388e <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003720:	2300      	movs	r3, #0
 8003722:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00c      	beq.n	8003746 <HAL_RCC_OscConfig+0x38a>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d008      	beq.n	8003746 <HAL_RCC_OscConfig+0x38a>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b05      	cmp	r3, #5
 800373a:	d004      	beq.n	8003746 <HAL_RCC_OscConfig+0x38a>
 800373c:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 8003740:	4878      	ldr	r0, [pc, #480]	; (8003924 <HAL_RCC_OscConfig+0x568>)
 8003742:	f7fd f900 	bl	8000946 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003746:	4b76      	ldr	r3, [pc, #472]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 8003748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_RCC_OscConfig+0x39a>
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <HAL_RCC_OscConfig+0x39c>
 8003756:	2300      	movs	r3, #0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00d      	beq.n	8003778 <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800375c:	4b70      	ldr	r3, [pc, #448]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 800375e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003760:	4a6f      	ldr	r2, [pc, #444]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 8003762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003766:	6593      	str	r3, [r2, #88]	; 0x58
 8003768:	4b6d      	ldr	r3, [pc, #436]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 800376a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003774:	2301      	movs	r3, #1
 8003776:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003778:	4b6b      	ldr	r3, [pc, #428]	; (8003928 <HAL_RCC_OscConfig+0x56c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003780:	2b00      	cmp	r3, #0
 8003782:	d118      	bne.n	80037b6 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003784:	4b68      	ldr	r3, [pc, #416]	; (8003928 <HAL_RCC_OscConfig+0x56c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a67      	ldr	r2, [pc, #412]	; (8003928 <HAL_RCC_OscConfig+0x56c>)
 800378a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003790:	f7fd ff44 	bl	800161c <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003798:	f7fd ff40 	bl	800161c <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e215      	b.n	8003bd6 <HAL_RCC_OscConfig+0x81a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037aa:	4b5f      	ldr	r3, [pc, #380]	; (8003928 <HAL_RCC_OscConfig+0x56c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d108      	bne.n	80037d0 <HAL_RCC_OscConfig+0x414>
 80037be:	4b58      	ldr	r3, [pc, #352]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 80037c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c4:	4a56      	ldr	r2, [pc, #344]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037ce:	e024      	b.n	800381a <HAL_RCC_OscConfig+0x45e>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b05      	cmp	r3, #5
 80037d6:	d110      	bne.n	80037fa <HAL_RCC_OscConfig+0x43e>
 80037d8:	4b51      	ldr	r3, [pc, #324]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037de:	4a50      	ldr	r2, [pc, #320]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 80037e0:	f043 0304 	orr.w	r3, r3, #4
 80037e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037e8:	4b4d      	ldr	r3, [pc, #308]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ee:	4a4c      	ldr	r2, [pc, #304]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037f8:	e00f      	b.n	800381a <HAL_RCC_OscConfig+0x45e>
 80037fa:	4b49      	ldr	r3, [pc, #292]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 80037fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003800:	4a47      	ldr	r2, [pc, #284]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 8003802:	f023 0301 	bic.w	r3, r3, #1
 8003806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800380a:	4b45      	ldr	r3, [pc, #276]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003810:	4a43      	ldr	r2, [pc, #268]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 8003812:	f023 0304 	bic.w	r3, r3, #4
 8003816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d016      	beq.n	8003850 <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003822:	f7fd fefb 	bl	800161c <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003828:	e00a      	b.n	8003840 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382a:	f7fd fef7 	bl	800161c <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	f241 3288 	movw	r2, #5000	; 0x1388
 8003838:	4293      	cmp	r3, r2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e1ca      	b.n	8003bd6 <HAL_RCC_OscConfig+0x81a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003840:	4b37      	ldr	r3, [pc, #220]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 8003842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0ed      	beq.n	800382a <HAL_RCC_OscConfig+0x46e>
 800384e:	e015      	b.n	800387c <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003850:	f7fd fee4 	bl	800161c <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003856:	e00a      	b.n	800386e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003858:	f7fd fee0 	bl	800161c <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	f241 3288 	movw	r2, #5000	; 0x1388
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e1b3      	b.n	8003bd6 <HAL_RCC_OscConfig+0x81a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800386e:	4b2c      	ldr	r3, [pc, #176]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 8003870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1ed      	bne.n	8003858 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800387c:	7ffb      	ldrb	r3, [r7, #31]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d105      	bne.n	800388e <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003882:	4b27      	ldr	r3, [pc, #156]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 8003884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003886:	4a26      	ldr	r2, [pc, #152]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 8003888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800388c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0320 	and.w	r3, r3, #32
 8003896:	2b00      	cmp	r3, #0
 8003898:	d04f      	beq.n	800393a <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d008      	beq.n	80038b4 <HAL_RCC_OscConfig+0x4f8>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d004      	beq.n	80038b4 <HAL_RCC_OscConfig+0x4f8>
 80038aa:	f240 2141 	movw	r1, #577	; 0x241
 80038ae:	481d      	ldr	r0, [pc, #116]	; (8003924 <HAL_RCC_OscConfig+0x568>)
 80038b0:	f7fd f849 	bl	8000946 <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d01c      	beq.n	80038f6 <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038bc:	4b18      	ldr	r3, [pc, #96]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 80038be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038c2:	4a17      	ldr	r2, [pc, #92]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 80038c4:	f043 0301 	orr.w	r3, r3, #1
 80038c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038cc:	f7fd fea6 	bl	800161c <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038d4:	f7fd fea2 	bl	800161c <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e177      	b.n	8003bd6 <HAL_RCC_OscConfig+0x81a>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038e6:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 80038e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0ef      	beq.n	80038d4 <HAL_RCC_OscConfig+0x518>
 80038f4:	e021      	b.n	800393a <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038f6:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 80038f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038fc:	4a08      	ldr	r2, [pc, #32]	; (8003920 <HAL_RCC_OscConfig+0x564>)
 80038fe:	f023 0301 	bic.w	r3, r3, #1
 8003902:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003906:	f7fd fe89 	bl	800161c <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800390c:	e00e      	b.n	800392c <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800390e:	f7fd fe85 	bl	800161c <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d907      	bls.n	800392c <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e15a      	b.n	8003bd6 <HAL_RCC_OscConfig+0x81a>
 8003920:	40021000 	.word	0x40021000
 8003924:	0800b620 	.word	0x0800b620
 8003928:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800392c:	4ba6      	ldr	r3, [pc, #664]	; (8003bc8 <HAL_RCC_OscConfig+0x80c>)
 800392e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1e9      	bne.n	800390e <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00c      	beq.n	800395c <HAL_RCC_OscConfig+0x5a0>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d008      	beq.n	800395c <HAL_RCC_OscConfig+0x5a0>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d004      	beq.n	800395c <HAL_RCC_OscConfig+0x5a0>
 8003952:	f240 216a 	movw	r1, #618	; 0x26a
 8003956:	489d      	ldr	r0, [pc, #628]	; (8003bcc <HAL_RCC_OscConfig+0x810>)
 8003958:	f7fc fff5 	bl	8000946 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 8137 	beq.w	8003bd4 <HAL_RCC_OscConfig+0x818>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003966:	4b98      	ldr	r3, [pc, #608]	; (8003bc8 <HAL_RCC_OscConfig+0x80c>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 030c 	and.w	r3, r3, #12
 800396e:	2b0c      	cmp	r3, #12
 8003970:	f000 80ea 	beq.w	8003b48 <HAL_RCC_OscConfig+0x78c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	2b02      	cmp	r3, #2
 800397a:	f040 80bd 	bne.w	8003af8 <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00c      	beq.n	80039a0 <HAL_RCC_OscConfig+0x5e4>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d008      	beq.n	80039a0 <HAL_RCC_OscConfig+0x5e4>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	2b03      	cmp	r3, #3
 8003994:	d004      	beq.n	80039a0 <HAL_RCC_OscConfig+0x5e4>
 8003996:	f44f 711d 	mov.w	r1, #628	; 0x274
 800399a:	488c      	ldr	r0, [pc, #560]	; (8003bcc <HAL_RCC_OscConfig+0x810>)
 800399c:	f7fc ffd3 	bl	8000946 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_RCC_OscConfig+0x5f4>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	2b10      	cmp	r3, #16
 80039ae:	d904      	bls.n	80039ba <HAL_RCC_OscConfig+0x5fe>
 80039b0:	f240 2175 	movw	r1, #629	; 0x275
 80039b4:	4885      	ldr	r0, [pc, #532]	; (8003bcc <HAL_RCC_OscConfig+0x810>)
 80039b6:	f7fc ffc6 	bl	8000946 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	2b07      	cmp	r3, #7
 80039c0:	d903      	bls.n	80039ca <HAL_RCC_OscConfig+0x60e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c6:	2b7f      	cmp	r3, #127	; 0x7f
 80039c8:	d904      	bls.n	80039d4 <HAL_RCC_OscConfig+0x618>
 80039ca:	f240 2176 	movw	r1, #630	; 0x276
 80039ce:	487f      	ldr	r0, [pc, #508]	; (8003bcc <HAL_RCC_OscConfig+0x810>)
 80039d0:	f7fc ffb9 	bl	8000946 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d903      	bls.n	80039e4 <HAL_RCC_OscConfig+0x628>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	2b1f      	cmp	r3, #31
 80039e2:	d904      	bls.n	80039ee <HAL_RCC_OscConfig+0x632>
 80039e4:	f240 2177 	movw	r1, #631	; 0x277
 80039e8:	4878      	ldr	r0, [pc, #480]	; (8003bcc <HAL_RCC_OscConfig+0x810>)
 80039ea:	f7fc ffac 	bl	8000946 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d010      	beq.n	8003a18 <HAL_RCC_OscConfig+0x65c>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d00c      	beq.n	8003a18 <HAL_RCC_OscConfig+0x65c>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	2b06      	cmp	r3, #6
 8003a04:	d008      	beq.n	8003a18 <HAL_RCC_OscConfig+0x65c>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d004      	beq.n	8003a18 <HAL_RCC_OscConfig+0x65c>
 8003a0e:	f44f 711e 	mov.w	r1, #632	; 0x278
 8003a12:	486e      	ldr	r0, [pc, #440]	; (8003bcc <HAL_RCC_OscConfig+0x810>)
 8003a14:	f7fc ff97 	bl	8000946 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d010      	beq.n	8003a42 <HAL_RCC_OscConfig+0x686>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d00c      	beq.n	8003a42 <HAL_RCC_OscConfig+0x686>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2c:	2b06      	cmp	r3, #6
 8003a2e:	d008      	beq.n	8003a42 <HAL_RCC_OscConfig+0x686>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d004      	beq.n	8003a42 <HAL_RCC_OscConfig+0x686>
 8003a38:	f240 2179 	movw	r1, #633	; 0x279
 8003a3c:	4863      	ldr	r0, [pc, #396]	; (8003bcc <HAL_RCC_OscConfig+0x810>)
 8003a3e:	f7fc ff82 	bl	8000946 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a42:	4b61      	ldr	r3, [pc, #388]	; (8003bc8 <HAL_RCC_OscConfig+0x80c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a60      	ldr	r2, [pc, #384]	; (8003bc8 <HAL_RCC_OscConfig+0x80c>)
 8003a48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4e:	f7fd fde5 	bl	800161c <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a56:	f7fd fde1 	bl	800161c <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e0b6      	b.n	8003bd6 <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a68:	4b57      	ldr	r3, [pc, #348]	; (8003bc8 <HAL_RCC_OscConfig+0x80c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1f0      	bne.n	8003a56 <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a74:	4b54      	ldr	r3, [pc, #336]	; (8003bc8 <HAL_RCC_OscConfig+0x80c>)
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	4b55      	ldr	r3, [pc, #340]	; (8003bd0 <HAL_RCC_OscConfig+0x814>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6a11      	ldr	r1, [r2, #32]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a84:	3a01      	subs	r2, #1
 8003a86:	0112      	lsls	r2, r2, #4
 8003a88:	4311      	orrs	r1, r2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003a8e:	0212      	lsls	r2, r2, #8
 8003a90:	4311      	orrs	r1, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a96:	0852      	lsrs	r2, r2, #1
 8003a98:	3a01      	subs	r2, #1
 8003a9a:	0552      	lsls	r2, r2, #21
 8003a9c:	4311      	orrs	r1, r2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003aa2:	0852      	lsrs	r2, r2, #1
 8003aa4:	3a01      	subs	r2, #1
 8003aa6:	0652      	lsls	r2, r2, #25
 8003aa8:	4311      	orrs	r1, r2
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003aae:	06d2      	lsls	r2, r2, #27
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	4945      	ldr	r1, [pc, #276]	; (8003bc8 <HAL_RCC_OscConfig+0x80c>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab8:	4b43      	ldr	r3, [pc, #268]	; (8003bc8 <HAL_RCC_OscConfig+0x80c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a42      	ldr	r2, [pc, #264]	; (8003bc8 <HAL_RCC_OscConfig+0x80c>)
 8003abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ac2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ac4:	4b40      	ldr	r3, [pc, #256]	; (8003bc8 <HAL_RCC_OscConfig+0x80c>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4a3f      	ldr	r2, [pc, #252]	; (8003bc8 <HAL_RCC_OscConfig+0x80c>)
 8003aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ace:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fd fda4 	bl	800161c <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad8:	f7fd fda0 	bl	800161c <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e075      	b.n	8003bd6 <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aea:	4b37      	ldr	r3, [pc, #220]	; (8003bc8 <HAL_RCC_OscConfig+0x80c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x71c>
 8003af6:	e06d      	b.n	8003bd4 <HAL_RCC_OscConfig+0x818>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af8:	4b33      	ldr	r3, [pc, #204]	; (8003bc8 <HAL_RCC_OscConfig+0x80c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a32      	ldr	r2, [pc, #200]	; (8003bc8 <HAL_RCC_OscConfig+0x80c>)
 8003afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b02:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003b04:	4b30      	ldr	r3, [pc, #192]	; (8003bc8 <HAL_RCC_OscConfig+0x80c>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4a2f      	ldr	r2, [pc, #188]	; (8003bc8 <HAL_RCC_OscConfig+0x80c>)
 8003b0a:	f023 0303 	bic.w	r3, r3, #3
 8003b0e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003b10:	4b2d      	ldr	r3, [pc, #180]	; (8003bc8 <HAL_RCC_OscConfig+0x80c>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4a2c      	ldr	r2, [pc, #176]	; (8003bc8 <HAL_RCC_OscConfig+0x80c>)
 8003b16:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b1e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b20:	f7fd fd7c 	bl	800161c <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x77e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b28:	f7fd fd78 	bl	800161c <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x77e>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e04d      	b.n	8003bd6 <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b3a:	4b23      	ldr	r3, [pc, #140]	; (8003bc8 <HAL_RCC_OscConfig+0x80c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x76c>
 8003b46:	e045      	b.n	8003bd4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_RCC_OscConfig+0x798>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e040      	b.n	8003bd6 <HAL_RCC_OscConfig+0x81a>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003b54:	4b1c      	ldr	r3, [pc, #112]	; (8003bc8 <HAL_RCC_OscConfig+0x80c>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f003 0203 	and.w	r2, r3, #3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d12c      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	3b01      	subs	r3, #1
 8003b74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d123      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b84:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d11b      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d113      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	085b      	lsrs	r3, r3, #1
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d109      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb8:	085b      	lsrs	r3, r3, #1
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d008      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x818>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e007      	b.n	8003bd6 <HAL_RCC_OscConfig+0x81a>
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	0800b620 	.word	0x0800b620
 8003bd0:	019f800c 	.word	0x019f800c
      }
    }
  }
  }

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3720      	adds	r7, #32
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop

08003be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e1e2      	b.n	8003fbe <HAL_RCC_ClockConfig+0x3de>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 030f 	and.w	r3, r3, #15
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x30>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f023 030f 	bic.w	r3, r3, #15
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d004      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x3a>
 8003c10:	f240 3112 	movw	r1, #786	; 0x312
 8003c14:	4897      	ldr	r0, [pc, #604]	; (8003e74 <HAL_RCC_ClockConfig+0x294>)
 8003c16:	f7fc fe96 	bl	8000946 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d031      	beq.n	8003c84 <HAL_RCC_ClockConfig+0xa4>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d02e      	beq.n	8003c84 <HAL_RCC_ClockConfig+0xa4>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d02b      	beq.n	8003c84 <HAL_RCC_ClockConfig+0xa4>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	2b03      	cmp	r3, #3
 8003c30:	d028      	beq.n	8003c84 <HAL_RCC_ClockConfig+0xa4>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d025      	beq.n	8003c84 <HAL_RCC_ClockConfig+0xa4>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2b05      	cmp	r3, #5
 8003c3c:	d022      	beq.n	8003c84 <HAL_RCC_ClockConfig+0xa4>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b06      	cmp	r3, #6
 8003c42:	d01f      	beq.n	8003c84 <HAL_RCC_ClockConfig+0xa4>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2b07      	cmp	r3, #7
 8003c48:	d01c      	beq.n	8003c84 <HAL_RCC_ClockConfig+0xa4>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d019      	beq.n	8003c84 <HAL_RCC_ClockConfig+0xa4>
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2b09      	cmp	r3, #9
 8003c54:	d016      	beq.n	8003c84 <HAL_RCC_ClockConfig+0xa4>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b0a      	cmp	r3, #10
 8003c5a:	d013      	beq.n	8003c84 <HAL_RCC_ClockConfig+0xa4>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	2b0b      	cmp	r3, #11
 8003c60:	d010      	beq.n	8003c84 <HAL_RCC_ClockConfig+0xa4>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b0c      	cmp	r3, #12
 8003c66:	d00d      	beq.n	8003c84 <HAL_RCC_ClockConfig+0xa4>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	2b0d      	cmp	r3, #13
 8003c6c:	d00a      	beq.n	8003c84 <HAL_RCC_ClockConfig+0xa4>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b0e      	cmp	r3, #14
 8003c72:	d007      	beq.n	8003c84 <HAL_RCC_ClockConfig+0xa4>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b0f      	cmp	r3, #15
 8003c78:	d004      	beq.n	8003c84 <HAL_RCC_ClockConfig+0xa4>
 8003c7a:	f240 3113 	movw	r1, #787	; 0x313
 8003c7e:	487d      	ldr	r0, [pc, #500]	; (8003e74 <HAL_RCC_ClockConfig+0x294>)
 8003c80:	f7fc fe61 	bl	8000946 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c84:	4b7c      	ldr	r3, [pc, #496]	; (8003e78 <HAL_RCC_ClockConfig+0x298>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d910      	bls.n	8003cb4 <HAL_RCC_ClockConfig+0xd4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c92:	4b79      	ldr	r3, [pc, #484]	; (8003e78 <HAL_RCC_ClockConfig+0x298>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f023 020f 	bic.w	r2, r3, #15
 8003c9a:	4977      	ldr	r1, [pc, #476]	; (8003e78 <HAL_RCC_ClockConfig+0x298>)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca2:	4b75      	ldr	r3, [pc, #468]	; (8003e78 <HAL_RCC_ClockConfig+0x298>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0xd4>
    {
      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e184      	b.n	8003fbe <HAL_RCC_ClockConfig+0x3de>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 8085 	beq.w	8003dcc <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d00c      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x104>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d008      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x104>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d004      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x104>
 8003cda:	f240 312a 	movw	r1, #810	; 0x32a
 8003cde:	4865      	ldr	r0, [pc, #404]	; (8003e74 <HAL_RCC_ClockConfig+0x294>)
 8003ce0:	f7fc fe31 	bl	8000946 <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d129      	bne.n	8003d40 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cec:	4b63      	ldr	r3, [pc, #396]	; (8003e7c <HAL_RCC_ClockConfig+0x29c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_RCC_ClockConfig+0x11c>
      {
        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e160      	b.n	8003fbe <HAL_RCC_ClockConfig+0x3de>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003cfc:	f000 fa34 	bl	8004168 <RCC_GetSysClockFreqFromPLLSource>
 8003d00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4a5e      	ldr	r2, [pc, #376]	; (8003e80 <HAL_RCC_ClockConfig+0x2a0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d93f      	bls.n	8003d8a <HAL_RCC_ClockConfig+0x1aa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d0a:	4b5c      	ldr	r3, [pc, #368]	; (8003e7c <HAL_RCC_ClockConfig+0x29c>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d009      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x14a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d033      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x1aa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d12f      	bne.n	8003d8a <HAL_RCC_ClockConfig+0x1aa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d2a:	4b54      	ldr	r3, [pc, #336]	; (8003e7c <HAL_RCC_ClockConfig+0x29c>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d32:	4a52      	ldr	r2, [pc, #328]	; (8003e7c <HAL_RCC_ClockConfig+0x29c>)
 8003d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d3a:	2380      	movs	r3, #128	; 0x80
 8003d3c:	617b      	str	r3, [r7, #20]
 8003d3e:	e024      	b.n	8003d8a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d107      	bne.n	8003d58 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d48:	4b4c      	ldr	r3, [pc, #304]	; (8003e7c <HAL_RCC_ClockConfig+0x29c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d109      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e132      	b.n	8003fbe <HAL_RCC_ClockConfig+0x3de>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d58:	4b48      	ldr	r3, [pc, #288]	; (8003e7c <HAL_RCC_ClockConfig+0x29c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e12a      	b.n	8003fbe <HAL_RCC_ClockConfig+0x3de>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003d68:	f000 f93a 	bl	8003fe0 <HAL_RCC_GetSysClockFreq>
 8003d6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	4a43      	ldr	r2, [pc, #268]	; (8003e80 <HAL_RCC_ClockConfig+0x2a0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d909      	bls.n	8003d8a <HAL_RCC_ClockConfig+0x1aa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d76:	4b41      	ldr	r3, [pc, #260]	; (8003e7c <HAL_RCC_ClockConfig+0x29c>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d7e:	4a3f      	ldr	r2, [pc, #252]	; (8003e7c <HAL_RCC_ClockConfig+0x29c>)
 8003d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d84:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003d86:	2380      	movs	r3, #128	; 0x80
 8003d88:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d8a:	4b3c      	ldr	r3, [pc, #240]	; (8003e7c <HAL_RCC_ClockConfig+0x29c>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f023 0203 	bic.w	r2, r3, #3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	4939      	ldr	r1, [pc, #228]	; (8003e7c <HAL_RCC_ClockConfig+0x29c>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d9c:	f7fd fc3e 	bl	800161c <HAL_GetTick>
 8003da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da2:	e00a      	b.n	8003dba <HAL_RCC_ClockConfig+0x1da>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da4:	f7fd fc3a 	bl	800161c <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e101      	b.n	8003fbe <HAL_RCC_ClockConfig+0x3de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dba:	4b30      	ldr	r3, [pc, #192]	; (8003e7c <HAL_RCC_ClockConfig+0x29c>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 020c 	and.w	r2, r3, #12
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d1eb      	bne.n	8003da4 <HAL_RCC_ClockConfig+0x1c4>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d055      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x2a4>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x210>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003de4:	4b25      	ldr	r3, [pc, #148]	; (8003e7c <HAL_RCC_ClockConfig+0x29c>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	4a24      	ldr	r2, [pc, #144]	; (8003e7c <HAL_RCC_ClockConfig+0x29c>)
 8003dea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003dee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0308 	and.w	r3, r3, #8
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d007      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x22c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003dfc:	4b1f      	ldr	r3, [pc, #124]	; (8003e7c <HAL_RCC_ClockConfig+0x29c>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e04:	4a1d      	ldr	r2, [pc, #116]	; (8003e7c <HAL_RCC_ClockConfig+0x29c>)
 8003e06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d024      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x27e>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	2b80      	cmp	r3, #128	; 0x80
 8003e1a:	d020      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x27e>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b90      	cmp	r3, #144	; 0x90
 8003e22:	d01c      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x27e>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2ba0      	cmp	r3, #160	; 0xa0
 8003e2a:	d018      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x27e>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	2bb0      	cmp	r3, #176	; 0xb0
 8003e32:	d014      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x27e>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2bc0      	cmp	r3, #192	; 0xc0
 8003e3a:	d010      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x27e>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2bd0      	cmp	r3, #208	; 0xd0
 8003e42:	d00c      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x27e>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2be0      	cmp	r3, #224	; 0xe0
 8003e4a:	d008      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x27e>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2bf0      	cmp	r3, #240	; 0xf0
 8003e52:	d004      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x27e>
 8003e54:	f240 3181 	movw	r1, #897	; 0x381
 8003e58:	4806      	ldr	r0, [pc, #24]	; (8003e74 <HAL_RCC_ClockConfig+0x294>)
 8003e5a:	f7fc fd74 	bl	8000946 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e5e:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <HAL_RCC_ClockConfig+0x29c>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	4904      	ldr	r1, [pc, #16]	; (8003e7c <HAL_RCC_ClockConfig+0x29c>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	608b      	str	r3, [r1, #8]
 8003e70:	e011      	b.n	8003e96 <HAL_RCC_ClockConfig+0x2b6>
 8003e72:	bf00      	nop
 8003e74:	0800b620 	.word	0x0800b620
 8003e78:	40022000 	.word	0x40022000
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	04c4b400 	.word	0x04c4b400
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	2b80      	cmp	r3, #128	; 0x80
 8003e88:	d105      	bne.n	8003e96 <HAL_RCC_ClockConfig+0x2b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003e8a:	4b4f      	ldr	r3, [pc, #316]	; (8003fc8 <HAL_RCC_ClockConfig+0x3e8>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	4a4e      	ldr	r2, [pc, #312]	; (8003fc8 <HAL_RCC_ClockConfig+0x3e8>)
 8003e90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e94:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e96:	4b4d      	ldr	r3, [pc, #308]	; (8003fcc <HAL_RCC_ClockConfig+0x3ec>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d21d      	bcs.n	8003ee0 <HAL_RCC_ClockConfig+0x300>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea4:	4b49      	ldr	r3, [pc, #292]	; (8003fcc <HAL_RCC_ClockConfig+0x3ec>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f023 020f 	bic.w	r2, r3, #15
 8003eac:	4947      	ldr	r1, [pc, #284]	; (8003fcc <HAL_RCC_ClockConfig+0x3ec>)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003eb4:	f7fd fbb2 	bl	800161c <HAL_GetTick>
 8003eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eba:	e00a      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x2f2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ebc:	f7fd fbae 	bl	800161c <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_ClockConfig+0x2f2>
      {
        return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e075      	b.n	8003fbe <HAL_RCC_ClockConfig+0x3de>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed2:	4b3e      	ldr	r3, [pc, #248]	; (8003fcc <HAL_RCC_ClockConfig+0x3ec>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d1ed      	bne.n	8003ebc <HAL_RCC_ClockConfig+0x2dc>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d025      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x358>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d018      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x346>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efc:	d013      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x346>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003f06:	d00e      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x346>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f10:	d009      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x346>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f1a:	d004      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x346>
 8003f1c:	f240 31a3 	movw	r1, #931	; 0x3a3
 8003f20:	482b      	ldr	r0, [pc, #172]	; (8003fd0 <HAL_RCC_ClockConfig+0x3f0>)
 8003f22:	f7fc fd10 	bl	8000946 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f26:	4b28      	ldr	r3, [pc, #160]	; (8003fc8 <HAL_RCC_ClockConfig+0x3e8>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	4925      	ldr	r1, [pc, #148]	; (8003fc8 <HAL_RCC_ClockConfig+0x3e8>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d026      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d018      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x39e>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f54:	d013      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x39e>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003f5e:	d00e      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x39e>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f68:	d009      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x39e>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f72:	d004      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x39e>
 8003f74:	f240 31aa 	movw	r1, #938	; 0x3aa
 8003f78:	4815      	ldr	r0, [pc, #84]	; (8003fd0 <HAL_RCC_ClockConfig+0x3f0>)
 8003f7a:	f7fc fce4 	bl	8000946 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f7e:	4b12      	ldr	r3, [pc, #72]	; (8003fc8 <HAL_RCC_ClockConfig+0x3e8>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	490e      	ldr	r1, [pc, #56]	; (8003fc8 <HAL_RCC_ClockConfig+0x3e8>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f92:	f000 f825 	bl	8003fe0 <HAL_RCC_GetSysClockFreq>
 8003f96:	4601      	mov	r1, r0
 8003f98:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <HAL_RCC_ClockConfig+0x3e8>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	091b      	lsrs	r3, r3, #4
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	4a0c      	ldr	r2, [pc, #48]	; (8003fd4 <HAL_RCC_ClockConfig+0x3f4>)
 8003fa4:	5cd3      	ldrb	r3, [r2, r3]
 8003fa6:	f003 031f 	and.w	r3, r3, #31
 8003faa:	fa21 f303 	lsr.w	r3, r1, r3
 8003fae:	4a0a      	ldr	r2, [pc, #40]	; (8003fd8 <HAL_RCC_ClockConfig+0x3f8>)
 8003fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003fb2:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <HAL_RCC_ClockConfig+0x3fc>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fc fe08 	bl	8000bcc <HAL_InitTick>
 8003fbc:	4603      	mov	r3, r0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	40022000 	.word	0x40022000
 8003fd0:	0800b620 	.word	0x0800b620
 8003fd4:	0800b790 	.word	0x0800b790
 8003fd8:	20000000 	.word	0x20000000
 8003fdc:	20000004 	.word	0x20000004

08003fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003fe6:	4b2c      	ldr	r3, [pc, #176]	; (8004098 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d102      	bne.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ff2:	4b2a      	ldr	r3, [pc, #168]	; (800409c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	e047      	b.n	8004088 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ff8:	4b27      	ldr	r3, [pc, #156]	; (8004098 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 030c 	and.w	r3, r3, #12
 8004000:	2b08      	cmp	r3, #8
 8004002:	d102      	bne.n	800400a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004004:	4b25      	ldr	r3, [pc, #148]	; (800409c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004006:	613b      	str	r3, [r7, #16]
 8004008:	e03e      	b.n	8004088 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800400a:	4b23      	ldr	r3, [pc, #140]	; (8004098 <HAL_RCC_GetSysClockFreq+0xb8>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 030c 	and.w	r3, r3, #12
 8004012:	2b0c      	cmp	r3, #12
 8004014:	d136      	bne.n	8004084 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004016:	4b20      	ldr	r3, [pc, #128]	; (8004098 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004020:	4b1d      	ldr	r3, [pc, #116]	; (8004098 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	091b      	lsrs	r3, r3, #4
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	3301      	adds	r3, #1
 800402c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b03      	cmp	r3, #3
 8004032:	d10c      	bne.n	800404e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004034:	4a19      	ldr	r2, [pc, #100]	; (800409c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	fbb2 f3f3 	udiv	r3, r2, r3
 800403c:	4a16      	ldr	r2, [pc, #88]	; (8004098 <HAL_RCC_GetSysClockFreq+0xb8>)
 800403e:	68d2      	ldr	r2, [r2, #12]
 8004040:	0a12      	lsrs	r2, r2, #8
 8004042:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004046:	fb02 f303 	mul.w	r3, r2, r3
 800404a:	617b      	str	r3, [r7, #20]
      break;
 800404c:	e00c      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800404e:	4a13      	ldr	r2, [pc, #76]	; (800409c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	fbb2 f3f3 	udiv	r3, r2, r3
 8004056:	4a10      	ldr	r2, [pc, #64]	; (8004098 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004058:	68d2      	ldr	r2, [r2, #12]
 800405a:	0a12      	lsrs	r2, r2, #8
 800405c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004060:	fb02 f303 	mul.w	r3, r2, r3
 8004064:	617b      	str	r3, [r7, #20]
      break;
 8004066:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004068:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <HAL_RCC_GetSysClockFreq+0xb8>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	0e5b      	lsrs	r3, r3, #25
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	3301      	adds	r3, #1
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	e001      	b.n	8004088 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004088:	693b      	ldr	r3, [r7, #16]
}
 800408a:	4618      	mov	r0, r3
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40021000 	.word	0x40021000
 800409c:	00f42400 	.word	0x00f42400

080040a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040a4:	4b03      	ldr	r3, [pc, #12]	; (80040b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040a6:	681b      	ldr	r3, [r3, #0]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20000000 	.word	0x20000000

080040b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040bc:	f7ff fff0 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 80040c0:	4601      	mov	r1, r0
 80040c2:	4b06      	ldr	r3, [pc, #24]	; (80040dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	0adb      	lsrs	r3, r3, #11
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	4a04      	ldr	r2, [pc, #16]	; (80040e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040ce:	5cd3      	ldrb	r3, [r2, r3]
 80040d0:	f003 031f 	and.w	r3, r3, #31
 80040d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040d8:	4618      	mov	r0, r3
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40021000 	.word	0x40021000
 80040e0:	0800b7a0 	.word	0x0800b7a0

080040e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d104      	bne.n	80040fe <HAL_RCC_GetClockConfig+0x1a>
 80040f4:	f240 41d9 	movw	r1, #1241	; 0x4d9
 80040f8:	4818      	ldr	r0, [pc, #96]	; (800415c <HAL_RCC_GetClockConfig+0x78>)
 80040fa:	f7fc fc24 	bl	8000946 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d104      	bne.n	800410e <HAL_RCC_GetClockConfig+0x2a>
 8004104:	f240 41da 	movw	r1, #1242	; 0x4da
 8004108:	4814      	ldr	r0, [pc, #80]	; (800415c <HAL_RCC_GetClockConfig+0x78>)
 800410a:	f7fc fc1c 	bl	8000946 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	220f      	movs	r2, #15
 8004112:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004114:	4b12      	ldr	r3, [pc, #72]	; (8004160 <HAL_RCC_GetClockConfig+0x7c>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 0203 	and.w	r2, r3, #3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004120:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <HAL_RCC_GetClockConfig+0x7c>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800412c:	4b0c      	ldr	r3, [pc, #48]	; (8004160 <HAL_RCC_GetClockConfig+0x7c>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004138:	4b09      	ldr	r3, [pc, #36]	; (8004160 <HAL_RCC_GetClockConfig+0x7c>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	08db      	lsrs	r3, r3, #3
 800413e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004146:	4b07      	ldr	r3, [pc, #28]	; (8004164 <HAL_RCC_GetClockConfig+0x80>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 020f 	and.w	r2, r3, #15
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	601a      	str	r2, [r3, #0]
}
 8004152:	bf00      	nop
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	0800b620 	.word	0x0800b620
 8004160:	40021000 	.word	0x40021000
 8004164:	40022000 	.word	0x40022000

08004168 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800416e:	4b1e      	ldr	r3, [pc, #120]	; (80041e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004178:	4b1b      	ldr	r3, [pc, #108]	; (80041e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	091b      	lsrs	r3, r3, #4
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	3301      	adds	r3, #1
 8004184:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	2b03      	cmp	r3, #3
 800418a:	d10c      	bne.n	80041a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800418c:	4a17      	ldr	r2, [pc, #92]	; (80041ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	fbb2 f3f3 	udiv	r3, r2, r3
 8004194:	4a14      	ldr	r2, [pc, #80]	; (80041e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004196:	68d2      	ldr	r2, [r2, #12]
 8004198:	0a12      	lsrs	r2, r2, #8
 800419a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800419e:	fb02 f303 	mul.w	r3, r2, r3
 80041a2:	617b      	str	r3, [r7, #20]
    break;
 80041a4:	e00c      	b.n	80041c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041a6:	4a11      	ldr	r2, [pc, #68]	; (80041ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ae:	4a0e      	ldr	r2, [pc, #56]	; (80041e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041b0:	68d2      	ldr	r2, [r2, #12]
 80041b2:	0a12      	lsrs	r2, r2, #8
 80041b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041b8:	fb02 f303 	mul.w	r3, r2, r3
 80041bc:	617b      	str	r3, [r7, #20]
    break;
 80041be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041c0:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	0e5b      	lsrs	r3, r3, #25
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	3301      	adds	r3, #1
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80041da:	687b      	ldr	r3, [r7, #4]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	371c      	adds	r7, #28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	40021000 	.word	0x40021000
 80041ec:	00f42400 	.word	0x00f42400

080041f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041f8:	2300      	movs	r3, #0
 80041fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041fc:	2300      	movs	r3, #0
 80041fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d15d      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d157      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	d151      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b00      	cmp	r3, #0
 800422e:	d14b      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0320 	and.w	r3, r3, #32
 8004238:	2b00      	cmp	r3, #0
 800423a:	d145      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004244:	2b00      	cmp	r3, #0
 8004246:	d13f      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004250:	2b00      	cmp	r3, #0
 8004252:	d139      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425c:	2b00      	cmp	r3, #0
 800425e:	d133      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004268:	2b00      	cmp	r3, #0
 800426a:	d12d      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004274:	2b00      	cmp	r3, #0
 8004276:	d127      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004280:	2b00      	cmp	r3, #0
 8004282:	d121      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d11b      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d115      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10f      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d109      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d103      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80042c0:	2185      	movs	r1, #133	; 0x85
 80042c2:	4855      	ldr	r0, [pc, #340]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80042c4:	f7fc fb3f 	bl	8000946 <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 80b2 	beq.w	800443a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d6:	2300      	movs	r3, #0
 80042d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d012      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ea:	d00d      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f4:	d008      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042fe:	d003      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8004300:	218d      	movs	r1, #141	; 0x8d
 8004302:	4845      	ldr	r0, [pc, #276]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004304:	f7fc fb1f 	bl	8000946 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004308:	4b44      	ldr	r3, [pc, #272]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800430a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10d      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x140>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004314:	4b41      	ldr	r3, [pc, #260]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004318:	4a40      	ldr	r2, [pc, #256]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800431a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800431e:	6593      	str	r3, [r2, #88]	; 0x58
 8004320:	4b3e      	ldr	r3, [pc, #248]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800432c:	2301      	movs	r3, #1
 800432e:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004330:	4b3b      	ldr	r3, [pc, #236]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a3a      	ldr	r2, [pc, #232]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800433c:	f7fd f96e 	bl	800161c <HAL_GetTick>
 8004340:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004342:	e009      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004344:	f7fd f96a 	bl	800161c <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d902      	bls.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        ret = HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	74fb      	strb	r3, [r7, #19]
        break;
 8004356:	e005      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x174>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004358:	4b31      	ldr	r3, [pc, #196]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0ef      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x154>
      }
    }

    if(ret == HAL_OK)
 8004364:	7cfb      	ldrb	r3, [r7, #19]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d15c      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x234>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800436a:	4b2c      	ldr	r3, [pc, #176]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800436c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004374:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d01e      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	429a      	cmp	r2, r3
 8004384:	d019      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004386:	4b25      	ldr	r3, [pc, #148]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004390:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004392:	4b22      	ldr	r3, [pc, #136]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004398:	4a20      	ldr	r2, [pc, #128]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800439a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800439e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043a2:	4b1e      	ldr	r3, [pc, #120]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a8:	4a1c      	ldr	r2, [pc, #112]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043b2:	4a1a      	ldr	r2, [pc, #104]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d016      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x202>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c4:	f7fd f92a 	bl	800161c <HAL_GetTick>
 80043c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ca:	e00b      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043cc:	f7fd f926 	bl	800161c <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043da:	4293      	cmp	r3, r2
 80043dc:	d902      	bls.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
          {
            ret = HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	74fb      	strb	r3, [r7, #19]
            break;
 80043e2:	e006      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x202>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043e4:	4b0d      	ldr	r3, [pc, #52]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0ec      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
          }
        }
      }
      
      if(ret == HAL_OK)
 80043f2:	7cfb      	ldrb	r3, [r7, #19]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10b      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x220>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043f8:	4b08      	ldr	r3, [pc, #32]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	4905      	ldr	r1, [pc, #20]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004408:	4313      	orrs	r3, r2
 800440a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800440e:	e00b      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x238>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004410:	7cfb      	ldrb	r3, [r7, #19]
 8004412:	74bb      	strb	r3, [r7, #18]
 8004414:	e008      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004416:	bf00      	nop
 8004418:	0800b658 	.word	0x0800b658
 800441c:	40021000 	.word	0x40021000
 8004420:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004424:	7cfb      	ldrb	r3, [r7, #19]
 8004426:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004428:	7c7b      	ldrb	r3, [r7, #17]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d105      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x24a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800442e:	4ba7      	ldr	r3, [pc, #668]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004432:	4aa6      	ldr	r2, [pc, #664]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004438:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d01e      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00f      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d00b      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b03      	cmp	r3, #3
 800445c:	d007      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d003      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004466:	21e2      	movs	r1, #226	; 0xe2
 8004468:	4899      	ldr	r0, [pc, #612]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800446a:	f7fc fa6c 	bl	8000946 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800446e:	4b97      	ldr	r3, [pc, #604]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004474:	f023 0203 	bic.w	r2, r3, #3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	4993      	ldr	r1, [pc, #588]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d01e      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00f      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2b04      	cmp	r3, #4
 800449e:	d00b      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b0c      	cmp	r3, #12
 80044a6:	d007      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d003      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80044b0:	21ec      	movs	r1, #236	; 0xec
 80044b2:	4887      	ldr	r0, [pc, #540]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80044b4:	f7fc fa47 	bl	8000946 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044b8:	4b84      	ldr	r3, [pc, #528]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80044ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044be:	f023 020c 	bic.w	r2, r3, #12
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	4981      	ldr	r1, [pc, #516]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d01e      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00f      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	2b10      	cmp	r3, #16
 80044e8:	d00b      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	2b30      	cmp	r3, #48	; 0x30
 80044f0:	d007      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d003      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80044fa:	21f6      	movs	r1, #246	; 0xf6
 80044fc:	4874      	ldr	r0, [pc, #464]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80044fe:	f7fc fa22 	bl	8000946 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004502:	4b72      	ldr	r3, [pc, #456]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004508:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	496e      	ldr	r1, [pc, #440]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	2b00      	cmp	r3, #0
 8004522:	d01f      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d010      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	2b40      	cmp	r3, #64	; 0x40
 8004532:	d00c      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2bc0      	cmp	r3, #192	; 0xc0
 800453a:	d008      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	2b80      	cmp	r3, #128	; 0x80
 8004542:	d004      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004544:	f240 1101 	movw	r1, #257	; 0x101
 8004548:	4861      	ldr	r0, [pc, #388]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800454a:	f7fc f9fc 	bl	8000946 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800454e:	4b5f      	ldr	r3, [pc, #380]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004554:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	495b      	ldr	r1, [pc, #364]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800455e:	4313      	orrs	r3, r2
 8004560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0320 	and.w	r3, r3, #32
 800456c:	2b00      	cmp	r3, #0
 800456e:	d022      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d013      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004580:	d00e      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800458a:	d009      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004594:	d004      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8004596:	f44f 718d 	mov.w	r1, #282	; 0x11a
 800459a:	484d      	ldr	r0, [pc, #308]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800459c:	f7fc f9d3 	bl	8000946 <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045a0:	4b4a      	ldr	r3, [pc, #296]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	4947      	ldr	r1, [pc, #284]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d01d      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00e      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d2:	d009      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045dc:	d004      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80045de:	f44f 7192 	mov.w	r1, #292	; 0x124
 80045e2:	483b      	ldr	r0, [pc, #236]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80045e4:	f7fc f9af 	bl	8000946 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045e8:	4b38      	ldr	r3, [pc, #224]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80045ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	4935      	ldr	r1, [pc, #212]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004606:	2b00      	cmp	r3, #0
 8004608:	d01d      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00e      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800461a:	d009      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004624:	d004      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004626:	f44f 7197 	mov.w	r1, #302	; 0x12e
 800462a:	4829      	ldr	r0, [pc, #164]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800462c:	f7fc f98b 	bl	8000946 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004630:	4b26      	ldr	r3, [pc, #152]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004636:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	4923      	ldr	r1, [pc, #140]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464e:	2b00      	cmp	r3, #0
 8004650:	d01d      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x49e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00e      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004662:	d009      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800466c:	d004      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800466e:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004672:	4817      	ldr	r0, [pc, #92]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004674:	f7fc f967 	bl	8000946 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004678:	4b14      	ldr	r3, [pc, #80]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800467a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	4911      	ldr	r1, [pc, #68]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004696:	2b00      	cmp	r3, #0
 8004698:	d027      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x4fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d018      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046aa:	d013      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046b4:	d00e      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046be:	d009      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80046c0:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80046c4:	4802      	ldr	r0, [pc, #8]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80046c6:	f7fc f93e 	bl	8000946 <assert_failed>
 80046ca:	e003      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80046cc:	40021000 	.word	0x40021000
 80046d0:	0800b658 	.word	0x0800b658

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046d4:	4b94      	ldr	r3, [pc, #592]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80046d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046da:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	4991      	ldr	r1, [pc, #580]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d02d      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d013      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x536>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004706:	d00e      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x536>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004710:	d009      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x536>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004716:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800471a:	d004      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x536>
 800471c:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8004720:	4882      	ldr	r0, [pc, #520]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004722:	f7fc f910 	bl	8000946 <assert_failed>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004726:	4b80      	ldr	r3, [pc, #512]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004734:	497c      	ldr	r1, [pc, #496]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004740:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004744:	d105      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004746:	4b78      	ldr	r3, [pc, #480]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	4a77      	ldr	r2, [pc, #476]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800474c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004750:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800475a:	2b00      	cmp	r3, #0
 800475c:	d02d      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	2b00      	cmp	r3, #0
 8004764:	d013      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800476e:	d00e      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004778:	d009      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004782:	d004      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004784:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8004788:	4868      	ldr	r0, [pc, #416]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800478a:	f7fc f8dc 	bl	8000946 <assert_failed>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800478e:	4b66      	ldr	r3, [pc, #408]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004794:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	4962      	ldr	r1, [pc, #392]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047ac:	d105      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047ae:	4b5e      	ldr	r3, [pc, #376]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	4a5d      	ldr	r2, [pc, #372]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80047b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047b8:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d028      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00e      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047d6:	d009      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047e0:	d004      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 80047e2:	f240 117b 	movw	r1, #379	; 0x17b
 80047e6:	4851      	ldr	r0, [pc, #324]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80047e8:	f7fc f8ad 	bl	8000946 <assert_failed>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80047ec:	4b4e      	ldr	r3, [pc, #312]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80047ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	494b      	ldr	r1, [pc, #300]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004806:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800480a:	d105      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800480c:	4b46      	ldr	r3, [pc, #280]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	4a45      	ldr	r2, [pc, #276]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004816:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d023      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004828:	2b00      	cmp	r3, #0
 800482a:	d009      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004830:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004834:	d004      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004836:	f240 118d 	movw	r1, #397	; 0x18d
 800483a:	483c      	ldr	r0, [pc, #240]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800483c:	f7fc f883 	bl	8000946 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004840:	4b39      	ldr	r3, [pc, #228]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004846:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484e:	4936      	ldr	r1, [pc, #216]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800485e:	d105      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004860:	4b31      	ldr	r3, [pc, #196]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	4a30      	ldr	r2, [pc, #192]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004866:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800486a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d023      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487c:	2b00      	cmp	r3, #0
 800487e:	d009      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004884:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004888:	d004      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 800488a:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800488e:	4827      	ldr	r0, [pc, #156]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004890:	f7fc f859 	bl	8000946 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004894:	4b24      	ldr	r3, [pc, #144]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a2:	4921      	ldr	r1, [pc, #132]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048b2:	d105      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048b4:	4b1c      	ldr	r3, [pc, #112]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	4a1b      	ldr	r2, [pc, #108]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80048ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d028      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x72e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00e      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048dc:	d009      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048e6:	d004      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
 80048e8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80048ec:	480f      	ldr	r0, [pc, #60]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80048ee:	f7fc f82a 	bl	8000946 <assert_failed>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80048f2:	4b0d      	ldr	r3, [pc, #52]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80048f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004900:	4909      	ldr	r1, [pc, #36]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004910:	d105      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x72e>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004912:	4b05      	ldr	r3, [pc, #20]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	4a04      	ldr	r2, [pc, #16]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800491c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800491e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40021000 	.word	0x40021000
 800492c:	0800b658 	.word	0x0800b658

08004930 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e184      	b.n	8004c4c <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a9b      	ldr	r2, [pc, #620]	; (8004bb4 <HAL_SPI_Init+0x284>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d00e      	beq.n	800496a <HAL_SPI_Init+0x3a>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a99      	ldr	r2, [pc, #612]	; (8004bb8 <HAL_SPI_Init+0x288>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d009      	beq.n	800496a <HAL_SPI_Init+0x3a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a98      	ldr	r2, [pc, #608]	; (8004bbc <HAL_SPI_Init+0x28c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d004      	beq.n	800496a <HAL_SPI_Init+0x3a>
 8004960:	f240 1147 	movw	r1, #327	; 0x147
 8004964:	4896      	ldr	r0, [pc, #600]	; (8004bc0 <HAL_SPI_Init+0x290>)
 8004966:	f7fb ffee 	bl	8000946 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d009      	beq.n	8004986 <HAL_SPI_Init+0x56>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800497a:	d004      	beq.n	8004986 <HAL_SPI_Init+0x56>
 800497c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004980:	488f      	ldr	r0, [pc, #572]	; (8004bc0 <HAL_SPI_Init+0x290>)
 8004982:	f7fb ffe0 	bl	8000946 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00e      	beq.n	80049ac <HAL_SPI_Init+0x7c>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004996:	d009      	beq.n	80049ac <HAL_SPI_Init+0x7c>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a0:	d004      	beq.n	80049ac <HAL_SPI_Init+0x7c>
 80049a2:	f240 1149 	movw	r1, #329	; 0x149
 80049a6:	4886      	ldr	r0, [pc, #536]	; (8004bc0 <HAL_SPI_Init+0x290>)
 80049a8:	f7fb ffcd 	bl	8000946 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80049b4:	d040      	beq.n	8004a38 <HAL_SPI_Init+0x108>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80049be:	d03b      	beq.n	8004a38 <HAL_SPI_Init+0x108>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 80049c8:	d036      	beq.n	8004a38 <HAL_SPI_Init+0x108>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049d2:	d031      	beq.n	8004a38 <HAL_SPI_Init+0x108>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 80049dc:	d02c      	beq.n	8004a38 <HAL_SPI_Init+0x108>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80049e6:	d027      	beq.n	8004a38 <HAL_SPI_Init+0x108>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80049f0:	d022      	beq.n	8004a38 <HAL_SPI_Init+0x108>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049fa:	d01d      	beq.n	8004a38 <HAL_SPI_Init+0x108>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a04:	d018      	beq.n	8004a38 <HAL_SPI_Init+0x108>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a0e:	d013      	beq.n	8004a38 <HAL_SPI_Init+0x108>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004a18:	d00e      	beq.n	8004a38 <HAL_SPI_Init+0x108>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a22:	d009      	beq.n	8004a38 <HAL_SPI_Init+0x108>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a2c:	d004      	beq.n	8004a38 <HAL_SPI_Init+0x108>
 8004a2e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004a32:	4863      	ldr	r0, [pc, #396]	; (8004bc0 <HAL_SPI_Init+0x290>)
 8004a34:	f7fb ff87 	bl	8000946 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a40:	d00d      	beq.n	8004a5e <HAL_SPI_Init+0x12e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d009      	beq.n	8004a5e <HAL_SPI_Init+0x12e>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a52:	d004      	beq.n	8004a5e <HAL_SPI_Init+0x12e>
 8004a54:	f240 114b 	movw	r1, #331	; 0x14b
 8004a58:	4859      	ldr	r0, [pc, #356]	; (8004bc0 <HAL_SPI_Init+0x290>)
 8004a5a:	f7fb ff74 	bl	8000946 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d008      	beq.n	8004a78 <HAL_SPI_Init+0x148>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d004      	beq.n	8004a78 <HAL_SPI_Init+0x148>
 8004a6e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004a72:	4853      	ldr	r0, [pc, #332]	; (8004bc0 <HAL_SPI_Init+0x290>)
 8004a74:	f7fb ff67 	bl	8000946 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d020      	beq.n	8004ac2 <HAL_SPI_Init+0x192>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d01c      	beq.n	8004ac2 <HAL_SPI_Init+0x192>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	2b10      	cmp	r3, #16
 8004a8e:	d018      	beq.n	8004ac2 <HAL_SPI_Init+0x192>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	2b18      	cmp	r3, #24
 8004a96:	d014      	beq.n	8004ac2 <HAL_SPI_Init+0x192>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	d010      	beq.n	8004ac2 <HAL_SPI_Init+0x192>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	2b28      	cmp	r3, #40	; 0x28
 8004aa6:	d00c      	beq.n	8004ac2 <HAL_SPI_Init+0x192>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	2b30      	cmp	r3, #48	; 0x30
 8004aae:	d008      	beq.n	8004ac2 <HAL_SPI_Init+0x192>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	2b38      	cmp	r3, #56	; 0x38
 8004ab6:	d004      	beq.n	8004ac2 <HAL_SPI_Init+0x192>
 8004ab8:	f240 114d 	movw	r1, #333	; 0x14d
 8004abc:	4840      	ldr	r0, [pc, #256]	; (8004bc0 <HAL_SPI_Init+0x290>)
 8004abe:	f7fb ff42 	bl	8000946 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d008      	beq.n	8004adc <HAL_SPI_Init+0x1ac>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	2b80      	cmp	r3, #128	; 0x80
 8004ad0:	d004      	beq.n	8004adc <HAL_SPI_Init+0x1ac>
 8004ad2:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8004ad6:	483a      	ldr	r0, [pc, #232]	; (8004bc0 <HAL_SPI_Init+0x290>)
 8004ad8:	f7fb ff35 	bl	8000946 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d008      	beq.n	8004af6 <HAL_SPI_Init+0x1c6>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	2b10      	cmp	r3, #16
 8004aea:	d004      	beq.n	8004af6 <HAL_SPI_Init+0x1c6>
 8004aec:	f240 114f 	movw	r1, #335	; 0x14f
 8004af0:	4833      	ldr	r0, [pc, #204]	; (8004bc0 <HAL_SPI_Init+0x290>)
 8004af2:	f7fb ff28 	bl	8000946 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d119      	bne.n	8004b32 <HAL_SPI_Init+0x202>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d008      	beq.n	8004b18 <HAL_SPI_Init+0x1e8>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d004      	beq.n	8004b18 <HAL_SPI_Init+0x1e8>
 8004b0e:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8004b12:	482b      	ldr	r0, [pc, #172]	; (8004bc0 <HAL_SPI_Init+0x290>)
 8004b14:	f7fb ff17 	bl	8000946 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d008      	beq.n	8004b32 <HAL_SPI_Init+0x202>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d004      	beq.n	8004b32 <HAL_SPI_Init+0x202>
 8004b28:	f240 1153 	movw	r1, #339	; 0x153
 8004b2c:	4824      	ldr	r0, [pc, #144]	; (8004bc0 <HAL_SPI_Init+0x290>)
 8004b2e:	f7fb ff0a 	bl	8000946 <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d106      	bne.n	8004b52 <HAL_SPI_Init+0x222>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7fb ff43 	bl	80009d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2202      	movs	r2, #2
 8004b56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b68:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b72:	d902      	bls.n	8004b7a <HAL_SPI_Init+0x24a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b74:	2300      	movs	r3, #0
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	e002      	b.n	8004b80 <HAL_SPI_Init+0x250>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b7e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b88:	d007      	beq.n	8004b9a <HAL_SPI_Init+0x26a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b92:	d002      	beq.n	8004b9a <HAL_SPI_Init+0x26a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d113      	bne.n	8004bca <HAL_SPI_Init+0x29a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004baa:	d90b      	bls.n	8004bc4 <HAL_SPI_Init+0x294>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	631a      	str	r2, [r3, #48]	; 0x30
 8004bb2:	e00a      	b.n	8004bca <HAL_SPI_Init+0x29a>
 8004bb4:	40013000 	.word	0x40013000
 8004bb8:	40003800 	.word	0x40003800
 8004bbc:	40003c00 	.word	0x40003c00
 8004bc0:	0800b694 	.word	0x0800b694
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	ea42 0103 	orr.w	r1, r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	0c1b      	lsrs	r3, r3, #16
 8004c0a:	f003 0204 	and.w	r2, r3, #4
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	ea42 0103 	orr.w	r1, r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	69da      	ldr	r2, [r3, #28]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e0b9      	b.n	8004dda <HAL_TIM_Base_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a5e      	ldr	r2, [pc, #376]	; (8004de4 <HAL_TIM_Base_Init+0x190>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d031      	beq.n	8004cd4 <HAL_TIM_Base_Init+0x80>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c78:	d02c      	beq.n	8004cd4 <HAL_TIM_Base_Init+0x80>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a5a      	ldr	r2, [pc, #360]	; (8004de8 <HAL_TIM_Base_Init+0x194>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d027      	beq.n	8004cd4 <HAL_TIM_Base_Init+0x80>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a58      	ldr	r2, [pc, #352]	; (8004dec <HAL_TIM_Base_Init+0x198>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d022      	beq.n	8004cd4 <HAL_TIM_Base_Init+0x80>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a57      	ldr	r2, [pc, #348]	; (8004df0 <HAL_TIM_Base_Init+0x19c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d01d      	beq.n	8004cd4 <HAL_TIM_Base_Init+0x80>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a55      	ldr	r2, [pc, #340]	; (8004df4 <HAL_TIM_Base_Init+0x1a0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d018      	beq.n	8004cd4 <HAL_TIM_Base_Init+0x80>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a54      	ldr	r2, [pc, #336]	; (8004df8 <HAL_TIM_Base_Init+0x1a4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d013      	beq.n	8004cd4 <HAL_TIM_Base_Init+0x80>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a52      	ldr	r2, [pc, #328]	; (8004dfc <HAL_TIM_Base_Init+0x1a8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d00e      	beq.n	8004cd4 <HAL_TIM_Base_Init+0x80>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a51      	ldr	r2, [pc, #324]	; (8004e00 <HAL_TIM_Base_Init+0x1ac>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d009      	beq.n	8004cd4 <HAL_TIM_Base_Init+0x80>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a4f      	ldr	r2, [pc, #316]	; (8004e04 <HAL_TIM_Base_Init+0x1b0>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d004      	beq.n	8004cd4 <HAL_TIM_Base_Init+0x80>
 8004cca:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004cce:	484e      	ldr	r0, [pc, #312]	; (8004e08 <HAL_TIM_Base_Init+0x1b4>)
 8004cd0:	f7fb fe39 	bl	8000946 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d014      	beq.n	8004d06 <HAL_TIM_Base_Init+0xb2>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	2b10      	cmp	r3, #16
 8004ce2:	d010      	beq.n	8004d06 <HAL_TIM_Base_Init+0xb2>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	d00c      	beq.n	8004d06 <HAL_TIM_Base_Init+0xb2>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	2b40      	cmp	r3, #64	; 0x40
 8004cf2:	d008      	beq.n	8004d06 <HAL_TIM_Base_Init+0xb2>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	2b60      	cmp	r3, #96	; 0x60
 8004cfa:	d004      	beq.n	8004d06 <HAL_TIM_Base_Init+0xb2>
 8004cfc:	f240 111d 	movw	r1, #285	; 0x11d
 8004d00:	4841      	ldr	r0, [pc, #260]	; (8004e08 <HAL_TIM_Base_Init+0x1b4>)
 8004d02:	f7fb fe20 	bl	8000946 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00e      	beq.n	8004d2c <HAL_TIM_Base_Init+0xd8>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d16:	d009      	beq.n	8004d2c <HAL_TIM_Base_Init+0xd8>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d20:	d004      	beq.n	8004d2c <HAL_TIM_Base_Init+0xd8>
 8004d22:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004d26:	4838      	ldr	r0, [pc, #224]	; (8004e08 <HAL_TIM_Base_Init+0x1b4>)
 8004d28:	f7fb fe0d 	bl	8000946 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d008      	beq.n	8004d46 <HAL_TIM_Base_Init+0xf2>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	2b80      	cmp	r3, #128	; 0x80
 8004d3a:	d004      	beq.n	8004d46 <HAL_TIM_Base_Init+0xf2>
 8004d3c:	f240 111f 	movw	r1, #287	; 0x11f
 8004d40:	4831      	ldr	r0, [pc, #196]	; (8004e08 <HAL_TIM_Base_Init+0x1b4>)
 8004d42:	f7fb fe00 	bl	8000946 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <HAL_TIM_Base_Init+0x10c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7fc f912 	bl	8000f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3304      	adds	r3, #4
 8004d70:	4619      	mov	r1, r3
 8004d72:	4610      	mov	r0, r2
 8004d74:	f001 f8da 	bl	8005f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	40012c00 	.word	0x40012c00
 8004de8:	40000400 	.word	0x40000400
 8004dec:	40000800 	.word	0x40000800
 8004df0:	40001000 	.word	0x40001000
 8004df4:	40001400 	.word	0x40001400
 8004df8:	40013400 	.word	0x40013400
 8004dfc:	40014000 	.word	0x40014000
 8004e00:	40014400 	.word	0x40014400
 8004e04:	40014800 	.word	0x40014800
 8004e08:	0800b6cc 	.word	0x0800b6cc

08004e0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a31      	ldr	r2, [pc, #196]	; (8004ee0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d031      	beq.n	8004e82 <HAL_TIM_Base_Start_IT+0x76>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e26:	d02c      	beq.n	8004e82 <HAL_TIM_Base_Start_IT+0x76>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a2d      	ldr	r2, [pc, #180]	; (8004ee4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d027      	beq.n	8004e82 <HAL_TIM_Base_Start_IT+0x76>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a2c      	ldr	r2, [pc, #176]	; (8004ee8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d022      	beq.n	8004e82 <HAL_TIM_Base_Start_IT+0x76>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a2a      	ldr	r2, [pc, #168]	; (8004eec <HAL_TIM_Base_Start_IT+0xe0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d01d      	beq.n	8004e82 <HAL_TIM_Base_Start_IT+0x76>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a29      	ldr	r2, [pc, #164]	; (8004ef0 <HAL_TIM_Base_Start_IT+0xe4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d018      	beq.n	8004e82 <HAL_TIM_Base_Start_IT+0x76>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a27      	ldr	r2, [pc, #156]	; (8004ef4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d013      	beq.n	8004e82 <HAL_TIM_Base_Start_IT+0x76>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a26      	ldr	r2, [pc, #152]	; (8004ef8 <HAL_TIM_Base_Start_IT+0xec>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00e      	beq.n	8004e82 <HAL_TIM_Base_Start_IT+0x76>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a24      	ldr	r2, [pc, #144]	; (8004efc <HAL_TIM_Base_Start_IT+0xf0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d009      	beq.n	8004e82 <HAL_TIM_Base_Start_IT+0x76>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a23      	ldr	r2, [pc, #140]	; (8004f00 <HAL_TIM_Base_Start_IT+0xf4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d004      	beq.n	8004e82 <HAL_TIM_Base_Start_IT+0x76>
 8004e78:	f240 11d1 	movw	r1, #465	; 0x1d1
 8004e7c:	4821      	ldr	r0, [pc, #132]	; (8004f04 <HAL_TIM_Base_Start_IT+0xf8>)
 8004e7e:	f7fb fd62 	bl	8000946 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d001      	beq.n	8004e92 <HAL_TIM_Base_Start_IT+0x86>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e021      	b.n	8004ed6 <HAL_TIM_Base_Start_IT+0xca>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2202      	movs	r2, #2
 8004e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f042 0201 	orr.w	r2, r2, #1
 8004ea8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	4b15      	ldr	r3, [pc, #84]	; (8004f08 <HAL_TIM_Base_Start_IT+0xfc>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2b06      	cmp	r3, #6
 8004eba:	d00b      	beq.n	8004ed4 <HAL_TIM_Base_Start_IT+0xc8>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec2:	d007      	beq.n	8004ed4 <HAL_TIM_Base_Start_IT+0xc8>
  {
    __HAL_TIM_ENABLE(htim);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0201 	orr.w	r2, r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	40012c00 	.word	0x40012c00
 8004ee4:	40000400 	.word	0x40000400
 8004ee8:	40000800 	.word	0x40000800
 8004eec:	40001000 	.word	0x40001000
 8004ef0:	40001400 	.word	0x40001400
 8004ef4:	40013400 	.word	0x40013400
 8004ef8:	40014000 	.word	0x40014000
 8004efc:	40014400 	.word	0x40014400
 8004f00:	40014800 	.word	0x40014800
 8004f04:	0800b6cc 	.word	0x0800b6cc
 8004f08:	00010007 	.word	0x00010007

08004f0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e0b9      	b.n	8005092 <HAL_TIM_PWM_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a5e      	ldr	r2, [pc, #376]	; (800509c <HAL_TIM_PWM_Init+0x190>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d031      	beq.n	8004f8c <HAL_TIM_PWM_Init+0x80>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f30:	d02c      	beq.n	8004f8c <HAL_TIM_PWM_Init+0x80>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a5a      	ldr	r2, [pc, #360]	; (80050a0 <HAL_TIM_PWM_Init+0x194>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d027      	beq.n	8004f8c <HAL_TIM_PWM_Init+0x80>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a58      	ldr	r2, [pc, #352]	; (80050a4 <HAL_TIM_PWM_Init+0x198>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d022      	beq.n	8004f8c <HAL_TIM_PWM_Init+0x80>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a57      	ldr	r2, [pc, #348]	; (80050a8 <HAL_TIM_PWM_Init+0x19c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d01d      	beq.n	8004f8c <HAL_TIM_PWM_Init+0x80>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a55      	ldr	r2, [pc, #340]	; (80050ac <HAL_TIM_PWM_Init+0x1a0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d018      	beq.n	8004f8c <HAL_TIM_PWM_Init+0x80>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a54      	ldr	r2, [pc, #336]	; (80050b0 <HAL_TIM_PWM_Init+0x1a4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d013      	beq.n	8004f8c <HAL_TIM_PWM_Init+0x80>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a52      	ldr	r2, [pc, #328]	; (80050b4 <HAL_TIM_PWM_Init+0x1a8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d00e      	beq.n	8004f8c <HAL_TIM_PWM_Init+0x80>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a51      	ldr	r2, [pc, #324]	; (80050b8 <HAL_TIM_PWM_Init+0x1ac>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d009      	beq.n	8004f8c <HAL_TIM_PWM_Init+0x80>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a4f      	ldr	r2, [pc, #316]	; (80050bc <HAL_TIM_PWM_Init+0x1b0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d004      	beq.n	8004f8c <HAL_TIM_PWM_Init+0x80>
 8004f82:	f240 41ec 	movw	r1, #1260	; 0x4ec
 8004f86:	484e      	ldr	r0, [pc, #312]	; (80050c0 <HAL_TIM_PWM_Init+0x1b4>)
 8004f88:	f7fb fcdd 	bl	8000946 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d014      	beq.n	8004fbe <HAL_TIM_PWM_Init+0xb2>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	2b10      	cmp	r3, #16
 8004f9a:	d010      	beq.n	8004fbe <HAL_TIM_PWM_Init+0xb2>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b20      	cmp	r3, #32
 8004fa2:	d00c      	beq.n	8004fbe <HAL_TIM_PWM_Init+0xb2>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	2b40      	cmp	r3, #64	; 0x40
 8004faa:	d008      	beq.n	8004fbe <HAL_TIM_PWM_Init+0xb2>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	2b60      	cmp	r3, #96	; 0x60
 8004fb2:	d004      	beq.n	8004fbe <HAL_TIM_PWM_Init+0xb2>
 8004fb4:	f240 41ed 	movw	r1, #1261	; 0x4ed
 8004fb8:	4841      	ldr	r0, [pc, #260]	; (80050c0 <HAL_TIM_PWM_Init+0x1b4>)
 8004fba:	f7fb fcc4 	bl	8000946 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00e      	beq.n	8004fe4 <HAL_TIM_PWM_Init+0xd8>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fce:	d009      	beq.n	8004fe4 <HAL_TIM_PWM_Init+0xd8>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fd8:	d004      	beq.n	8004fe4 <HAL_TIM_PWM_Init+0xd8>
 8004fda:	f240 41ee 	movw	r1, #1262	; 0x4ee
 8004fde:	4838      	ldr	r0, [pc, #224]	; (80050c0 <HAL_TIM_PWM_Init+0x1b4>)
 8004fe0:	f7fb fcb1 	bl	8000946 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d008      	beq.n	8004ffe <HAL_TIM_PWM_Init+0xf2>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	2b80      	cmp	r3, #128	; 0x80
 8004ff2:	d004      	beq.n	8004ffe <HAL_TIM_PWM_Init+0xf2>
 8004ff4:	f240 41ef 	movw	r1, #1263	; 0x4ef
 8004ff8:	4831      	ldr	r0, [pc, #196]	; (80050c0 <HAL_TIM_PWM_Init+0x1b4>)
 8004ffa:	f7fb fca4 	bl	8000946 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d106      	bne.n	8005018 <HAL_TIM_PWM_Init+0x10c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7fb ff6c 	bl	8000ef0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	3304      	adds	r3, #4
 8005028:	4619      	mov	r1, r3
 800502a:	4610      	mov	r0, r2
 800502c:	f000 ff7e 	bl	8005f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	40012c00 	.word	0x40012c00
 80050a0:	40000400 	.word	0x40000400
 80050a4:	40000800 	.word	0x40000800
 80050a8:	40001000 	.word	0x40001000
 80050ac:	40001400 	.word	0x40001400
 80050b0:	40013400 	.word	0x40013400
 80050b4:	40014000 	.word	0x40014000
 80050b8:	40014400 	.word	0x40014400
 80050bc:	40014800 	.word	0x40014800
 80050c0:	0800b6cc 	.word	0x0800b6cc

080050c4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
 80050d0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a94      	ldr	r2, [pc, #592]	; (8005328 <HAL_TIM_PWM_Start_DMA+0x264>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d111      	bne.n	8005100 <HAL_TIM_PWM_Start_DMA+0x3c>
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d078      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	d075      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2b08      	cmp	r3, #8
 80050ec:	d072      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2b0c      	cmp	r3, #12
 80050f2:	d06f      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2b10      	cmp	r3, #16
 80050f8:	d06c      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	2b14      	cmp	r3, #20
 80050fe:	d069      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005108:	d10b      	bne.n	8005122 <HAL_TIM_PWM_Start_DMA+0x5e>
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d061      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2b04      	cmp	r3, #4
 8005114:	d05e      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2b08      	cmp	r3, #8
 800511a:	d05b      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	2b0c      	cmp	r3, #12
 8005120:	d058      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a81      	ldr	r2, [pc, #516]	; (800532c <HAL_TIM_PWM_Start_DMA+0x268>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d10b      	bne.n	8005144 <HAL_TIM_PWM_Start_DMA+0x80>
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d050      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b04      	cmp	r3, #4
 8005136:	d04d      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b08      	cmp	r3, #8
 800513c:	d04a      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	2b0c      	cmp	r3, #12
 8005142:	d047      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a79      	ldr	r2, [pc, #484]	; (8005330 <HAL_TIM_PWM_Start_DMA+0x26c>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d10b      	bne.n	8005166 <HAL_TIM_PWM_Start_DMA+0xa2>
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d03f      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b04      	cmp	r3, #4
 8005158:	d03c      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b08      	cmp	r3, #8
 800515e:	d039      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2b0c      	cmp	r3, #12
 8005164:	d036      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a72      	ldr	r2, [pc, #456]	; (8005334 <HAL_TIM_PWM_Start_DMA+0x270>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d111      	bne.n	8005194 <HAL_TIM_PWM_Start_DMA+0xd0>
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d02e      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2b04      	cmp	r3, #4
 800517a:	d02b      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b08      	cmp	r3, #8
 8005180:	d028      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2b0c      	cmp	r3, #12
 8005186:	d025      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b10      	cmp	r3, #16
 800518c:	d022      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b14      	cmp	r3, #20
 8005192:	d01f      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a67      	ldr	r2, [pc, #412]	; (8005338 <HAL_TIM_PWM_Start_DMA+0x274>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d105      	bne.n	80051aa <HAL_TIM_PWM_Start_DMA+0xe6>
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d017      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d014      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a63      	ldr	r2, [pc, #396]	; (800533c <HAL_TIM_PWM_Start_DMA+0x278>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d102      	bne.n	80051ba <HAL_TIM_PWM_Start_DMA+0xf6>
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00c      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a60      	ldr	r2, [pc, #384]	; (8005340 <HAL_TIM_PWM_Start_DMA+0x27c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d102      	bne.n	80051ca <HAL_TIM_PWM_Start_DMA+0x106>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d004      	beq.n	80051d4 <HAL_TIM_PWM_Start_DMA+0x110>
 80051ca:	f240 615f 	movw	r1, #1631	; 0x65f
 80051ce:	485d      	ldr	r0, [pc, #372]	; (8005344 <HAL_TIM_PWM_Start_DMA+0x280>)
 80051d0:	f7fb fbb9 	bl	8000946 <assert_failed>

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d109      	bne.n	80051ee <HAL_TIM_PWM_Start_DMA+0x12a>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	bf0c      	ite	eq
 80051e6:	2301      	moveq	r3, #1
 80051e8:	2300      	movne	r3, #0
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	e03c      	b.n	8005268 <HAL_TIM_PWM_Start_DMA+0x1a4>
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d109      	bne.n	8005208 <HAL_TIM_PWM_Start_DMA+0x144>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	bf0c      	ite	eq
 8005200:	2301      	moveq	r3, #1
 8005202:	2300      	movne	r3, #0
 8005204:	b2db      	uxtb	r3, r3
 8005206:	e02f      	b.n	8005268 <HAL_TIM_PWM_Start_DMA+0x1a4>
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	2b08      	cmp	r3, #8
 800520c:	d109      	bne.n	8005222 <HAL_TIM_PWM_Start_DMA+0x15e>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	bf0c      	ite	eq
 800521a:	2301      	moveq	r3, #1
 800521c:	2300      	movne	r3, #0
 800521e:	b2db      	uxtb	r3, r3
 8005220:	e022      	b.n	8005268 <HAL_TIM_PWM_Start_DMA+0x1a4>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b0c      	cmp	r3, #12
 8005226:	d109      	bne.n	800523c <HAL_TIM_PWM_Start_DMA+0x178>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	bf0c      	ite	eq
 8005234:	2301      	moveq	r3, #1
 8005236:	2300      	movne	r3, #0
 8005238:	b2db      	uxtb	r3, r3
 800523a:	e015      	b.n	8005268 <HAL_TIM_PWM_Start_DMA+0x1a4>
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b10      	cmp	r3, #16
 8005240:	d109      	bne.n	8005256 <HAL_TIM_PWM_Start_DMA+0x192>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	bf0c      	ite	eq
 800524e:	2301      	moveq	r3, #1
 8005250:	2300      	movne	r3, #0
 8005252:	b2db      	uxtb	r3, r3
 8005254:	e008      	b.n	8005268 <HAL_TIM_PWM_Start_DMA+0x1a4>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	bf0c      	ite	eq
 8005262:	2301      	moveq	r3, #1
 8005264:	2300      	movne	r3, #0
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    return HAL_BUSY;
 800526c:	2302      	movs	r3, #2
 800526e:	e187      	b.n	8005580 <HAL_TIM_PWM_Start_DMA+0x4bc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d109      	bne.n	800528a <HAL_TIM_PWM_Start_DMA+0x1c6>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b01      	cmp	r3, #1
 8005280:	bf0c      	ite	eq
 8005282:	2301      	moveq	r3, #1
 8005284:	2300      	movne	r3, #0
 8005286:	b2db      	uxtb	r3, r3
 8005288:	e03c      	b.n	8005304 <HAL_TIM_PWM_Start_DMA+0x240>
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2b04      	cmp	r3, #4
 800528e:	d109      	bne.n	80052a4 <HAL_TIM_PWM_Start_DMA+0x1e0>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b01      	cmp	r3, #1
 800529a:	bf0c      	ite	eq
 800529c:	2301      	moveq	r3, #1
 800529e:	2300      	movne	r3, #0
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	e02f      	b.n	8005304 <HAL_TIM_PWM_Start_DMA+0x240>
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b08      	cmp	r3, #8
 80052a8:	d109      	bne.n	80052be <HAL_TIM_PWM_Start_DMA+0x1fa>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	bf0c      	ite	eq
 80052b6:	2301      	moveq	r3, #1
 80052b8:	2300      	movne	r3, #0
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	e022      	b.n	8005304 <HAL_TIM_PWM_Start_DMA+0x240>
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b0c      	cmp	r3, #12
 80052c2:	d109      	bne.n	80052d8 <HAL_TIM_PWM_Start_DMA+0x214>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	bf0c      	ite	eq
 80052d0:	2301      	moveq	r3, #1
 80052d2:	2300      	movne	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	e015      	b.n	8005304 <HAL_TIM_PWM_Start_DMA+0x240>
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b10      	cmp	r3, #16
 80052dc:	d109      	bne.n	80052f2 <HAL_TIM_PWM_Start_DMA+0x22e>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	bf0c      	ite	eq
 80052ea:	2301      	moveq	r3, #1
 80052ec:	2300      	movne	r3, #0
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	e008      	b.n	8005304 <HAL_TIM_PWM_Start_DMA+0x240>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	bf0c      	ite	eq
 80052fe:	2301      	moveq	r3, #1
 8005300:	2300      	movne	r3, #0
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d044      	beq.n	8005392 <HAL_TIM_PWM_Start_DMA+0x2ce>
  {
    if ((pData == NULL) && (Length > 0U))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d104      	bne.n	8005318 <HAL_TIM_PWM_Start_DMA+0x254>
 800530e:	887b      	ldrh	r3, [r7, #2]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <HAL_TIM_PWM_Start_DMA+0x254>
    {
      return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e133      	b.n	8005580 <HAL_TIM_PWM_Start_DMA+0x4bc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d114      	bne.n	8005348 <HAL_TIM_PWM_Start_DMA+0x284>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2202      	movs	r2, #2
 8005322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005326:	e036      	b.n	8005396 <HAL_TIM_PWM_Start_DMA+0x2d2>
 8005328:	40012c00 	.word	0x40012c00
 800532c:	40000400 	.word	0x40000400
 8005330:	40000800 	.word	0x40000800
 8005334:	40013400 	.word	0x40013400
 8005338:	40014000 	.word	0x40014000
 800533c:	40014400 	.word	0x40014400
 8005340:	40014800 	.word	0x40014800
 8005344:	0800b6cc 	.word	0x0800b6cc
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2b04      	cmp	r3, #4
 800534c:	d104      	bne.n	8005358 <HAL_TIM_PWM_Start_DMA+0x294>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2202      	movs	r2, #2
 8005352:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005356:	e01e      	b.n	8005396 <HAL_TIM_PWM_Start_DMA+0x2d2>
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b08      	cmp	r3, #8
 800535c:	d104      	bne.n	8005368 <HAL_TIM_PWM_Start_DMA+0x2a4>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2202      	movs	r2, #2
 8005362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005366:	e016      	b.n	8005396 <HAL_TIM_PWM_Start_DMA+0x2d2>
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b0c      	cmp	r3, #12
 800536c:	d104      	bne.n	8005378 <HAL_TIM_PWM_Start_DMA+0x2b4>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2202      	movs	r2, #2
 8005372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005376:	e00e      	b.n	8005396 <HAL_TIM_PWM_Start_DMA+0x2d2>
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	2b10      	cmp	r3, #16
 800537c:	d104      	bne.n	8005388 <HAL_TIM_PWM_Start_DMA+0x2c4>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2202      	movs	r2, #2
 8005382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005386:	e006      	b.n	8005396 <HAL_TIM_PWM_Start_DMA+0x2d2>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005390:	e001      	b.n	8005396 <HAL_TIM_PWM_Start_DMA+0x2d2>
    }
  }
  else
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e0f4      	b.n	8005580 <HAL_TIM_PWM_Start_DMA+0x4bc>
  }

  switch (Channel)
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b0c      	cmp	r3, #12
 800539a:	f200 80ad 	bhi.w	80054f8 <HAL_TIM_PWM_Start_DMA+0x434>
 800539e:	a201      	add	r2, pc, #4	; (adr r2, 80053a4 <HAL_TIM_PWM_Start_DMA+0x2e0>)
 80053a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a4:	080053d9 	.word	0x080053d9
 80053a8:	080054f9 	.word	0x080054f9
 80053ac:	080054f9 	.word	0x080054f9
 80053b0:	080054f9 	.word	0x080054f9
 80053b4:	08005421 	.word	0x08005421
 80053b8:	080054f9 	.word	0x080054f9
 80053bc:	080054f9 	.word	0x080054f9
 80053c0:	080054f9 	.word	0x080054f9
 80053c4:	08005469 	.word	0x08005469
 80053c8:	080054f9 	.word	0x080054f9
 80053cc:	080054f9 	.word	0x080054f9
 80053d0:	080054f9 	.word	0x080054f9
 80053d4:	080054b1 	.word	0x080054b1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	4a6a      	ldr	r2, [pc, #424]	; (8005588 <HAL_TIM_PWM_Start_DMA+0x4c4>)
 80053de:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	4a69      	ldr	r2, [pc, #420]	; (800558c <HAL_TIM_PWM_Start_DMA+0x4c8>)
 80053e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	4a68      	ldr	r2, [pc, #416]	; (8005590 <HAL_TIM_PWM_Start_DMA+0x4cc>)
 80053ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	3334      	adds	r3, #52	; 0x34
 80053fc:	461a      	mov	r2, r3
 80053fe:	887b      	ldrh	r3, [r7, #2]
 8005400:	f7fc fba2 	bl	8001b48 <HAL_DMA_Start_IT>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <HAL_TIM_PWM_Start_DMA+0x34a>
      {
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e0b8      	b.n	8005580 <HAL_TIM_PWM_Start_DMA+0x4bc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68da      	ldr	r2, [r3, #12]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800541c:	60da      	str	r2, [r3, #12]
      break;
 800541e:	e06c      	b.n	80054fa <HAL_TIM_PWM_Start_DMA+0x436>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005424:	4a58      	ldr	r2, [pc, #352]	; (8005588 <HAL_TIM_PWM_Start_DMA+0x4c4>)
 8005426:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542c:	4a57      	ldr	r2, [pc, #348]	; (800558c <HAL_TIM_PWM_Start_DMA+0x4c8>)
 800542e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005434:	4a56      	ldr	r2, [pc, #344]	; (8005590 <HAL_TIM_PWM_Start_DMA+0x4cc>)
 8005436:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	3338      	adds	r3, #56	; 0x38
 8005444:	461a      	mov	r2, r3
 8005446:	887b      	ldrh	r3, [r7, #2]
 8005448:	f7fc fb7e 	bl	8001b48 <HAL_DMA_Start_IT>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <HAL_TIM_PWM_Start_DMA+0x392>
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e094      	b.n	8005580 <HAL_TIM_PWM_Start_DMA+0x4bc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68da      	ldr	r2, [r3, #12]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005464:	60da      	str	r2, [r3, #12]
      break;
 8005466:	e048      	b.n	80054fa <HAL_TIM_PWM_Start_DMA+0x436>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546c:	4a46      	ldr	r2, [pc, #280]	; (8005588 <HAL_TIM_PWM_Start_DMA+0x4c4>)
 800546e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	4a45      	ldr	r2, [pc, #276]	; (800558c <HAL_TIM_PWM_Start_DMA+0x4c8>)
 8005476:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	4a44      	ldr	r2, [pc, #272]	; (8005590 <HAL_TIM_PWM_Start_DMA+0x4cc>)
 800547e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005484:	6879      	ldr	r1, [r7, #4]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	333c      	adds	r3, #60	; 0x3c
 800548c:	461a      	mov	r2, r3
 800548e:	887b      	ldrh	r3, [r7, #2]
 8005490:	f7fc fb5a 	bl	8001b48 <HAL_DMA_Start_IT>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <HAL_TIM_PWM_Start_DMA+0x3da>
      {
        return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e070      	b.n	8005580 <HAL_TIM_PWM_Start_DMA+0x4bc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054ac:	60da      	str	r2, [r3, #12]
      break;
 80054ae:	e024      	b.n	80054fa <HAL_TIM_PWM_Start_DMA+0x436>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b4:	4a34      	ldr	r2, [pc, #208]	; (8005588 <HAL_TIM_PWM_Start_DMA+0x4c4>)
 80054b6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054bc:	4a33      	ldr	r2, [pc, #204]	; (800558c <HAL_TIM_PWM_Start_DMA+0x4c8>)
 80054be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c4:	4a32      	ldr	r2, [pc, #200]	; (8005590 <HAL_TIM_PWM_Start_DMA+0x4cc>)
 80054c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80054cc:	6879      	ldr	r1, [r7, #4]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3340      	adds	r3, #64	; 0x40
 80054d4:	461a      	mov	r2, r3
 80054d6:	887b      	ldrh	r3, [r7, #2]
 80054d8:	f7fc fb36 	bl	8001b48 <HAL_DMA_Start_IT>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <HAL_TIM_PWM_Start_DMA+0x422>
      {
        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e04c      	b.n	8005580 <HAL_TIM_PWM_Start_DMA+0x4bc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054f4:	60da      	str	r2, [r3, #12]
      break;
 80054f6:	e000      	b.n	80054fa <HAL_TIM_PWM_Start_DMA+0x436>
    }

    default:
      break;
 80054f8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2201      	movs	r2, #1
 8005500:	68b9      	ldr	r1, [r7, #8]
 8005502:	4618      	mov	r0, r3
 8005504:	f001 f93c 	bl	8006780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a21      	ldr	r2, [pc, #132]	; (8005594 <HAL_TIM_PWM_Start_DMA+0x4d0>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d013      	beq.n	800553a <HAL_TIM_PWM_Start_DMA+0x476>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a20      	ldr	r2, [pc, #128]	; (8005598 <HAL_TIM_PWM_Start_DMA+0x4d4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d00e      	beq.n	800553a <HAL_TIM_PWM_Start_DMA+0x476>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a1e      	ldr	r2, [pc, #120]	; (800559c <HAL_TIM_PWM_Start_DMA+0x4d8>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d009      	beq.n	800553a <HAL_TIM_PWM_Start_DMA+0x476>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a1d      	ldr	r2, [pc, #116]	; (80055a0 <HAL_TIM_PWM_Start_DMA+0x4dc>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d004      	beq.n	800553a <HAL_TIM_PWM_Start_DMA+0x476>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a1b      	ldr	r2, [pc, #108]	; (80055a4 <HAL_TIM_PWM_Start_DMA+0x4e0>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d101      	bne.n	800553e <HAL_TIM_PWM_Start_DMA+0x47a>
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <HAL_TIM_PWM_Start_DMA+0x47c>
 800553e:	2300      	movs	r3, #0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d007      	beq.n	8005554 <HAL_TIM_PWM_Start_DMA+0x490>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005552:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	4b13      	ldr	r3, [pc, #76]	; (80055a8 <HAL_TIM_PWM_Start_DMA+0x4e4>)
 800555c:	4013      	ands	r3, r2
 800555e:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2b06      	cmp	r3, #6
 8005564:	d00b      	beq.n	800557e <HAL_TIM_PWM_Start_DMA+0x4ba>
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800556c:	d007      	beq.n	800557e <HAL_TIM_PWM_Start_DMA+0x4ba>
  {
    __HAL_TIM_ENABLE(htim);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f042 0201 	orr.w	r2, r2, #1
 800557c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	08005e1b 	.word	0x08005e1b
 800558c:	08005ec3 	.word	0x08005ec3
 8005590:	08005d89 	.word	0x08005d89
 8005594:	40012c00 	.word	0x40012c00
 8005598:	40013400 	.word	0x40013400
 800559c:	40014000 	.word	0x40014000
 80055a0:	40014400 	.word	0x40014400
 80055a4:	40014800 	.word	0x40014800
 80055a8:	00010007 	.word	0x00010007

080055ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d122      	bne.n	8005608 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d11b      	bne.n	8005608 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0202 	mvn.w	r2, #2
 80055d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fb98 	bl	8005d24 <HAL_TIM_IC_CaptureCallback>
 80055f4:	e005      	b.n	8005602 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fb8a 	bl	8005d10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 fb9b 	bl	8005d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f003 0304 	and.w	r3, r3, #4
 8005612:	2b04      	cmp	r3, #4
 8005614:	d122      	bne.n	800565c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b04      	cmp	r3, #4
 8005622:	d11b      	bne.n	800565c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0204 	mvn.w	r2, #4
 800562c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2202      	movs	r2, #2
 8005632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fb6e 	bl	8005d24 <HAL_TIM_IC_CaptureCallback>
 8005648:	e005      	b.n	8005656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fb60 	bl	8005d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 fb71 	bl	8005d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b08      	cmp	r3, #8
 8005668:	d122      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b08      	cmp	r3, #8
 8005676:	d11b      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f06f 0208 	mvn.w	r2, #8
 8005680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2204      	movs	r2, #4
 8005686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fb44 	bl	8005d24 <HAL_TIM_IC_CaptureCallback>
 800569c:	e005      	b.n	80056aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fb36 	bl	8005d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fb47 	bl	8005d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0310 	and.w	r3, r3, #16
 80056ba:	2b10      	cmp	r3, #16
 80056bc:	d122      	bne.n	8005704 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f003 0310 	and.w	r3, r3, #16
 80056c8:	2b10      	cmp	r3, #16
 80056ca:	d11b      	bne.n	8005704 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f06f 0210 	mvn.w	r2, #16
 80056d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2208      	movs	r2, #8
 80056da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fb1a 	bl	8005d24 <HAL_TIM_IC_CaptureCallback>
 80056f0:	e005      	b.n	80056fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fb0c 	bl	8005d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fb1d 	bl	8005d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b01      	cmp	r3, #1
 8005710:	d10e      	bne.n	8005730 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b01      	cmp	r3, #1
 800571e:	d107      	bne.n	8005730 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f06f 0201 	mvn.w	r2, #1
 8005728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fb f8f2 	bl	8000914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573a:	2b80      	cmp	r3, #128	; 0x80
 800573c:	d10e      	bne.n	800575c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005748:	2b80      	cmp	r3, #128	; 0x80
 800574a:	d107      	bne.n	800575c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f001 fb4e 	bl	8006df8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800576a:	d10e      	bne.n	800578a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005776:	2b80      	cmp	r3, #128	; 0x80
 8005778:	d107      	bne.n	800578a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f001 fb41 	bl	8006e0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005794:	2b40      	cmp	r3, #64	; 0x40
 8005796:	d10e      	bne.n	80057b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a2:	2b40      	cmp	r3, #64	; 0x40
 80057a4:	d107      	bne.n	80057b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fad5 	bl	8005d60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	f003 0320 	and.w	r3, r3, #32
 80057c0:	2b20      	cmp	r3, #32
 80057c2:	d10e      	bne.n	80057e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	f003 0320 	and.w	r3, r3, #32
 80057ce:	2b20      	cmp	r3, #32
 80057d0:	d107      	bne.n	80057e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f06f 0220 	mvn.w	r2, #32
 80057da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f001 fb01 	bl	8006de4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057f0:	d10f      	bne.n	8005812 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005800:	d107      	bne.n	8005812 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800580a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f001 fb07 	bl	8006e20 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800581c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005820:	d10f      	bne.n	8005842 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800582c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005830:	d107      	bne.n	8005842 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800583a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f001 faf9 	bl	8006e34 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800584c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005850:	d10f      	bne.n	8005872 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800585c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005860:	d107      	bne.n	8005872 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800586a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f001 faeb 	bl	8006e48 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800587c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005880:	d10f      	bne.n	80058a2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800588c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005890:	d107      	bne.n	80058a2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800589a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f001 fadd 	bl	8006e5c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058a2:	bf00      	nop
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
	...

080058ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d016      	beq.n	80058ec <HAL_TIM_PWM_ConfigChannel+0x40>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b04      	cmp	r3, #4
 80058c2:	d013      	beq.n	80058ec <HAL_TIM_PWM_ConfigChannel+0x40>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d010      	beq.n	80058ec <HAL_TIM_PWM_ConfigChannel+0x40>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b0c      	cmp	r3, #12
 80058ce:	d00d      	beq.n	80058ec <HAL_TIM_PWM_ConfigChannel+0x40>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b10      	cmp	r3, #16
 80058d4:	d00a      	beq.n	80058ec <HAL_TIM_PWM_ConfigChannel+0x40>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b14      	cmp	r3, #20
 80058da:	d007      	beq.n	80058ec <HAL_TIM_PWM_ConfigChannel+0x40>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b3c      	cmp	r3, #60	; 0x3c
 80058e0:	d004      	beq.n	80058ec <HAL_TIM_PWM_ConfigChannel+0x40>
 80058e2:	f241 0118 	movw	r1, #4120	; 0x1018
 80058e6:	4886      	ldr	r0, [pc, #536]	; (8005b00 <HAL_TIM_PWM_ConfigChannel+0x254>)
 80058e8:	f7fb f82d 	bl	8000946 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b60      	cmp	r3, #96	; 0x60
 80058f2:	d01c      	beq.n	800592e <HAL_TIM_PWM_ConfigChannel+0x82>
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b70      	cmp	r3, #112	; 0x70
 80058fa:	d018      	beq.n	800592e <HAL_TIM_PWM_ConfigChannel+0x82>
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a80      	ldr	r2, [pc, #512]	; (8005b04 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d013      	beq.n	800592e <HAL_TIM_PWM_ConfigChannel+0x82>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a7f      	ldr	r2, [pc, #508]	; (8005b08 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d00e      	beq.n	800592e <HAL_TIM_PWM_ConfigChannel+0x82>
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a7d      	ldr	r2, [pc, #500]	; (8005b0c <HAL_TIM_PWM_ConfigChannel+0x260>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d009      	beq.n	800592e <HAL_TIM_PWM_ConfigChannel+0x82>
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a7c      	ldr	r2, [pc, #496]	; (8005b10 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d004      	beq.n	800592e <HAL_TIM_PWM_ConfigChannel+0x82>
 8005924:	f241 0119 	movw	r1, #4121	; 0x1019
 8005928:	4875      	ldr	r0, [pc, #468]	; (8005b00 <HAL_TIM_PWM_ConfigChannel+0x254>)
 800592a:	f7fb f80c 	bl	8000946 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d008      	beq.n	8005948 <HAL_TIM_PWM_ConfigChannel+0x9c>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	2b02      	cmp	r3, #2
 800593c:	d004      	beq.n	8005948 <HAL_TIM_PWM_ConfigChannel+0x9c>
 800593e:	f241 011a 	movw	r1, #4122	; 0x101a
 8005942:	486f      	ldr	r0, [pc, #444]	; (8005b00 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8005944:	f7fa ffff 	bl	8000946 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d008      	beq.n	8005962 <HAL_TIM_PWM_ConfigChannel+0xb6>
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	2b04      	cmp	r3, #4
 8005956:	d004      	beq.n	8005962 <HAL_TIM_PWM_ConfigChannel+0xb6>
 8005958:	f241 011b 	movw	r1, #4123	; 0x101b
 800595c:	4868      	ldr	r0, [pc, #416]	; (8005b00 <HAL_TIM_PWM_ConfigChannel+0x254>)
 800595e:	f7fa fff2 	bl	8000946 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_TIM_PWM_ConfigChannel+0xc4>
 800596c:	2302      	movs	r3, #2
 800596e:	e1c1      	b.n	8005cf4 <HAL_TIM_PWM_ConfigChannel+0x448>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b14      	cmp	r3, #20
 800597c:	f200 81b4 	bhi.w	8005ce8 <HAL_TIM_PWM_ConfigChannel+0x43c>
 8005980:	a201      	add	r2, pc, #4	; (adr r2, 8005988 <HAL_TIM_PWM_ConfigChannel+0xdc>)
 8005982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005986:	bf00      	nop
 8005988:	080059dd 	.word	0x080059dd
 800598c:	08005ce9 	.word	0x08005ce9
 8005990:	08005ce9 	.word	0x08005ce9
 8005994:	08005ce9 	.word	0x08005ce9
 8005998:	08005a77 	.word	0x08005a77
 800599c:	08005ce9 	.word	0x08005ce9
 80059a0:	08005ce9 	.word	0x08005ce9
 80059a4:	08005ce9 	.word	0x08005ce9
 80059a8:	08005b31 	.word	0x08005b31
 80059ac:	08005ce9 	.word	0x08005ce9
 80059b0:	08005ce9 	.word	0x08005ce9
 80059b4:	08005ce9 	.word	0x08005ce9
 80059b8:	08005bad 	.word	0x08005bad
 80059bc:	08005ce9 	.word	0x08005ce9
 80059c0:	08005ce9 	.word	0x08005ce9
 80059c4:	08005ce9 	.word	0x08005ce9
 80059c8:	08005c2b 	.word	0x08005c2b
 80059cc:	08005ce9 	.word	0x08005ce9
 80059d0:	08005ce9 	.word	0x08005ce9
 80059d4:	08005ce9 	.word	0x08005ce9
 80059d8:	08005c89 	.word	0x08005c89
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a4c      	ldr	r2, [pc, #304]	; (8005b14 <HAL_TIM_PWM_ConfigChannel+0x268>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d027      	beq.n	8005a36 <HAL_TIM_PWM_ConfigChannel+0x18a>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ee:	d022      	beq.n	8005a36 <HAL_TIM_PWM_ConfigChannel+0x18a>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a48      	ldr	r2, [pc, #288]	; (8005b18 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d01d      	beq.n	8005a36 <HAL_TIM_PWM_ConfigChannel+0x18a>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a47      	ldr	r2, [pc, #284]	; (8005b1c <HAL_TIM_PWM_ConfigChannel+0x270>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d018      	beq.n	8005a36 <HAL_TIM_PWM_ConfigChannel+0x18a>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a45      	ldr	r2, [pc, #276]	; (8005b20 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d013      	beq.n	8005a36 <HAL_TIM_PWM_ConfigChannel+0x18a>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a44      	ldr	r2, [pc, #272]	; (8005b24 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d00e      	beq.n	8005a36 <HAL_TIM_PWM_ConfigChannel+0x18a>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a42      	ldr	r2, [pc, #264]	; (8005b28 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d009      	beq.n	8005a36 <HAL_TIM_PWM_ConfigChannel+0x18a>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a41      	ldr	r2, [pc, #260]	; (8005b2c <HAL_TIM_PWM_ConfigChannel+0x280>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d004      	beq.n	8005a36 <HAL_TIM_PWM_ConfigChannel+0x18a>
 8005a2c:	f241 0125 	movw	r1, #4133	; 0x1025
 8005a30:	4833      	ldr	r0, [pc, #204]	; (8005b00 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8005a32:	f7fa ff88 	bl	8000946 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68b9      	ldr	r1, [r7, #8]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f000 fb05 	bl	800604c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	699a      	ldr	r2, [r3, #24]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f042 0208 	orr.w	r2, r2, #8
 8005a50:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	699a      	ldr	r2, [r3, #24]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0204 	bic.w	r2, r2, #4
 8005a60:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6999      	ldr	r1, [r3, #24]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	619a      	str	r2, [r3, #24]
      break;
 8005a74:	e139      	b.n	8005cea <HAL_TIM_PWM_ConfigChannel+0x43e>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a26      	ldr	r2, [pc, #152]	; (8005b14 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d01d      	beq.n	8005abc <HAL_TIM_PWM_ConfigChannel+0x210>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a88:	d018      	beq.n	8005abc <HAL_TIM_PWM_ConfigChannel+0x210>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a22      	ldr	r2, [pc, #136]	; (8005b18 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d013      	beq.n	8005abc <HAL_TIM_PWM_ConfigChannel+0x210>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a20      	ldr	r2, [pc, #128]	; (8005b1c <HAL_TIM_PWM_ConfigChannel+0x270>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00e      	beq.n	8005abc <HAL_TIM_PWM_ConfigChannel+0x210>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a1f      	ldr	r2, [pc, #124]	; (8005b20 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d009      	beq.n	8005abc <HAL_TIM_PWM_ConfigChannel+0x210>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a1d      	ldr	r2, [pc, #116]	; (8005b24 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d004      	beq.n	8005abc <HAL_TIM_PWM_ConfigChannel+0x210>
 8005ab2:	f241 0136 	movw	r1, #4150	; 0x1036
 8005ab6:	4812      	ldr	r0, [pc, #72]	; (8005b00 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8005ab8:	f7fa ff45 	bl	8000946 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68b9      	ldr	r1, [r7, #8]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 fb7c 	bl	80061c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699a      	ldr	r2, [r3, #24]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699a      	ldr	r2, [r3, #24]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6999      	ldr	r1, [r3, #24]
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	021a      	lsls	r2, r3, #8
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	619a      	str	r2, [r3, #24]
      break;
 8005afc:	e0f5      	b.n	8005cea <HAL_TIM_PWM_ConfigChannel+0x43e>
 8005afe:	bf00      	nop
 8005b00:	0800b6cc 	.word	0x0800b6cc
 8005b04:	00010040 	.word	0x00010040
 8005b08:	00010050 	.word	0x00010050
 8005b0c:	00010060 	.word	0x00010060
 8005b10:	00010070 	.word	0x00010070
 8005b14:	40012c00 	.word	0x40012c00
 8005b18:	40000400 	.word	0x40000400
 8005b1c:	40000800 	.word	0x40000800
 8005b20:	40013400 	.word	0x40013400
 8005b24:	40014000 	.word	0x40014000
 8005b28:	40014400 	.word	0x40014400
 8005b2c:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a71      	ldr	r2, [pc, #452]	; (8005cfc <HAL_TIM_PWM_ConfigChannel+0x450>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d018      	beq.n	8005b6c <HAL_TIM_PWM_ConfigChannel+0x2c0>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b42:	d013      	beq.n	8005b6c <HAL_TIM_PWM_ConfigChannel+0x2c0>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a6d      	ldr	r2, [pc, #436]	; (8005d00 <HAL_TIM_PWM_ConfigChannel+0x454>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d00e      	beq.n	8005b6c <HAL_TIM_PWM_ConfigChannel+0x2c0>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a6c      	ldr	r2, [pc, #432]	; (8005d04 <HAL_TIM_PWM_ConfigChannel+0x458>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d009      	beq.n	8005b6c <HAL_TIM_PWM_ConfigChannel+0x2c0>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a6a      	ldr	r2, [pc, #424]	; (8005d08 <HAL_TIM_PWM_ConfigChannel+0x45c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d004      	beq.n	8005b6c <HAL_TIM_PWM_ConfigChannel+0x2c0>
 8005b62:	f241 0147 	movw	r1, #4167	; 0x1047
 8005b66:	4869      	ldr	r0, [pc, #420]	; (8005d0c <HAL_TIM_PWM_ConfigChannel+0x460>)
 8005b68:	f7fa feed 	bl	8000946 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68b9      	ldr	r1, [r7, #8]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fbd6 	bl	8006324 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	69da      	ldr	r2, [r3, #28]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0208 	orr.w	r2, r2, #8
 8005b86:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	69da      	ldr	r2, [r3, #28]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0204 	bic.w	r2, r2, #4
 8005b96:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	69d9      	ldr	r1, [r3, #28]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	691a      	ldr	r2, [r3, #16]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	61da      	str	r2, [r3, #28]
      break;
 8005baa:	e09e      	b.n	8005cea <HAL_TIM_PWM_ConfigChannel+0x43e>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a52      	ldr	r2, [pc, #328]	; (8005cfc <HAL_TIM_PWM_ConfigChannel+0x450>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d018      	beq.n	8005be8 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bbe:	d013      	beq.n	8005be8 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a4e      	ldr	r2, [pc, #312]	; (8005d00 <HAL_TIM_PWM_ConfigChannel+0x454>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00e      	beq.n	8005be8 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a4d      	ldr	r2, [pc, #308]	; (8005d04 <HAL_TIM_PWM_ConfigChannel+0x458>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d009      	beq.n	8005be8 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a4b      	ldr	r2, [pc, #300]	; (8005d08 <HAL_TIM_PWM_ConfigChannel+0x45c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d004      	beq.n	8005be8 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8005bde:	f241 0158 	movw	r1, #4184	; 0x1058
 8005be2:	484a      	ldr	r0, [pc, #296]	; (8005d0c <HAL_TIM_PWM_ConfigChannel+0x460>)
 8005be4:	f7fa feaf 	bl	8000946 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68b9      	ldr	r1, [r7, #8]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 fc4a 	bl	8006488 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	69da      	ldr	r2, [r3, #28]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c02:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	69da      	ldr	r2, [r3, #28]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	69d9      	ldr	r1, [r3, #28]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	021a      	lsls	r2, r3, #8
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	430a      	orrs	r2, r1
 8005c26:	61da      	str	r2, [r3, #28]
      break;
 8005c28:	e05f      	b.n	8005cea <HAL_TIM_PWM_ConfigChannel+0x43e>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a33      	ldr	r2, [pc, #204]	; (8005cfc <HAL_TIM_PWM_ConfigChannel+0x450>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d009      	beq.n	8005c48 <HAL_TIM_PWM_ConfigChannel+0x39c>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a33      	ldr	r2, [pc, #204]	; (8005d08 <HAL_TIM_PWM_ConfigChannel+0x45c>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d004      	beq.n	8005c48 <HAL_TIM_PWM_ConfigChannel+0x39c>
 8005c3e:	f241 0169 	movw	r1, #4201	; 0x1069
 8005c42:	4832      	ldr	r0, [pc, #200]	; (8005d0c <HAL_TIM_PWM_ConfigChannel+0x460>)
 8005c44:	f7fa fe7f 	bl	8000946 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68b9      	ldr	r1, [r7, #8]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 fccc 	bl	80065ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0208 	orr.w	r2, r2, #8
 8005c62:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0204 	bic.w	r2, r2, #4
 8005c72:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	691a      	ldr	r2, [r3, #16]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005c86:	e030      	b.n	8005cea <HAL_TIM_PWM_ConfigChannel+0x43e>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a1b      	ldr	r2, [pc, #108]	; (8005cfc <HAL_TIM_PWM_ConfigChannel+0x450>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d009      	beq.n	8005ca6 <HAL_TIM_PWM_ConfigChannel+0x3fa>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a1c      	ldr	r2, [pc, #112]	; (8005d08 <HAL_TIM_PWM_ConfigChannel+0x45c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d004      	beq.n	8005ca6 <HAL_TIM_PWM_ConfigChannel+0x3fa>
 8005c9c:	f241 017a 	movw	r1, #4218	; 0x107a
 8005ca0:	481a      	ldr	r0, [pc, #104]	; (8005d0c <HAL_TIM_PWM_ConfigChannel+0x460>)
 8005ca2:	f7fa fe50 	bl	8000946 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68b9      	ldr	r1, [r7, #8]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 fd01 	bl	80066b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cc0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cd0:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	021a      	lsls	r2, r3, #8
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005ce6:	e000      	b.n	8005cea <HAL_TIM_PWM_ConfigChannel+0x43e>
    }

    default:
      break;
 8005ce8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	40012c00 	.word	0x40012c00
 8005d00:	40000400 	.word	0x40000400
 8005d04:	40000800 	.word	0x40000800
 8005d08:	40013400 	.word	0x40013400
 8005d0c:	0800b6cc 	.word	0x0800b6cc

08005d10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d94:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d107      	bne.n	8005db0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2201      	movs	r2, #1
 8005da4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dae:	e02a      	b.n	8005e06 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d107      	bne.n	8005dca <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dc8:	e01d      	b.n	8005e06 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d107      	bne.n	8005de4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2204      	movs	r2, #4
 8005dd8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005de2:	e010      	b.n	8005e06 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d107      	bne.n	8005dfe <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2208      	movs	r2, #8
 8005df2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dfc:	e003      	b.n	8005e06 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f7ff ffb4 	bl	8005d74 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	771a      	strb	r2, [r3, #28]
}
 8005e12:	bf00      	nop
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b084      	sub	sp, #16
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e26:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d10b      	bne.n	8005e4a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2201      	movs	r2, #1
 8005e36:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d136      	bne.n	8005eae <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e48:	e031      	b.n	8005eae <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d10b      	bne.n	8005e6c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2202      	movs	r2, #2
 8005e58:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d125      	bne.n	8005eae <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e6a:	e020      	b.n	8005eae <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d10b      	bne.n	8005e8e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2204      	movs	r2, #4
 8005e7a:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d114      	bne.n	8005eae <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e8c:	e00f      	b.n	8005eae <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d10a      	bne.n	8005eae <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2208      	movs	r2, #8
 8005e9c:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d103      	bne.n	8005eae <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f7ff ff42 	bl	8005d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	771a      	strb	r2, [r3, #28]
}
 8005eba:	bf00      	nop
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b084      	sub	sp, #16
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ece:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d103      	bne.n	8005ee2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	771a      	strb	r2, [r3, #28]
 8005ee0:	e019      	b.n	8005f16 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d103      	bne.n	8005ef4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	771a      	strb	r2, [r3, #28]
 8005ef2:	e010      	b.n	8005f16 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d103      	bne.n	8005f06 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2204      	movs	r2, #4
 8005f02:	771a      	strb	r2, [r3, #28]
 8005f04:	e007      	b.n	8005f16 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d102      	bne.n	8005f16 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2208      	movs	r2, #8
 8005f14:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f7ff ff18 	bl	8005d4c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	771a      	strb	r2, [r3, #28]
}
 8005f22:	bf00      	nop
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
	...

08005f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a3c      	ldr	r2, [pc, #240]	; (8006030 <TIM_Base_SetConfig+0x104>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d00f      	beq.n	8005f64 <TIM_Base_SetConfig+0x38>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4a:	d00b      	beq.n	8005f64 <TIM_Base_SetConfig+0x38>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a39      	ldr	r2, [pc, #228]	; (8006034 <TIM_Base_SetConfig+0x108>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d007      	beq.n	8005f64 <TIM_Base_SetConfig+0x38>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a38      	ldr	r2, [pc, #224]	; (8006038 <TIM_Base_SetConfig+0x10c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d003      	beq.n	8005f64 <TIM_Base_SetConfig+0x38>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a37      	ldr	r2, [pc, #220]	; (800603c <TIM_Base_SetConfig+0x110>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d108      	bne.n	8005f76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a2d      	ldr	r2, [pc, #180]	; (8006030 <TIM_Base_SetConfig+0x104>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d01b      	beq.n	8005fb6 <TIM_Base_SetConfig+0x8a>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f84:	d017      	beq.n	8005fb6 <TIM_Base_SetConfig+0x8a>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a2a      	ldr	r2, [pc, #168]	; (8006034 <TIM_Base_SetConfig+0x108>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d013      	beq.n	8005fb6 <TIM_Base_SetConfig+0x8a>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a29      	ldr	r2, [pc, #164]	; (8006038 <TIM_Base_SetConfig+0x10c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00f      	beq.n	8005fb6 <TIM_Base_SetConfig+0x8a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a28      	ldr	r2, [pc, #160]	; (800603c <TIM_Base_SetConfig+0x110>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d00b      	beq.n	8005fb6 <TIM_Base_SetConfig+0x8a>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a27      	ldr	r2, [pc, #156]	; (8006040 <TIM_Base_SetConfig+0x114>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d007      	beq.n	8005fb6 <TIM_Base_SetConfig+0x8a>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a26      	ldr	r2, [pc, #152]	; (8006044 <TIM_Base_SetConfig+0x118>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d003      	beq.n	8005fb6 <TIM_Base_SetConfig+0x8a>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a25      	ldr	r2, [pc, #148]	; (8006048 <TIM_Base_SetConfig+0x11c>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d108      	bne.n	8005fc8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a10      	ldr	r2, [pc, #64]	; (8006030 <TIM_Base_SetConfig+0x104>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d00f      	beq.n	8006014 <TIM_Base_SetConfig+0xe8>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a11      	ldr	r2, [pc, #68]	; (800603c <TIM_Base_SetConfig+0x110>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d00b      	beq.n	8006014 <TIM_Base_SetConfig+0xe8>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a10      	ldr	r2, [pc, #64]	; (8006040 <TIM_Base_SetConfig+0x114>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d007      	beq.n	8006014 <TIM_Base_SetConfig+0xe8>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a0f      	ldr	r2, [pc, #60]	; (8006044 <TIM_Base_SetConfig+0x118>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d003      	beq.n	8006014 <TIM_Base_SetConfig+0xe8>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a0e      	ldr	r2, [pc, #56]	; (8006048 <TIM_Base_SetConfig+0x11c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d103      	bne.n	800601c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	691a      	ldr	r2, [r3, #16]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	615a      	str	r2, [r3, #20]
}
 8006022:	bf00      	nop
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	40012c00 	.word	0x40012c00
 8006034:	40000400 	.word	0x40000400
 8006038:	40000800 	.word	0x40000800
 800603c:	40013400 	.word	0x40013400
 8006040:	40014000 	.word	0x40014000
 8006044:	40014400 	.word	0x40014400
 8006048:	40014800 	.word	0x40014800

0800604c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	f023 0201 	bic.w	r2, r3, #1
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800607a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f023 0303 	bic.w	r3, r3, #3
 8006086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f023 0302 	bic.w	r3, r3, #2
 8006098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a40      	ldr	r2, [pc, #256]	; (80061a8 <TIM_OC1_SetConfig+0x15c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00f      	beq.n	80060cc <TIM_OC1_SetConfig+0x80>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a3f      	ldr	r2, [pc, #252]	; (80061ac <TIM_OC1_SetConfig+0x160>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d00b      	beq.n	80060cc <TIM_OC1_SetConfig+0x80>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a3e      	ldr	r2, [pc, #248]	; (80061b0 <TIM_OC1_SetConfig+0x164>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d007      	beq.n	80060cc <TIM_OC1_SetConfig+0x80>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a3d      	ldr	r2, [pc, #244]	; (80061b4 <TIM_OC1_SetConfig+0x168>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d003      	beq.n	80060cc <TIM_OC1_SetConfig+0x80>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a3c      	ldr	r2, [pc, #240]	; (80061b8 <TIM_OC1_SetConfig+0x16c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d119      	bne.n	8006100 <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d008      	beq.n	80060e6 <TIM_OC1_SetConfig+0x9a>
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d004      	beq.n	80060e6 <TIM_OC1_SetConfig+0x9a>
 80060dc:	f641 21d6 	movw	r1, #6870	; 0x1ad6
 80060e0:	4836      	ldr	r0, [pc, #216]	; (80061bc <TIM_OC1_SetConfig+0x170>)
 80060e2:	f7fa fc30 	bl	8000946 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f023 0308 	bic.w	r3, r3, #8
 80060ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f023 0304 	bic.w	r3, r3, #4
 80060fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a29      	ldr	r2, [pc, #164]	; (80061a8 <TIM_OC1_SetConfig+0x15c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d00f      	beq.n	8006128 <TIM_OC1_SetConfig+0xdc>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a28      	ldr	r2, [pc, #160]	; (80061ac <TIM_OC1_SetConfig+0x160>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d00b      	beq.n	8006128 <TIM_OC1_SetConfig+0xdc>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a27      	ldr	r2, [pc, #156]	; (80061b0 <TIM_OC1_SetConfig+0x164>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d007      	beq.n	8006128 <TIM_OC1_SetConfig+0xdc>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a26      	ldr	r2, [pc, #152]	; (80061b4 <TIM_OC1_SetConfig+0x168>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d003      	beq.n	8006128 <TIM_OC1_SetConfig+0xdc>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a25      	ldr	r2, [pc, #148]	; (80061b8 <TIM_OC1_SetConfig+0x16c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d12d      	bne.n	8006184 <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006130:	d008      	beq.n	8006144 <TIM_OC1_SetConfig+0xf8>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d004      	beq.n	8006144 <TIM_OC1_SetConfig+0xf8>
 800613a:	f641 21e3 	movw	r1, #6883	; 0x1ae3
 800613e:	481f      	ldr	r0, [pc, #124]	; (80061bc <TIM_OC1_SetConfig+0x170>)
 8006140:	f7fa fc01 	bl	8000946 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800614c:	d008      	beq.n	8006160 <TIM_OC1_SetConfig+0x114>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d004      	beq.n	8006160 <TIM_OC1_SetConfig+0x114>
 8006156:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 800615a:	4818      	ldr	r0, [pc, #96]	; (80061bc <TIM_OC1_SetConfig+0x170>)
 800615c:	f7fa fbf3 	bl	8000946 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006166:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800616e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	4313      	orrs	r3, r2
 8006178:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	4313      	orrs	r3, r2
 8006182:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	621a      	str	r2, [r3, #32]
}
 800619e:	bf00      	nop
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	40012c00 	.word	0x40012c00
 80061ac:	40013400 	.word	0x40013400
 80061b0:	40014000 	.word	0x40014000
 80061b4:	40014400 	.word	0x40014400
 80061b8:	40014800 	.word	0x40014800
 80061bc:	0800b6cc 	.word	0x0800b6cc

080061c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	f023 0210 	bic.w	r2, r3, #16
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	021b      	lsls	r3, r3, #8
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	4313      	orrs	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f023 0320 	bic.w	r3, r3, #32
 800620e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	011b      	lsls	r3, r3, #4
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a3b      	ldr	r2, [pc, #236]	; (800630c <TIM_OC2_SetConfig+0x14c>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d003      	beq.n	800622c <TIM_OC2_SetConfig+0x6c>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a3a      	ldr	r2, [pc, #232]	; (8006310 <TIM_OC2_SetConfig+0x150>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d11a      	bne.n	8006262 <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d008      	beq.n	8006246 <TIM_OC2_SetConfig+0x86>
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	2b08      	cmp	r3, #8
 800623a:	d004      	beq.n	8006246 <TIM_OC2_SetConfig+0x86>
 800623c:	f641 3121 	movw	r1, #6945	; 0x1b21
 8006240:	4834      	ldr	r0, [pc, #208]	; (8006314 <TIM_OC2_SetConfig+0x154>)
 8006242:	f7fa fb80 	bl	8000946 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800624c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	011b      	lsls	r3, r3, #4
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	4313      	orrs	r3, r2
 8006258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006260:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a29      	ldr	r2, [pc, #164]	; (800630c <TIM_OC2_SetConfig+0x14c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00f      	beq.n	800628a <TIM_OC2_SetConfig+0xca>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a28      	ldr	r2, [pc, #160]	; (8006310 <TIM_OC2_SetConfig+0x150>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d00b      	beq.n	800628a <TIM_OC2_SetConfig+0xca>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a28      	ldr	r2, [pc, #160]	; (8006318 <TIM_OC2_SetConfig+0x158>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d007      	beq.n	800628a <TIM_OC2_SetConfig+0xca>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a27      	ldr	r2, [pc, #156]	; (800631c <TIM_OC2_SetConfig+0x15c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d003      	beq.n	800628a <TIM_OC2_SetConfig+0xca>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a26      	ldr	r2, [pc, #152]	; (8006320 <TIM_OC2_SetConfig+0x160>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d12f      	bne.n	80062ea <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006292:	d008      	beq.n	80062a6 <TIM_OC2_SetConfig+0xe6>
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d004      	beq.n	80062a6 <TIM_OC2_SetConfig+0xe6>
 800629c:	f641 312f 	movw	r1, #6959	; 0x1b2f
 80062a0:	481c      	ldr	r0, [pc, #112]	; (8006314 <TIM_OC2_SetConfig+0x154>)
 80062a2:	f7fa fb50 	bl	8000946 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ae:	d008      	beq.n	80062c2 <TIM_OC2_SetConfig+0x102>
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d004      	beq.n	80062c2 <TIM_OC2_SetConfig+0x102>
 80062b8:	f641 3130 	movw	r1, #6960	; 0x1b30
 80062bc:	4815      	ldr	r0, [pc, #84]	; (8006314 <TIM_OC2_SetConfig+0x154>)
 80062be:	f7fa fb42 	bl	8000946 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	4313      	orrs	r3, r2
 80062dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	621a      	str	r2, [r3, #32]
}
 8006304:	bf00      	nop
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	40012c00 	.word	0x40012c00
 8006310:	40013400 	.word	0x40013400
 8006314:	0800b6cc 	.word	0x0800b6cc
 8006318:	40014000 	.word	0x40014000
 800631c:	40014400 	.word	0x40014400
 8006320:	40014800 	.word	0x40014800

08006324 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 0303 	bic.w	r3, r3, #3
 800635e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	021b      	lsls	r3, r3, #8
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	4313      	orrs	r3, r2
 800637c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a3b      	ldr	r2, [pc, #236]	; (8006470 <TIM_OC3_SetConfig+0x14c>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d003      	beq.n	800638e <TIM_OC3_SetConfig+0x6a>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a3a      	ldr	r2, [pc, #232]	; (8006474 <TIM_OC3_SetConfig+0x150>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d11a      	bne.n	80063c4 <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d008      	beq.n	80063a8 <TIM_OC3_SetConfig+0x84>
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	2b08      	cmp	r3, #8
 800639c:	d004      	beq.n	80063a8 <TIM_OC3_SetConfig+0x84>
 800639e:	f641 316c 	movw	r1, #7020	; 0x1b6c
 80063a2:	4835      	ldr	r0, [pc, #212]	; (8006478 <TIM_OC3_SetConfig+0x154>)
 80063a4:	f7fa facf 	bl	8000946 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	021b      	lsls	r3, r3, #8
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a2a      	ldr	r2, [pc, #168]	; (8006470 <TIM_OC3_SetConfig+0x14c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d00f      	beq.n	80063ec <TIM_OC3_SetConfig+0xc8>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a29      	ldr	r2, [pc, #164]	; (8006474 <TIM_OC3_SetConfig+0x150>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d00b      	beq.n	80063ec <TIM_OC3_SetConfig+0xc8>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a29      	ldr	r2, [pc, #164]	; (800647c <TIM_OC3_SetConfig+0x158>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d007      	beq.n	80063ec <TIM_OC3_SetConfig+0xc8>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a28      	ldr	r2, [pc, #160]	; (8006480 <TIM_OC3_SetConfig+0x15c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d003      	beq.n	80063ec <TIM_OC3_SetConfig+0xc8>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a27      	ldr	r2, [pc, #156]	; (8006484 <TIM_OC3_SetConfig+0x160>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d12f      	bne.n	800644c <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063f4:	d008      	beq.n	8006408 <TIM_OC3_SetConfig+0xe4>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d004      	beq.n	8006408 <TIM_OC3_SetConfig+0xe4>
 80063fe:	f641 3179 	movw	r1, #7033	; 0x1b79
 8006402:	481d      	ldr	r0, [pc, #116]	; (8006478 <TIM_OC3_SetConfig+0x154>)
 8006404:	f7fa fa9f 	bl	8000946 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006410:	d008      	beq.n	8006424 <TIM_OC3_SetConfig+0x100>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d004      	beq.n	8006424 <TIM_OC3_SetConfig+0x100>
 800641a:	f641 317a 	movw	r1, #7034	; 0x1b7a
 800641e:	4816      	ldr	r0, [pc, #88]	; (8006478 <TIM_OC3_SetConfig+0x154>)
 8006420:	f7fa fa91 	bl	8000946 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800642a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006432:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	011b      	lsls	r3, r3, #4
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	4313      	orrs	r3, r2
 800643e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	011b      	lsls	r3, r3, #4
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	4313      	orrs	r3, r2
 800644a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	621a      	str	r2, [r3, #32]
}
 8006466:	bf00      	nop
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	40012c00 	.word	0x40012c00
 8006474:	40013400 	.word	0x40013400
 8006478:	0800b6cc 	.word	0x0800b6cc
 800647c:	40014000 	.word	0x40014000
 8006480:	40014400 	.word	0x40014400
 8006484:	40014800 	.word	0x40014800

08006488 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	021b      	lsls	r3, r3, #8
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	031b      	lsls	r3, r3, #12
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a3b      	ldr	r2, [pc, #236]	; (80065d4 <TIM_OC4_SetConfig+0x14c>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d003      	beq.n	80064f4 <TIM_OC4_SetConfig+0x6c>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a3a      	ldr	r2, [pc, #232]	; (80065d8 <TIM_OC4_SetConfig+0x150>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d11a      	bne.n	800652a <TIM_OC4_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d008      	beq.n	800650e <TIM_OC4_SetConfig+0x86>
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	2b08      	cmp	r3, #8
 8006502:	d004      	beq.n	800650e <TIM_OC4_SetConfig+0x86>
 8006504:	f641 31b7 	movw	r1, #7095	; 0x1bb7
 8006508:	4834      	ldr	r0, [pc, #208]	; (80065dc <TIM_OC4_SetConfig+0x154>)
 800650a:	f7fa fa1c 	bl	8000946 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006514:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	031b      	lsls	r3, r3, #12
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	4313      	orrs	r3, r2
 8006520:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006528:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a29      	ldr	r2, [pc, #164]	; (80065d4 <TIM_OC4_SetConfig+0x14c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d00f      	beq.n	8006552 <TIM_OC4_SetConfig+0xca>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a28      	ldr	r2, [pc, #160]	; (80065d8 <TIM_OC4_SetConfig+0x150>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d00b      	beq.n	8006552 <TIM_OC4_SetConfig+0xca>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a28      	ldr	r2, [pc, #160]	; (80065e0 <TIM_OC4_SetConfig+0x158>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d007      	beq.n	8006552 <TIM_OC4_SetConfig+0xca>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a27      	ldr	r2, [pc, #156]	; (80065e4 <TIM_OC4_SetConfig+0x15c>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d003      	beq.n	8006552 <TIM_OC4_SetConfig+0xca>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a26      	ldr	r2, [pc, #152]	; (80065e8 <TIM_OC4_SetConfig+0x160>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d12f      	bne.n	80065b2 <TIM_OC4_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800655a:	d008      	beq.n	800656e <TIM_OC4_SetConfig+0xe6>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d004      	beq.n	800656e <TIM_OC4_SetConfig+0xe6>
 8006564:	f641 31c4 	movw	r1, #7108	; 0x1bc4
 8006568:	481c      	ldr	r0, [pc, #112]	; (80065dc <TIM_OC4_SetConfig+0x154>)
 800656a:	f7fa f9ec 	bl	8000946 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006576:	d008      	beq.n	800658a <TIM_OC4_SetConfig+0x102>
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d004      	beq.n	800658a <TIM_OC4_SetConfig+0x102>
 8006580:	f641 31c5 	movw	r1, #7109	; 0x1bc5
 8006584:	4815      	ldr	r0, [pc, #84]	; (80065dc <TIM_OC4_SetConfig+0x154>)
 8006586:	f7fa f9de 	bl	8000946 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006590:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006598:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	019b      	lsls	r3, r3, #6
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	019b      	lsls	r3, r3, #6
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	621a      	str	r2, [r3, #32]
}
 80065cc:	bf00      	nop
 80065ce:	3718      	adds	r7, #24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	40012c00 	.word	0x40012c00
 80065d8:	40013400 	.word	0x40013400
 80065dc:	0800b6cc 	.word	0x0800b6cc
 80065e0:	40014000 	.word	0x40014000
 80065e4:	40014400 	.word	0x40014400
 80065e8:	40014800 	.word	0x40014800

080065ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800661a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006630:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	041b      	lsls	r3, r3, #16
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a17      	ldr	r2, [pc, #92]	; (80066a0 <TIM_OC5_SetConfig+0xb4>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d00f      	beq.n	8006666 <TIM_OC5_SetConfig+0x7a>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a16      	ldr	r2, [pc, #88]	; (80066a4 <TIM_OC5_SetConfig+0xb8>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d00b      	beq.n	8006666 <TIM_OC5_SetConfig+0x7a>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a15      	ldr	r2, [pc, #84]	; (80066a8 <TIM_OC5_SetConfig+0xbc>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d007      	beq.n	8006666 <TIM_OC5_SetConfig+0x7a>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a14      	ldr	r2, [pc, #80]	; (80066ac <TIM_OC5_SetConfig+0xc0>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d003      	beq.n	8006666 <TIM_OC5_SetConfig+0x7a>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a13      	ldr	r2, [pc, #76]	; (80066b0 <TIM_OC5_SetConfig+0xc4>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d109      	bne.n	800667a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800666c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	021b      	lsls	r3, r3, #8
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	685a      	ldr	r2, [r3, #4]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	621a      	str	r2, [r3, #32]
}
 8006694:	bf00      	nop
 8006696:	371c      	adds	r7, #28
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	40012c00 	.word	0x40012c00
 80066a4:	40013400 	.word	0x40013400
 80066a8:	40014000 	.word	0x40014000
 80066ac:	40014400 	.word	0x40014400
 80066b0:	40014800 	.word	0x40014800

080066b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b087      	sub	sp, #28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	021b      	lsls	r3, r3, #8
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	051b      	lsls	r3, r3, #20
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	4313      	orrs	r3, r2
 8006706:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a18      	ldr	r2, [pc, #96]	; (800676c <TIM_OC6_SetConfig+0xb8>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d00f      	beq.n	8006730 <TIM_OC6_SetConfig+0x7c>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a17      	ldr	r2, [pc, #92]	; (8006770 <TIM_OC6_SetConfig+0xbc>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d00b      	beq.n	8006730 <TIM_OC6_SetConfig+0x7c>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a16      	ldr	r2, [pc, #88]	; (8006774 <TIM_OC6_SetConfig+0xc0>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d007      	beq.n	8006730 <TIM_OC6_SetConfig+0x7c>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a15      	ldr	r2, [pc, #84]	; (8006778 <TIM_OC6_SetConfig+0xc4>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d003      	beq.n	8006730 <TIM_OC6_SetConfig+0x7c>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a14      	ldr	r2, [pc, #80]	; (800677c <TIM_OC6_SetConfig+0xc8>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d109      	bne.n	8006744 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006736:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	029b      	lsls	r3, r3, #10
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	4313      	orrs	r3, r2
 8006742:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	621a      	str	r2, [r3, #32]
}
 800675e:	bf00      	nop
 8006760:	371c      	adds	r7, #28
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	40012c00 	.word	0x40012c00
 8006770:	40013400 	.word	0x40013400
 8006774:	40014000 	.word	0x40014000
 8006778:	40014400 	.word	0x40014400
 800677c:	40014800 	.word	0x40014800

08006780 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4a2d      	ldr	r2, [pc, #180]	; (8006844 <TIM_CCxChannelCmd+0xc4>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d020      	beq.n	80067d6 <TIM_CCxChannelCmd+0x56>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800679a:	d01c      	beq.n	80067d6 <TIM_CCxChannelCmd+0x56>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	4a2a      	ldr	r2, [pc, #168]	; (8006848 <TIM_CCxChannelCmd+0xc8>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d018      	beq.n	80067d6 <TIM_CCxChannelCmd+0x56>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4a29      	ldr	r2, [pc, #164]	; (800684c <TIM_CCxChannelCmd+0xcc>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d014      	beq.n	80067d6 <TIM_CCxChannelCmd+0x56>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4a28      	ldr	r2, [pc, #160]	; (8006850 <TIM_CCxChannelCmd+0xd0>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d010      	beq.n	80067d6 <TIM_CCxChannelCmd+0x56>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4a27      	ldr	r2, [pc, #156]	; (8006854 <TIM_CCxChannelCmd+0xd4>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d00c      	beq.n	80067d6 <TIM_CCxChannelCmd+0x56>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4a26      	ldr	r2, [pc, #152]	; (8006858 <TIM_CCxChannelCmd+0xd8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d008      	beq.n	80067d6 <TIM_CCxChannelCmd+0x56>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4a25      	ldr	r2, [pc, #148]	; (800685c <TIM_CCxChannelCmd+0xdc>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d004      	beq.n	80067d6 <TIM_CCxChannelCmd+0x56>
 80067cc:	f641 6135 	movw	r1, #7733	; 0x1e35
 80067d0:	4823      	ldr	r0, [pc, #140]	; (8006860 <TIM_CCxChannelCmd+0xe0>)
 80067d2:	f7fa f8b8 	bl	8000946 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d016      	beq.n	800680a <TIM_CCxChannelCmd+0x8a>
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d013      	beq.n	800680a <TIM_CCxChannelCmd+0x8a>
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d010      	beq.n	800680a <TIM_CCxChannelCmd+0x8a>
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2b0c      	cmp	r3, #12
 80067ec:	d00d      	beq.n	800680a <TIM_CCxChannelCmd+0x8a>
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2b10      	cmp	r3, #16
 80067f2:	d00a      	beq.n	800680a <TIM_CCxChannelCmd+0x8a>
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2b14      	cmp	r3, #20
 80067f8:	d007      	beq.n	800680a <TIM_CCxChannelCmd+0x8a>
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	2b3c      	cmp	r3, #60	; 0x3c
 80067fe:	d004      	beq.n	800680a <TIM_CCxChannelCmd+0x8a>
 8006800:	f641 6136 	movw	r1, #7734	; 0x1e36
 8006804:	4816      	ldr	r0, [pc, #88]	; (8006860 <TIM_CCxChannelCmd+0xe0>)
 8006806:	f7fa f89e 	bl	8000946 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	f003 031f 	and.w	r3, r3, #31
 8006810:	2201      	movs	r2, #1
 8006812:	fa02 f303 	lsl.w	r3, r2, r3
 8006816:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6a1a      	ldr	r2, [r3, #32]
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	43db      	mvns	r3, r3
 8006820:	401a      	ands	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6a1a      	ldr	r2, [r3, #32]
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f003 031f 	and.w	r3, r3, #31
 8006830:	6879      	ldr	r1, [r7, #4]
 8006832:	fa01 f303 	lsl.w	r3, r1, r3
 8006836:	431a      	orrs	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	621a      	str	r2, [r3, #32]
}
 800683c:	bf00      	nop
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	40012c00 	.word	0x40012c00
 8006848:	40000400 	.word	0x40000400
 800684c:	40000800 	.word	0x40000800
 8006850:	40013400 	.word	0x40013400
 8006854:	40014000 	.word	0x40014000
 8006858:	40014400 	.word	0x40014400
 800685c:	40014800 	.word	0x40014800
 8006860:	0800b6cc 	.word	0x0800b6cc

08006864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a96      	ldr	r2, [pc, #600]	; (8006acc <HAL_TIMEx_MasterConfigSynchronization+0x268>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d027      	beq.n	80068c8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006880:	d022      	beq.n	80068c8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a92      	ldr	r2, [pc, #584]	; (8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d01d      	beq.n	80068c8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a90      	ldr	r2, [pc, #576]	; (8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0x270>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d018      	beq.n	80068c8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a8f      	ldr	r2, [pc, #572]	; (8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0x274>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d013      	beq.n	80068c8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a8d      	ldr	r2, [pc, #564]	; (8006adc <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d00e      	beq.n	80068c8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a8c      	ldr	r2, [pc, #560]	; (8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d009      	beq.n	80068c8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a8a      	ldr	r2, [pc, #552]	; (8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d004      	beq.n	80068c8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80068be:	f44f 61fd 	mov.w	r1, #2024	; 0x7e8
 80068c2:	4889      	ldr	r0, [pc, #548]	; (8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 80068c4:	f7fa f83f 	bl	8000946 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d025      	beq.n	800691c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b10      	cmp	r3, #16
 80068d6:	d021      	beq.n	800691c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b20      	cmp	r3, #32
 80068de:	d01d      	beq.n	800691c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b30      	cmp	r3, #48	; 0x30
 80068e6:	d019      	beq.n	800691c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b40      	cmp	r3, #64	; 0x40
 80068ee:	d015      	beq.n	800691c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b50      	cmp	r3, #80	; 0x50
 80068f6:	d011      	beq.n	800691c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b60      	cmp	r3, #96	; 0x60
 80068fe:	d00d      	beq.n	800691c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b70      	cmp	r3, #112	; 0x70
 8006906:	d009      	beq.n	800691c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006910:	d004      	beq.n	800691c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006912:	f240 71e9 	movw	r1, #2025	; 0x7e9
 8006916:	4874      	ldr	r0, [pc, #464]	; (8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 8006918:	f7fa f815 	bl	8000946 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	2b80      	cmp	r3, #128	; 0x80
 8006922:	d008      	beq.n	8006936 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d004      	beq.n	8006936 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800692c:	f240 71ea 	movw	r1, #2026	; 0x7ea
 8006930:	486d      	ldr	r0, [pc, #436]	; (8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 8006932:	f7fa f808 	bl	8000946 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800693c:	2b01      	cmp	r3, #1
 800693e:	d101      	bne.n	8006944 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006940:	2302      	movs	r3, #2
 8006942:	e0be      	b.n	8006ac2 <HAL_TIMEx_MasterConfigSynchronization+0x25e>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a58      	ldr	r2, [pc, #352]	; (8006acc <HAL_TIMEx_MasterConfigSynchronization+0x268>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d004      	beq.n	8006978 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a5b      	ldr	r2, [pc, #364]	; (8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d161      	bne.n	8006a3c <HAL_TIMEx_MasterConfigSynchronization+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d054      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006988:	d04f      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006992:	d04a      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800699c:	d045      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069a6:	d040      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80069b0:	d03b      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069ba:	d036      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069c4:	d031      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80069ce:	d02c      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069d8:	d027      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 80069e2:	d022      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80069ec:	d01d      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 80069f6:	d018      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006a00:	d013      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8006a0a:	d00e      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8006a14:	d009      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8006a1e:	d004      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8006a20:	f240 71fc 	movw	r1, #2044	; 0x7fc
 8006a24:	4830      	ldr	r0, [pc, #192]	; (8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 8006a26:	f7f9 ff8e 	bl	8000946 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a1b      	ldr	r2, [pc, #108]	; (8006acc <HAL_TIMEx_MasterConfigSynchronization+0x268>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d018      	beq.n	8006a96 <HAL_TIMEx_MasterConfigSynchronization+0x232>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a6c:	d013      	beq.n	8006a96 <HAL_TIMEx_MasterConfigSynchronization+0x232>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a17      	ldr	r2, [pc, #92]	; (8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d00e      	beq.n	8006a96 <HAL_TIMEx_MasterConfigSynchronization+0x232>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a15      	ldr	r2, [pc, #84]	; (8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0x270>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d009      	beq.n	8006a96 <HAL_TIMEx_MasterConfigSynchronization+0x232>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a16      	ldr	r2, [pc, #88]	; (8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d004      	beq.n	8006a96 <HAL_TIMEx_MasterConfigSynchronization+0x232>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a14      	ldr	r2, [pc, #80]	; (8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d10c      	bne.n	8006ab0 <HAL_TIMEx_MasterConfigSynchronization+0x24c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	40012c00 	.word	0x40012c00
 8006ad0:	40000400 	.word	0x40000400
 8006ad4:	40000800 	.word	0x40000800
 8006ad8:	40001000 	.word	0x40001000
 8006adc:	40001400 	.word	0x40001400
 8006ae0:	40013400 	.word	0x40013400
 8006ae4:	40014000 	.word	0x40014000
 8006ae8:	0800b704 	.word	0x0800b704

08006aec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006af6:	2300      	movs	r3, #0
 8006af8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a49      	ldr	r2, [pc, #292]	; (8006c24 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d018      	beq.n	8006b36 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a47      	ldr	r2, [pc, #284]	; (8006c28 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d013      	beq.n	8006b36 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a46      	ldr	r2, [pc, #280]	; (8006c2c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d00e      	beq.n	8006b36 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a44      	ldr	r2, [pc, #272]	; (8006c30 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d009      	beq.n	8006b36 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a43      	ldr	r2, [pc, #268]	; (8006c34 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d004      	beq.n	8006b36 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8006b2c:	f640 0131 	movw	r1, #2097	; 0x831
 8006b30:	4841      	ldr	r0, [pc, #260]	; (8006c38 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8006b32:	f7f9 ff08 	bl	8000946 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b3e:	d008      	beq.n	8006b52 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d004      	beq.n	8006b52 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8006b48:	f640 0132 	movw	r1, #2098	; 0x832
 8006b4c:	483a      	ldr	r0, [pc, #232]	; (8006c38 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8006b4e:	f7f9 fefa 	bl	8000946 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b5a:	d008      	beq.n	8006b6e <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d004      	beq.n	8006b6e <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8006b64:	f640 0133 	movw	r1, #2099	; 0x833
 8006b68:	4833      	ldr	r0, [pc, #204]	; (8006c38 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8006b6a:	f7f9 feec 	bl	8000946 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d013      	beq.n	8006b9e <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b7e:	d00e      	beq.n	8006b9e <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b88:	d009      	beq.n	8006b9e <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b92:	d004      	beq.n	8006b9e <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8006b94:	f640 0134 	movw	r1, #2100	; 0x834
 8006b98:	4827      	ldr	r0, [pc, #156]	; (8006c38 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8006b9a:	f7f9 fed4 	bl	8000946 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	2bff      	cmp	r3, #255	; 0xff
 8006ba4:	d904      	bls.n	8006bb0 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>
 8006ba6:	f640 0135 	movw	r1, #2101	; 0x835
 8006baa:	4823      	ldr	r0, [pc, #140]	; (8006c38 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8006bac:	f7f9 fecb 	bl	8000946 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bb8:	d008      	beq.n	8006bcc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d004      	beq.n	8006bcc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006bc2:	f640 0136 	movw	r1, #2102	; 0x836
 8006bc6:	481c      	ldr	r0, [pc, #112]	; (8006c38 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8006bc8:	f7f9 febd 	bl	8000946 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	695b      	ldr	r3, [r3, #20]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d009      	beq.n	8006be8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bdc:	d004      	beq.n	8006be8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8006bde:	f640 0137 	movw	r1, #2103	; 0x837
 8006be2:	4815      	ldr	r0, [pc, #84]	; (8006c38 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8006be4:	f7f9 feaf 	bl	8000946 <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	2b0f      	cmp	r3, #15
 8006bee:	d904      	bls.n	8006bfa <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006bf0:	f640 0138 	movw	r1, #2104	; 0x838
 8006bf4:	4810      	ldr	r0, [pc, #64]	; (8006c38 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8006bf6:	f7f9 fea6 	bl	8000946 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c02:	d008      	beq.n	8006c16 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d004      	beq.n	8006c16 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006c0c:	f640 0139 	movw	r1, #2105	; 0x839
 8006c10:	4809      	ldr	r0, [pc, #36]	; (8006c38 <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8006c12:	f7f9 fe98 	bl	8000946 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d10d      	bne.n	8006c3c <HAL_TIMEx_ConfigBreakDeadTime+0x150>
 8006c20:	2302      	movs	r3, #2
 8006c22:	e0d4      	b.n	8006dce <HAL_TIMEx_ConfigBreakDeadTime+0x2e2>
 8006c24:	40012c00 	.word	0x40012c00
 8006c28:	40013400 	.word	0x40013400
 8006c2c:	40014000 	.word	0x40014000
 8006c30:	40014400 	.word	0x40014400
 8006c34:	40014800 	.word	0x40014800
 8006c38:	0800b704 	.word	0x0800b704
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	041b      	lsls	r3, r3, #16
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a47      	ldr	r2, [pc, #284]	; (8006dd8 <HAL_TIMEx_ConfigBreakDeadTime+0x2ec>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d004      	beq.n	8006cca <HAL_TIMEx_ConfigBreakDeadTime+0x1de>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a45      	ldr	r2, [pc, #276]	; (8006ddc <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d114      	bne.n	8006cf4 <HAL_TIMEx_ConfigBreakDeadTime+0x208>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d009      	beq.n	8006ce6 <HAL_TIMEx_ConfigBreakDeadTime+0x1fa>
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cda:	d004      	beq.n	8006ce6 <HAL_TIMEx_ConfigBreakDeadTime+0x1fa>
 8006cdc:	f640 014e 	movw	r1, #2126	; 0x84e
 8006ce0:	483f      	ldr	r0, [pc, #252]	; (8006de0 <HAL_TIMEx_ConfigBreakDeadTime+0x2f4>)
 8006ce2:	f7f9 fe30 	bl	8000946 <assert_failed>

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	69db      	ldr	r3, [r3, #28]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a37      	ldr	r2, [pc, #220]	; (8006dd8 <HAL_TIMEx_ConfigBreakDeadTime+0x2ec>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d004      	beq.n	8006d08 <HAL_TIMEx_ConfigBreakDeadTime+0x21c>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a36      	ldr	r2, [pc, #216]	; (8006ddc <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d159      	bne.n	8006dbc <HAL_TIMEx_ConfigBreakDeadTime+0x2d0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d10:	d008      	beq.n	8006d24 <HAL_TIMEx_ConfigBreakDeadTime+0x238>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d004      	beq.n	8006d24 <HAL_TIMEx_ConfigBreakDeadTime+0x238>
 8006d1a:	f640 0157 	movw	r1, #2135	; 0x857
 8006d1e:	4830      	ldr	r0, [pc, #192]	; (8006de0 <HAL_TIMEx_ConfigBreakDeadTime+0x2f4>)
 8006d20:	f7f9 fe11 	bl	8000946 <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d009      	beq.n	8006d40 <HAL_TIMEx_ConfigBreakDeadTime+0x254>
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d34:	d004      	beq.n	8006d40 <HAL_TIMEx_ConfigBreakDeadTime+0x254>
 8006d36:	f640 0158 	movw	r1, #2136	; 0x858
 8006d3a:	4829      	ldr	r0, [pc, #164]	; (8006de0 <HAL_TIMEx_ConfigBreakDeadTime+0x2f4>)
 8006d3c:	f7f9 fe03 	bl	8000946 <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d44:	2b0f      	cmp	r3, #15
 8006d46:	d904      	bls.n	8006d52 <HAL_TIMEx_ConfigBreakDeadTime+0x266>
 8006d48:	f640 0159 	movw	r1, #2137	; 0x859
 8006d4c:	4824      	ldr	r0, [pc, #144]	; (8006de0 <HAL_TIMEx_ConfigBreakDeadTime+0x2f4>)
 8006d4e:	f7f9 fdfa 	bl	8000946 <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5c:	051b      	lsls	r3, r3, #20
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a15      	ldr	r2, [pc, #84]	; (8006dd8 <HAL_TIMEx_ConfigBreakDeadTime+0x2ec>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d004      	beq.n	8006d92 <HAL_TIMEx_ConfigBreakDeadTime+0x2a6>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a13      	ldr	r2, [pc, #76]	; (8006ddc <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d114      	bne.n	8006dbc <HAL_TIMEx_ConfigBreakDeadTime+0x2d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d009      	beq.n	8006dae <HAL_TIMEx_ConfigBreakDeadTime+0x2c2>
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006da2:	d004      	beq.n	8006dae <HAL_TIMEx_ConfigBreakDeadTime+0x2c2>
 8006da4:	f640 0163 	movw	r1, #2147	; 0x863
 8006da8:	480d      	ldr	r0, [pc, #52]	; (8006de0 <HAL_TIMEx_ConfigBreakDeadTime+0x2f4>)
 8006daa:	f7f9 fdcc 	bl	8000946 <assert_failed>

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db8:	4313      	orrs	r3, r2
 8006dba:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	40012c00 	.word	0x40012c00
 8006ddc:	40013400 	.word	0x40013400
 8006de0:	0800b704 	.word	0x0800b704

08006de4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006e78:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006e7c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b085      	sub	sp, #20
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006eaa:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006eae:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	43db      	mvns	r3, r3
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006ed8:	b084      	sub	sp, #16
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b082      	sub	sp, #8
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	f107 0014 	add.w	r0, r7, #20
 8006ee6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7ff ffb0 	bl	8006e70 <USB_EnableGlobalInt>

  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f1c:	b004      	add	sp, #16
 8006f1e:	4770      	bx	lr

08006f20 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f20:	b490      	push	{r4, r7}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f44:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	78db      	ldrb	r3, [r3, #3]
 8006f4a:	2b03      	cmp	r3, #3
 8006f4c:	d819      	bhi.n	8006f82 <USB_ActivateEndpoint+0x62>
 8006f4e:	a201      	add	r2, pc, #4	; (adr r2, 8006f54 <USB_ActivateEndpoint+0x34>)
 8006f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f54:	08006f65 	.word	0x08006f65
 8006f58:	08006f79 	.word	0x08006f79
 8006f5c:	08006f89 	.word	0x08006f89
 8006f60:	08006f6f 	.word	0x08006f6f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006f64:	89bb      	ldrh	r3, [r7, #12]
 8006f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f6a:	81bb      	strh	r3, [r7, #12]
      break;
 8006f6c:	e00d      	b.n	8006f8a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006f6e:	89bb      	ldrh	r3, [r7, #12]
 8006f70:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006f74:	81bb      	strh	r3, [r7, #12]
      break;
 8006f76:	e008      	b.n	8006f8a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006f78:	89bb      	ldrh	r3, [r7, #12]
 8006f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f7e:	81bb      	strh	r3, [r7, #12]
      break;
 8006f80:	e003      	b.n	8006f8a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	73fb      	strb	r3, [r7, #15]
      break;
 8006f86:	e000      	b.n	8006f8a <USB_ActivateEndpoint+0x6a>
      break;
 8006f88:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	441a      	add	r2, r3
 8006f94:	89bb      	ldrh	r3, [r7, #12]
 8006f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	b21b      	sxth	r3, r3
 8006fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc2:	b21a      	sxth	r2, r3
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	b21b      	sxth	r3, r3
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	b21b      	sxth	r3, r3
 8006fce:	b29c      	uxth	r4, r3
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	441a      	add	r2, r3
 8006fda:	4b8a      	ldr	r3, [pc, #552]	; (8007204 <USB_ActivateEndpoint+0x2e4>)
 8006fdc:	4323      	orrs	r3, r4
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	7b1b      	ldrb	r3, [r3, #12]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f040 8112 	bne.w	8007210 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	785b      	ldrb	r3, [r3, #1]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d067      	beq.n	80070c4 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ff4:	687c      	ldr	r4, [r7, #4]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	441c      	add	r4, r3
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	00db      	lsls	r3, r3, #3
 8007006:	4423      	add	r3, r4
 8007008:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800700c:	461c      	mov	r4, r3
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	88db      	ldrh	r3, [r3, #6]
 8007012:	085b      	lsrs	r3, r3, #1
 8007014:	b29b      	uxth	r3, r3
 8007016:	005b      	lsls	r3, r3, #1
 8007018:	b29b      	uxth	r3, r3
 800701a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	881b      	ldrh	r3, [r3, #0]
 8007028:	b29c      	uxth	r4, r3
 800702a:	4623      	mov	r3, r4
 800702c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007030:	2b00      	cmp	r3, #0
 8007032:	d014      	beq.n	800705e <USB_ActivateEndpoint+0x13e>
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4413      	add	r3, r2
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	b29b      	uxth	r3, r3
 8007042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800704a:	b29c      	uxth	r4, r3
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	441a      	add	r2, r3
 8007056:	4b6c      	ldr	r3, [pc, #432]	; (8007208 <USB_ActivateEndpoint+0x2e8>)
 8007058:	4323      	orrs	r3, r4
 800705a:	b29b      	uxth	r3, r3
 800705c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	78db      	ldrb	r3, [r3, #3]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d018      	beq.n	8007098 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	b29b      	uxth	r3, r3
 8007074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800707c:	b29c      	uxth	r4, r3
 800707e:	f084 0320 	eor.w	r3, r4, #32
 8007082:	b29c      	uxth	r4, r3
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	441a      	add	r2, r3
 800708e:	4b5d      	ldr	r3, [pc, #372]	; (8007204 <USB_ActivateEndpoint+0x2e4>)
 8007090:	4323      	orrs	r3, r4
 8007092:	b29b      	uxth	r3, r3
 8007094:	8013      	strh	r3, [r2, #0]
 8007096:	e22b      	b.n	80074f0 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ae:	b29c      	uxth	r4, r3
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	441a      	add	r2, r3
 80070ba:	4b52      	ldr	r3, [pc, #328]	; (8007204 <USB_ActivateEndpoint+0x2e4>)
 80070bc:	4323      	orrs	r3, r4
 80070be:	b29b      	uxth	r3, r3
 80070c0:	8013      	strh	r3, [r2, #0]
 80070c2:	e215      	b.n	80074f0 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80070c4:	687c      	ldr	r4, [r7, #4]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	441c      	add	r4, r3
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	4423      	add	r3, r4
 80070d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070dc:	461c      	mov	r4, r3
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	88db      	ldrh	r3, [r3, #6]
 80070e2:	085b      	lsrs	r3, r3, #1
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80070ec:	687c      	ldr	r4, [r7, #4]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	441c      	add	r4, r3
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	00db      	lsls	r3, r3, #3
 80070fe:	4423      	add	r3, r4
 8007100:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007104:	461c      	mov	r4, r3
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10e      	bne.n	800712c <USB_ActivateEndpoint+0x20c>
 800710e:	8823      	ldrh	r3, [r4, #0]
 8007110:	b29b      	uxth	r3, r3
 8007112:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007116:	b29b      	uxth	r3, r3
 8007118:	8023      	strh	r3, [r4, #0]
 800711a:	8823      	ldrh	r3, [r4, #0]
 800711c:	b29b      	uxth	r3, r3
 800711e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007126:	b29b      	uxth	r3, r3
 8007128:	8023      	strh	r3, [r4, #0]
 800712a:	e02d      	b.n	8007188 <USB_ActivateEndpoint+0x268>
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	2b3e      	cmp	r3, #62	; 0x3e
 8007132:	d812      	bhi.n	800715a <USB_ActivateEndpoint+0x23a>
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	085b      	lsrs	r3, r3, #1
 800713a:	60bb      	str	r3, [r7, #8]
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <USB_ActivateEndpoint+0x22e>
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	3301      	adds	r3, #1
 800714c:	60bb      	str	r3, [r7, #8]
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	b29b      	uxth	r3, r3
 8007152:	029b      	lsls	r3, r3, #10
 8007154:	b29b      	uxth	r3, r3
 8007156:	8023      	strh	r3, [r4, #0]
 8007158:	e016      	b.n	8007188 <USB_ActivateEndpoint+0x268>
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	095b      	lsrs	r3, r3, #5
 8007160:	60bb      	str	r3, [r7, #8]
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	f003 031f 	and.w	r3, r3, #31
 800716a:	2b00      	cmp	r3, #0
 800716c:	d102      	bne.n	8007174 <USB_ActivateEndpoint+0x254>
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	3b01      	subs	r3, #1
 8007172:	60bb      	str	r3, [r7, #8]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	b29b      	uxth	r3, r3
 8007178:	029b      	lsls	r3, r3, #10
 800717a:	b29b      	uxth	r3, r3
 800717c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007184:	b29b      	uxth	r3, r3
 8007186:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	b29c      	uxth	r4, r3
 8007196:	4623      	mov	r3, r4
 8007198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d014      	beq.n	80071ca <USB_ActivateEndpoint+0x2aa>
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b6:	b29c      	uxth	r4, r3
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	441a      	add	r2, r3
 80071c2:	4b12      	ldr	r3, [pc, #72]	; (800720c <USB_ActivateEndpoint+0x2ec>)
 80071c4:	4323      	orrs	r3, r4
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	881b      	ldrh	r3, [r3, #0]
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e0:	b29c      	uxth	r4, r3
 80071e2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80071e6:	b29c      	uxth	r4, r3
 80071e8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80071ec:	b29c      	uxth	r4, r3
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	441a      	add	r2, r3
 80071f8:	4b02      	ldr	r3, [pc, #8]	; (8007204 <USB_ActivateEndpoint+0x2e4>)
 80071fa:	4323      	orrs	r3, r4
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	8013      	strh	r3, [r2, #0]
 8007200:	e176      	b.n	80074f0 <USB_ActivateEndpoint+0x5d0>
 8007202:	bf00      	nop
 8007204:	ffff8080 	.word	0xffff8080
 8007208:	ffff80c0 	.word	0xffff80c0
 800720c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	881b      	ldrh	r3, [r3, #0]
 800721c:	b29b      	uxth	r3, r3
 800721e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007226:	b29c      	uxth	r4, r3
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	441a      	add	r2, r3
 8007232:	4b96      	ldr	r3, [pc, #600]	; (800748c <USB_ActivateEndpoint+0x56c>)
 8007234:	4323      	orrs	r3, r4
 8007236:	b29b      	uxth	r3, r3
 8007238:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800723a:	687c      	ldr	r4, [r7, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007242:	b29b      	uxth	r3, r3
 8007244:	441c      	add	r4, r3
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	00db      	lsls	r3, r3, #3
 800724c:	4423      	add	r3, r4
 800724e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007252:	461c      	mov	r4, r3
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	891b      	ldrh	r3, [r3, #8]
 8007258:	085b      	lsrs	r3, r3, #1
 800725a:	b29b      	uxth	r3, r3
 800725c:	005b      	lsls	r3, r3, #1
 800725e:	b29b      	uxth	r3, r3
 8007260:	8023      	strh	r3, [r4, #0]
 8007262:	687c      	ldr	r4, [r7, #4]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800726a:	b29b      	uxth	r3, r3
 800726c:	441c      	add	r4, r3
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	4423      	add	r3, r4
 8007276:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800727a:	461c      	mov	r4, r3
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	895b      	ldrh	r3, [r3, #10]
 8007280:	085b      	lsrs	r3, r3, #1
 8007282:	b29b      	uxth	r3, r3
 8007284:	005b      	lsls	r3, r3, #1
 8007286:	b29b      	uxth	r3, r3
 8007288:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	785b      	ldrb	r3, [r3, #1]
 800728e:	2b00      	cmp	r3, #0
 8007290:	f040 8088 	bne.w	80073a4 <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	881b      	ldrh	r3, [r3, #0]
 80072a0:	b29c      	uxth	r4, r3
 80072a2:	4623      	mov	r3, r4
 80072a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d014      	beq.n	80072d6 <USB_ActivateEndpoint+0x3b6>
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c2:	b29c      	uxth	r4, r3
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	441a      	add	r2, r3
 80072ce:	4b70      	ldr	r3, [pc, #448]	; (8007490 <USB_ActivateEndpoint+0x570>)
 80072d0:	4323      	orrs	r3, r4
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	881b      	ldrh	r3, [r3, #0]
 80072e2:	b29c      	uxth	r4, r3
 80072e4:	4623      	mov	r3, r4
 80072e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d014      	beq.n	8007318 <USB_ActivateEndpoint+0x3f8>
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4413      	add	r3, r2
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007304:	b29c      	uxth	r4, r3
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	441a      	add	r2, r3
 8007310:	4b60      	ldr	r3, [pc, #384]	; (8007494 <USB_ActivateEndpoint+0x574>)
 8007312:	4323      	orrs	r3, r4
 8007314:	b29b      	uxth	r3, r3
 8007316:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	4413      	add	r3, r2
 8007322:	881b      	ldrh	r3, [r3, #0]
 8007324:	b29b      	uxth	r3, r3
 8007326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800732a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800732e:	b29c      	uxth	r4, r3
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	441a      	add	r2, r3
 800733a:	4b56      	ldr	r3, [pc, #344]	; (8007494 <USB_ActivateEndpoint+0x574>)
 800733c:	4323      	orrs	r3, r4
 800733e:	b29b      	uxth	r3, r3
 8007340:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	881b      	ldrh	r3, [r3, #0]
 800734e:	b29b      	uxth	r3, r3
 8007350:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007358:	b29c      	uxth	r4, r3
 800735a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800735e:	b29c      	uxth	r4, r3
 8007360:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007364:	b29c      	uxth	r4, r3
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	441a      	add	r2, r3
 8007370:	4b49      	ldr	r3, [pc, #292]	; (8007498 <USB_ActivateEndpoint+0x578>)
 8007372:	4323      	orrs	r3, r4
 8007374:	b29b      	uxth	r3, r3
 8007376:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	881b      	ldrh	r3, [r3, #0]
 8007384:	b29b      	uxth	r3, r3
 8007386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800738a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800738e:	b29c      	uxth	r4, r3
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	441a      	add	r2, r3
 800739a:	4b3f      	ldr	r3, [pc, #252]	; (8007498 <USB_ActivateEndpoint+0x578>)
 800739c:	4323      	orrs	r3, r4
 800739e:	b29b      	uxth	r3, r3
 80073a0:	8013      	strh	r3, [r2, #0]
 80073a2:	e0a5      	b.n	80074f0 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	881b      	ldrh	r3, [r3, #0]
 80073b0:	b29c      	uxth	r4, r3
 80073b2:	4623      	mov	r3, r4
 80073b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d014      	beq.n	80073e6 <USB_ActivateEndpoint+0x4c6>
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4413      	add	r3, r2
 80073c6:	881b      	ldrh	r3, [r3, #0]
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d2:	b29c      	uxth	r4, r3
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	441a      	add	r2, r3
 80073de:	4b2c      	ldr	r3, [pc, #176]	; (8007490 <USB_ActivateEndpoint+0x570>)
 80073e0:	4323      	orrs	r3, r4
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4413      	add	r3, r2
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	b29c      	uxth	r4, r3
 80073f4:	4623      	mov	r3, r4
 80073f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d014      	beq.n	8007428 <USB_ActivateEndpoint+0x508>
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	b29b      	uxth	r3, r3
 800740c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007414:	b29c      	uxth	r4, r3
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	441a      	add	r2, r3
 8007420:	4b1c      	ldr	r3, [pc, #112]	; (8007494 <USB_ActivateEndpoint+0x574>)
 8007422:	4323      	orrs	r3, r4
 8007424:	b29b      	uxth	r3, r3
 8007426:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	881b      	ldrh	r3, [r3, #0]
 8007434:	b29b      	uxth	r3, r3
 8007436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800743a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800743e:	b29c      	uxth	r4, r3
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	441a      	add	r2, r3
 800744a:	4b11      	ldr	r3, [pc, #68]	; (8007490 <USB_ActivateEndpoint+0x570>)
 800744c:	4323      	orrs	r3, r4
 800744e:	b29b      	uxth	r3, r3
 8007450:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	78db      	ldrb	r3, [r3, #3]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d020      	beq.n	800749c <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	881b      	ldrh	r3, [r3, #0]
 8007466:	b29b      	uxth	r3, r3
 8007468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800746c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007470:	b29c      	uxth	r4, r3
 8007472:	f084 0320 	eor.w	r3, r4, #32
 8007476:	b29c      	uxth	r4, r3
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	441a      	add	r2, r3
 8007482:	4b05      	ldr	r3, [pc, #20]	; (8007498 <USB_ActivateEndpoint+0x578>)
 8007484:	4323      	orrs	r3, r4
 8007486:	b29b      	uxth	r3, r3
 8007488:	8013      	strh	r3, [r2, #0]
 800748a:	e01c      	b.n	80074c6 <USB_ActivateEndpoint+0x5a6>
 800748c:	ffff8180 	.word	0xffff8180
 8007490:	ffffc080 	.word	0xffffc080
 8007494:	ffff80c0 	.word	0xffff80c0
 8007498:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074b2:	b29c      	uxth	r4, r3
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	441a      	add	r2, r3
 80074be:	4b0f      	ldr	r3, [pc, #60]	; (80074fc <USB_ActivateEndpoint+0x5dc>)
 80074c0:	4323      	orrs	r3, r4
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4413      	add	r3, r2
 80074d0:	881b      	ldrh	r3, [r3, #0]
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074dc:	b29c      	uxth	r4, r3
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	441a      	add	r2, r3
 80074e8:	4b04      	ldr	r3, [pc, #16]	; (80074fc <USB_ActivateEndpoint+0x5dc>)
 80074ea:	4323      	orrs	r3, r4
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bc90      	pop	{r4, r7}
 80074fa:	4770      	bx	lr
 80074fc:	ffff8080 	.word	0xffff8080

08007500 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007500:	b490      	push	{r4, r7}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	7b1b      	ldrb	r3, [r3, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d171      	bne.n	80075f6 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	785b      	ldrb	r3, [r3, #1]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d036      	beq.n	8007588 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4413      	add	r3, r2
 8007524:	881b      	ldrh	r3, [r3, #0]
 8007526:	b29c      	uxth	r4, r3
 8007528:	4623      	mov	r3, r4
 800752a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800752e:	2b00      	cmp	r3, #0
 8007530:	d014      	beq.n	800755c <USB_DeactivateEndpoint+0x5c>
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	4413      	add	r3, r2
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	b29b      	uxth	r3, r3
 8007540:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007548:	b29c      	uxth	r4, r3
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	441a      	add	r2, r3
 8007554:	4b6b      	ldr	r3, [pc, #428]	; (8007704 <USB_DeactivateEndpoint+0x204>)
 8007556:	4323      	orrs	r3, r4
 8007558:	b29b      	uxth	r3, r3
 800755a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	881b      	ldrh	r3, [r3, #0]
 8007568:	b29b      	uxth	r3, r3
 800756a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800756e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007572:	b29c      	uxth	r4, r3
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	441a      	add	r2, r3
 800757e:	4b62      	ldr	r3, [pc, #392]	; (8007708 <USB_DeactivateEndpoint+0x208>)
 8007580:	4323      	orrs	r3, r4
 8007582:	b29b      	uxth	r3, r3
 8007584:	8013      	strh	r3, [r2, #0]
 8007586:	e144      	b.n	8007812 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	b29c      	uxth	r4, r3
 8007596:	4623      	mov	r3, r4
 8007598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d014      	beq.n	80075ca <USB_DeactivateEndpoint+0xca>
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b6:	b29c      	uxth	r4, r3
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	441a      	add	r2, r3
 80075c2:	4b52      	ldr	r3, [pc, #328]	; (800770c <USB_DeactivateEndpoint+0x20c>)
 80075c4:	4323      	orrs	r3, r4
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	4413      	add	r3, r2
 80075d4:	881b      	ldrh	r3, [r3, #0]
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075e0:	b29c      	uxth	r4, r3
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	441a      	add	r2, r3
 80075ec:	4b46      	ldr	r3, [pc, #280]	; (8007708 <USB_DeactivateEndpoint+0x208>)
 80075ee:	4323      	orrs	r3, r4
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	8013      	strh	r3, [r2, #0]
 80075f4:	e10d      	b.n	8007812 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	785b      	ldrb	r3, [r3, #1]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f040 8088 	bne.w	8007710 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4413      	add	r3, r2
 800760a:	881b      	ldrh	r3, [r3, #0]
 800760c:	b29c      	uxth	r4, r3
 800760e:	4623      	mov	r3, r4
 8007610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d014      	beq.n	8007642 <USB_DeactivateEndpoint+0x142>
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	b29b      	uxth	r3, r3
 8007626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800762a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800762e:	b29c      	uxth	r4, r3
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	441a      	add	r2, r3
 800763a:	4b34      	ldr	r3, [pc, #208]	; (800770c <USB_DeactivateEndpoint+0x20c>)
 800763c:	4323      	orrs	r3, r4
 800763e:	b29b      	uxth	r3, r3
 8007640:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	b29c      	uxth	r4, r3
 8007650:	4623      	mov	r3, r4
 8007652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007656:	2b00      	cmp	r3, #0
 8007658:	d014      	beq.n	8007684 <USB_DeactivateEndpoint+0x184>
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	881b      	ldrh	r3, [r3, #0]
 8007666:	b29b      	uxth	r3, r3
 8007668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800766c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007670:	b29c      	uxth	r4, r3
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	441a      	add	r2, r3
 800767c:	4b21      	ldr	r3, [pc, #132]	; (8007704 <USB_DeactivateEndpoint+0x204>)
 800767e:	4323      	orrs	r3, r4
 8007680:	b29b      	uxth	r3, r3
 8007682:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	881b      	ldrh	r3, [r3, #0]
 8007690:	b29b      	uxth	r3, r3
 8007692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800769a:	b29c      	uxth	r4, r3
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	441a      	add	r2, r3
 80076a6:	4b17      	ldr	r3, [pc, #92]	; (8007704 <USB_DeactivateEndpoint+0x204>)
 80076a8:	4323      	orrs	r3, r4
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	881b      	ldrh	r3, [r3, #0]
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c4:	b29c      	uxth	r4, r3
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	441a      	add	r2, r3
 80076d0:	4b0d      	ldr	r3, [pc, #52]	; (8007708 <USB_DeactivateEndpoint+0x208>)
 80076d2:	4323      	orrs	r3, r4
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ee:	b29c      	uxth	r4, r3
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	441a      	add	r2, r3
 80076fa:	4b03      	ldr	r3, [pc, #12]	; (8007708 <USB_DeactivateEndpoint+0x208>)
 80076fc:	4323      	orrs	r3, r4
 80076fe:	b29b      	uxth	r3, r3
 8007700:	8013      	strh	r3, [r2, #0]
 8007702:	e086      	b.n	8007812 <USB_DeactivateEndpoint+0x312>
 8007704:	ffff80c0 	.word	0xffff80c0
 8007708:	ffff8080 	.word	0xffff8080
 800770c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	4413      	add	r3, r2
 800771a:	881b      	ldrh	r3, [r3, #0]
 800771c:	b29c      	uxth	r4, r3
 800771e:	4623      	mov	r3, r4
 8007720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d014      	beq.n	8007752 <USB_DeactivateEndpoint+0x252>
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	b29b      	uxth	r3, r3
 8007736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800773a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800773e:	b29c      	uxth	r4, r3
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	441a      	add	r2, r3
 800774a:	4b35      	ldr	r3, [pc, #212]	; (8007820 <USB_DeactivateEndpoint+0x320>)
 800774c:	4323      	orrs	r3, r4
 800774e:	b29b      	uxth	r3, r3
 8007750:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	b29c      	uxth	r4, r3
 8007760:	4623      	mov	r3, r4
 8007762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007766:	2b00      	cmp	r3, #0
 8007768:	d014      	beq.n	8007794 <USB_DeactivateEndpoint+0x294>
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	b29b      	uxth	r3, r3
 8007778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800777c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007780:	b29c      	uxth	r4, r3
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	441a      	add	r2, r3
 800778c:	4b25      	ldr	r3, [pc, #148]	; (8007824 <USB_DeactivateEndpoint+0x324>)
 800778e:	4323      	orrs	r3, r4
 8007790:	b29b      	uxth	r3, r3
 8007792:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077aa:	b29c      	uxth	r4, r3
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	441a      	add	r2, r3
 80077b6:	4b1a      	ldr	r3, [pc, #104]	; (8007820 <USB_DeactivateEndpoint+0x320>)
 80077b8:	4323      	orrs	r3, r4
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077d4:	b29c      	uxth	r4, r3
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	441a      	add	r2, r3
 80077e0:	4b11      	ldr	r3, [pc, #68]	; (8007828 <USB_DeactivateEndpoint+0x328>)
 80077e2:	4323      	orrs	r3, r4
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	4413      	add	r3, r2
 80077f2:	881b      	ldrh	r3, [r3, #0]
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077fe:	b29c      	uxth	r4, r3
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	441a      	add	r2, r3
 800780a:	4b07      	ldr	r3, [pc, #28]	; (8007828 <USB_DeactivateEndpoint+0x328>)
 800780c:	4323      	orrs	r3, r4
 800780e:	b29b      	uxth	r3, r3
 8007810:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bc90      	pop	{r4, r7}
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	ffffc080 	.word	0xffffc080
 8007824:	ffff80c0 	.word	0xffff80c0
 8007828:	ffff8080 	.word	0xffff8080

0800782c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800782c:	b590      	push	{r4, r7, lr}
 800782e:	b08d      	sub	sp, #52	; 0x34
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	785b      	ldrb	r3, [r3, #1]
 800783a:	2b01      	cmp	r3, #1
 800783c:	f040 8160 	bne.w	8007b00 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	699a      	ldr	r2, [r3, #24]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	429a      	cmp	r2, r3
 800784a:	d909      	bls.n	8007860 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	699a      	ldr	r2, [r3, #24]
 8007856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007858:	1ad2      	subs	r2, r2, r3
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	619a      	str	r2, [r3, #24]
 800785e:	e005      	b.n	800786c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2200      	movs	r2, #0
 800786a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	7b1b      	ldrb	r3, [r3, #12]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d119      	bne.n	80078a8 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	6959      	ldr	r1, [r3, #20]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	88da      	ldrh	r2, [r3, #6]
 800787c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787e:	b29b      	uxth	r3, r3
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fba8 	bl	8007fd6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007886:	687c      	ldr	r4, [r7, #4]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800788e:	b29b      	uxth	r3, r3
 8007890:	441c      	add	r4, r3
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	00db      	lsls	r3, r3, #3
 8007898:	4423      	add	r3, r4
 800789a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800789e:	461c      	mov	r4, r3
 80078a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	8023      	strh	r3, [r4, #0]
 80078a6:	e10f      	b.n	8007ac8 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d065      	beq.n	800798a <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80078be:	687c      	ldr	r4, [r7, #4]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	785b      	ldrb	r3, [r3, #1]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d148      	bne.n	800795a <USB_EPStartXfer+0x12e>
 80078c8:	687c      	ldr	r4, [r7, #4]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	441c      	add	r4, r3
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	00db      	lsls	r3, r3, #3
 80078da:	4423      	add	r3, r4
 80078dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078e0:	461c      	mov	r4, r3
 80078e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10e      	bne.n	8007906 <USB_EPStartXfer+0xda>
 80078e8:	8823      	ldrh	r3, [r4, #0]
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	8023      	strh	r3, [r4, #0]
 80078f4:	8823      	ldrh	r3, [r4, #0]
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007900:	b29b      	uxth	r3, r3
 8007902:	8023      	strh	r3, [r4, #0]
 8007904:	e03d      	b.n	8007982 <USB_EPStartXfer+0x156>
 8007906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007908:	2b3e      	cmp	r3, #62	; 0x3e
 800790a:	d810      	bhi.n	800792e <USB_EPStartXfer+0x102>
 800790c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790e:	085b      	lsrs	r3, r3, #1
 8007910:	627b      	str	r3, [r7, #36]	; 0x24
 8007912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <USB_EPStartXfer+0xf6>
 800791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791e:	3301      	adds	r3, #1
 8007920:	627b      	str	r3, [r7, #36]	; 0x24
 8007922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007924:	b29b      	uxth	r3, r3
 8007926:	029b      	lsls	r3, r3, #10
 8007928:	b29b      	uxth	r3, r3
 800792a:	8023      	strh	r3, [r4, #0]
 800792c:	e029      	b.n	8007982 <USB_EPStartXfer+0x156>
 800792e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007930:	095b      	lsrs	r3, r3, #5
 8007932:	627b      	str	r3, [r7, #36]	; 0x24
 8007934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007936:	f003 031f 	and.w	r3, r3, #31
 800793a:	2b00      	cmp	r3, #0
 800793c:	d102      	bne.n	8007944 <USB_EPStartXfer+0x118>
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	3b01      	subs	r3, #1
 8007942:	627b      	str	r3, [r7, #36]	; 0x24
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	b29b      	uxth	r3, r3
 8007948:	029b      	lsls	r3, r3, #10
 800794a:	b29b      	uxth	r3, r3
 800794c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007954:	b29b      	uxth	r3, r3
 8007956:	8023      	strh	r3, [r4, #0]
 8007958:	e013      	b.n	8007982 <USB_EPStartXfer+0x156>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	785b      	ldrb	r3, [r3, #1]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d10f      	bne.n	8007982 <USB_EPStartXfer+0x156>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007968:	b29b      	uxth	r3, r3
 800796a:	441c      	add	r4, r3
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	00db      	lsls	r3, r3, #3
 8007972:	4423      	add	r3, r4
 8007974:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007978:	60fb      	str	r3, [r7, #12]
 800797a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797c:	b29a      	uxth	r2, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	895b      	ldrh	r3, [r3, #10]
 8007986:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007988:	e063      	b.n	8007a52 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	785b      	ldrb	r3, [r3, #1]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d148      	bne.n	8007a24 <USB_EPStartXfer+0x1f8>
 8007992:	687c      	ldr	r4, [r7, #4]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800799a:	b29b      	uxth	r3, r3
 800799c:	441c      	add	r4, r3
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	00db      	lsls	r3, r3, #3
 80079a4:	4423      	add	r3, r4
 80079a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079aa:	461c      	mov	r4, r3
 80079ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10e      	bne.n	80079d0 <USB_EPStartXfer+0x1a4>
 80079b2:	8823      	ldrh	r3, [r4, #0]
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	8023      	strh	r3, [r4, #0]
 80079be:	8823      	ldrh	r3, [r4, #0]
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	8023      	strh	r3, [r4, #0]
 80079ce:	e03d      	b.n	8007a4c <USB_EPStartXfer+0x220>
 80079d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d2:	2b3e      	cmp	r3, #62	; 0x3e
 80079d4:	d810      	bhi.n	80079f8 <USB_EPStartXfer+0x1cc>
 80079d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d8:	085b      	lsrs	r3, r3, #1
 80079da:	623b      	str	r3, [r7, #32]
 80079dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d002      	beq.n	80079ec <USB_EPStartXfer+0x1c0>
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	3301      	adds	r3, #1
 80079ea:	623b      	str	r3, [r7, #32]
 80079ec:	6a3b      	ldr	r3, [r7, #32]
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	029b      	lsls	r3, r3, #10
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	8023      	strh	r3, [r4, #0]
 80079f6:	e029      	b.n	8007a4c <USB_EPStartXfer+0x220>
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	095b      	lsrs	r3, r3, #5
 80079fc:	623b      	str	r3, [r7, #32]
 80079fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a00:	f003 031f 	and.w	r3, r3, #31
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d102      	bne.n	8007a0e <USB_EPStartXfer+0x1e2>
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	623b      	str	r3, [r7, #32]
 8007a0e:	6a3b      	ldr	r3, [r7, #32]
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	029b      	lsls	r3, r3, #10
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	8023      	strh	r3, [r4, #0]
 8007a22:	e013      	b.n	8007a4c <USB_EPStartXfer+0x220>
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	785b      	ldrb	r3, [r3, #1]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d10f      	bne.n	8007a4c <USB_EPStartXfer+0x220>
 8007a2c:	687c      	ldr	r4, [r7, #4]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	441c      	add	r4, r3
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	00db      	lsls	r3, r3, #3
 8007a3e:	4423      	add	r3, r4
 8007a40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a44:	461c      	mov	r4, r3
 8007a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	891b      	ldrh	r3, [r3, #8]
 8007a50:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	6959      	ldr	r1, [r3, #20]
 8007a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 faba 	bl	8007fd6 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	785b      	ldrb	r3, [r3, #1]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d115      	bne.n	8007a96 <USB_EPStartXfer+0x26a>
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4413      	add	r3, r2
 8007a74:	881b      	ldrh	r3, [r3, #0]
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a80:	b29c      	uxth	r4, r3
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	441a      	add	r2, r3
 8007a8c:	4b9a      	ldr	r3, [pc, #616]	; (8007cf8 <USB_EPStartXfer+0x4cc>)
 8007a8e:	4323      	orrs	r3, r4
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	8013      	strh	r3, [r2, #0]
 8007a94:	e018      	b.n	8007ac8 <USB_EPStartXfer+0x29c>
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	785b      	ldrb	r3, [r3, #1]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d114      	bne.n	8007ac8 <USB_EPStartXfer+0x29c>
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4413      	add	r3, r2
 8007aa8:	881b      	ldrh	r3, [r3, #0]
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ab4:	b29c      	uxth	r4, r3
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	441a      	add	r2, r3
 8007ac0:	4b8e      	ldr	r3, [pc, #568]	; (8007cfc <USB_EPStartXfer+0x4d0>)
 8007ac2:	4323      	orrs	r3, r4
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	881b      	ldrh	r3, [r3, #0]
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ade:	b29c      	uxth	r4, r3
 8007ae0:	f084 0310 	eor.w	r3, r4, #16
 8007ae4:	b29c      	uxth	r4, r3
 8007ae6:	f084 0320 	eor.w	r3, r4, #32
 8007aea:	b29c      	uxth	r4, r3
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	441a      	add	r2, r3
 8007af6:	4b82      	ldr	r3, [pc, #520]	; (8007d00 <USB_EPStartXfer+0x4d4>)
 8007af8:	4323      	orrs	r3, r4
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	8013      	strh	r3, [r2, #0]
 8007afe:	e146      	b.n	8007d8e <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	699a      	ldr	r2, [r3, #24]
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d909      	bls.n	8007b20 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	699a      	ldr	r2, [r3, #24]
 8007b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b18:	1ad2      	subs	r2, r2, r3
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	619a      	str	r2, [r3, #24]
 8007b1e:	e005      	b.n	8007b2c <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	7b1b      	ldrb	r3, [r3, #12]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d148      	bne.n	8007bc6 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007b34:	687c      	ldr	r4, [r7, #4]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	441c      	add	r4, r3
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	00db      	lsls	r3, r3, #3
 8007b46:	4423      	add	r3, r4
 8007b48:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b4c:	461c      	mov	r4, r3
 8007b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10e      	bne.n	8007b72 <USB_EPStartXfer+0x346>
 8007b54:	8823      	ldrh	r3, [r4, #0]
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	8023      	strh	r3, [r4, #0]
 8007b60:	8823      	ldrh	r3, [r4, #0]
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	8023      	strh	r3, [r4, #0]
 8007b70:	e0f2      	b.n	8007d58 <USB_EPStartXfer+0x52c>
 8007b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b74:	2b3e      	cmp	r3, #62	; 0x3e
 8007b76:	d810      	bhi.n	8007b9a <USB_EPStartXfer+0x36e>
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	085b      	lsrs	r3, r3, #1
 8007b7c:	61fb      	str	r3, [r7, #28]
 8007b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b80:	f003 0301 	and.w	r3, r3, #1
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <USB_EPStartXfer+0x362>
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	61fb      	str	r3, [r7, #28]
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	029b      	lsls	r3, r3, #10
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	8023      	strh	r3, [r4, #0]
 8007b98:	e0de      	b.n	8007d58 <USB_EPStartXfer+0x52c>
 8007b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9c:	095b      	lsrs	r3, r3, #5
 8007b9e:	61fb      	str	r3, [r7, #28]
 8007ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba2:	f003 031f 	and.w	r3, r3, #31
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d102      	bne.n	8007bb0 <USB_EPStartXfer+0x384>
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	3b01      	subs	r3, #1
 8007bae:	61fb      	str	r3, [r7, #28]
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	029b      	lsls	r3, r3, #10
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	8023      	strh	r3, [r4, #0]
 8007bc4:	e0c8      	b.n	8007d58 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	785b      	ldrb	r3, [r3, #1]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d148      	bne.n	8007c60 <USB_EPStartXfer+0x434>
 8007bce:	687c      	ldr	r4, [r7, #4]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	441c      	add	r4, r3
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	4423      	add	r3, r4
 8007be2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007be6:	461c      	mov	r4, r3
 8007be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10e      	bne.n	8007c0c <USB_EPStartXfer+0x3e0>
 8007bee:	8823      	ldrh	r3, [r4, #0]
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	8023      	strh	r3, [r4, #0]
 8007bfa:	8823      	ldrh	r3, [r4, #0]
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	8023      	strh	r3, [r4, #0]
 8007c0a:	e03d      	b.n	8007c88 <USB_EPStartXfer+0x45c>
 8007c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0e:	2b3e      	cmp	r3, #62	; 0x3e
 8007c10:	d810      	bhi.n	8007c34 <USB_EPStartXfer+0x408>
 8007c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c14:	085b      	lsrs	r3, r3, #1
 8007c16:	61bb      	str	r3, [r7, #24]
 8007c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d002      	beq.n	8007c28 <USB_EPStartXfer+0x3fc>
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	3301      	adds	r3, #1
 8007c26:	61bb      	str	r3, [r7, #24]
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	029b      	lsls	r3, r3, #10
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	8023      	strh	r3, [r4, #0]
 8007c32:	e029      	b.n	8007c88 <USB_EPStartXfer+0x45c>
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	095b      	lsrs	r3, r3, #5
 8007c38:	61bb      	str	r3, [r7, #24]
 8007c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3c:	f003 031f 	and.w	r3, r3, #31
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d102      	bne.n	8007c4a <USB_EPStartXfer+0x41e>
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	3b01      	subs	r3, #1
 8007c48:	61bb      	str	r3, [r7, #24]
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	029b      	lsls	r3, r3, #10
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	8023      	strh	r3, [r4, #0]
 8007c5e:	e013      	b.n	8007c88 <USB_EPStartXfer+0x45c>
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	785b      	ldrb	r3, [r3, #1]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d10f      	bne.n	8007c88 <USB_EPStartXfer+0x45c>
 8007c68:	687c      	ldr	r4, [r7, #4]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	441c      	add	r4, r3
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	00db      	lsls	r3, r3, #3
 8007c7a:	4423      	add	r3, r4
 8007c7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c80:	461c      	mov	r4, r3
 8007c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	8023      	strh	r3, [r4, #0]
 8007c88:	687c      	ldr	r4, [r7, #4]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	785b      	ldrb	r3, [r3, #1]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d14e      	bne.n	8007d30 <USB_EPStartXfer+0x504>
 8007c92:	687c      	ldr	r4, [r7, #4]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	441c      	add	r4, r3
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	00db      	lsls	r3, r3, #3
 8007ca4:	4423      	add	r3, r4
 8007ca6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007caa:	461c      	mov	r4, r3
 8007cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10e      	bne.n	8007cd0 <USB_EPStartXfer+0x4a4>
 8007cb2:	8823      	ldrh	r3, [r4, #0]
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	8023      	strh	r3, [r4, #0]
 8007cbe:	8823      	ldrh	r3, [r4, #0]
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	8023      	strh	r3, [r4, #0]
 8007cce:	e043      	b.n	8007d58 <USB_EPStartXfer+0x52c>
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	2b3e      	cmp	r3, #62	; 0x3e
 8007cd4:	d816      	bhi.n	8007d04 <USB_EPStartXfer+0x4d8>
 8007cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd8:	085b      	lsrs	r3, r3, #1
 8007cda:	617b      	str	r3, [r7, #20]
 8007cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d002      	beq.n	8007cec <USB_EPStartXfer+0x4c0>
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	617b      	str	r3, [r7, #20]
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	029b      	lsls	r3, r3, #10
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	8023      	strh	r3, [r4, #0]
 8007cf6:	e02f      	b.n	8007d58 <USB_EPStartXfer+0x52c>
 8007cf8:	ffff80c0 	.word	0xffff80c0
 8007cfc:	ffffc080 	.word	0xffffc080
 8007d00:	ffff8080 	.word	0xffff8080
 8007d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d06:	095b      	lsrs	r3, r3, #5
 8007d08:	617b      	str	r3, [r7, #20]
 8007d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0c:	f003 031f 	and.w	r3, r3, #31
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d102      	bne.n	8007d1a <USB_EPStartXfer+0x4ee>
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	3b01      	subs	r3, #1
 8007d18:	617b      	str	r3, [r7, #20]
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	029b      	lsls	r3, r3, #10
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	8023      	strh	r3, [r4, #0]
 8007d2e:	e013      	b.n	8007d58 <USB_EPStartXfer+0x52c>
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	785b      	ldrb	r3, [r3, #1]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d10f      	bne.n	8007d58 <USB_EPStartXfer+0x52c>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	441c      	add	r4, r3
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	00db      	lsls	r3, r3, #3
 8007d48:	4423      	add	r3, r4
 8007d4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d4e:	613b      	str	r3, [r7, #16]
 8007d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d6e:	b29c      	uxth	r4, r3
 8007d70:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007d74:	b29c      	uxth	r4, r3
 8007d76:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007d7a:	b29c      	uxth	r4, r3
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	441a      	add	r2, r3
 8007d86:	4b04      	ldr	r3, [pc, #16]	; (8007d98 <USB_EPStartXfer+0x56c>)
 8007d88:	4323      	orrs	r3, r4
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3734      	adds	r7, #52	; 0x34
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd90      	pop	{r4, r7, pc}
 8007d98:	ffff8080 	.word	0xffff8080

08007d9c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d9c:	b490      	push	{r4, r7}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	785b      	ldrb	r3, [r3, #1]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d018      	beq.n	8007de0 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4413      	add	r3, r2
 8007db8:	881b      	ldrh	r3, [r3, #0]
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dc4:	b29c      	uxth	r4, r3
 8007dc6:	f084 0310 	eor.w	r3, r4, #16
 8007dca:	b29c      	uxth	r4, r3
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	441a      	add	r2, r3
 8007dd6:	4b11      	ldr	r3, [pc, #68]	; (8007e1c <USB_EPSetStall+0x80>)
 8007dd8:	4323      	orrs	r3, r4
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	8013      	strh	r3, [r2, #0]
 8007dde:	e017      	b.n	8007e10 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4413      	add	r3, r2
 8007dea:	881b      	ldrh	r3, [r3, #0]
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007df6:	b29c      	uxth	r4, r3
 8007df8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007dfc:	b29c      	uxth	r4, r3
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	441a      	add	r2, r3
 8007e08:	4b04      	ldr	r3, [pc, #16]	; (8007e1c <USB_EPSetStall+0x80>)
 8007e0a:	4323      	orrs	r3, r4
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bc90      	pop	{r4, r7}
 8007e1a:	4770      	bx	lr
 8007e1c:	ffff8080 	.word	0xffff8080

08007e20 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e20:	b490      	push	{r4, r7}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	7b1b      	ldrb	r3, [r3, #12]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d17d      	bne.n	8007f2e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	785b      	ldrb	r3, [r3, #1]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d03d      	beq.n	8007eb6 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	4413      	add	r3, r2
 8007e44:	881b      	ldrh	r3, [r3, #0]
 8007e46:	b29c      	uxth	r4, r3
 8007e48:	4623      	mov	r3, r4
 8007e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d014      	beq.n	8007e7c <USB_EPClearStall+0x5c>
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	881b      	ldrh	r3, [r3, #0]
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e68:	b29c      	uxth	r4, r3
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	441a      	add	r2, r3
 8007e74:	4b31      	ldr	r3, [pc, #196]	; (8007f3c <USB_EPClearStall+0x11c>)
 8007e76:	4323      	orrs	r3, r4
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	78db      	ldrb	r3, [r3, #3]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d054      	beq.n	8007f2e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4413      	add	r3, r2
 8007e8e:	881b      	ldrh	r3, [r3, #0]
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e9a:	b29c      	uxth	r4, r3
 8007e9c:	f084 0320 	eor.w	r3, r4, #32
 8007ea0:	b29c      	uxth	r4, r3
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	441a      	add	r2, r3
 8007eac:	4b24      	ldr	r3, [pc, #144]	; (8007f40 <USB_EPClearStall+0x120>)
 8007eae:	4323      	orrs	r3, r4
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	8013      	strh	r3, [r2, #0]
 8007eb4:	e03b      	b.n	8007f2e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4413      	add	r3, r2
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	b29c      	uxth	r4, r3
 8007ec4:	4623      	mov	r3, r4
 8007ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d014      	beq.n	8007ef8 <USB_EPClearStall+0xd8>
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4413      	add	r3, r2
 8007ed8:	881b      	ldrh	r3, [r3, #0]
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ee4:	b29c      	uxth	r4, r3
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	441a      	add	r2, r3
 8007ef0:	4b14      	ldr	r3, [pc, #80]	; (8007f44 <USB_EPClearStall+0x124>)
 8007ef2:	4323      	orrs	r3, r4
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4413      	add	r3, r2
 8007f02:	881b      	ldrh	r3, [r3, #0]
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f0e:	b29c      	uxth	r4, r3
 8007f10:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007f14:	b29c      	uxth	r4, r3
 8007f16:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007f1a:	b29c      	uxth	r4, r3
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	441a      	add	r2, r3
 8007f26:	4b06      	ldr	r3, [pc, #24]	; (8007f40 <USB_EPClearStall+0x120>)
 8007f28:	4323      	orrs	r3, r4
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bc90      	pop	{r4, r7}
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	ffff80c0 	.word	0xffff80c0
 8007f40:	ffff8080 	.word	0xffff8080
 8007f44:	ffffc080 	.word	0xffffc080

08007f48 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007f54:	78fb      	ldrb	r3, [r7, #3]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d103      	bne.n	8007f62 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2280      	movs	r2, #128	; 0x80
 8007f5e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b085      	sub	sp, #20
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007fbe:	b480      	push	{r7}
 8007fc0:	b083      	sub	sp, #12
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
 8007fc6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	370c      	adds	r7, #12
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007fd6:	b480      	push	{r7}
 8007fd8:	b08d      	sub	sp, #52	; 0x34
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	60f8      	str	r0, [r7, #12]
 8007fde:	60b9      	str	r1, [r7, #8]
 8007fe0:	4611      	mov	r1, r2
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	80fb      	strh	r3, [r7, #6]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007fec:	88bb      	ldrh	r3, [r7, #4]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	085b      	lsrs	r3, r3, #1
 8007ff2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ffc:	88fa      	ldrh	r2, [r7, #6]
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	4413      	add	r3, r2
 8008002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008006:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008008:	6a3b      	ldr	r3, [r7, #32]
 800800a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800800c:	e01b      	b.n	8008046 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008016:	3301      	adds	r3, #1
 8008018:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	b29b      	uxth	r3, r3
 8008020:	021b      	lsls	r3, r3, #8
 8008022:	b29b      	uxth	r3, r3
 8008024:	461a      	mov	r2, r3
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	4313      	orrs	r3, r2
 800802a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	b29a      	uxth	r2, r3
 8008030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008032:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008036:	3302      	adds	r3, #2
 8008038:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800803a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803c:	3301      	adds	r3, #1
 800803e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008042:	3b01      	subs	r3, #1
 8008044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1e0      	bne.n	800800e <USB_WritePMA+0x38>
  }
}
 800804c:	bf00      	nop
 800804e:	3734      	adds	r7, #52	; 0x34
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008058:	b480      	push	{r7}
 800805a:	b08b      	sub	sp, #44	; 0x2c
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	4611      	mov	r1, r2
 8008064:	461a      	mov	r2, r3
 8008066:	460b      	mov	r3, r1
 8008068:	80fb      	strh	r3, [r7, #6]
 800806a:	4613      	mov	r3, r2
 800806c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800806e:	88bb      	ldrh	r3, [r7, #4]
 8008070:	085b      	lsrs	r3, r3, #1
 8008072:	b29b      	uxth	r3, r3
 8008074:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800807e:	88fa      	ldrh	r2, [r7, #6]
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	4413      	add	r3, r2
 8008084:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008088:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	627b      	str	r3, [r7, #36]	; 0x24
 800808e:	e018      	b.n	80080c2 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	881b      	ldrh	r3, [r3, #0]
 8008094:	b29b      	uxth	r3, r3
 8008096:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	3302      	adds	r3, #2
 800809c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	b2da      	uxtb	r2, r3
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	3301      	adds	r3, #1
 80080aa:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	0a1b      	lsrs	r3, r3, #8
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	3301      	adds	r3, #1
 80080ba:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	3b01      	subs	r3, #1
 80080c0:	627b      	str	r3, [r7, #36]	; 0x24
 80080c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d1e3      	bne.n	8008090 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80080c8:	88bb      	ldrh	r3, [r7, #4]
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d007      	beq.n	80080e4 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80080d4:	6a3b      	ldr	r3, [r7, #32]
 80080d6:	881b      	ldrh	r3, [r3, #0]
 80080d8:	b29b      	uxth	r3, r3
 80080da:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	701a      	strb	r2, [r3, #0]
  }
}
 80080e4:	bf00      	nop
 80080e6:	372c      	adds	r7, #44	; 0x2c
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	460b      	mov	r3, r1
 80080fa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	7c1b      	ldrb	r3, [r3, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d115      	bne.n	8008134 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008108:	f44f 7300 	mov.w	r3, #512	; 0x200
 800810c:	2202      	movs	r2, #2
 800810e:	2181      	movs	r1, #129	; 0x81
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f002 ffe8 	bl	800b0e6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800811c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008120:	2202      	movs	r2, #2
 8008122:	2101      	movs	r1, #1
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f002 ffde 	bl	800b0e6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008132:	e012      	b.n	800815a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008134:	2340      	movs	r3, #64	; 0x40
 8008136:	2202      	movs	r2, #2
 8008138:	2181      	movs	r1, #129	; 0x81
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f002 ffd3 	bl	800b0e6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008146:	2340      	movs	r3, #64	; 0x40
 8008148:	2202      	movs	r2, #2
 800814a:	2101      	movs	r1, #1
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f002 ffca 	bl	800b0e6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800815a:	2308      	movs	r3, #8
 800815c:	2203      	movs	r2, #3
 800815e:	2182      	movs	r1, #130	; 0x82
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f002 ffc0 	bl	800b0e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800816c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008170:	f003 f910 	bl	800b394 <USBD_static_malloc>
 8008174:	4602      	mov	r2, r0
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008182:	2b00      	cmp	r3, #0
 8008184:	d102      	bne.n	800818c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008186:	2301      	movs	r3, #1
 8008188:	73fb      	strb	r3, [r7, #15]
 800818a:	e026      	b.n	80081da <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008192:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	7c1b      	ldrb	r3, [r3, #16]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d109      	bne.n	80081ca <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081c0:	2101      	movs	r1, #1
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f003 f87a 	bl	800b2bc <USBD_LL_PrepareReceive>
 80081c8:	e007      	b.n	80081da <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081d0:	2340      	movs	r3, #64	; 0x40
 80081d2:	2101      	movs	r1, #1
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f003 f871 	bl	800b2bc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80081da:	7bfb      	ldrb	r3, [r7, #15]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	460b      	mov	r3, r1
 80081ee:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80081f0:	2300      	movs	r3, #0
 80081f2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80081f4:	2181      	movs	r1, #129	; 0x81
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f002 ff9b 	bl	800b132 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008202:	2101      	movs	r1, #1
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f002 ff94 	bl	800b132 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008212:	2182      	movs	r1, #130	; 0x82
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f002 ff8c 	bl	800b132 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00e      	beq.n	8008248 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800823a:	4618      	mov	r0, r3
 800823c:	f003 f8b8 	bl	800b3b0 <USBD_static_free>
    pdev->pClassData = NULL;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008248:	7bfb      	ldrb	r3, [r7, #15]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b086      	sub	sp, #24
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008262:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008264:	2300      	movs	r3, #0
 8008266:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008268:	2300      	movs	r3, #0
 800826a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800826c:	2300      	movs	r3, #0
 800826e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008278:	2b00      	cmp	r3, #0
 800827a:	d039      	beq.n	80082f0 <USBD_CDC_Setup+0x9e>
 800827c:	2b20      	cmp	r3, #32
 800827e:	d17c      	bne.n	800837a <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	88db      	ldrh	r3, [r3, #6]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d029      	beq.n	80082dc <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	b25b      	sxtb	r3, r3
 800828e:	2b00      	cmp	r3, #0
 8008290:	da11      	bge.n	80082b6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	683a      	ldr	r2, [r7, #0]
 800829c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800829e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80082a0:	683a      	ldr	r2, [r7, #0]
 80082a2:	88d2      	ldrh	r2, [r2, #6]
 80082a4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80082a6:	6939      	ldr	r1, [r7, #16]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	88db      	ldrh	r3, [r3, #6]
 80082ac:	461a      	mov	r2, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f001 f9fa 	bl	80096a8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80082b4:	e068      	b.n	8008388 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	785a      	ldrb	r2, [r3, #1]
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	88db      	ldrh	r3, [r3, #6]
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80082cc:	6939      	ldr	r1, [r7, #16]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	88db      	ldrh	r3, [r3, #6]
 80082d2:	461a      	mov	r2, r3
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f001 fa15 	bl	8009704 <USBD_CtlPrepareRx>
      break;
 80082da:	e055      	b.n	8008388 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	683a      	ldr	r2, [r7, #0]
 80082e6:	7850      	ldrb	r0, [r2, #1]
 80082e8:	2200      	movs	r2, #0
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	4798      	blx	r3
      break;
 80082ee:	e04b      	b.n	8008388 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	785b      	ldrb	r3, [r3, #1]
 80082f4:	2b0a      	cmp	r3, #10
 80082f6:	d017      	beq.n	8008328 <USBD_CDC_Setup+0xd6>
 80082f8:	2b0b      	cmp	r3, #11
 80082fa:	d029      	beq.n	8008350 <USBD_CDC_Setup+0xfe>
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d133      	bne.n	8008368 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008306:	2b03      	cmp	r3, #3
 8008308:	d107      	bne.n	800831a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800830a:	f107 030c 	add.w	r3, r7, #12
 800830e:	2202      	movs	r2, #2
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f001 f9c8 	bl	80096a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008318:	e02e      	b.n	8008378 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f001 f958 	bl	80095d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008322:	2302      	movs	r3, #2
 8008324:	75fb      	strb	r3, [r7, #23]
          break;
 8008326:	e027      	b.n	8008378 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800832e:	2b03      	cmp	r3, #3
 8008330:	d107      	bne.n	8008342 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008332:	f107 030f 	add.w	r3, r7, #15
 8008336:	2201      	movs	r2, #1
 8008338:	4619      	mov	r1, r3
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f001 f9b4 	bl	80096a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008340:	e01a      	b.n	8008378 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f001 f944 	bl	80095d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800834a:	2302      	movs	r3, #2
 800834c:	75fb      	strb	r3, [r7, #23]
          break;
 800834e:	e013      	b.n	8008378 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008356:	2b03      	cmp	r3, #3
 8008358:	d00d      	beq.n	8008376 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800835a:	6839      	ldr	r1, [r7, #0]
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f001 f938 	bl	80095d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008362:	2302      	movs	r3, #2
 8008364:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008366:	e006      	b.n	8008376 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8008368:	6839      	ldr	r1, [r7, #0]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f001 f931 	bl	80095d2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008370:	2302      	movs	r3, #2
 8008372:	75fb      	strb	r3, [r7, #23]
          break;
 8008374:	e000      	b.n	8008378 <USBD_CDC_Setup+0x126>
          break;
 8008376:	bf00      	nop
      }
      break;
 8008378:	e006      	b.n	8008388 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800837a:	6839      	ldr	r1, [r7, #0]
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f001 f928 	bl	80095d2 <USBD_CtlError>
      ret = USBD_FAIL;
 8008382:	2302      	movs	r3, #2
 8008384:	75fb      	strb	r3, [r7, #23]
      break;
 8008386:	bf00      	nop
  }

  return ret;
 8008388:	7dfb      	ldrb	r3, [r7, #23]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3718      	adds	r7, #24
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b084      	sub	sp, #16
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	460b      	mov	r3, r1
 800839c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083ac:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d037      	beq.n	8008428 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80083b8:	78fa      	ldrb	r2, [r7, #3]
 80083ba:	6879      	ldr	r1, [r7, #4]
 80083bc:	4613      	mov	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	440b      	add	r3, r1
 80083c6:	331c      	adds	r3, #28
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d026      	beq.n	800841c <USBD_CDC_DataIn+0x8a>
 80083ce:	78fa      	ldrb	r2, [r7, #3]
 80083d0:	6879      	ldr	r1, [r7, #4]
 80083d2:	4613      	mov	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4413      	add	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	440b      	add	r3, r1
 80083dc:	331c      	adds	r3, #28
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	78fa      	ldrb	r2, [r7, #3]
 80083e2:	68b9      	ldr	r1, [r7, #8]
 80083e4:	0152      	lsls	r2, r2, #5
 80083e6:	440a      	add	r2, r1
 80083e8:	3238      	adds	r2, #56	; 0x38
 80083ea:	6812      	ldr	r2, [r2, #0]
 80083ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80083f0:	fb02 f201 	mul.w	r2, r2, r1
 80083f4:	1a9b      	subs	r3, r3, r2
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d110      	bne.n	800841c <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80083fa:	78fa      	ldrb	r2, [r7, #3]
 80083fc:	6879      	ldr	r1, [r7, #4]
 80083fe:	4613      	mov	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	440b      	add	r3, r1
 8008408:	331c      	adds	r3, #28
 800840a:	2200      	movs	r2, #0
 800840c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800840e:	78f9      	ldrb	r1, [r7, #3]
 8008410:	2300      	movs	r3, #0
 8008412:	2200      	movs	r2, #0
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f002 ff2e 	bl	800b276 <USBD_LL_Transmit>
 800841a:	e003      	b.n	8008424 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008424:	2300      	movs	r3, #0
 8008426:	e000      	b.n	800842a <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8008428:	2302      	movs	r3, #2
  }
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b084      	sub	sp, #16
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
 800843a:	460b      	mov	r3, r1
 800843c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008444:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008446:	78fb      	ldrb	r3, [r7, #3]
 8008448:	4619      	mov	r1, r3
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f002 ff59 	bl	800b302 <USBD_LL_GetRxDataSize>
 8008450:	4602      	mov	r2, r0
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00d      	beq.n	800847e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008476:	4611      	mov	r1, r2
 8008478:	4798      	blx	r3

    return USBD_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	e000      	b.n	8008480 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800847e:	2302      	movs	r3, #2
  }
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008496:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d015      	beq.n	80084ce <USBD_CDC_EP0_RxReady+0x46>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80084a8:	2bff      	cmp	r3, #255	; 0xff
 80084aa:	d010      	beq.n	80084ce <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80084ba:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80084c2:	b292      	uxth	r2, r2
 80084c4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	22ff      	movs	r2, #255	; 0xff
 80084ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2243      	movs	r2, #67	; 0x43
 80084e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80084e6:	4b03      	ldr	r3, [pc, #12]	; (80084f4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr
 80084f4:	20000094 	.word	0x20000094

080084f8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2243      	movs	r2, #67	; 0x43
 8008504:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008506:	4b03      	ldr	r3, [pc, #12]	; (8008514 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008508:	4618      	mov	r0, r3
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr
 8008514:	20000050 	.word	0x20000050

08008518 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2243      	movs	r2, #67	; 0x43
 8008524:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008526:	4b03      	ldr	r3, [pc, #12]	; (8008534 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008528:	4618      	mov	r0, r3
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr
 8008534:	200000d8 	.word	0x200000d8

08008538 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	220a      	movs	r2, #10
 8008544:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008546:	4b03      	ldr	r3, [pc, #12]	; (8008554 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008548:	4618      	mov	r0, r3
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	2000000c 	.word	0x2000000c

08008558 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008562:	2302      	movs	r3, #2
 8008564:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d005      	beq.n	8008578 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008574:	2300      	movs	r3, #0
 8008576:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008578:	7bfb      	ldrb	r3, [r7, #15]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr

08008586 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008586:	b480      	push	{r7}
 8008588:	b087      	sub	sp, #28
 800858a:	af00      	add	r7, sp, #0
 800858c:	60f8      	str	r0, [r7, #12]
 800858e:	60b9      	str	r1, [r7, #8]
 8008590:	4613      	mov	r3, r2
 8008592:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800859a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80085a4:	88fa      	ldrh	r2, [r7, #6]
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	371c      	adds	r7, #28
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b085      	sub	sp, #20
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ca:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b084      	sub	sp, #16
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d017      	beq.n	800862c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	7c1b      	ldrb	r3, [r3, #16]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d109      	bne.n	8008618 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800860a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800860e:	2101      	movs	r1, #1
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f002 fe53 	bl	800b2bc <USBD_LL_PrepareReceive>
 8008616:	e007      	b.n	8008628 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800861e:	2340      	movs	r3, #64	; 0x40
 8008620:	2101      	movs	r1, #1
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f002 fe4a 	bl	800b2bc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008628:	2300      	movs	r3, #0
 800862a:	e000      	b.n	800862e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800862c:	2302      	movs	r3, #2
  }
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b084      	sub	sp, #16
 800863a:	af00      	add	r7, sp, #0
 800863c:	60f8      	str	r0, [r7, #12]
 800863e:	60b9      	str	r1, [r7, #8]
 8008640:	4613      	mov	r3, r2
 8008642:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d101      	bne.n	800864e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800864a:	2302      	movs	r3, #2
 800864c:	e01a      	b.n	8008684 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008654:	2b00      	cmp	r3, #0
 8008656:	d003      	beq.n	8008660 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2200      	movs	r2, #0
 800865c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d003      	beq.n	800866e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	68ba      	ldr	r2, [r7, #8]
 800866a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	79fa      	ldrb	r2, [r7, #7]
 800867a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f002 fcb7 	bl	800aff0 <USBD_LL_Init>

  return USBD_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008696:	2300      	movs	r3, #0
 8008698:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d006      	beq.n	80086ae <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80086a8:	2300      	movs	r3, #0
 80086aa:	73fb      	strb	r3, [r7, #15]
 80086ac:	e001      	b.n	80086b2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80086ae:	2302      	movs	r3, #2
 80086b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80086b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3714      	adds	r7, #20
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f002 fcf1 	bl	800b0b0 <USBD_LL_Start>

  return USBD_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b084      	sub	sp, #16
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	460b      	mov	r3, r1
 80086f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80086fa:	2302      	movs	r3, #2
 80086fc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00c      	beq.n	8008722 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	78fa      	ldrb	r2, [r7, #3]
 8008712:	4611      	mov	r1, r2
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	4798      	blx	r3
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d101      	bne.n	8008722 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008722:	7bfb      	ldrb	r3, [r7, #15]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	460b      	mov	r3, r1
 8008736:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	78fa      	ldrb	r2, [r7, #3]
 8008742:	4611      	mov	r1, r2
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	4798      	blx	r3

  return USBD_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b082      	sub	sp, #8
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
 800875a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	4618      	mov	r0, r3
 8008766:	f000 fef7 	bl	8009558 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008778:	461a      	mov	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008786:	f003 031f 	and.w	r3, r3, #31
 800878a:	2b01      	cmp	r3, #1
 800878c:	d00c      	beq.n	80087a8 <USBD_LL_SetupStage+0x56>
 800878e:	2b01      	cmp	r3, #1
 8008790:	d302      	bcc.n	8008798 <USBD_LL_SetupStage+0x46>
 8008792:	2b02      	cmp	r3, #2
 8008794:	d010      	beq.n	80087b8 <USBD_LL_SetupStage+0x66>
 8008796:	e017      	b.n	80087c8 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800879e:	4619      	mov	r1, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f9cd 	bl	8008b40 <USBD_StdDevReq>
      break;
 80087a6:	e01a      	b.n	80087de <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80087ae:	4619      	mov	r1, r3
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fa2f 	bl	8008c14 <USBD_StdItfReq>
      break;
 80087b6:	e012      	b.n	80087de <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80087be:	4619      	mov	r1, r3
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fa6d 	bl	8008ca0 <USBD_StdEPReq>
      break;
 80087c6:	e00a      	b.n	80087de <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80087ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	4619      	mov	r1, r3
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f002 fcca 	bl	800b170 <USBD_LL_StallEP>
      break;
 80087dc:	bf00      	nop
  }

  return USBD_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b086      	sub	sp, #24
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	460b      	mov	r3, r1
 80087f2:	607a      	str	r2, [r7, #4]
 80087f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80087f6:	7afb      	ldrb	r3, [r7, #11]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d14b      	bne.n	8008894 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008802:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800880a:	2b03      	cmp	r3, #3
 800880c:	d134      	bne.n	8008878 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	68da      	ldr	r2, [r3, #12]
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	429a      	cmp	r2, r3
 8008818:	d919      	bls.n	800884e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	68da      	ldr	r2, [r3, #12]
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	1ad2      	subs	r2, r2, r3
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	68da      	ldr	r2, [r3, #12]
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008830:	429a      	cmp	r2, r3
 8008832:	d203      	bcs.n	800883c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008838:	b29b      	uxth	r3, r3
 800883a:	e002      	b.n	8008842 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008840:	b29b      	uxth	r3, r3
 8008842:	461a      	mov	r2, r3
 8008844:	6879      	ldr	r1, [r7, #4]
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f000 ff7a 	bl	8009740 <USBD_CtlContinueRx>
 800884c:	e038      	b.n	80088c0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00a      	beq.n	8008870 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008860:	2b03      	cmp	r3, #3
 8008862:	d105      	bne.n	8008870 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f000 ff77 	bl	8009764 <USBD_CtlSendStatus>
 8008876:	e023      	b.n	80088c0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800887e:	2b05      	cmp	r3, #5
 8008880:	d11e      	bne.n	80088c0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800888a:	2100      	movs	r1, #0
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f002 fc6f 	bl	800b170 <USBD_LL_StallEP>
 8008892:	e015      	b.n	80088c0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00d      	beq.n	80088bc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80088a6:	2b03      	cmp	r3, #3
 80088a8:	d108      	bne.n	80088bc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	7afa      	ldrb	r2, [r7, #11]
 80088b4:	4611      	mov	r1, r2
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	4798      	blx	r3
 80088ba:	e001      	b.n	80088c0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80088bc:	2302      	movs	r3, #2
 80088be:	e000      	b.n	80088c2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3718      	adds	r7, #24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b086      	sub	sp, #24
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	60f8      	str	r0, [r7, #12]
 80088d2:	460b      	mov	r3, r1
 80088d4:	607a      	str	r2, [r7, #4]
 80088d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80088d8:	7afb      	ldrb	r3, [r7, #11]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d17f      	bne.n	80089de <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3314      	adds	r3, #20
 80088e2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d15c      	bne.n	80089a8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	68da      	ldr	r2, [r3, #12]
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d915      	bls.n	8008926 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	68da      	ldr	r2, [r3, #12]
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	1ad2      	subs	r2, r2, r3
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	b29b      	uxth	r3, r3
 800890e:	461a      	mov	r2, r3
 8008910:	6879      	ldr	r1, [r7, #4]
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f000 fee4 	bl	80096e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008918:	2300      	movs	r3, #0
 800891a:	2200      	movs	r2, #0
 800891c:	2100      	movs	r1, #0
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f002 fccc 	bl	800b2bc <USBD_LL_PrepareReceive>
 8008924:	e04e      	b.n	80089c4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	697a      	ldr	r2, [r7, #20]
 800892c:	6912      	ldr	r2, [r2, #16]
 800892e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008932:	fb02 f201 	mul.w	r2, r2, r1
 8008936:	1a9b      	subs	r3, r3, r2
 8008938:	2b00      	cmp	r3, #0
 800893a:	d11c      	bne.n	8008976 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	689a      	ldr	r2, [r3, #8]
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008944:	429a      	cmp	r2, r3
 8008946:	d316      	bcc.n	8008976 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	689a      	ldr	r2, [r3, #8]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008952:	429a      	cmp	r2, r3
 8008954:	d20f      	bcs.n	8008976 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008956:	2200      	movs	r2, #0
 8008958:	2100      	movs	r1, #0
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f000 fec0 	bl	80096e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008968:	2300      	movs	r3, #0
 800896a:	2200      	movs	r2, #0
 800896c:	2100      	movs	r1, #0
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f002 fca4 	bl	800b2bc <USBD_LL_PrepareReceive>
 8008974:	e026      	b.n	80089c4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00a      	beq.n	8008998 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008988:	2b03      	cmp	r3, #3
 800898a:	d105      	bne.n	8008998 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008998:	2180      	movs	r1, #128	; 0x80
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f002 fbe8 	bl	800b170 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f000 fef2 	bl	800978a <USBD_CtlReceiveStatus>
 80089a6:	e00d      	b.n	80089c4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089ae:	2b04      	cmp	r3, #4
 80089b0:	d004      	beq.n	80089bc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d103      	bne.n	80089c4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80089bc:	2180      	movs	r1, #128	; 0x80
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f002 fbd6 	bl	800b170 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d11d      	bne.n	8008a0a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f7ff fe82 	bl	80086d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80089dc:	e015      	b.n	8008a0a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00d      	beq.n	8008a06 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80089f0:	2b03      	cmp	r3, #3
 80089f2:	d108      	bne.n	8008a06 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fa:	695b      	ldr	r3, [r3, #20]
 80089fc:	7afa      	ldrb	r2, [r7, #11]
 80089fe:	4611      	mov	r1, r2
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	4798      	blx	r3
 8008a04:	e001      	b.n	8008a0a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008a06:	2302      	movs	r3, #2
 8008a08:	e000      	b.n	8008a0c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3718      	adds	r7, #24
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a1c:	2340      	movs	r3, #64	; 0x40
 8008a1e:	2200      	movs	r2, #0
 8008a20:	2100      	movs	r1, #0
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f002 fb5f 	bl	800b0e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2240      	movs	r2, #64	; 0x40
 8008a34:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a38:	2340      	movs	r3, #64	; 0x40
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	2180      	movs	r1, #128	; 0x80
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f002 fb51 	bl	800b0e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2240      	movs	r2, #64	; 0x40
 8008a4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d009      	beq.n	8008a8c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	6852      	ldr	r2, [r2, #4]
 8008a84:	b2d2      	uxtb	r2, r2
 8008a86:	4611      	mov	r1, r2
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	4798      	blx	r3
  }

  return USBD_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3708      	adds	r7, #8
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b083      	sub	sp, #12
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	78fa      	ldrb	r2, [r7, #3]
 8008aa6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	370c      	adds	r7, #12
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr

08008ab6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008ab6:	b480      	push	{r7}
 8008ab8:	b083      	sub	sp, #12
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2204      	movs	r2, #4
 8008ace:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aee:	2b04      	cmp	r3, #4
 8008af0:	d105      	bne.n	8008afe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b1a:	2b03      	cmp	r3, #3
 8008b1c:	d10b      	bne.n	8008b36 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b24:	69db      	ldr	r3, [r3, #28]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d005      	beq.n	8008b36 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b30:	69db      	ldr	r3, [r3, #28]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b56:	2b20      	cmp	r3, #32
 8008b58:	d004      	beq.n	8008b64 <USBD_StdDevReq+0x24>
 8008b5a:	2b40      	cmp	r3, #64	; 0x40
 8008b5c:	d002      	beq.n	8008b64 <USBD_StdDevReq+0x24>
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d008      	beq.n	8008b74 <USBD_StdDevReq+0x34>
 8008b62:	e04c      	b.n	8008bfe <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	6839      	ldr	r1, [r7, #0]
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	4798      	blx	r3
      break;
 8008b72:	e049      	b.n	8008c08 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	785b      	ldrb	r3, [r3, #1]
 8008b78:	2b09      	cmp	r3, #9
 8008b7a:	d83a      	bhi.n	8008bf2 <USBD_StdDevReq+0xb2>
 8008b7c:	a201      	add	r2, pc, #4	; (adr r2, 8008b84 <USBD_StdDevReq+0x44>)
 8008b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b82:	bf00      	nop
 8008b84:	08008bd5 	.word	0x08008bd5
 8008b88:	08008be9 	.word	0x08008be9
 8008b8c:	08008bf3 	.word	0x08008bf3
 8008b90:	08008bdf 	.word	0x08008bdf
 8008b94:	08008bf3 	.word	0x08008bf3
 8008b98:	08008bb7 	.word	0x08008bb7
 8008b9c:	08008bad 	.word	0x08008bad
 8008ba0:	08008bf3 	.word	0x08008bf3
 8008ba4:	08008bcb 	.word	0x08008bcb
 8008ba8:	08008bc1 	.word	0x08008bc1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008bac:	6839      	ldr	r1, [r7, #0]
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f9d4 	bl	8008f5c <USBD_GetDescriptor>
          break;
 8008bb4:	e022      	b.n	8008bfc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008bb6:	6839      	ldr	r1, [r7, #0]
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fb61 	bl	8009280 <USBD_SetAddress>
          break;
 8008bbe:	e01d      	b.n	8008bfc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008bc0:	6839      	ldr	r1, [r7, #0]
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 fb9e 	bl	8009304 <USBD_SetConfig>
          break;
 8008bc8:	e018      	b.n	8008bfc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008bca:	6839      	ldr	r1, [r7, #0]
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 fc27 	bl	8009420 <USBD_GetConfig>
          break;
 8008bd2:	e013      	b.n	8008bfc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008bd4:	6839      	ldr	r1, [r7, #0]
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 fc56 	bl	8009488 <USBD_GetStatus>
          break;
 8008bdc:	e00e      	b.n	8008bfc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008bde:	6839      	ldr	r1, [r7, #0]
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 fc84 	bl	80094ee <USBD_SetFeature>
          break;
 8008be6:	e009      	b.n	8008bfc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 fc93 	bl	8009516 <USBD_ClrFeature>
          break;
 8008bf0:	e004      	b.n	8008bfc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008bf2:	6839      	ldr	r1, [r7, #0]
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 fcec 	bl	80095d2 <USBD_CtlError>
          break;
 8008bfa:	bf00      	nop
      }
      break;
 8008bfc:	e004      	b.n	8008c08 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008bfe:	6839      	ldr	r1, [r7, #0]
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 fce6 	bl	80095d2 <USBD_CtlError>
      break;
 8008c06:	bf00      	nop
  }

  return ret;
 8008c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3710      	adds	r7, #16
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop

08008c14 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c2a:	2b20      	cmp	r3, #32
 8008c2c:	d003      	beq.n	8008c36 <USBD_StdItfReq+0x22>
 8008c2e:	2b40      	cmp	r3, #64	; 0x40
 8008c30:	d001      	beq.n	8008c36 <USBD_StdItfReq+0x22>
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d12a      	bne.n	8008c8c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d81d      	bhi.n	8008c7e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	889b      	ldrh	r3, [r3, #4]
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d813      	bhi.n	8008c74 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	6839      	ldr	r1, [r7, #0]
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	4798      	blx	r3
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	88db      	ldrh	r3, [r3, #6]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d110      	bne.n	8008c88 <USBD_StdItfReq+0x74>
 8008c66:	7bfb      	ldrb	r3, [r7, #15]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10d      	bne.n	8008c88 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fd79 	bl	8009764 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c72:	e009      	b.n	8008c88 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fcab 	bl	80095d2 <USBD_CtlError>
          break;
 8008c7c:	e004      	b.n	8008c88 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008c7e:	6839      	ldr	r1, [r7, #0]
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 fca6 	bl	80095d2 <USBD_CtlError>
          break;
 8008c86:	e000      	b.n	8008c8a <USBD_StdItfReq+0x76>
          break;
 8008c88:	bf00      	nop
      }
      break;
 8008c8a:	e004      	b.n	8008c96 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008c8c:	6839      	ldr	r1, [r7, #0]
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fc9f 	bl	80095d2 <USBD_CtlError>
      break;
 8008c94:	bf00      	nop
  }

  return USBD_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008caa:	2300      	movs	r3, #0
 8008cac:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	889b      	ldrh	r3, [r3, #4]
 8008cb2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cbc:	2b20      	cmp	r3, #32
 8008cbe:	d004      	beq.n	8008cca <USBD_StdEPReq+0x2a>
 8008cc0:	2b40      	cmp	r3, #64	; 0x40
 8008cc2:	d002      	beq.n	8008cca <USBD_StdEPReq+0x2a>
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d008      	beq.n	8008cda <USBD_StdEPReq+0x3a>
 8008cc8:	e13d      	b.n	8008f46 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	4798      	blx	r3
      break;
 8008cd8:	e13a      	b.n	8008f50 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ce2:	2b20      	cmp	r3, #32
 8008ce4:	d10a      	bne.n	8008cfc <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	6839      	ldr	r1, [r7, #0]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	4798      	blx	r3
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
 8008cfa:	e12a      	b.n	8008f52 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	785b      	ldrb	r3, [r3, #1]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d03e      	beq.n	8008d82 <USBD_StdEPReq+0xe2>
 8008d04:	2b03      	cmp	r3, #3
 8008d06:	d002      	beq.n	8008d0e <USBD_StdEPReq+0x6e>
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d070      	beq.n	8008dee <USBD_StdEPReq+0x14e>
 8008d0c:	e115      	b.n	8008f3a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d002      	beq.n	8008d1e <USBD_StdEPReq+0x7e>
 8008d18:	2b03      	cmp	r3, #3
 8008d1a:	d015      	beq.n	8008d48 <USBD_StdEPReq+0xa8>
 8008d1c:	e02b      	b.n	8008d76 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d1e:	7bbb      	ldrb	r3, [r7, #14]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00c      	beq.n	8008d3e <USBD_StdEPReq+0x9e>
 8008d24:	7bbb      	ldrb	r3, [r7, #14]
 8008d26:	2b80      	cmp	r3, #128	; 0x80
 8008d28:	d009      	beq.n	8008d3e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008d2a:	7bbb      	ldrb	r3, [r7, #14]
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f002 fa1e 	bl	800b170 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008d34:	2180      	movs	r1, #128	; 0x80
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f002 fa1a 	bl	800b170 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d3c:	e020      	b.n	8008d80 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 fc46 	bl	80095d2 <USBD_CtlError>
              break;
 8008d46:	e01b      	b.n	8008d80 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	885b      	ldrh	r3, [r3, #2]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10e      	bne.n	8008d6e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008d50:	7bbb      	ldrb	r3, [r7, #14]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00b      	beq.n	8008d6e <USBD_StdEPReq+0xce>
 8008d56:	7bbb      	ldrb	r3, [r7, #14]
 8008d58:	2b80      	cmp	r3, #128	; 0x80
 8008d5a:	d008      	beq.n	8008d6e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	88db      	ldrh	r3, [r3, #6]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d104      	bne.n	8008d6e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008d64:	7bbb      	ldrb	r3, [r7, #14]
 8008d66:	4619      	mov	r1, r3
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f002 fa01 	bl	800b170 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fcf8 	bl	8009764 <USBD_CtlSendStatus>

              break;
 8008d74:	e004      	b.n	8008d80 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8008d76:	6839      	ldr	r1, [r7, #0]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fc2a 	bl	80095d2 <USBD_CtlError>
              break;
 8008d7e:	bf00      	nop
          }
          break;
 8008d80:	e0e0      	b.n	8008f44 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d002      	beq.n	8008d92 <USBD_StdEPReq+0xf2>
 8008d8c:	2b03      	cmp	r3, #3
 8008d8e:	d015      	beq.n	8008dbc <USBD_StdEPReq+0x11c>
 8008d90:	e026      	b.n	8008de0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d92:	7bbb      	ldrb	r3, [r7, #14]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00c      	beq.n	8008db2 <USBD_StdEPReq+0x112>
 8008d98:	7bbb      	ldrb	r3, [r7, #14]
 8008d9a:	2b80      	cmp	r3, #128	; 0x80
 8008d9c:	d009      	beq.n	8008db2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008d9e:	7bbb      	ldrb	r3, [r7, #14]
 8008da0:	4619      	mov	r1, r3
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f002 f9e4 	bl	800b170 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008da8:	2180      	movs	r1, #128	; 0x80
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f002 f9e0 	bl	800b170 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008db0:	e01c      	b.n	8008dec <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008db2:	6839      	ldr	r1, [r7, #0]
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 fc0c 	bl	80095d2 <USBD_CtlError>
              break;
 8008dba:	e017      	b.n	8008dec <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	885b      	ldrh	r3, [r3, #2]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d112      	bne.n	8008dea <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008dc4:	7bbb      	ldrb	r3, [r7, #14]
 8008dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d004      	beq.n	8008dd8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008dce:	7bbb      	ldrb	r3, [r7, #14]
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f002 f9eb 	bl	800b1ae <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fcc3 	bl	8009764 <USBD_CtlSendStatus>
              }
              break;
 8008dde:	e004      	b.n	8008dea <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008de0:	6839      	ldr	r1, [r7, #0]
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 fbf5 	bl	80095d2 <USBD_CtlError>
              break;
 8008de8:	e000      	b.n	8008dec <USBD_StdEPReq+0x14c>
              break;
 8008dea:	bf00      	nop
          }
          break;
 8008dec:	e0aa      	b.n	8008f44 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d002      	beq.n	8008dfe <USBD_StdEPReq+0x15e>
 8008df8:	2b03      	cmp	r3, #3
 8008dfa:	d032      	beq.n	8008e62 <USBD_StdEPReq+0x1c2>
 8008dfc:	e097      	b.n	8008f2e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008dfe:	7bbb      	ldrb	r3, [r7, #14]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d007      	beq.n	8008e14 <USBD_StdEPReq+0x174>
 8008e04:	7bbb      	ldrb	r3, [r7, #14]
 8008e06:	2b80      	cmp	r3, #128	; 0x80
 8008e08:	d004      	beq.n	8008e14 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8008e0a:	6839      	ldr	r1, [r7, #0]
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 fbe0 	bl	80095d2 <USBD_CtlError>
                break;
 8008e12:	e091      	b.n	8008f38 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	da0b      	bge.n	8008e34 <USBD_StdEPReq+0x194>
 8008e1c:	7bbb      	ldrb	r3, [r7, #14]
 8008e1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e22:	4613      	mov	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4413      	add	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	3310      	adds	r3, #16
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	4413      	add	r3, r2
 8008e30:	3304      	adds	r3, #4
 8008e32:	e00b      	b.n	8008e4c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e34:	7bbb      	ldrb	r3, [r7, #14]
 8008e36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	4413      	add	r3, r2
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	4413      	add	r3, r2
 8008e4a:	3304      	adds	r3, #4
 8008e4c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	2200      	movs	r2, #0
 8008e52:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	2202      	movs	r2, #2
 8008e58:	4619      	mov	r1, r3
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fc24 	bl	80096a8 <USBD_CtlSendData>
              break;
 8008e60:	e06a      	b.n	8008f38 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008e62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	da11      	bge.n	8008e8e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e6a:	7bbb      	ldrb	r3, [r7, #14]
 8008e6c:	f003 020f 	and.w	r2, r3, #15
 8008e70:	6879      	ldr	r1, [r7, #4]
 8008e72:	4613      	mov	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4413      	add	r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	440b      	add	r3, r1
 8008e7c:	3318      	adds	r3, #24
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d117      	bne.n	8008eb4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fba3 	bl	80095d2 <USBD_CtlError>
                  break;
 8008e8c:	e054      	b.n	8008f38 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e8e:	7bbb      	ldrb	r3, [r7, #14]
 8008e90:	f003 020f 	and.w	r2, r3, #15
 8008e94:	6879      	ldr	r1, [r7, #4]
 8008e96:	4613      	mov	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	440b      	add	r3, r1
 8008ea0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d104      	bne.n	8008eb4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008eaa:	6839      	ldr	r1, [r7, #0]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fb90 	bl	80095d2 <USBD_CtlError>
                  break;
 8008eb2:	e041      	b.n	8008f38 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008eb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	da0b      	bge.n	8008ed4 <USBD_StdEPReq+0x234>
 8008ebc:	7bbb      	ldrb	r3, [r7, #14]
 8008ebe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4413      	add	r3, r2
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	3310      	adds	r3, #16
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	4413      	add	r3, r2
 8008ed0:	3304      	adds	r3, #4
 8008ed2:	e00b      	b.n	8008eec <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ed4:	7bbb      	ldrb	r3, [r7, #14]
 8008ed6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008eda:	4613      	mov	r3, r2
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	4413      	add	r3, r2
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	4413      	add	r3, r2
 8008eea:	3304      	adds	r3, #4
 8008eec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008eee:	7bbb      	ldrb	r3, [r7, #14]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d002      	beq.n	8008efa <USBD_StdEPReq+0x25a>
 8008ef4:	7bbb      	ldrb	r3, [r7, #14]
 8008ef6:	2b80      	cmp	r3, #128	; 0x80
 8008ef8:	d103      	bne.n	8008f02 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	2200      	movs	r2, #0
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	e00e      	b.n	8008f20 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008f02:	7bbb      	ldrb	r3, [r7, #14]
 8008f04:	4619      	mov	r1, r3
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f002 f970 	bl	800b1ec <USBD_LL_IsStallEP>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d003      	beq.n	8008f1a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	2201      	movs	r2, #1
 8008f16:	601a      	str	r2, [r3, #0]
 8008f18:	e002      	b.n	8008f20 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	2202      	movs	r2, #2
 8008f24:	4619      	mov	r1, r3
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fbbe 	bl	80096a8 <USBD_CtlSendData>
              break;
 8008f2c:	e004      	b.n	8008f38 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008f2e:	6839      	ldr	r1, [r7, #0]
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fb4e 	bl	80095d2 <USBD_CtlError>
              break;
 8008f36:	bf00      	nop
          }
          break;
 8008f38:	e004      	b.n	8008f44 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008f3a:	6839      	ldr	r1, [r7, #0]
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 fb48 	bl	80095d2 <USBD_CtlError>
          break;
 8008f42:	bf00      	nop
      }
      break;
 8008f44:	e004      	b.n	8008f50 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fb42 	bl	80095d2 <USBD_CtlError>
      break;
 8008f4e:	bf00      	nop
  }

  return ret;
 8008f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
	...

08008f5c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f66:	2300      	movs	r3, #0
 8008f68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	885b      	ldrh	r3, [r3, #2]
 8008f76:	0a1b      	lsrs	r3, r3, #8
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	2b0e      	cmp	r3, #14
 8008f7e:	f200 8152 	bhi.w	8009226 <USBD_GetDescriptor+0x2ca>
 8008f82:	a201      	add	r2, pc, #4	; (adr r2, 8008f88 <USBD_GetDescriptor+0x2c>)
 8008f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f88:	08008ff9 	.word	0x08008ff9
 8008f8c:	08009011 	.word	0x08009011
 8008f90:	08009051 	.word	0x08009051
 8008f94:	08009227 	.word	0x08009227
 8008f98:	08009227 	.word	0x08009227
 8008f9c:	080091c7 	.word	0x080091c7
 8008fa0:	080091f3 	.word	0x080091f3
 8008fa4:	08009227 	.word	0x08009227
 8008fa8:	08009227 	.word	0x08009227
 8008fac:	08009227 	.word	0x08009227
 8008fb0:	08009227 	.word	0x08009227
 8008fb4:	08009227 	.word	0x08009227
 8008fb8:	08009227 	.word	0x08009227
 8008fbc:	08009227 	.word	0x08009227
 8008fc0:	08008fc5 	.word	0x08008fc5
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fca:	69db      	ldr	r3, [r3, #28]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00b      	beq.n	8008fe8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fd6:	69db      	ldr	r3, [r3, #28]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	7c12      	ldrb	r2, [r2, #16]
 8008fdc:	f107 0108 	add.w	r1, r7, #8
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	4798      	blx	r3
 8008fe4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fe6:	e126      	b.n	8009236 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008fe8:	6839      	ldr	r1, [r7, #0]
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 faf1 	bl	80095d2 <USBD_CtlError>
        err++;
 8008ff0:	7afb      	ldrb	r3, [r7, #11]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	72fb      	strb	r3, [r7, #11]
      break;
 8008ff6:	e11e      	b.n	8009236 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	7c12      	ldrb	r2, [r2, #16]
 8009004:	f107 0108 	add.w	r1, r7, #8
 8009008:	4610      	mov	r0, r2
 800900a:	4798      	blx	r3
 800900c:	60f8      	str	r0, [r7, #12]
      break;
 800900e:	e112      	b.n	8009236 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	7c1b      	ldrb	r3, [r3, #16]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d10d      	bne.n	8009034 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800901e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009020:	f107 0208 	add.w	r2, r7, #8
 8009024:	4610      	mov	r0, r2
 8009026:	4798      	blx	r3
 8009028:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	3301      	adds	r3, #1
 800902e:	2202      	movs	r2, #2
 8009030:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009032:	e100      	b.n	8009236 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800903a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903c:	f107 0208 	add.w	r2, r7, #8
 8009040:	4610      	mov	r0, r2
 8009042:	4798      	blx	r3
 8009044:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	3301      	adds	r3, #1
 800904a:	2202      	movs	r2, #2
 800904c:	701a      	strb	r2, [r3, #0]
      break;
 800904e:	e0f2      	b.n	8009236 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	885b      	ldrh	r3, [r3, #2]
 8009054:	b2db      	uxtb	r3, r3
 8009056:	2b05      	cmp	r3, #5
 8009058:	f200 80ac 	bhi.w	80091b4 <USBD_GetDescriptor+0x258>
 800905c:	a201      	add	r2, pc, #4	; (adr r2, 8009064 <USBD_GetDescriptor+0x108>)
 800905e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009062:	bf00      	nop
 8009064:	0800907d 	.word	0x0800907d
 8009068:	080090b1 	.word	0x080090b1
 800906c:	080090e5 	.word	0x080090e5
 8009070:	08009119 	.word	0x08009119
 8009074:	0800914d 	.word	0x0800914d
 8009078:	08009181 	.word	0x08009181
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d00b      	beq.n	80090a0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	7c12      	ldrb	r2, [r2, #16]
 8009094:	f107 0108 	add.w	r1, r7, #8
 8009098:	4610      	mov	r0, r2
 800909a:	4798      	blx	r3
 800909c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800909e:	e091      	b.n	80091c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fa95 	bl	80095d2 <USBD_CtlError>
            err++;
 80090a8:	7afb      	ldrb	r3, [r7, #11]
 80090aa:	3301      	adds	r3, #1
 80090ac:	72fb      	strb	r3, [r7, #11]
          break;
 80090ae:	e089      	b.n	80091c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00b      	beq.n	80090d4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	7c12      	ldrb	r2, [r2, #16]
 80090c8:	f107 0108 	add.w	r1, r7, #8
 80090cc:	4610      	mov	r0, r2
 80090ce:	4798      	blx	r3
 80090d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090d2:	e077      	b.n	80091c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80090d4:	6839      	ldr	r1, [r7, #0]
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fa7b 	bl	80095d2 <USBD_CtlError>
            err++;
 80090dc:	7afb      	ldrb	r3, [r7, #11]
 80090de:	3301      	adds	r3, #1
 80090e0:	72fb      	strb	r3, [r7, #11]
          break;
 80090e2:	e06f      	b.n	80091c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00b      	beq.n	8009108 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	7c12      	ldrb	r2, [r2, #16]
 80090fc:	f107 0108 	add.w	r1, r7, #8
 8009100:	4610      	mov	r0, r2
 8009102:	4798      	blx	r3
 8009104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009106:	e05d      	b.n	80091c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009108:	6839      	ldr	r1, [r7, #0]
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fa61 	bl	80095d2 <USBD_CtlError>
            err++;
 8009110:	7afb      	ldrb	r3, [r7, #11]
 8009112:	3301      	adds	r3, #1
 8009114:	72fb      	strb	r3, [r7, #11]
          break;
 8009116:	e055      	b.n	80091c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00b      	beq.n	800913c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	7c12      	ldrb	r2, [r2, #16]
 8009130:	f107 0108 	add.w	r1, r7, #8
 8009134:	4610      	mov	r0, r2
 8009136:	4798      	blx	r3
 8009138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800913a:	e043      	b.n	80091c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800913c:	6839      	ldr	r1, [r7, #0]
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fa47 	bl	80095d2 <USBD_CtlError>
            err++;
 8009144:	7afb      	ldrb	r3, [r7, #11]
 8009146:	3301      	adds	r3, #1
 8009148:	72fb      	strb	r3, [r7, #11]
          break;
 800914a:	e03b      	b.n	80091c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009152:	695b      	ldr	r3, [r3, #20]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00b      	beq.n	8009170 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800915e:	695b      	ldr	r3, [r3, #20]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	7c12      	ldrb	r2, [r2, #16]
 8009164:	f107 0108 	add.w	r1, r7, #8
 8009168:	4610      	mov	r0, r2
 800916a:	4798      	blx	r3
 800916c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800916e:	e029      	b.n	80091c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 fa2d 	bl	80095d2 <USBD_CtlError>
            err++;
 8009178:	7afb      	ldrb	r3, [r7, #11]
 800917a:	3301      	adds	r3, #1
 800917c:	72fb      	strb	r3, [r7, #11]
          break;
 800917e:	e021      	b.n	80091c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00b      	beq.n	80091a4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009192:	699b      	ldr	r3, [r3, #24]
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	7c12      	ldrb	r2, [r2, #16]
 8009198:	f107 0108 	add.w	r1, r7, #8
 800919c:	4610      	mov	r0, r2
 800919e:	4798      	blx	r3
 80091a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091a2:	e00f      	b.n	80091c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fa13 	bl	80095d2 <USBD_CtlError>
            err++;
 80091ac:	7afb      	ldrb	r3, [r7, #11]
 80091ae:	3301      	adds	r3, #1
 80091b0:	72fb      	strb	r3, [r7, #11]
          break;
 80091b2:	e007      	b.n	80091c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80091b4:	6839      	ldr	r1, [r7, #0]
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 fa0b 	bl	80095d2 <USBD_CtlError>
          err++;
 80091bc:	7afb      	ldrb	r3, [r7, #11]
 80091be:	3301      	adds	r3, #1
 80091c0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80091c2:	e038      	b.n	8009236 <USBD_GetDescriptor+0x2da>
 80091c4:	e037      	b.n	8009236 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	7c1b      	ldrb	r3, [r3, #16]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d109      	bne.n	80091e2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091d6:	f107 0208 	add.w	r2, r7, #8
 80091da:	4610      	mov	r0, r2
 80091dc:	4798      	blx	r3
 80091de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091e0:	e029      	b.n	8009236 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80091e2:	6839      	ldr	r1, [r7, #0]
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 f9f4 	bl	80095d2 <USBD_CtlError>
        err++;
 80091ea:	7afb      	ldrb	r3, [r7, #11]
 80091ec:	3301      	adds	r3, #1
 80091ee:	72fb      	strb	r3, [r7, #11]
      break;
 80091f0:	e021      	b.n	8009236 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	7c1b      	ldrb	r3, [r3, #16]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d10d      	bne.n	8009216 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009202:	f107 0208 	add.w	r2, r7, #8
 8009206:	4610      	mov	r0, r2
 8009208:	4798      	blx	r3
 800920a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	3301      	adds	r3, #1
 8009210:	2207      	movs	r2, #7
 8009212:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009214:	e00f      	b.n	8009236 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 f9da 	bl	80095d2 <USBD_CtlError>
        err++;
 800921e:	7afb      	ldrb	r3, [r7, #11]
 8009220:	3301      	adds	r3, #1
 8009222:	72fb      	strb	r3, [r7, #11]
      break;
 8009224:	e007      	b.n	8009236 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009226:	6839      	ldr	r1, [r7, #0]
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 f9d2 	bl	80095d2 <USBD_CtlError>
      err++;
 800922e:	7afb      	ldrb	r3, [r7, #11]
 8009230:	3301      	adds	r3, #1
 8009232:	72fb      	strb	r3, [r7, #11]
      break;
 8009234:	bf00      	nop
  }

  if (err != 0U)
 8009236:	7afb      	ldrb	r3, [r7, #11]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d11c      	bne.n	8009276 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800923c:	893b      	ldrh	r3, [r7, #8]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d011      	beq.n	8009266 <USBD_GetDescriptor+0x30a>
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	88db      	ldrh	r3, [r3, #6]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00d      	beq.n	8009266 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	88da      	ldrh	r2, [r3, #6]
 800924e:	893b      	ldrh	r3, [r7, #8]
 8009250:	4293      	cmp	r3, r2
 8009252:	bf28      	it	cs
 8009254:	4613      	movcs	r3, r2
 8009256:	b29b      	uxth	r3, r3
 8009258:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800925a:	893b      	ldrh	r3, [r7, #8]
 800925c:	461a      	mov	r2, r3
 800925e:	68f9      	ldr	r1, [r7, #12]
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 fa21 	bl	80096a8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	88db      	ldrh	r3, [r3, #6]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d104      	bne.n	8009278 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 fa78 	bl	8009764 <USBD_CtlSendStatus>
 8009274:	e000      	b.n	8009278 <USBD_GetDescriptor+0x31c>
    return;
 8009276:	bf00      	nop
    }
  }
}
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop

08009280 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	889b      	ldrh	r3, [r3, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d130      	bne.n	80092f4 <USBD_SetAddress+0x74>
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	88db      	ldrh	r3, [r3, #6]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d12c      	bne.n	80092f4 <USBD_SetAddress+0x74>
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	885b      	ldrh	r3, [r3, #2]
 800929e:	2b7f      	cmp	r3, #127	; 0x7f
 80092a0:	d828      	bhi.n	80092f4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	885b      	ldrh	r3, [r3, #2]
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092b4:	2b03      	cmp	r3, #3
 80092b6:	d104      	bne.n	80092c2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80092b8:	6839      	ldr	r1, [r7, #0]
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f989 	bl	80095d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092c0:	e01c      	b.n	80092fc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	7bfa      	ldrb	r2, [r7, #15]
 80092c6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
 80092cc:	4619      	mov	r1, r3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f001 ffb2 	bl	800b238 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fa45 	bl	8009764 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80092da:	7bfb      	ldrb	r3, [r7, #15]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d004      	beq.n	80092ea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2202      	movs	r2, #2
 80092e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092e8:	e008      	b.n	80092fc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092f2:	e003      	b.n	80092fc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 f96b 	bl	80095d2 <USBD_CtlError>
  }
}
 80092fc:	bf00      	nop
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	885b      	ldrh	r3, [r3, #2]
 8009312:	b2da      	uxtb	r2, r3
 8009314:	4b41      	ldr	r3, [pc, #260]	; (800941c <USBD_SetConfig+0x118>)
 8009316:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009318:	4b40      	ldr	r3, [pc, #256]	; (800941c <USBD_SetConfig+0x118>)
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d904      	bls.n	800932a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f955 	bl	80095d2 <USBD_CtlError>
 8009328:	e075      	b.n	8009416 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009330:	2b02      	cmp	r3, #2
 8009332:	d002      	beq.n	800933a <USBD_SetConfig+0x36>
 8009334:	2b03      	cmp	r3, #3
 8009336:	d023      	beq.n	8009380 <USBD_SetConfig+0x7c>
 8009338:	e062      	b.n	8009400 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800933a:	4b38      	ldr	r3, [pc, #224]	; (800941c <USBD_SetConfig+0x118>)
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d01a      	beq.n	8009378 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009342:	4b36      	ldr	r3, [pc, #216]	; (800941c <USBD_SetConfig+0x118>)
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	461a      	mov	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2203      	movs	r2, #3
 8009350:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009354:	4b31      	ldr	r3, [pc, #196]	; (800941c <USBD_SetConfig+0x118>)
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	4619      	mov	r1, r3
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f7ff f9c7 	bl	80086ee <USBD_SetClassConfig>
 8009360:	4603      	mov	r3, r0
 8009362:	2b02      	cmp	r3, #2
 8009364:	d104      	bne.n	8009370 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009366:	6839      	ldr	r1, [r7, #0]
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 f932 	bl	80095d2 <USBD_CtlError>
            return;
 800936e:	e052      	b.n	8009416 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 f9f7 	bl	8009764 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009376:	e04e      	b.n	8009416 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 f9f3 	bl	8009764 <USBD_CtlSendStatus>
        break;
 800937e:	e04a      	b.n	8009416 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009380:	4b26      	ldr	r3, [pc, #152]	; (800941c <USBD_SetConfig+0x118>)
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d112      	bne.n	80093ae <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2202      	movs	r2, #2
 800938c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009390:	4b22      	ldr	r3, [pc, #136]	; (800941c <USBD_SetConfig+0x118>)
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	461a      	mov	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800939a:	4b20      	ldr	r3, [pc, #128]	; (800941c <USBD_SetConfig+0x118>)
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	4619      	mov	r1, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f7ff f9c3 	bl	800872c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f9dc 	bl	8009764 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80093ac:	e033      	b.n	8009416 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80093ae:	4b1b      	ldr	r3, [pc, #108]	; (800941c <USBD_SetConfig+0x118>)
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	461a      	mov	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d01d      	beq.n	80093f8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	4619      	mov	r1, r3
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7ff f9b1 	bl	800872c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80093ca:	4b14      	ldr	r3, [pc, #80]	; (800941c <USBD_SetConfig+0x118>)
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	461a      	mov	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80093d4:	4b11      	ldr	r3, [pc, #68]	; (800941c <USBD_SetConfig+0x118>)
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	4619      	mov	r1, r3
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f7ff f987 	bl	80086ee <USBD_SetClassConfig>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d104      	bne.n	80093f0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80093e6:	6839      	ldr	r1, [r7, #0]
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 f8f2 	bl	80095d2 <USBD_CtlError>
            return;
 80093ee:	e012      	b.n	8009416 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f9b7 	bl	8009764 <USBD_CtlSendStatus>
        break;
 80093f6:	e00e      	b.n	8009416 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f9b3 	bl	8009764 <USBD_CtlSendStatus>
        break;
 80093fe:	e00a      	b.n	8009416 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009400:	6839      	ldr	r1, [r7, #0]
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f8e5 	bl	80095d2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009408:	4b04      	ldr	r3, [pc, #16]	; (800941c <USBD_SetConfig+0x118>)
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	4619      	mov	r1, r3
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f7ff f98c 	bl	800872c <USBD_ClrClassConfig>
        break;
 8009414:	bf00      	nop
    }
  }
}
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	2000140e 	.word	0x2000140e

08009420 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	88db      	ldrh	r3, [r3, #6]
 800942e:	2b01      	cmp	r3, #1
 8009430:	d004      	beq.n	800943c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009432:	6839      	ldr	r1, [r7, #0]
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 f8cc 	bl	80095d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800943a:	e021      	b.n	8009480 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009442:	2b01      	cmp	r3, #1
 8009444:	db17      	blt.n	8009476 <USBD_GetConfig+0x56>
 8009446:	2b02      	cmp	r3, #2
 8009448:	dd02      	ble.n	8009450 <USBD_GetConfig+0x30>
 800944a:	2b03      	cmp	r3, #3
 800944c:	d00b      	beq.n	8009466 <USBD_GetConfig+0x46>
 800944e:	e012      	b.n	8009476 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	3308      	adds	r3, #8
 800945a:	2201      	movs	r2, #1
 800945c:	4619      	mov	r1, r3
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f922 	bl	80096a8 <USBD_CtlSendData>
        break;
 8009464:	e00c      	b.n	8009480 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	3304      	adds	r3, #4
 800946a:	2201      	movs	r2, #1
 800946c:	4619      	mov	r1, r3
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f91a 	bl	80096a8 <USBD_CtlSendData>
        break;
 8009474:	e004      	b.n	8009480 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8009476:	6839      	ldr	r1, [r7, #0]
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 f8aa 	bl	80095d2 <USBD_CtlError>
        break;
 800947e:	bf00      	nop
}
 8009480:	bf00      	nop
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009498:	3b01      	subs	r3, #1
 800949a:	2b02      	cmp	r3, #2
 800949c:	d81e      	bhi.n	80094dc <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	88db      	ldrh	r3, [r3, #6]
 80094a2:	2b02      	cmp	r3, #2
 80094a4:	d004      	beq.n	80094b0 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80094a6:	6839      	ldr	r1, [r7, #0]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 f892 	bl	80095d2 <USBD_CtlError>
        break;
 80094ae:	e01a      	b.n	80094e6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d005      	beq.n	80094cc <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	f043 0202 	orr.w	r2, r3, #2
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	330c      	adds	r3, #12
 80094d0:	2202      	movs	r2, #2
 80094d2:	4619      	mov	r1, r3
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 f8e7 	bl	80096a8 <USBD_CtlSendData>
      break;
 80094da:	e004      	b.n	80094e6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80094dc:	6839      	ldr	r1, [r7, #0]
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f877 	bl	80095d2 <USBD_CtlError>
      break;
 80094e4:	bf00      	nop
  }
}
 80094e6:	bf00      	nop
 80094e8:	3708      	adds	r7, #8
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b082      	sub	sp, #8
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	885b      	ldrh	r3, [r3, #2]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d106      	bne.n	800950e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f92b 	bl	8009764 <USBD_CtlSendStatus>
  }
}
 800950e:	bf00      	nop
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b082      	sub	sp, #8
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009526:	3b01      	subs	r3, #1
 8009528:	2b02      	cmp	r3, #2
 800952a:	d80b      	bhi.n	8009544 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	885b      	ldrh	r3, [r3, #2]
 8009530:	2b01      	cmp	r3, #1
 8009532:	d10c      	bne.n	800954e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 f911 	bl	8009764 <USBD_CtlSendStatus>
      }
      break;
 8009542:	e004      	b.n	800954e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009544:	6839      	ldr	r1, [r7, #0]
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f843 	bl	80095d2 <USBD_CtlError>
      break;
 800954c:	e000      	b.n	8009550 <USBD_ClrFeature+0x3a>
      break;
 800954e:	bf00      	nop
  }
}
 8009550:	bf00      	nop
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	781a      	ldrb	r2, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	785a      	ldrb	r2, [r3, #1]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	3302      	adds	r3, #2
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	b29a      	uxth	r2, r3
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	3303      	adds	r3, #3
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	b29b      	uxth	r3, r3
 8009582:	021b      	lsls	r3, r3, #8
 8009584:	b29b      	uxth	r3, r3
 8009586:	4413      	add	r3, r2
 8009588:	b29a      	uxth	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	3304      	adds	r3, #4
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	b29a      	uxth	r2, r3
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	3305      	adds	r3, #5
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	b29b      	uxth	r3, r3
 800959e:	021b      	lsls	r3, r3, #8
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	4413      	add	r3, r2
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	3306      	adds	r3, #6
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	3307      	adds	r3, #7
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	021b      	lsls	r3, r3, #8
 80095bc:	b29b      	uxth	r3, r3
 80095be:	4413      	add	r3, r2
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	80da      	strh	r2, [r3, #6]

}
 80095c6:	bf00      	nop
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b082      	sub	sp, #8
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
 80095da:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80095dc:	2180      	movs	r1, #128	; 0x80
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f001 fdc6 	bl	800b170 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80095e4:	2100      	movs	r1, #0
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f001 fdc2 	bl	800b170 <USBD_LL_StallEP>
}
 80095ec:	bf00      	nop
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b086      	sub	sp, #24
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009600:	2300      	movs	r3, #0
 8009602:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d032      	beq.n	8009670 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f000 f834 	bl	8009678 <USBD_GetLen>
 8009610:	4603      	mov	r3, r0
 8009612:	3301      	adds	r3, #1
 8009614:	b29b      	uxth	r3, r3
 8009616:	005b      	lsls	r3, r3, #1
 8009618:	b29a      	uxth	r2, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800961e:	7dfb      	ldrb	r3, [r7, #23]
 8009620:	1c5a      	adds	r2, r3, #1
 8009622:	75fa      	strb	r2, [r7, #23]
 8009624:	461a      	mov	r2, r3
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	4413      	add	r3, r2
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	7812      	ldrb	r2, [r2, #0]
 800962e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009630:	7dfb      	ldrb	r3, [r7, #23]
 8009632:	1c5a      	adds	r2, r3, #1
 8009634:	75fa      	strb	r2, [r7, #23]
 8009636:	461a      	mov	r2, r3
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	4413      	add	r3, r2
 800963c:	2203      	movs	r2, #3
 800963e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009640:	e012      	b.n	8009668 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	1c5a      	adds	r2, r3, #1
 8009646:	60fa      	str	r2, [r7, #12]
 8009648:	7dfa      	ldrb	r2, [r7, #23]
 800964a:	1c51      	adds	r1, r2, #1
 800964c:	75f9      	strb	r1, [r7, #23]
 800964e:	4611      	mov	r1, r2
 8009650:	68ba      	ldr	r2, [r7, #8]
 8009652:	440a      	add	r2, r1
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009658:	7dfb      	ldrb	r3, [r7, #23]
 800965a:	1c5a      	adds	r2, r3, #1
 800965c:	75fa      	strb	r2, [r7, #23]
 800965e:	461a      	mov	r2, r3
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	4413      	add	r3, r2
 8009664:	2200      	movs	r2, #0
 8009666:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d1e8      	bne.n	8009642 <USBD_GetString+0x4e>
    }
  }
}
 8009670:	bf00      	nop
 8009672:	3718      	adds	r7, #24
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009680:	2300      	movs	r3, #0
 8009682:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009684:	e005      	b.n	8009692 <USBD_GetLen+0x1a>
  {
    len++;
 8009686:	7bfb      	ldrb	r3, [r7, #15]
 8009688:	3301      	adds	r3, #1
 800968a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	3301      	adds	r3, #1
 8009690:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1f5      	bne.n	8009686 <USBD_GetLen+0xe>
  }

  return len;
 800969a:	7bfb      	ldrb	r3, [r7, #15]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3714      	adds	r7, #20
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	4613      	mov	r3, r2
 80096b4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2202      	movs	r2, #2
 80096ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80096be:	88fa      	ldrh	r2, [r7, #6]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80096c4:	88fa      	ldrh	r2, [r7, #6]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096ca:	88fb      	ldrh	r3, [r7, #6]
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	2100      	movs	r1, #0
 80096d0:	68f8      	ldr	r0, [r7, #12]
 80096d2:	f001 fdd0 	bl	800b276 <USBD_LL_Transmit>

  return USBD_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	4613      	mov	r3, r2
 80096ec:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096ee:	88fb      	ldrh	r3, [r7, #6]
 80096f0:	68ba      	ldr	r2, [r7, #8]
 80096f2:	2100      	movs	r1, #0
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f001 fdbe 	bl	800b276 <USBD_LL_Transmit>

  return USBD_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	4613      	mov	r3, r2
 8009710:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2203      	movs	r2, #3
 8009716:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800971a:	88fa      	ldrh	r2, [r7, #6]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009722:	88fa      	ldrh	r2, [r7, #6]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800972a:	88fb      	ldrh	r3, [r7, #6]
 800972c:	68ba      	ldr	r2, [r7, #8]
 800972e:	2100      	movs	r1, #0
 8009730:	68f8      	ldr	r0, [r7, #12]
 8009732:	f001 fdc3 	bl	800b2bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	4613      	mov	r3, r2
 800974c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800974e:	88fb      	ldrh	r3, [r7, #6]
 8009750:	68ba      	ldr	r2, [r7, #8]
 8009752:	2100      	movs	r1, #0
 8009754:	68f8      	ldr	r0, [r7, #12]
 8009756:	f001 fdb1 	bl	800b2bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2204      	movs	r2, #4
 8009770:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009774:	2300      	movs	r3, #0
 8009776:	2200      	movs	r2, #0
 8009778:	2100      	movs	r1, #0
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f001 fd7b 	bl	800b276 <USBD_LL_Transmit>

  return USBD_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b082      	sub	sp, #8
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2205      	movs	r2, #5
 8009796:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800979a:	2300      	movs	r3, #0
 800979c:	2200      	movs	r2, #0
 800979e:	2100      	movs	r1, #0
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f001 fd8b 	bl	800b2bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	4603      	mov	r3, r0
 80097b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80097ba:	2300      	movs	r3, #0
 80097bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80097be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80097c2:	2b84      	cmp	r3, #132	; 0x84
 80097c4:	d005      	beq.n	80097d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80097c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	4413      	add	r3, r2
 80097ce:	3303      	adds	r3, #3
 80097d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80097d2:	68fb      	ldr	r3, [r7, #12]
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3714      	adds	r7, #20
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80097e4:	f000 fa58 	bl	8009c98 <vTaskStartScheduler>
  
  return osOK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	bd80      	pop	{r7, pc}

080097ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80097ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097f0:	b087      	sub	sp, #28
 80097f2:	af02      	add	r7, sp, #8
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	685c      	ldr	r4, [r3, #4]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009804:	b29e      	uxth	r6, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800980c:	4618      	mov	r0, r3
 800980e:	f7ff ffcf 	bl	80097b0 <makeFreeRtosPriority>
 8009812:	4602      	mov	r2, r0
 8009814:	f107 030c 	add.w	r3, r7, #12
 8009818:	9301      	str	r3, [sp, #4]
 800981a:	9200      	str	r2, [sp, #0]
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	4632      	mov	r2, r6
 8009820:	4629      	mov	r1, r5
 8009822:	4620      	mov	r0, r4
 8009824:	f000 f8d2 	bl	80099cc <xTaskCreate>
 8009828:	4603      	mov	r3, r0
 800982a:	2b01      	cmp	r3, #1
 800982c:	d001      	beq.n	8009832 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800982e:	2300      	movs	r3, #0
 8009830:	e000      	b.n	8009834 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8009832:	68fb      	ldr	r3, [r7, #12]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3714      	adds	r7, #20
 8009838:	46bd      	mov	sp, r7
 800983a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800983c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d001      	beq.n	8009852 <osDelay+0x16>
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	e000      	b.n	8009854 <osDelay+0x18>
 8009852:	2301      	movs	r3, #1
 8009854:	4618      	mov	r0, r3
 8009856:	f000 f9eb 	bl	8009c30 <vTaskDelay>
  
  return osOK;
 800985a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800985c:	4618      	mov	r0, r3
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f103 0208 	add.w	r2, r3, #8
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f04f 32ff 	mov.w	r2, #4294967295
 800987c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f103 0208 	add.w	r2, r3, #8
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f103 0208 	add.w	r2, r3, #8
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80098b2:	bf00      	nop
 80098b4:	370c      	adds	r7, #12
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80098be:	b480      	push	{r7}
 80098c0:	b085      	sub	sp, #20
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
 80098c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	689a      	ldr	r2, [r3, #8]
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	683a      	ldr	r2, [r7, #0]
 80098e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	683a      	ldr	r2, [r7, #0]
 80098e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	1c5a      	adds	r2, r3, #1
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	601a      	str	r2, [r3, #0]
}
 80098fa:	bf00      	nop
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009906:	b480      	push	{r7}
 8009908:	b085      	sub	sp, #20
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
 800990e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800991c:	d103      	bne.n	8009926 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	60fb      	str	r3, [r7, #12]
 8009924:	e00c      	b.n	8009940 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	3308      	adds	r3, #8
 800992a:	60fb      	str	r3, [r7, #12]
 800992c:	e002      	b.n	8009934 <vListInsert+0x2e>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	60fb      	str	r3, [r7, #12]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	429a      	cmp	r2, r3
 800993e:	d2f6      	bcs.n	800992e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	685a      	ldr	r2, [r3, #4]
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	683a      	ldr	r2, [r7, #0]
 800994e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	1c5a      	adds	r2, r3, #1
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	601a      	str	r2, [r3, #0]
}
 800996c:	bf00      	nop
 800996e:	3714      	adds	r7, #20
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009978:	b480      	push	{r7}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	6892      	ldr	r2, [r2, #8]
 800998e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	6852      	ldr	r2, [r2, #4]
 8009998:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d103      	bne.n	80099ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	689a      	ldr	r2, [r3, #8]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	1e5a      	subs	r2, r3, #1
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3714      	adds	r7, #20
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b08c      	sub	sp, #48	; 0x30
 80099d0:	af04      	add	r7, sp, #16
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	603b      	str	r3, [r7, #0]
 80099d8:	4613      	mov	r3, r2
 80099da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80099dc:	88fb      	ldrh	r3, [r7, #6]
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	4618      	mov	r0, r3
 80099e2:	f000 fe77 	bl	800a6d4 <pvPortMalloc>
 80099e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00e      	beq.n	8009a0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80099ee:	2054      	movs	r0, #84	; 0x54
 80099f0:	f000 fe70 	bl	800a6d4 <pvPortMalloc>
 80099f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d003      	beq.n	8009a04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	697a      	ldr	r2, [r7, #20]
 8009a00:	631a      	str	r2, [r3, #48]	; 0x30
 8009a02:	e005      	b.n	8009a10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009a04:	6978      	ldr	r0, [r7, #20]
 8009a06:	f000 ff27 	bl	800a858 <vPortFree>
 8009a0a:	e001      	b.n	8009a10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d013      	beq.n	8009a3e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009a16:	88fa      	ldrh	r2, [r7, #6]
 8009a18:	2300      	movs	r3, #0
 8009a1a:	9303      	str	r3, [sp, #12]
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	9302      	str	r3, [sp, #8]
 8009a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a22:	9301      	str	r3, [sp, #4]
 8009a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	68b9      	ldr	r1, [r7, #8]
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f000 f80e 	bl	8009a4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a32:	69f8      	ldr	r0, [r7, #28]
 8009a34:	f000 f892 	bl	8009b5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	61bb      	str	r3, [r7, #24]
 8009a3c:	e002      	b.n	8009a44 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8009a42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009a44:	69bb      	ldr	r3, [r7, #24]
	}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3720      	adds	r7, #32
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b088      	sub	sp, #32
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	60f8      	str	r0, [r7, #12]
 8009a56:	60b9      	str	r1, [r7, #8]
 8009a58:	607a      	str	r2, [r7, #4]
 8009a5a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009a66:	3b01      	subs	r3, #1
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	4413      	add	r3, r2
 8009a6c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	f023 0307 	bic.w	r3, r3, #7
 8009a74:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	f003 0307 	and.w	r3, r3, #7
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d009      	beq.n	8009a94 <prvInitialiseNewTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	617b      	str	r3, [r7, #20]
 8009a92:	e7fe      	b.n	8009a92 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d01f      	beq.n	8009ada <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	61fb      	str	r3, [r7, #28]
 8009a9e:	e012      	b.n	8009ac6 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	7819      	ldrb	r1, [r3, #0]
 8009aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	4413      	add	r3, r2
 8009aae:	3334      	adds	r3, #52	; 0x34
 8009ab0:	460a      	mov	r2, r1
 8009ab2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009ab4:	68ba      	ldr	r2, [r7, #8]
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	4413      	add	r3, r2
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d006      	beq.n	8009ace <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	61fb      	str	r3, [r7, #28]
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	2b0f      	cmp	r3, #15
 8009aca:	d9e9      	bls.n	8009aa0 <prvInitialiseNewTask+0x52>
 8009acc:	e000      	b.n	8009ad0 <prvInitialiseNewTask+0x82>
			{
				break;
 8009ace:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ad8:	e003      	b.n	8009ae2 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae4:	2b06      	cmp	r3, #6
 8009ae6:	d901      	bls.n	8009aec <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ae8:	2306      	movs	r3, #6
 8009aea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009af0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009af6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afa:	2200      	movs	r2, #0
 8009afc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b00:	3304      	adds	r3, #4
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7ff fece 	bl	80098a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0a:	3318      	adds	r3, #24
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7ff fec9 	bl	80098a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1a:	f1c3 0207 	rsb	r2, r3, #7
 8009b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b30:	2200      	movs	r2, #0
 8009b32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009b36:	683a      	ldr	r2, [r7, #0]
 8009b38:	68f9      	ldr	r1, [r7, #12]
 8009b3a:	69b8      	ldr	r0, [r7, #24]
 8009b3c:	f000 fbc8 	bl	800a2d0 <pxPortInitialiseStack>
 8009b40:	4602      	mov	r2, r0
 8009b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b44:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d002      	beq.n	8009b52 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b52:	bf00      	nop
 8009b54:	3720      	adds	r7, #32
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
	...

08009b5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009b64:	f000 fcda 	bl	800a51c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009b68:	4b2a      	ldr	r3, [pc, #168]	; (8009c14 <prvAddNewTaskToReadyList+0xb8>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	4a29      	ldr	r2, [pc, #164]	; (8009c14 <prvAddNewTaskToReadyList+0xb8>)
 8009b70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009b72:	4b29      	ldr	r3, [pc, #164]	; (8009c18 <prvAddNewTaskToReadyList+0xbc>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d109      	bne.n	8009b8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009b7a:	4a27      	ldr	r2, [pc, #156]	; (8009c18 <prvAddNewTaskToReadyList+0xbc>)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009b80:	4b24      	ldr	r3, [pc, #144]	; (8009c14 <prvAddNewTaskToReadyList+0xb8>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d110      	bne.n	8009baa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009b88:	f000 faa0 	bl	800a0cc <prvInitialiseTaskLists>
 8009b8c:	e00d      	b.n	8009baa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009b8e:	4b23      	ldr	r3, [pc, #140]	; (8009c1c <prvAddNewTaskToReadyList+0xc0>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d109      	bne.n	8009baa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009b96:	4b20      	ldr	r3, [pc, #128]	; (8009c18 <prvAddNewTaskToReadyList+0xbc>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d802      	bhi.n	8009baa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ba4:	4a1c      	ldr	r2, [pc, #112]	; (8009c18 <prvAddNewTaskToReadyList+0xbc>)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009baa:	4b1d      	ldr	r3, [pc, #116]	; (8009c20 <prvAddNewTaskToReadyList+0xc4>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	4a1b      	ldr	r2, [pc, #108]	; (8009c20 <prvAddNewTaskToReadyList+0xc4>)
 8009bb2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb8:	2201      	movs	r2, #1
 8009bba:	409a      	lsls	r2, r3
 8009bbc:	4b19      	ldr	r3, [pc, #100]	; (8009c24 <prvAddNewTaskToReadyList+0xc8>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	4a18      	ldr	r2, [pc, #96]	; (8009c24 <prvAddNewTaskToReadyList+0xc8>)
 8009bc4:	6013      	str	r3, [r2, #0]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bca:	4613      	mov	r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	4413      	add	r3, r2
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	4a15      	ldr	r2, [pc, #84]	; (8009c28 <prvAddNewTaskToReadyList+0xcc>)
 8009bd4:	441a      	add	r2, r3
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	3304      	adds	r3, #4
 8009bda:	4619      	mov	r1, r3
 8009bdc:	4610      	mov	r0, r2
 8009bde:	f7ff fe6e 	bl	80098be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009be2:	f000 fcc9 	bl	800a578 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009be6:	4b0d      	ldr	r3, [pc, #52]	; (8009c1c <prvAddNewTaskToReadyList+0xc0>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00e      	beq.n	8009c0c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009bee:	4b0a      	ldr	r3, [pc, #40]	; (8009c18 <prvAddNewTaskToReadyList+0xbc>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d207      	bcs.n	8009c0c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009bfc:	4b0b      	ldr	r3, [pc, #44]	; (8009c2c <prvAddNewTaskToReadyList+0xd0>)
 8009bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c02:	601a      	str	r2, [r3, #0]
 8009c04:	f3bf 8f4f 	dsb	sy
 8009c08:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c0c:	bf00      	nop
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	20001510 	.word	0x20001510
 8009c18:	20001410 	.word	0x20001410
 8009c1c:	2000151c 	.word	0x2000151c
 8009c20:	2000152c 	.word	0x2000152c
 8009c24:	20001518 	.word	0x20001518
 8009c28:	20001414 	.word	0x20001414
 8009c2c:	e000ed04 	.word	0xe000ed04

08009c30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d016      	beq.n	8009c70 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009c42:	4b13      	ldr	r3, [pc, #76]	; (8009c90 <vTaskDelay+0x60>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d009      	beq.n	8009c5e <vTaskDelay+0x2e>
 8009c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4e:	f383 8811 	msr	BASEPRI, r3
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	f3bf 8f4f 	dsb	sy
 8009c5a:	60bb      	str	r3, [r7, #8]
 8009c5c:	e7fe      	b.n	8009c5c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009c5e:	f000 f861 	bl	8009d24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009c62:	2100      	movs	r1, #0
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 facd 	bl	800a204 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009c6a:	f000 f869 	bl	8009d40 <xTaskResumeAll>
 8009c6e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d107      	bne.n	8009c86 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009c76:	4b07      	ldr	r3, [pc, #28]	; (8009c94 <vTaskDelay+0x64>)
 8009c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c7c:	601a      	str	r2, [r3, #0]
 8009c7e:	f3bf 8f4f 	dsb	sy
 8009c82:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009c86:	bf00      	nop
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	20001538 	.word	0x20001538
 8009c94:	e000ed04 	.word	0xe000ed04

08009c98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b086      	sub	sp, #24
 8009c9c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8009c9e:	4b1b      	ldr	r3, [pc, #108]	; (8009d0c <vTaskStartScheduler+0x74>)
 8009ca0:	9301      	str	r3, [sp, #4]
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	2280      	movs	r2, #128	; 0x80
 8009caa:	4919      	ldr	r1, [pc, #100]	; (8009d10 <vTaskStartScheduler+0x78>)
 8009cac:	4819      	ldr	r0, [pc, #100]	; (8009d14 <vTaskStartScheduler+0x7c>)
 8009cae:	f7ff fe8d 	bl	80099cc <xTaskCreate>
 8009cb2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d115      	bne.n	8009ce6 <vTaskStartScheduler+0x4e>
 8009cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbe:	f383 8811 	msr	BASEPRI, r3
 8009cc2:	f3bf 8f6f 	isb	sy
 8009cc6:	f3bf 8f4f 	dsb	sy
 8009cca:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009ccc:	4b12      	ldr	r3, [pc, #72]	; (8009d18 <vTaskStartScheduler+0x80>)
 8009cce:	f04f 32ff 	mov.w	r2, #4294967295
 8009cd2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009cd4:	4b11      	ldr	r3, [pc, #68]	; (8009d1c <vTaskStartScheduler+0x84>)
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009cda:	4b11      	ldr	r3, [pc, #68]	; (8009d20 <vTaskStartScheduler+0x88>)
 8009cdc:	2200      	movs	r2, #0
 8009cde:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009ce0:	f000 fb7e 	bl	800a3e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009ce4:	e00d      	b.n	8009d02 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cec:	d109      	bne.n	8009d02 <vTaskStartScheduler+0x6a>
 8009cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf2:	f383 8811 	msr	BASEPRI, r3
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	607b      	str	r3, [r7, #4]
 8009d00:	e7fe      	b.n	8009d00 <vTaskStartScheduler+0x68>
}
 8009d02:	bf00      	nop
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	20001534 	.word	0x20001534
 8009d10:	0800b740 	.word	0x0800b740
 8009d14:	0800a09d 	.word	0x0800a09d
 8009d18:	20001530 	.word	0x20001530
 8009d1c:	2000151c 	.word	0x2000151c
 8009d20:	20001514 	.word	0x20001514

08009d24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009d24:	b480      	push	{r7}
 8009d26:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009d28:	4b04      	ldr	r3, [pc, #16]	; (8009d3c <vTaskSuspendAll+0x18>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	4a03      	ldr	r2, [pc, #12]	; (8009d3c <vTaskSuspendAll+0x18>)
 8009d30:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009d32:	bf00      	nop
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr
 8009d3c:	20001538 	.word	0x20001538

08009d40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009d46:	2300      	movs	r3, #0
 8009d48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009d4e:	4b41      	ldr	r3, [pc, #260]	; (8009e54 <xTaskResumeAll+0x114>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d109      	bne.n	8009d6a <xTaskResumeAll+0x2a>
 8009d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5a:	f383 8811 	msr	BASEPRI, r3
 8009d5e:	f3bf 8f6f 	isb	sy
 8009d62:	f3bf 8f4f 	dsb	sy
 8009d66:	603b      	str	r3, [r7, #0]
 8009d68:	e7fe      	b.n	8009d68 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009d6a:	f000 fbd7 	bl	800a51c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009d6e:	4b39      	ldr	r3, [pc, #228]	; (8009e54 <xTaskResumeAll+0x114>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	3b01      	subs	r3, #1
 8009d74:	4a37      	ldr	r2, [pc, #220]	; (8009e54 <xTaskResumeAll+0x114>)
 8009d76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d78:	4b36      	ldr	r3, [pc, #216]	; (8009e54 <xTaskResumeAll+0x114>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d161      	bne.n	8009e44 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009d80:	4b35      	ldr	r3, [pc, #212]	; (8009e58 <xTaskResumeAll+0x118>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d05d      	beq.n	8009e44 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d88:	e02e      	b.n	8009de8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d8a:	4b34      	ldr	r3, [pc, #208]	; (8009e5c <xTaskResumeAll+0x11c>)
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	3318      	adds	r3, #24
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7ff fdee 	bl	8009978 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	3304      	adds	r3, #4
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7ff fde9 	bl	8009978 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009daa:	2201      	movs	r2, #1
 8009dac:	409a      	lsls	r2, r3
 8009dae:	4b2c      	ldr	r3, [pc, #176]	; (8009e60 <xTaskResumeAll+0x120>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4313      	orrs	r3, r2
 8009db4:	4a2a      	ldr	r2, [pc, #168]	; (8009e60 <xTaskResumeAll+0x120>)
 8009db6:	6013      	str	r3, [r2, #0]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	4413      	add	r3, r2
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	4a27      	ldr	r2, [pc, #156]	; (8009e64 <xTaskResumeAll+0x124>)
 8009dc6:	441a      	add	r2, r3
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	3304      	adds	r3, #4
 8009dcc:	4619      	mov	r1, r3
 8009dce:	4610      	mov	r0, r2
 8009dd0:	f7ff fd75 	bl	80098be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dd8:	4b23      	ldr	r3, [pc, #140]	; (8009e68 <xTaskResumeAll+0x128>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d302      	bcc.n	8009de8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8009de2:	4b22      	ldr	r3, [pc, #136]	; (8009e6c <xTaskResumeAll+0x12c>)
 8009de4:	2201      	movs	r2, #1
 8009de6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009de8:	4b1c      	ldr	r3, [pc, #112]	; (8009e5c <xTaskResumeAll+0x11c>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d1cc      	bne.n	8009d8a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d001      	beq.n	8009dfa <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009df6:	f000 f9e5 	bl	800a1c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009dfa:	4b1d      	ldr	r3, [pc, #116]	; (8009e70 <xTaskResumeAll+0x130>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d010      	beq.n	8009e28 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009e06:	f000 f837 	bl	8009e78 <xTaskIncrementTick>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d002      	beq.n	8009e16 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8009e10:	4b16      	ldr	r3, [pc, #88]	; (8009e6c <xTaskResumeAll+0x12c>)
 8009e12:	2201      	movs	r2, #1
 8009e14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1f1      	bne.n	8009e06 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8009e22:	4b13      	ldr	r3, [pc, #76]	; (8009e70 <xTaskResumeAll+0x130>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009e28:	4b10      	ldr	r3, [pc, #64]	; (8009e6c <xTaskResumeAll+0x12c>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d009      	beq.n	8009e44 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009e30:	2301      	movs	r3, #1
 8009e32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009e34:	4b0f      	ldr	r3, [pc, #60]	; (8009e74 <xTaskResumeAll+0x134>)
 8009e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e3a:	601a      	str	r2, [r3, #0]
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e44:	f000 fb98 	bl	800a578 <vPortExitCritical>

	return xAlreadyYielded;
 8009e48:	68bb      	ldr	r3, [r7, #8]
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	20001538 	.word	0x20001538
 8009e58:	20001510 	.word	0x20001510
 8009e5c:	200014d0 	.word	0x200014d0
 8009e60:	20001518 	.word	0x20001518
 8009e64:	20001414 	.word	0x20001414
 8009e68:	20001410 	.word	0x20001410
 8009e6c:	20001524 	.word	0x20001524
 8009e70:	20001520 	.word	0x20001520
 8009e74:	e000ed04 	.word	0xe000ed04

08009e78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b086      	sub	sp, #24
 8009e7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e82:	4b4e      	ldr	r3, [pc, #312]	; (8009fbc <xTaskIncrementTick+0x144>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f040 8087 	bne.w	8009f9a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009e8c:	4b4c      	ldr	r3, [pc, #304]	; (8009fc0 <xTaskIncrementTick+0x148>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	3301      	adds	r3, #1
 8009e92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e94:	4a4a      	ldr	r2, [pc, #296]	; (8009fc0 <xTaskIncrementTick+0x148>)
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d11f      	bne.n	8009ee0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009ea0:	4b48      	ldr	r3, [pc, #288]	; (8009fc4 <xTaskIncrementTick+0x14c>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d009      	beq.n	8009ebe <xTaskIncrementTick+0x46>
 8009eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eae:	f383 8811 	msr	BASEPRI, r3
 8009eb2:	f3bf 8f6f 	isb	sy
 8009eb6:	f3bf 8f4f 	dsb	sy
 8009eba:	603b      	str	r3, [r7, #0]
 8009ebc:	e7fe      	b.n	8009ebc <xTaskIncrementTick+0x44>
 8009ebe:	4b41      	ldr	r3, [pc, #260]	; (8009fc4 <xTaskIncrementTick+0x14c>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	60fb      	str	r3, [r7, #12]
 8009ec4:	4b40      	ldr	r3, [pc, #256]	; (8009fc8 <xTaskIncrementTick+0x150>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a3e      	ldr	r2, [pc, #248]	; (8009fc4 <xTaskIncrementTick+0x14c>)
 8009eca:	6013      	str	r3, [r2, #0]
 8009ecc:	4a3e      	ldr	r2, [pc, #248]	; (8009fc8 <xTaskIncrementTick+0x150>)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	6013      	str	r3, [r2, #0]
 8009ed2:	4b3e      	ldr	r3, [pc, #248]	; (8009fcc <xTaskIncrementTick+0x154>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	4a3c      	ldr	r2, [pc, #240]	; (8009fcc <xTaskIncrementTick+0x154>)
 8009eda:	6013      	str	r3, [r2, #0]
 8009edc:	f000 f972 	bl	800a1c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009ee0:	4b3b      	ldr	r3, [pc, #236]	; (8009fd0 <xTaskIncrementTick+0x158>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	693a      	ldr	r2, [r7, #16]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d348      	bcc.n	8009f7c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009eea:	4b36      	ldr	r3, [pc, #216]	; (8009fc4 <xTaskIncrementTick+0x14c>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d104      	bne.n	8009efe <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ef4:	4b36      	ldr	r3, [pc, #216]	; (8009fd0 <xTaskIncrementTick+0x158>)
 8009ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8009efa:	601a      	str	r2, [r3, #0]
					break;
 8009efc:	e03e      	b.n	8009f7c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009efe:	4b31      	ldr	r3, [pc, #196]	; (8009fc4 <xTaskIncrementTick+0x14c>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009f0e:	693a      	ldr	r2, [r7, #16]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d203      	bcs.n	8009f1e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009f16:	4a2e      	ldr	r2, [pc, #184]	; (8009fd0 <xTaskIncrementTick+0x158>)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009f1c:	e02e      	b.n	8009f7c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	3304      	adds	r3, #4
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7ff fd28 	bl	8009978 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d004      	beq.n	8009f3a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	3318      	adds	r3, #24
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7ff fd1f 	bl	8009978 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3e:	2201      	movs	r2, #1
 8009f40:	409a      	lsls	r2, r3
 8009f42:	4b24      	ldr	r3, [pc, #144]	; (8009fd4 <xTaskIncrementTick+0x15c>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	4a22      	ldr	r2, [pc, #136]	; (8009fd4 <xTaskIncrementTick+0x15c>)
 8009f4a:	6013      	str	r3, [r2, #0]
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f50:	4613      	mov	r3, r2
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	4413      	add	r3, r2
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	4a1f      	ldr	r2, [pc, #124]	; (8009fd8 <xTaskIncrementTick+0x160>)
 8009f5a:	441a      	add	r2, r3
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	3304      	adds	r3, #4
 8009f60:	4619      	mov	r1, r3
 8009f62:	4610      	mov	r0, r2
 8009f64:	f7ff fcab 	bl	80098be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f6c:	4b1b      	ldr	r3, [pc, #108]	; (8009fdc <xTaskIncrementTick+0x164>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d3b9      	bcc.n	8009eea <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009f76:	2301      	movs	r3, #1
 8009f78:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f7a:	e7b6      	b.n	8009eea <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009f7c:	4b17      	ldr	r3, [pc, #92]	; (8009fdc <xTaskIncrementTick+0x164>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f82:	4915      	ldr	r1, [pc, #84]	; (8009fd8 <xTaskIncrementTick+0x160>)
 8009f84:	4613      	mov	r3, r2
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	4413      	add	r3, r2
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	440b      	add	r3, r1
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d907      	bls.n	8009fa4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8009f94:	2301      	movs	r3, #1
 8009f96:	617b      	str	r3, [r7, #20]
 8009f98:	e004      	b.n	8009fa4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009f9a:	4b11      	ldr	r3, [pc, #68]	; (8009fe0 <xTaskIncrementTick+0x168>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	4a0f      	ldr	r2, [pc, #60]	; (8009fe0 <xTaskIncrementTick+0x168>)
 8009fa2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009fa4:	4b0f      	ldr	r3, [pc, #60]	; (8009fe4 <xTaskIncrementTick+0x16c>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d001      	beq.n	8009fb0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8009fac:	2301      	movs	r3, #1
 8009fae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009fb0:	697b      	ldr	r3, [r7, #20]
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3718      	adds	r7, #24
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	20001538 	.word	0x20001538
 8009fc0:	20001514 	.word	0x20001514
 8009fc4:	200014c8 	.word	0x200014c8
 8009fc8:	200014cc 	.word	0x200014cc
 8009fcc:	20001528 	.word	0x20001528
 8009fd0:	20001530 	.word	0x20001530
 8009fd4:	20001518 	.word	0x20001518
 8009fd8:	20001414 	.word	0x20001414
 8009fdc:	20001410 	.word	0x20001410
 8009fe0:	20001520 	.word	0x20001520
 8009fe4:	20001524 	.word	0x20001524

08009fe8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b087      	sub	sp, #28
 8009fec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009fee:	4b26      	ldr	r3, [pc, #152]	; (800a088 <vTaskSwitchContext+0xa0>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d003      	beq.n	8009ffe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009ff6:	4b25      	ldr	r3, [pc, #148]	; (800a08c <vTaskSwitchContext+0xa4>)
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ffc:	e03e      	b.n	800a07c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8009ffe:	4b23      	ldr	r3, [pc, #140]	; (800a08c <vTaskSwitchContext+0xa4>)
 800a000:	2200      	movs	r2, #0
 800a002:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a004:	4b22      	ldr	r3, [pc, #136]	; (800a090 <vTaskSwitchContext+0xa8>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	fab3 f383 	clz	r3, r3
 800a010:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a012:	7afb      	ldrb	r3, [r7, #11]
 800a014:	f1c3 031f 	rsb	r3, r3, #31
 800a018:	617b      	str	r3, [r7, #20]
 800a01a:	491e      	ldr	r1, [pc, #120]	; (800a094 <vTaskSwitchContext+0xac>)
 800a01c:	697a      	ldr	r2, [r7, #20]
 800a01e:	4613      	mov	r3, r2
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	4413      	add	r3, r2
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	440b      	add	r3, r1
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d109      	bne.n	800a042 <vTaskSwitchContext+0x5a>
	__asm volatile
 800a02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	607b      	str	r3, [r7, #4]
 800a040:	e7fe      	b.n	800a040 <vTaskSwitchContext+0x58>
 800a042:	697a      	ldr	r2, [r7, #20]
 800a044:	4613      	mov	r3, r2
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	4413      	add	r3, r2
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	4a11      	ldr	r2, [pc, #68]	; (800a094 <vTaskSwitchContext+0xac>)
 800a04e:	4413      	add	r3, r2
 800a050:	613b      	str	r3, [r7, #16]
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	685a      	ldr	r2, [r3, #4]
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	605a      	str	r2, [r3, #4]
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	685a      	ldr	r2, [r3, #4]
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	3308      	adds	r3, #8
 800a064:	429a      	cmp	r2, r3
 800a066:	d104      	bne.n	800a072 <vTaskSwitchContext+0x8a>
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	685a      	ldr	r2, [r3, #4]
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	605a      	str	r2, [r3, #4]
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	4a07      	ldr	r2, [pc, #28]	; (800a098 <vTaskSwitchContext+0xb0>)
 800a07a:	6013      	str	r3, [r2, #0]
}
 800a07c:	bf00      	nop
 800a07e:	371c      	adds	r7, #28
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr
 800a088:	20001538 	.word	0x20001538
 800a08c:	20001524 	.word	0x20001524
 800a090:	20001518 	.word	0x20001518
 800a094:	20001414 	.word	0x20001414
 800a098:	20001410 	.word	0x20001410

0800a09c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a0a4:	f000 f852 	bl	800a14c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a0a8:	4b06      	ldr	r3, [pc, #24]	; (800a0c4 <prvIdleTask+0x28>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d9f9      	bls.n	800a0a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a0b0:	4b05      	ldr	r3, [pc, #20]	; (800a0c8 <prvIdleTask+0x2c>)
 800a0b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0b6:	601a      	str	r2, [r3, #0]
 800a0b8:	f3bf 8f4f 	dsb	sy
 800a0bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a0c0:	e7f0      	b.n	800a0a4 <prvIdleTask+0x8>
 800a0c2:	bf00      	nop
 800a0c4:	20001414 	.word	0x20001414
 800a0c8:	e000ed04 	.word	0xe000ed04

0800a0cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	607b      	str	r3, [r7, #4]
 800a0d6:	e00c      	b.n	800a0f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	4613      	mov	r3, r2
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	4413      	add	r3, r2
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	4a12      	ldr	r2, [pc, #72]	; (800a12c <prvInitialiseTaskLists+0x60>)
 800a0e4:	4413      	add	r3, r2
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7ff fbbc 	bl	8009864 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	607b      	str	r3, [r7, #4]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2b06      	cmp	r3, #6
 800a0f6:	d9ef      	bls.n	800a0d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a0f8:	480d      	ldr	r0, [pc, #52]	; (800a130 <prvInitialiseTaskLists+0x64>)
 800a0fa:	f7ff fbb3 	bl	8009864 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a0fe:	480d      	ldr	r0, [pc, #52]	; (800a134 <prvInitialiseTaskLists+0x68>)
 800a100:	f7ff fbb0 	bl	8009864 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a104:	480c      	ldr	r0, [pc, #48]	; (800a138 <prvInitialiseTaskLists+0x6c>)
 800a106:	f7ff fbad 	bl	8009864 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a10a:	480c      	ldr	r0, [pc, #48]	; (800a13c <prvInitialiseTaskLists+0x70>)
 800a10c:	f7ff fbaa 	bl	8009864 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a110:	480b      	ldr	r0, [pc, #44]	; (800a140 <prvInitialiseTaskLists+0x74>)
 800a112:	f7ff fba7 	bl	8009864 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a116:	4b0b      	ldr	r3, [pc, #44]	; (800a144 <prvInitialiseTaskLists+0x78>)
 800a118:	4a05      	ldr	r2, [pc, #20]	; (800a130 <prvInitialiseTaskLists+0x64>)
 800a11a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a11c:	4b0a      	ldr	r3, [pc, #40]	; (800a148 <prvInitialiseTaskLists+0x7c>)
 800a11e:	4a05      	ldr	r2, [pc, #20]	; (800a134 <prvInitialiseTaskLists+0x68>)
 800a120:	601a      	str	r2, [r3, #0]
}
 800a122:	bf00      	nop
 800a124:	3708      	adds	r7, #8
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	20001414 	.word	0x20001414
 800a130:	200014a0 	.word	0x200014a0
 800a134:	200014b4 	.word	0x200014b4
 800a138:	200014d0 	.word	0x200014d0
 800a13c:	200014e4 	.word	0x200014e4
 800a140:	200014fc 	.word	0x200014fc
 800a144:	200014c8 	.word	0x200014c8
 800a148:	200014cc 	.word	0x200014cc

0800a14c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a152:	e019      	b.n	800a188 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a154:	f000 f9e2 	bl	800a51c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a158:	4b0f      	ldr	r3, [pc, #60]	; (800a198 <prvCheckTasksWaitingTermination+0x4c>)
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	3304      	adds	r3, #4
 800a164:	4618      	mov	r0, r3
 800a166:	f7ff fc07 	bl	8009978 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a16a:	4b0c      	ldr	r3, [pc, #48]	; (800a19c <prvCheckTasksWaitingTermination+0x50>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	3b01      	subs	r3, #1
 800a170:	4a0a      	ldr	r2, [pc, #40]	; (800a19c <prvCheckTasksWaitingTermination+0x50>)
 800a172:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a174:	4b0a      	ldr	r3, [pc, #40]	; (800a1a0 <prvCheckTasksWaitingTermination+0x54>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	3b01      	subs	r3, #1
 800a17a:	4a09      	ldr	r2, [pc, #36]	; (800a1a0 <prvCheckTasksWaitingTermination+0x54>)
 800a17c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a17e:	f000 f9fb 	bl	800a578 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f80e 	bl	800a1a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a188:	4b05      	ldr	r3, [pc, #20]	; (800a1a0 <prvCheckTasksWaitingTermination+0x54>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d1e1      	bne.n	800a154 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a190:	bf00      	nop
 800a192:	3708      	adds	r7, #8
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	200014e4 	.word	0x200014e4
 800a19c:	20001510 	.word	0x20001510
 800a1a0:	200014f8 	.word	0x200014f8

0800a1a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f000 fb51 	bl	800a858 <vPortFree>
			vPortFree( pxTCB );
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 fb4e 	bl	800a858 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a1bc:	bf00      	nop
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1ca:	4b0c      	ldr	r3, [pc, #48]	; (800a1fc <prvResetNextTaskUnblockTime+0x38>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d104      	bne.n	800a1de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a1d4:	4b0a      	ldr	r3, [pc, #40]	; (800a200 <prvResetNextTaskUnblockTime+0x3c>)
 800a1d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a1dc:	e008      	b.n	800a1f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1de:	4b07      	ldr	r3, [pc, #28]	; (800a1fc <prvResetNextTaskUnblockTime+0x38>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	4a04      	ldr	r2, [pc, #16]	; (800a200 <prvResetNextTaskUnblockTime+0x3c>)
 800a1ee:	6013      	str	r3, [r2, #0]
}
 800a1f0:	bf00      	nop
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr
 800a1fc:	200014c8 	.word	0x200014c8
 800a200:	20001530 	.word	0x20001530

0800a204 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a20e:	4b29      	ldr	r3, [pc, #164]	; (800a2b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a214:	4b28      	ldr	r3, [pc, #160]	; (800a2b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	3304      	adds	r3, #4
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7ff fbac 	bl	8009978 <uxListRemove>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10b      	bne.n	800a23e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a226:	4b24      	ldr	r3, [pc, #144]	; (800a2b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a22c:	2201      	movs	r2, #1
 800a22e:	fa02 f303 	lsl.w	r3, r2, r3
 800a232:	43da      	mvns	r2, r3
 800a234:	4b21      	ldr	r3, [pc, #132]	; (800a2bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4013      	ands	r3, r2
 800a23a:	4a20      	ldr	r2, [pc, #128]	; (800a2bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800a23c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a244:	d10a      	bne.n	800a25c <prvAddCurrentTaskToDelayedList+0x58>
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d007      	beq.n	800a25c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a24c:	4b1a      	ldr	r3, [pc, #104]	; (800a2b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	3304      	adds	r3, #4
 800a252:	4619      	mov	r1, r3
 800a254:	481a      	ldr	r0, [pc, #104]	; (800a2c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a256:	f7ff fb32 	bl	80098be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a25a:	e026      	b.n	800a2aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	4413      	add	r3, r2
 800a262:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a264:	4b14      	ldr	r3, [pc, #80]	; (800a2b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a26c:	68ba      	ldr	r2, [r7, #8]
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	429a      	cmp	r2, r3
 800a272:	d209      	bcs.n	800a288 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a274:	4b13      	ldr	r3, [pc, #76]	; (800a2c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	4b0f      	ldr	r3, [pc, #60]	; (800a2b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	3304      	adds	r3, #4
 800a27e:	4619      	mov	r1, r3
 800a280:	4610      	mov	r0, r2
 800a282:	f7ff fb40 	bl	8009906 <vListInsert>
}
 800a286:	e010      	b.n	800a2aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a288:	4b0f      	ldr	r3, [pc, #60]	; (800a2c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	4b0a      	ldr	r3, [pc, #40]	; (800a2b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	3304      	adds	r3, #4
 800a292:	4619      	mov	r1, r3
 800a294:	4610      	mov	r0, r2
 800a296:	f7ff fb36 	bl	8009906 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a29a:	4b0c      	ldr	r3, [pc, #48]	; (800a2cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	68ba      	ldr	r2, [r7, #8]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d202      	bcs.n	800a2aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a2a4:	4a09      	ldr	r2, [pc, #36]	; (800a2cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	6013      	str	r3, [r2, #0]
}
 800a2aa:	bf00      	nop
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	20001514 	.word	0x20001514
 800a2b8:	20001410 	.word	0x20001410
 800a2bc:	20001518 	.word	0x20001518
 800a2c0:	200014fc 	.word	0x200014fc
 800a2c4:	200014cc 	.word	0x200014cc
 800a2c8:	200014c8 	.word	0x200014c8
 800a2cc:	20001530 	.word	0x20001530

0800a2d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	3b04      	subs	r3, #4
 800a2e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a2e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	3b04      	subs	r3, #4
 800a2ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	f023 0201 	bic.w	r2, r3, #1
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	3b04      	subs	r3, #4
 800a2fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a300:	4a0c      	ldr	r2, [pc, #48]	; (800a334 <pxPortInitialiseStack+0x64>)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	3b14      	subs	r3, #20
 800a30a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	3b04      	subs	r3, #4
 800a316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f06f 0202 	mvn.w	r2, #2
 800a31e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	3b20      	subs	r3, #32
 800a324:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a326:	68fb      	ldr	r3, [r7, #12]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3714      	adds	r7, #20
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr
 800a334:	0800a339 	.word	0x0800a339

0800a338 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a33e:	2300      	movs	r3, #0
 800a340:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a342:	4b11      	ldr	r3, [pc, #68]	; (800a388 <prvTaskExitError+0x50>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a34a:	d009      	beq.n	800a360 <prvTaskExitError+0x28>
 800a34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a350:	f383 8811 	msr	BASEPRI, r3
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	f3bf 8f4f 	dsb	sy
 800a35c:	60fb      	str	r3, [r7, #12]
 800a35e:	e7fe      	b.n	800a35e <prvTaskExitError+0x26>
 800a360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a372:	bf00      	nop
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d0fc      	beq.n	800a374 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a37a:	bf00      	nop
 800a37c:	3714      	adds	r7, #20
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	2000011c 	.word	0x2000011c
 800a38c:	00000000 	.word	0x00000000

0800a390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a390:	4b07      	ldr	r3, [pc, #28]	; (800a3b0 <pxCurrentTCBConst2>)
 800a392:	6819      	ldr	r1, [r3, #0]
 800a394:	6808      	ldr	r0, [r1, #0]
 800a396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39a:	f380 8809 	msr	PSP, r0
 800a39e:	f3bf 8f6f 	isb	sy
 800a3a2:	f04f 0000 	mov.w	r0, #0
 800a3a6:	f380 8811 	msr	BASEPRI, r0
 800a3aa:	4770      	bx	lr
 800a3ac:	f3af 8000 	nop.w

0800a3b0 <pxCurrentTCBConst2>:
 800a3b0:	20001410 	.word	0x20001410
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a3b4:	bf00      	nop
 800a3b6:	bf00      	nop

0800a3b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a3b8:	4808      	ldr	r0, [pc, #32]	; (800a3dc <prvPortStartFirstTask+0x24>)
 800a3ba:	6800      	ldr	r0, [r0, #0]
 800a3bc:	6800      	ldr	r0, [r0, #0]
 800a3be:	f380 8808 	msr	MSP, r0
 800a3c2:	f04f 0000 	mov.w	r0, #0
 800a3c6:	f380 8814 	msr	CONTROL, r0
 800a3ca:	b662      	cpsie	i
 800a3cc:	b661      	cpsie	f
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	f3bf 8f6f 	isb	sy
 800a3d6:	df00      	svc	0
 800a3d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a3da:	bf00      	nop
 800a3dc:	e000ed08 	.word	0xe000ed08

0800a3e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a3e6:	4b44      	ldr	r3, [pc, #272]	; (800a4f8 <xPortStartScheduler+0x118>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a44      	ldr	r2, [pc, #272]	; (800a4fc <xPortStartScheduler+0x11c>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d109      	bne.n	800a404 <xPortStartScheduler+0x24>
 800a3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f4:	f383 8811 	msr	BASEPRI, r3
 800a3f8:	f3bf 8f6f 	isb	sy
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	613b      	str	r3, [r7, #16]
 800a402:	e7fe      	b.n	800a402 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a404:	4b3c      	ldr	r3, [pc, #240]	; (800a4f8 <xPortStartScheduler+0x118>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a3d      	ldr	r2, [pc, #244]	; (800a500 <xPortStartScheduler+0x120>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d109      	bne.n	800a422 <xPortStartScheduler+0x42>
 800a40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a412:	f383 8811 	msr	BASEPRI, r3
 800a416:	f3bf 8f6f 	isb	sy
 800a41a:	f3bf 8f4f 	dsb	sy
 800a41e:	60fb      	str	r3, [r7, #12]
 800a420:	e7fe      	b.n	800a420 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a422:	4b38      	ldr	r3, [pc, #224]	; (800a504 <xPortStartScheduler+0x124>)
 800a424:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	22ff      	movs	r2, #255	; 0xff
 800a432:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a43c:	78fb      	ldrb	r3, [r7, #3]
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a444:	b2da      	uxtb	r2, r3
 800a446:	4b30      	ldr	r3, [pc, #192]	; (800a508 <xPortStartScheduler+0x128>)
 800a448:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a44a:	4b30      	ldr	r3, [pc, #192]	; (800a50c <xPortStartScheduler+0x12c>)
 800a44c:	2207      	movs	r2, #7
 800a44e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a450:	e009      	b.n	800a466 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a452:	4b2e      	ldr	r3, [pc, #184]	; (800a50c <xPortStartScheduler+0x12c>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	3b01      	subs	r3, #1
 800a458:	4a2c      	ldr	r2, [pc, #176]	; (800a50c <xPortStartScheduler+0x12c>)
 800a45a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a45c:	78fb      	ldrb	r3, [r7, #3]
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	005b      	lsls	r3, r3, #1
 800a462:	b2db      	uxtb	r3, r3
 800a464:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a466:	78fb      	ldrb	r3, [r7, #3]
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a46e:	2b80      	cmp	r3, #128	; 0x80
 800a470:	d0ef      	beq.n	800a452 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a472:	4b26      	ldr	r3, [pc, #152]	; (800a50c <xPortStartScheduler+0x12c>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f1c3 0307 	rsb	r3, r3, #7
 800a47a:	2b04      	cmp	r3, #4
 800a47c:	d009      	beq.n	800a492 <xPortStartScheduler+0xb2>
 800a47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a482:	f383 8811 	msr	BASEPRI, r3
 800a486:	f3bf 8f6f 	isb	sy
 800a48a:	f3bf 8f4f 	dsb	sy
 800a48e:	60bb      	str	r3, [r7, #8]
 800a490:	e7fe      	b.n	800a490 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a492:	4b1e      	ldr	r3, [pc, #120]	; (800a50c <xPortStartScheduler+0x12c>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	021b      	lsls	r3, r3, #8
 800a498:	4a1c      	ldr	r2, [pc, #112]	; (800a50c <xPortStartScheduler+0x12c>)
 800a49a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a49c:	4b1b      	ldr	r3, [pc, #108]	; (800a50c <xPortStartScheduler+0x12c>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a4a4:	4a19      	ldr	r2, [pc, #100]	; (800a50c <xPortStartScheduler+0x12c>)
 800a4a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	b2da      	uxtb	r2, r3
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a4b0:	4b17      	ldr	r3, [pc, #92]	; (800a510 <xPortStartScheduler+0x130>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a16      	ldr	r2, [pc, #88]	; (800a510 <xPortStartScheduler+0x130>)
 800a4b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a4ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a4bc:	4b14      	ldr	r3, [pc, #80]	; (800a510 <xPortStartScheduler+0x130>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a13      	ldr	r2, [pc, #76]	; (800a510 <xPortStartScheduler+0x130>)
 800a4c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a4c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a4c8:	f000 f8d6 	bl	800a678 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a4cc:	4b11      	ldr	r3, [pc, #68]	; (800a514 <xPortStartScheduler+0x134>)
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a4d2:	f000 f8f5 	bl	800a6c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a4d6:	4b10      	ldr	r3, [pc, #64]	; (800a518 <xPortStartScheduler+0x138>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a0f      	ldr	r2, [pc, #60]	; (800a518 <xPortStartScheduler+0x138>)
 800a4dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a4e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a4e2:	f7ff ff69 	bl	800a3b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a4e6:	f7ff fd7f 	bl	8009fe8 <vTaskSwitchContext>
	prvTaskExitError();
 800a4ea:	f7ff ff25 	bl	800a338 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a4ee:	2300      	movs	r3, #0
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3718      	adds	r7, #24
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	e000ed00 	.word	0xe000ed00
 800a4fc:	410fc271 	.word	0x410fc271
 800a500:	410fc270 	.word	0x410fc270
 800a504:	e000e400 	.word	0xe000e400
 800a508:	2000153c 	.word	0x2000153c
 800a50c:	20001540 	.word	0x20001540
 800a510:	e000ed20 	.word	0xe000ed20
 800a514:	2000011c 	.word	0x2000011c
 800a518:	e000ef34 	.word	0xe000ef34

0800a51c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a526:	f383 8811 	msr	BASEPRI, r3
 800a52a:	f3bf 8f6f 	isb	sy
 800a52e:	f3bf 8f4f 	dsb	sy
 800a532:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a534:	4b0e      	ldr	r3, [pc, #56]	; (800a570 <vPortEnterCritical+0x54>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	3301      	adds	r3, #1
 800a53a:	4a0d      	ldr	r2, [pc, #52]	; (800a570 <vPortEnterCritical+0x54>)
 800a53c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a53e:	4b0c      	ldr	r3, [pc, #48]	; (800a570 <vPortEnterCritical+0x54>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d10e      	bne.n	800a564 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a546:	4b0b      	ldr	r3, [pc, #44]	; (800a574 <vPortEnterCritical+0x58>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d009      	beq.n	800a564 <vPortEnterCritical+0x48>
 800a550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a554:	f383 8811 	msr	BASEPRI, r3
 800a558:	f3bf 8f6f 	isb	sy
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	603b      	str	r3, [r7, #0]
 800a562:	e7fe      	b.n	800a562 <vPortEnterCritical+0x46>
	}
}
 800a564:	bf00      	nop
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr
 800a570:	2000011c 	.word	0x2000011c
 800a574:	e000ed04 	.word	0xe000ed04

0800a578 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a57e:	4b11      	ldr	r3, [pc, #68]	; (800a5c4 <vPortExitCritical+0x4c>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d109      	bne.n	800a59a <vPortExitCritical+0x22>
 800a586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58a:	f383 8811 	msr	BASEPRI, r3
 800a58e:	f3bf 8f6f 	isb	sy
 800a592:	f3bf 8f4f 	dsb	sy
 800a596:	607b      	str	r3, [r7, #4]
 800a598:	e7fe      	b.n	800a598 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a59a:	4b0a      	ldr	r3, [pc, #40]	; (800a5c4 <vPortExitCritical+0x4c>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	4a08      	ldr	r2, [pc, #32]	; (800a5c4 <vPortExitCritical+0x4c>)
 800a5a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a5a4:	4b07      	ldr	r3, [pc, #28]	; (800a5c4 <vPortExitCritical+0x4c>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d104      	bne.n	800a5b6 <vPortExitCritical+0x3e>
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a5b6:	bf00      	nop
 800a5b8:	370c      	adds	r7, #12
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	2000011c 	.word	0x2000011c
	...

0800a5d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a5d0:	f3ef 8009 	mrs	r0, PSP
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	4b15      	ldr	r3, [pc, #84]	; (800a630 <pxCurrentTCBConst>)
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	f01e 0f10 	tst.w	lr, #16
 800a5e0:	bf08      	it	eq
 800a5e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a5e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ea:	6010      	str	r0, [r2, #0]
 800a5ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a5f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a5f4:	f380 8811 	msr	BASEPRI, r0
 800a5f8:	f3bf 8f4f 	dsb	sy
 800a5fc:	f3bf 8f6f 	isb	sy
 800a600:	f7ff fcf2 	bl	8009fe8 <vTaskSwitchContext>
 800a604:	f04f 0000 	mov.w	r0, #0
 800a608:	f380 8811 	msr	BASEPRI, r0
 800a60c:	bc09      	pop	{r0, r3}
 800a60e:	6819      	ldr	r1, [r3, #0]
 800a610:	6808      	ldr	r0, [r1, #0]
 800a612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a616:	f01e 0f10 	tst.w	lr, #16
 800a61a:	bf08      	it	eq
 800a61c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a620:	f380 8809 	msr	PSP, r0
 800a624:	f3bf 8f6f 	isb	sy
 800a628:	4770      	bx	lr
 800a62a:	bf00      	nop
 800a62c:	f3af 8000 	nop.w

0800a630 <pxCurrentTCBConst>:
 800a630:	20001410 	.word	0x20001410
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a634:	bf00      	nop
 800a636:	bf00      	nop

0800a638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
	__asm volatile
 800a63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a642:	f383 8811 	msr	BASEPRI, r3
 800a646:	f3bf 8f6f 	isb	sy
 800a64a:	f3bf 8f4f 	dsb	sy
 800a64e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a650:	f7ff fc12 	bl	8009e78 <xTaskIncrementTick>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d003      	beq.n	800a662 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a65a:	4b06      	ldr	r3, [pc, #24]	; (800a674 <SysTick_Handler+0x3c>)
 800a65c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a660:	601a      	str	r2, [r3, #0]
 800a662:	2300      	movs	r3, #0
 800a664:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a66c:	bf00      	nop
 800a66e:	3708      	adds	r7, #8
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	e000ed04 	.word	0xe000ed04

0800a678 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a678:	b480      	push	{r7}
 800a67a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a67c:	4b0b      	ldr	r3, [pc, #44]	; (800a6ac <vPortSetupTimerInterrupt+0x34>)
 800a67e:	2200      	movs	r2, #0
 800a680:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a682:	4b0b      	ldr	r3, [pc, #44]	; (800a6b0 <vPortSetupTimerInterrupt+0x38>)
 800a684:	2200      	movs	r2, #0
 800a686:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a688:	4b0a      	ldr	r3, [pc, #40]	; (800a6b4 <vPortSetupTimerInterrupt+0x3c>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a0a      	ldr	r2, [pc, #40]	; (800a6b8 <vPortSetupTimerInterrupt+0x40>)
 800a68e:	fba2 2303 	umull	r2, r3, r2, r3
 800a692:	099b      	lsrs	r3, r3, #6
 800a694:	4a09      	ldr	r2, [pc, #36]	; (800a6bc <vPortSetupTimerInterrupt+0x44>)
 800a696:	3b01      	subs	r3, #1
 800a698:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a69a:	4b04      	ldr	r3, [pc, #16]	; (800a6ac <vPortSetupTimerInterrupt+0x34>)
 800a69c:	2207      	movs	r2, #7
 800a69e:	601a      	str	r2, [r3, #0]
}
 800a6a0:	bf00      	nop
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr
 800a6aa:	bf00      	nop
 800a6ac:	e000e010 	.word	0xe000e010
 800a6b0:	e000e018 	.word	0xe000e018
 800a6b4:	20000000 	.word	0x20000000
 800a6b8:	10624dd3 	.word	0x10624dd3
 800a6bc:	e000e014 	.word	0xe000e014

0800a6c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a6c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a6d0 <vPortEnableVFP+0x10>
 800a6c4:	6801      	ldr	r1, [r0, #0]
 800a6c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a6ca:	6001      	str	r1, [r0, #0]
 800a6cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a6ce:	bf00      	nop
 800a6d0:	e000ed88 	.word	0xe000ed88

0800a6d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b08a      	sub	sp, #40	; 0x28
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a6e0:	f7ff fb20 	bl	8009d24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a6e4:	4b57      	ldr	r3, [pc, #348]	; (800a844 <pvPortMalloc+0x170>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d101      	bne.n	800a6f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a6ec:	f000 f90c 	bl	800a908 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a6f0:	4b55      	ldr	r3, [pc, #340]	; (800a848 <pvPortMalloc+0x174>)
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	4013      	ands	r3, r2
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	f040 808c 	bne.w	800a816 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d01c      	beq.n	800a73e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a704:	2208      	movs	r2, #8
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4413      	add	r3, r2
 800a70a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f003 0307 	and.w	r3, r3, #7
 800a712:	2b00      	cmp	r3, #0
 800a714:	d013      	beq.n	800a73e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f023 0307 	bic.w	r3, r3, #7
 800a71c:	3308      	adds	r3, #8
 800a71e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f003 0307 	and.w	r3, r3, #7
 800a726:	2b00      	cmp	r3, #0
 800a728:	d009      	beq.n	800a73e <pvPortMalloc+0x6a>
	__asm volatile
 800a72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72e:	f383 8811 	msr	BASEPRI, r3
 800a732:	f3bf 8f6f 	isb	sy
 800a736:	f3bf 8f4f 	dsb	sy
 800a73a:	617b      	str	r3, [r7, #20]
 800a73c:	e7fe      	b.n	800a73c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d068      	beq.n	800a816 <pvPortMalloc+0x142>
 800a744:	4b41      	ldr	r3, [pc, #260]	; (800a84c <pvPortMalloc+0x178>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d863      	bhi.n	800a816 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a74e:	4b40      	ldr	r3, [pc, #256]	; (800a850 <pvPortMalloc+0x17c>)
 800a750:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a752:	4b3f      	ldr	r3, [pc, #252]	; (800a850 <pvPortMalloc+0x17c>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a758:	e004      	b.n	800a764 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d903      	bls.n	800a776 <pvPortMalloc+0xa2>
 800a76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d1f1      	bne.n	800a75a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a776:	4b33      	ldr	r3, [pc, #204]	; (800a844 <pvPortMalloc+0x170>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d04a      	beq.n	800a816 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a780:	6a3b      	ldr	r3, [r7, #32]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2208      	movs	r2, #8
 800a786:	4413      	add	r3, r2
 800a788:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	6a3b      	ldr	r3, [r7, #32]
 800a790:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a794:	685a      	ldr	r2, [r3, #4]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	1ad2      	subs	r2, r2, r3
 800a79a:	2308      	movs	r3, #8
 800a79c:	005b      	lsls	r3, r3, #1
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d91e      	bls.n	800a7e0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a7a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7aa:	69bb      	ldr	r3, [r7, #24]
 800a7ac:	f003 0307 	and.w	r3, r3, #7
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d009      	beq.n	800a7c8 <pvPortMalloc+0xf4>
 800a7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b8:	f383 8811 	msr	BASEPRI, r3
 800a7bc:	f3bf 8f6f 	isb	sy
 800a7c0:	f3bf 8f4f 	dsb	sy
 800a7c4:	613b      	str	r3, [r7, #16]
 800a7c6:	e7fe      	b.n	800a7c6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ca:	685a      	ldr	r2, [r3, #4]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	1ad2      	subs	r2, r2, r3
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a7da:	69b8      	ldr	r0, [r7, #24]
 800a7dc:	f000 f8f6 	bl	800a9cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a7e0:	4b1a      	ldr	r3, [pc, #104]	; (800a84c <pvPortMalloc+0x178>)
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	1ad3      	subs	r3, r2, r3
 800a7ea:	4a18      	ldr	r2, [pc, #96]	; (800a84c <pvPortMalloc+0x178>)
 800a7ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a7ee:	4b17      	ldr	r3, [pc, #92]	; (800a84c <pvPortMalloc+0x178>)
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	4b18      	ldr	r3, [pc, #96]	; (800a854 <pvPortMalloc+0x180>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d203      	bcs.n	800a802 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a7fa:	4b14      	ldr	r3, [pc, #80]	; (800a84c <pvPortMalloc+0x178>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a15      	ldr	r2, [pc, #84]	; (800a854 <pvPortMalloc+0x180>)
 800a800:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a804:	685a      	ldr	r2, [r3, #4]
 800a806:	4b10      	ldr	r3, [pc, #64]	; (800a848 <pvPortMalloc+0x174>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	431a      	orrs	r2, r3
 800a80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a812:	2200      	movs	r2, #0
 800a814:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a816:	f7ff fa93 	bl	8009d40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	f003 0307 	and.w	r3, r3, #7
 800a820:	2b00      	cmp	r3, #0
 800a822:	d009      	beq.n	800a838 <pvPortMalloc+0x164>
 800a824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a828:	f383 8811 	msr	BASEPRI, r3
 800a82c:	f3bf 8f6f 	isb	sy
 800a830:	f3bf 8f4f 	dsb	sy
 800a834:	60fb      	str	r3, [r7, #12]
 800a836:	e7fe      	b.n	800a836 <pvPortMalloc+0x162>
	return pvReturn;
 800a838:	69fb      	ldr	r3, [r7, #28]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3728      	adds	r7, #40	; 0x28
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	2000214c 	.word	0x2000214c
 800a848:	20002158 	.word	0x20002158
 800a84c:	20002150 	.word	0x20002150
 800a850:	20002144 	.word	0x20002144
 800a854:	20002154 	.word	0x20002154

0800a858 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b086      	sub	sp, #24
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d046      	beq.n	800a8f8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a86a:	2308      	movs	r3, #8
 800a86c:	425b      	negs	r3, r3
 800a86e:	697a      	ldr	r2, [r7, #20]
 800a870:	4413      	add	r3, r2
 800a872:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	685a      	ldr	r2, [r3, #4]
 800a87c:	4b20      	ldr	r3, [pc, #128]	; (800a900 <vPortFree+0xa8>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4013      	ands	r3, r2
 800a882:	2b00      	cmp	r3, #0
 800a884:	d109      	bne.n	800a89a <vPortFree+0x42>
 800a886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88a:	f383 8811 	msr	BASEPRI, r3
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	f3bf 8f4f 	dsb	sy
 800a896:	60fb      	str	r3, [r7, #12]
 800a898:	e7fe      	b.n	800a898 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d009      	beq.n	800a8b6 <vPortFree+0x5e>
 800a8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a6:	f383 8811 	msr	BASEPRI, r3
 800a8aa:	f3bf 8f6f 	isb	sy
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	60bb      	str	r3, [r7, #8]
 800a8b4:	e7fe      	b.n	800a8b4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	685a      	ldr	r2, [r3, #4]
 800a8ba:	4b11      	ldr	r3, [pc, #68]	; (800a900 <vPortFree+0xa8>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4013      	ands	r3, r2
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d019      	beq.n	800a8f8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d115      	bne.n	800a8f8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	685a      	ldr	r2, [r3, #4]
 800a8d0:	4b0b      	ldr	r3, [pc, #44]	; (800a900 <vPortFree+0xa8>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	43db      	mvns	r3, r3
 800a8d6:	401a      	ands	r2, r3
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a8dc:	f7ff fa22 	bl	8009d24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	685a      	ldr	r2, [r3, #4]
 800a8e4:	4b07      	ldr	r3, [pc, #28]	; (800a904 <vPortFree+0xac>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	4a06      	ldr	r2, [pc, #24]	; (800a904 <vPortFree+0xac>)
 800a8ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a8ee:	6938      	ldr	r0, [r7, #16]
 800a8f0:	f000 f86c 	bl	800a9cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a8f4:	f7ff fa24 	bl	8009d40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a8f8:	bf00      	nop
 800a8fa:	3718      	adds	r7, #24
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	20002158 	.word	0x20002158
 800a904:	20002150 	.word	0x20002150

0800a908 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a908:	b480      	push	{r7}
 800a90a:	b085      	sub	sp, #20
 800a90c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a90e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a912:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a914:	4b27      	ldr	r3, [pc, #156]	; (800a9b4 <prvHeapInit+0xac>)
 800a916:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f003 0307 	and.w	r3, r3, #7
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d00c      	beq.n	800a93c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	3307      	adds	r3, #7
 800a926:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f023 0307 	bic.w	r3, r3, #7
 800a92e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a930:	68ba      	ldr	r2, [r7, #8]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	1ad3      	subs	r3, r2, r3
 800a936:	4a1f      	ldr	r2, [pc, #124]	; (800a9b4 <prvHeapInit+0xac>)
 800a938:	4413      	add	r3, r2
 800a93a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a940:	4a1d      	ldr	r2, [pc, #116]	; (800a9b8 <prvHeapInit+0xb0>)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a946:	4b1c      	ldr	r3, [pc, #112]	; (800a9b8 <prvHeapInit+0xb0>)
 800a948:	2200      	movs	r2, #0
 800a94a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	68ba      	ldr	r2, [r7, #8]
 800a950:	4413      	add	r3, r2
 800a952:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a954:	2208      	movs	r2, #8
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	1a9b      	subs	r3, r3, r2
 800a95a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f023 0307 	bic.w	r3, r3, #7
 800a962:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	4a15      	ldr	r2, [pc, #84]	; (800a9bc <prvHeapInit+0xb4>)
 800a968:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a96a:	4b14      	ldr	r3, [pc, #80]	; (800a9bc <prvHeapInit+0xb4>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	2200      	movs	r2, #0
 800a970:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a972:	4b12      	ldr	r3, [pc, #72]	; (800a9bc <prvHeapInit+0xb4>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2200      	movs	r2, #0
 800a978:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	1ad2      	subs	r2, r2, r3
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a988:	4b0c      	ldr	r3, [pc, #48]	; (800a9bc <prvHeapInit+0xb4>)
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	4a0a      	ldr	r2, [pc, #40]	; (800a9c0 <prvHeapInit+0xb8>)
 800a996:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	4a09      	ldr	r2, [pc, #36]	; (800a9c4 <prvHeapInit+0xbc>)
 800a99e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a9a0:	4b09      	ldr	r3, [pc, #36]	; (800a9c8 <prvHeapInit+0xc0>)
 800a9a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a9a6:	601a      	str	r2, [r3, #0]
}
 800a9a8:	bf00      	nop
 800a9aa:	3714      	adds	r7, #20
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr
 800a9b4:	20001544 	.word	0x20001544
 800a9b8:	20002144 	.word	0x20002144
 800a9bc:	2000214c 	.word	0x2000214c
 800a9c0:	20002154 	.word	0x20002154
 800a9c4:	20002150 	.word	0x20002150
 800a9c8:	20002158 	.word	0x20002158

0800a9cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b085      	sub	sp, #20
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a9d4:	4b28      	ldr	r3, [pc, #160]	; (800aa78 <prvInsertBlockIntoFreeList+0xac>)
 800a9d6:	60fb      	str	r3, [r7, #12]
 800a9d8:	e002      	b.n	800a9e0 <prvInsertBlockIntoFreeList+0x14>
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	60fb      	str	r3, [r7, #12]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d8f7      	bhi.n	800a9da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	68ba      	ldr	r2, [r7, #8]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d108      	bne.n	800aa0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	685a      	ldr	r2, [r3, #4]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	441a      	add	r2, r3
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	68ba      	ldr	r2, [r7, #8]
 800aa18:	441a      	add	r2, r3
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d118      	bne.n	800aa54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	4b15      	ldr	r3, [pc, #84]	; (800aa7c <prvInsertBlockIntoFreeList+0xb0>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d00d      	beq.n	800aa4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	685a      	ldr	r2, [r3, #4]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	441a      	add	r2, r3
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	601a      	str	r2, [r3, #0]
 800aa48:	e008      	b.n	800aa5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa4a:	4b0c      	ldr	r3, [pc, #48]	; (800aa7c <prvInsertBlockIntoFreeList+0xb0>)
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	601a      	str	r2, [r3, #0]
 800aa52:	e003      	b.n	800aa5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d002      	beq.n	800aa6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa6a:	bf00      	nop
 800aa6c:	3714      	adds	r7, #20
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop
 800aa78:	20002144 	.word	0x20002144
 800aa7c:	2000214c 	.word	0x2000214c

0800aa80 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800aa84:	2200      	movs	r2, #0
 800aa86:	4912      	ldr	r1, [pc, #72]	; (800aad0 <MX_USB_Device_Init+0x50>)
 800aa88:	4812      	ldr	r0, [pc, #72]	; (800aad4 <MX_USB_Device_Init+0x54>)
 800aa8a:	f7fd fdd4 	bl	8008636 <USBD_Init>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d001      	beq.n	800aa98 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800aa94:	f7f5 ff50 	bl	8000938 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800aa98:	490f      	ldr	r1, [pc, #60]	; (800aad8 <MX_USB_Device_Init+0x58>)
 800aa9a:	480e      	ldr	r0, [pc, #56]	; (800aad4 <MX_USB_Device_Init+0x54>)
 800aa9c:	f7fd fdf6 	bl	800868c <USBD_RegisterClass>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d001      	beq.n	800aaaa <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800aaa6:	f7f5 ff47 	bl	8000938 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800aaaa:	490c      	ldr	r1, [pc, #48]	; (800aadc <MX_USB_Device_Init+0x5c>)
 800aaac:	4809      	ldr	r0, [pc, #36]	; (800aad4 <MX_USB_Device_Init+0x54>)
 800aaae:	f7fd fd53 	bl	8008558 <USBD_CDC_RegisterInterface>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d001      	beq.n	800aabc <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800aab8:	f7f5 ff3e 	bl	8000938 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800aabc:	4805      	ldr	r0, [pc, #20]	; (800aad4 <MX_USB_Device_Init+0x54>)
 800aabe:	f7fd fdff 	bl	80086c0 <USBD_Start>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d001      	beq.n	800aacc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800aac8:	f7f5 ff36 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800aacc:	bf00      	nop
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	20000130 	.word	0x20000130
 800aad4:	20002668 	.word	0x20002668
 800aad8:	20000018 	.word	0x20000018
 800aadc:	20000120 	.word	0x20000120

0800aae0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aae4:	2200      	movs	r2, #0
 800aae6:	4905      	ldr	r1, [pc, #20]	; (800aafc <CDC_Init_FS+0x1c>)
 800aae8:	4805      	ldr	r0, [pc, #20]	; (800ab00 <CDC_Init_FS+0x20>)
 800aaea:	f7fd fd4c 	bl	8008586 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aaee:	4905      	ldr	r1, [pc, #20]	; (800ab04 <CDC_Init_FS+0x24>)
 800aaf0:	4803      	ldr	r0, [pc, #12]	; (800ab00 <CDC_Init_FS+0x20>)
 800aaf2:	f7fd fd62 	bl	80085ba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aaf6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	20002d14 	.word	0x20002d14
 800ab00:	20002668 	.word	0x20002668
 800ab04:	2000292c 	.word	0x2000292c

0800ab08 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ab0c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b083      	sub	sp, #12
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	4603      	mov	r3, r0
 800ab20:	6039      	str	r1, [r7, #0]
 800ab22:	71fb      	strb	r3, [r7, #7]
 800ab24:	4613      	mov	r3, r2
 800ab26:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ab28:	79fb      	ldrb	r3, [r7, #7]
 800ab2a:	2b23      	cmp	r3, #35	; 0x23
 800ab2c:	d84a      	bhi.n	800abc4 <CDC_Control_FS+0xac>
 800ab2e:	a201      	add	r2, pc, #4	; (adr r2, 800ab34 <CDC_Control_FS+0x1c>)
 800ab30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab34:	0800abc5 	.word	0x0800abc5
 800ab38:	0800abc5 	.word	0x0800abc5
 800ab3c:	0800abc5 	.word	0x0800abc5
 800ab40:	0800abc5 	.word	0x0800abc5
 800ab44:	0800abc5 	.word	0x0800abc5
 800ab48:	0800abc5 	.word	0x0800abc5
 800ab4c:	0800abc5 	.word	0x0800abc5
 800ab50:	0800abc5 	.word	0x0800abc5
 800ab54:	0800abc5 	.word	0x0800abc5
 800ab58:	0800abc5 	.word	0x0800abc5
 800ab5c:	0800abc5 	.word	0x0800abc5
 800ab60:	0800abc5 	.word	0x0800abc5
 800ab64:	0800abc5 	.word	0x0800abc5
 800ab68:	0800abc5 	.word	0x0800abc5
 800ab6c:	0800abc5 	.word	0x0800abc5
 800ab70:	0800abc5 	.word	0x0800abc5
 800ab74:	0800abc5 	.word	0x0800abc5
 800ab78:	0800abc5 	.word	0x0800abc5
 800ab7c:	0800abc5 	.word	0x0800abc5
 800ab80:	0800abc5 	.word	0x0800abc5
 800ab84:	0800abc5 	.word	0x0800abc5
 800ab88:	0800abc5 	.word	0x0800abc5
 800ab8c:	0800abc5 	.word	0x0800abc5
 800ab90:	0800abc5 	.word	0x0800abc5
 800ab94:	0800abc5 	.word	0x0800abc5
 800ab98:	0800abc5 	.word	0x0800abc5
 800ab9c:	0800abc5 	.word	0x0800abc5
 800aba0:	0800abc5 	.word	0x0800abc5
 800aba4:	0800abc5 	.word	0x0800abc5
 800aba8:	0800abc5 	.word	0x0800abc5
 800abac:	0800abc5 	.word	0x0800abc5
 800abb0:	0800abc5 	.word	0x0800abc5
 800abb4:	0800abc5 	.word	0x0800abc5
 800abb8:	0800abc5 	.word	0x0800abc5
 800abbc:	0800abc5 	.word	0x0800abc5
 800abc0:	0800abc5 	.word	0x0800abc5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800abc4:	bf00      	nop
  }

  return (USBD_OK);
 800abc6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800abc8:	4618      	mov	r0, r3
 800abca:	370c      	adds	r7, #12
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800abde:	6879      	ldr	r1, [r7, #4]
 800abe0:	4805      	ldr	r0, [pc, #20]	; (800abf8 <CDC_Receive_FS+0x24>)
 800abe2:	f7fd fcea 	bl	80085ba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800abe6:	4804      	ldr	r0, [pc, #16]	; (800abf8 <CDC_Receive_FS+0x24>)
 800abe8:	f7fd fcfb 	bl	80085e2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800abec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3708      	adds	r7, #8
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	20002668 	.word	0x20002668

0800abfc <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b083      	sub	sp, #12
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	4603      	mov	r3, r0
 800ac04:	6039      	str	r1, [r7, #0]
 800ac06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	2212      	movs	r2, #18
 800ac0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ac0e:	4b03      	ldr	r3, [pc, #12]	; (800ac1c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr
 800ac1c:	20000150 	.word	0x20000150

0800ac20 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b083      	sub	sp, #12
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	4603      	mov	r3, r0
 800ac28:	6039      	str	r1, [r7, #0]
 800ac2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	2204      	movs	r2, #4
 800ac30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ac32:	4b03      	ldr	r3, [pc, #12]	; (800ac40 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr
 800ac40:	20000164 	.word	0x20000164

0800ac44 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	6039      	str	r1, [r7, #0]
 800ac4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac50:	79fb      	ldrb	r3, [r7, #7]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d105      	bne.n	800ac62 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ac56:	683a      	ldr	r2, [r7, #0]
 800ac58:	4907      	ldr	r1, [pc, #28]	; (800ac78 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ac5a:	4808      	ldr	r0, [pc, #32]	; (800ac7c <USBD_CDC_ProductStrDescriptor+0x38>)
 800ac5c:	f7fe fcca 	bl	80095f4 <USBD_GetString>
 800ac60:	e004      	b.n	800ac6c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ac62:	683a      	ldr	r2, [r7, #0]
 800ac64:	4904      	ldr	r1, [pc, #16]	; (800ac78 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ac66:	4805      	ldr	r0, [pc, #20]	; (800ac7c <USBD_CDC_ProductStrDescriptor+0x38>)
 800ac68:	f7fe fcc4 	bl	80095f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac6c:	4b02      	ldr	r3, [pc, #8]	; (800ac78 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3708      	adds	r7, #8
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	200030fc 	.word	0x200030fc
 800ac7c:	0800b748 	.word	0x0800b748

0800ac80 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	4603      	mov	r3, r0
 800ac88:	6039      	str	r1, [r7, #0]
 800ac8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ac8c:	683a      	ldr	r2, [r7, #0]
 800ac8e:	4904      	ldr	r1, [pc, #16]	; (800aca0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ac90:	4804      	ldr	r0, [pc, #16]	; (800aca4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ac92:	f7fe fcaf 	bl	80095f4 <USBD_GetString>
  return USBD_StrDesc;
 800ac96:	4b02      	ldr	r3, [pc, #8]	; (800aca0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3708      	adds	r7, #8
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	200030fc 	.word	0x200030fc
 800aca4:	0800b760 	.word	0x0800b760

0800aca8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
 800acae:	4603      	mov	r3, r0
 800acb0:	6039      	str	r1, [r7, #0]
 800acb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	221a      	movs	r2, #26
 800acb8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800acba:	f000 f843 	bl	800ad44 <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800acbe:	4b02      	ldr	r3, [pc, #8]	; (800acc8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3708      	adds	r7, #8
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	20000168 	.word	0x20000168

0800accc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	4603      	mov	r3, r0
 800acd4:	6039      	str	r1, [r7, #0]
 800acd6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800acd8:	79fb      	ldrb	r3, [r7, #7]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d105      	bne.n	800acea <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	4907      	ldr	r1, [pc, #28]	; (800ad00 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ace2:	4808      	ldr	r0, [pc, #32]	; (800ad04 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ace4:	f7fe fc86 	bl	80095f4 <USBD_GetString>
 800ace8:	e004      	b.n	800acf4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800acea:	683a      	ldr	r2, [r7, #0]
 800acec:	4904      	ldr	r1, [pc, #16]	; (800ad00 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800acee:	4805      	ldr	r0, [pc, #20]	; (800ad04 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800acf0:	f7fe fc80 	bl	80095f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800acf4:	4b02      	ldr	r3, [pc, #8]	; (800ad00 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3708      	adds	r7, #8
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	200030fc 	.word	0x200030fc
 800ad04:	0800b774 	.word	0x0800b774

0800ad08 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	4603      	mov	r3, r0
 800ad10:	6039      	str	r1, [r7, #0]
 800ad12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad14:	79fb      	ldrb	r3, [r7, #7]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d105      	bne.n	800ad26 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ad1a:	683a      	ldr	r2, [r7, #0]
 800ad1c:	4907      	ldr	r1, [pc, #28]	; (800ad3c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ad1e:	4808      	ldr	r0, [pc, #32]	; (800ad40 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ad20:	f7fe fc68 	bl	80095f4 <USBD_GetString>
 800ad24:	e004      	b.n	800ad30 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ad26:	683a      	ldr	r2, [r7, #0]
 800ad28:	4904      	ldr	r1, [pc, #16]	; (800ad3c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ad2a:	4805      	ldr	r0, [pc, #20]	; (800ad40 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ad2c:	f7fe fc62 	bl	80095f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad30:	4b02      	ldr	r3, [pc, #8]	; (800ad3c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3708      	adds	r7, #8
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	200030fc 	.word	0x200030fc
 800ad40:	0800b780 	.word	0x0800b780

0800ad44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ad4a:	4b0f      	ldr	r3, [pc, #60]	; (800ad88 <Get_SerialNum+0x44>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ad50:	4b0e      	ldr	r3, [pc, #56]	; (800ad8c <Get_SerialNum+0x48>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ad56:	4b0e      	ldr	r3, [pc, #56]	; (800ad90 <Get_SerialNum+0x4c>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	4413      	add	r3, r2
 800ad62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d009      	beq.n	800ad7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ad6a:	2208      	movs	r2, #8
 800ad6c:	4909      	ldr	r1, [pc, #36]	; (800ad94 <Get_SerialNum+0x50>)
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	f000 f814 	bl	800ad9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ad74:	2204      	movs	r2, #4
 800ad76:	4908      	ldr	r1, [pc, #32]	; (800ad98 <Get_SerialNum+0x54>)
 800ad78:	68b8      	ldr	r0, [r7, #8]
 800ad7a:	f000 f80f 	bl	800ad9c <IntToUnicode>
  }
}
 800ad7e:	bf00      	nop
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	1fff7590 	.word	0x1fff7590
 800ad8c:	1fff7594 	.word	0x1fff7594
 800ad90:	1fff7598 	.word	0x1fff7598
 800ad94:	2000016a 	.word	0x2000016a
 800ad98:	2000017a 	.word	0x2000017a

0800ad9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b087      	sub	sp, #28
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	4613      	mov	r3, r2
 800ada8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800adaa:	2300      	movs	r3, #0
 800adac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800adae:	2300      	movs	r3, #0
 800adb0:	75fb      	strb	r3, [r7, #23]
 800adb2:	e027      	b.n	800ae04 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	0f1b      	lsrs	r3, r3, #28
 800adb8:	2b09      	cmp	r3, #9
 800adba:	d80b      	bhi.n	800add4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	0f1b      	lsrs	r3, r3, #28
 800adc0:	b2da      	uxtb	r2, r3
 800adc2:	7dfb      	ldrb	r3, [r7, #23]
 800adc4:	005b      	lsls	r3, r3, #1
 800adc6:	4619      	mov	r1, r3
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	440b      	add	r3, r1
 800adcc:	3230      	adds	r2, #48	; 0x30
 800adce:	b2d2      	uxtb	r2, r2
 800add0:	701a      	strb	r2, [r3, #0]
 800add2:	e00a      	b.n	800adea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	0f1b      	lsrs	r3, r3, #28
 800add8:	b2da      	uxtb	r2, r3
 800adda:	7dfb      	ldrb	r3, [r7, #23]
 800addc:	005b      	lsls	r3, r3, #1
 800adde:	4619      	mov	r1, r3
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	440b      	add	r3, r1
 800ade4:	3237      	adds	r2, #55	; 0x37
 800ade6:	b2d2      	uxtb	r2, r2
 800ade8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	011b      	lsls	r3, r3, #4
 800adee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800adf0:	7dfb      	ldrb	r3, [r7, #23]
 800adf2:	005b      	lsls	r3, r3, #1
 800adf4:	3301      	adds	r3, #1
 800adf6:	68ba      	ldr	r2, [r7, #8]
 800adf8:	4413      	add	r3, r2
 800adfa:	2200      	movs	r2, #0
 800adfc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800adfe:	7dfb      	ldrb	r3, [r7, #23]
 800ae00:	3301      	adds	r3, #1
 800ae02:	75fb      	strb	r3, [r7, #23]
 800ae04:	7dfa      	ldrb	r2, [r7, #23]
 800ae06:	79fb      	ldrb	r3, [r7, #7]
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d3d3      	bcc.n	800adb4 <IntToUnicode+0x18>
  }
}
 800ae0c:	bf00      	nop
 800ae0e:	371c      	adds	r7, #28
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b08a      	sub	sp, #40	; 0x28
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae20:	f107 0314 	add.w	r3, r7, #20
 800ae24:	2200      	movs	r2, #0
 800ae26:	601a      	str	r2, [r3, #0]
 800ae28:	605a      	str	r2, [r3, #4]
 800ae2a:	609a      	str	r2, [r3, #8]
 800ae2c:	60da      	str	r2, [r3, #12]
 800ae2e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a1a      	ldr	r2, [pc, #104]	; (800aea0 <HAL_PCD_MspInit+0x88>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d12d      	bne.n	800ae96 <HAL_PCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae3a:	4b1a      	ldr	r3, [pc, #104]	; (800aea4 <HAL_PCD_MspInit+0x8c>)
 800ae3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae3e:	4a19      	ldr	r2, [pc, #100]	; (800aea4 <HAL_PCD_MspInit+0x8c>)
 800ae40:	f043 0301 	orr.w	r3, r3, #1
 800ae44:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae46:	4b17      	ldr	r3, [pc, #92]	; (800aea4 <HAL_PCD_MspInit+0x8c>)
 800ae48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae4a:	f003 0301 	and.w	r3, r3, #1
 800ae4e:	613b      	str	r3, [r7, #16]
 800ae50:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ae52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ae56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ae58:	2303      	movs	r3, #3
 800ae5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae60:	f107 0314 	add.w	r3, r7, #20
 800ae64:	4619      	mov	r1, r3
 800ae66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ae6a:	f7f7 f847 	bl	8001efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ae6e:	4b0d      	ldr	r3, [pc, #52]	; (800aea4 <HAL_PCD_MspInit+0x8c>)
 800ae70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae72:	4a0c      	ldr	r2, [pc, #48]	; (800aea4 <HAL_PCD_MspInit+0x8c>)
 800ae74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ae78:	6593      	str	r3, [r2, #88]	; 0x58
 800ae7a:	4b0a      	ldr	r3, [pc, #40]	; (800aea4 <HAL_PCD_MspInit+0x8c>)
 800ae7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae82:	60fb      	str	r3, [r7, #12]
 800ae84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800ae86:	2200      	movs	r2, #0
 800ae88:	2105      	movs	r1, #5
 800ae8a:	2014      	movs	r0, #20
 800ae8c:	f7f6 fca0 	bl	80017d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ae90:	2014      	movs	r0, #20
 800ae92:	f7f6 fcc7 	bl	8001824 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ae96:	bf00      	nop
 800ae98:	3728      	adds	r7, #40	; 0x28
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	40005c00 	.word	0x40005c00
 800aea4:	40021000 	.word	0x40021000

0800aea8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800aebc:	4619      	mov	r1, r3
 800aebe:	4610      	mov	r0, r2
 800aec0:	f7fd fc47 	bl	8008752 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800aec4:	bf00      	nop
 800aec6:	3708      	adds	r7, #8
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	460b      	mov	r3, r1
 800aed6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800aede:	78fb      	ldrb	r3, [r7, #3]
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	015b      	lsls	r3, r3, #5
 800aee4:	4413      	add	r3, r2
 800aee6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	78fb      	ldrb	r3, [r7, #3]
 800aeee:	4619      	mov	r1, r3
 800aef0:	f7fd fc7a 	bl	80087e8 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800aef4:	bf00      	nop
 800aef6:	3708      	adds	r7, #8
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	460b      	mov	r3, r1
 800af06:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800af0e:	78fb      	ldrb	r3, [r7, #3]
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	015b      	lsls	r3, r3, #5
 800af14:	4413      	add	r3, r2
 800af16:	333c      	adds	r3, #60	; 0x3c
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	78fb      	ldrb	r3, [r7, #3]
 800af1c:	4619      	mov	r1, r3
 800af1e:	f7fd fcd4 	bl	80088ca <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800af22:	bf00      	nop
 800af24:	3708      	adds	r7, #8
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}

0800af2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b082      	sub	sp, #8
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800af38:	4618      	mov	r0, r3
 800af3a:	f7fd fde7 	bl	8008b0c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800af3e:	bf00      	nop
 800af40:	3708      	adds	r7, #8
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800af46:	b580      	push	{r7, lr}
 800af48:	b084      	sub	sp, #16
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800af4e:	2301      	movs	r3, #1
 800af50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	2b02      	cmp	r3, #2
 800af58:	d001      	beq.n	800af5e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800af5a:	f7f5 fced 	bl	8000938 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800af64:	7bfa      	ldrb	r2, [r7, #15]
 800af66:	4611      	mov	r1, r2
 800af68:	4618      	mov	r0, r3
 800af6a:	f7fd fd94 	bl	8008a96 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800af74:	4618      	mov	r0, r3
 800af76:	f7fd fd4d 	bl	8008a14 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800af7a:	bf00      	nop
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
	...

0800af84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800af92:	4618      	mov	r0, r3
 800af94:	f7fd fd8f 	bl	8008ab6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	699b      	ldr	r3, [r3, #24]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d005      	beq.n	800afac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800afa0:	4b04      	ldr	r3, [pc, #16]	; (800afb4 <HAL_PCD_SuspendCallback+0x30>)
 800afa2:	691b      	ldr	r3, [r3, #16]
 800afa4:	4a03      	ldr	r2, [pc, #12]	; (800afb4 <HAL_PCD_SuspendCallback+0x30>)
 800afa6:	f043 0306 	orr.w	r3, r3, #6
 800afaa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800afac:	bf00      	nop
 800afae:	3708      	adds	r7, #8
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	e000ed00 	.word	0xe000ed00

0800afb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	699b      	ldr	r3, [r3, #24]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d007      	beq.n	800afd8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800afc8:	4b08      	ldr	r3, [pc, #32]	; (800afec <HAL_PCD_ResumeCallback+0x34>)
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	4a07      	ldr	r2, [pc, #28]	; (800afec <HAL_PCD_ResumeCallback+0x34>)
 800afce:	f023 0306 	bic.w	r3, r3, #6
 800afd2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800afd4:	f000 f9f6 	bl	800b3c4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800afde:	4618      	mov	r0, r3
 800afe0:	f7fd fd7e 	bl	8008ae0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800afe4:	bf00      	nop
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	e000ed00 	.word	0xe000ed00

0800aff0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800aff8:	4a2b      	ldr	r2, [pc, #172]	; (800b0a8 <USBD_LL_Init+0xb8>)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	4a29      	ldr	r2, [pc, #164]	; (800b0a8 <USBD_LL_Init+0xb8>)
 800b004:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b008:	4b27      	ldr	r3, [pc, #156]	; (800b0a8 <USBD_LL_Init+0xb8>)
 800b00a:	4a28      	ldr	r2, [pc, #160]	; (800b0ac <USBD_LL_Init+0xbc>)
 800b00c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b00e:	4b26      	ldr	r3, [pc, #152]	; (800b0a8 <USBD_LL_Init+0xb8>)
 800b010:	2208      	movs	r2, #8
 800b012:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b014:	4b24      	ldr	r3, [pc, #144]	; (800b0a8 <USBD_LL_Init+0xb8>)
 800b016:	2202      	movs	r2, #2
 800b018:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b01a:	4b23      	ldr	r3, [pc, #140]	; (800b0a8 <USBD_LL_Init+0xb8>)
 800b01c:	2202      	movs	r2, #2
 800b01e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b020:	4b21      	ldr	r3, [pc, #132]	; (800b0a8 <USBD_LL_Init+0xb8>)
 800b022:	2200      	movs	r2, #0
 800b024:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b026:	4b20      	ldr	r3, [pc, #128]	; (800b0a8 <USBD_LL_Init+0xb8>)
 800b028:	2200      	movs	r2, #0
 800b02a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b02c:	4b1e      	ldr	r3, [pc, #120]	; (800b0a8 <USBD_LL_Init+0xb8>)
 800b02e:	2200      	movs	r2, #0
 800b030:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b032:	4b1d      	ldr	r3, [pc, #116]	; (800b0a8 <USBD_LL_Init+0xb8>)
 800b034:	2200      	movs	r2, #0
 800b036:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b038:	481b      	ldr	r0, [pc, #108]	; (800b0a8 <USBD_LL_Init+0xb8>)
 800b03a:	f7f7 f9e7 	bl	800240c <HAL_PCD_Init>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d001      	beq.n	800b048 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b044:	f7f5 fc78 	bl	8000938 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b04e:	2318      	movs	r3, #24
 800b050:	2200      	movs	r2, #0
 800b052:	2100      	movs	r1, #0
 800b054:	f7f8 f896 	bl	8003184 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b05e:	2358      	movs	r3, #88	; 0x58
 800b060:	2200      	movs	r2, #0
 800b062:	2180      	movs	r1, #128	; 0x80
 800b064:	f7f8 f88e 	bl	8003184 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b06e:	23c0      	movs	r3, #192	; 0xc0
 800b070:	2200      	movs	r2, #0
 800b072:	2181      	movs	r1, #129	; 0x81
 800b074:	f7f8 f886 	bl	8003184 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b07e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b082:	2200      	movs	r2, #0
 800b084:	2101      	movs	r1, #1
 800b086:	f7f8 f87d 	bl	8003184 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b090:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b094:	2200      	movs	r2, #0
 800b096:	2182      	movs	r1, #130	; 0x82
 800b098:	f7f8 f874 	bl	8003184 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b09c:	2300      	movs	r3, #0
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3708      	adds	r7, #8
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	200032fc 	.word	0x200032fc
 800b0ac:	40005c00 	.word	0x40005c00

0800b0b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7f7 fa68 	bl	800259c <HAL_PCD_Start>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0d0:	7bfb      	ldrb	r3, [r7, #15]
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f000 f97c 	bl	800b3d0 <USBD_Get_USB_Status>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b0dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b084      	sub	sp, #16
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	4608      	mov	r0, r1
 800b0f0:	4611      	mov	r1, r2
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	70fb      	strb	r3, [r7, #3]
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	70bb      	strb	r3, [r7, #2]
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b100:	2300      	movs	r3, #0
 800b102:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b104:	2300      	movs	r3, #0
 800b106:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b10e:	78bb      	ldrb	r3, [r7, #2]
 800b110:	883a      	ldrh	r2, [r7, #0]
 800b112:	78f9      	ldrb	r1, [r7, #3]
 800b114:	f7f7 fbd7 	bl	80028c6 <HAL_PCD_EP_Open>
 800b118:	4603      	mov	r3, r0
 800b11a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b11c:	7bfb      	ldrb	r3, [r7, #15]
 800b11e:	4618      	mov	r0, r3
 800b120:	f000 f956 	bl	800b3d0 <USBD_Get_USB_Status>
 800b124:	4603      	mov	r3, r0
 800b126:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800b128:	7bbb      	ldrb	r3, [r7, #14]
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3710      	adds	r7, #16
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}

0800b132 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b132:	b580      	push	{r7, lr}
 800b134:	b084      	sub	sp, #16
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
 800b13a:	460b      	mov	r3, r1
 800b13c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b13e:	2300      	movs	r3, #0
 800b140:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b142:	2300      	movs	r3, #0
 800b144:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b14c:	78fa      	ldrb	r2, [r7, #3]
 800b14e:	4611      	mov	r1, r2
 800b150:	4618      	mov	r0, r3
 800b152:	f7f7 fc18 	bl	8002986 <HAL_PCD_EP_Close>
 800b156:	4603      	mov	r3, r0
 800b158:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b15a:	7bfb      	ldrb	r3, [r7, #15]
 800b15c:	4618      	mov	r0, r3
 800b15e:	f000 f937 	bl	800b3d0 <USBD_Get_USB_Status>
 800b162:	4603      	mov	r3, r0
 800b164:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800b166:	7bbb      	ldrb	r3, [r7, #14]
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3710      	adds	r7, #16
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b084      	sub	sp, #16
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	460b      	mov	r3, r1
 800b17a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b17c:	2300      	movs	r3, #0
 800b17e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b180:	2300      	movs	r3, #0
 800b182:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b18a:	78fa      	ldrb	r2, [r7, #3]
 800b18c:	4611      	mov	r1, r2
 800b18e:	4618      	mov	r0, r3
 800b190:	f7f7 fcc3 	bl	8002b1a <HAL_PCD_EP_SetStall>
 800b194:	4603      	mov	r3, r0
 800b196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b198:	7bfb      	ldrb	r3, [r7, #15]
 800b19a:	4618      	mov	r0, r3
 800b19c:	f000 f918 	bl	800b3d0 <USBD_Get_USB_Status>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800b1a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b084      	sub	sp, #16
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1c8:	78fa      	ldrb	r2, [r7, #3]
 800b1ca:	4611      	mov	r1, r2
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7f7 fcfe 	bl	8002bce <HAL_PCD_EP_ClrStall>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1d6:	7bfb      	ldrb	r3, [r7, #15]
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f000 f8f9 	bl	800b3d0 <USBD_Get_USB_Status>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800b1e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3710      	adds	r7, #16
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b085      	sub	sp, #20
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1fe:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800b200:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b204:	2b00      	cmp	r3, #0
 800b206:	da08      	bge.n	800b21a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800b208:	78fb      	ldrb	r3, [r7, #3]
 800b20a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b20e:	68fa      	ldr	r2, [r7, #12]
 800b210:	015b      	lsls	r3, r3, #5
 800b212:	4413      	add	r3, r2
 800b214:	332a      	adds	r3, #42	; 0x2a
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	e008      	b.n	800b22c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800b21a:	78fb      	ldrb	r3, [r7, #3]
 800b21c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b220:	68fa      	ldr	r2, [r7, #12]
 800b222:	015b      	lsls	r3, r3, #5
 800b224:	4413      	add	r3, r2
 800b226:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800b22a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3714      	adds	r7, #20
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	460b      	mov	r3, r1
 800b242:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b244:	2300      	movs	r3, #0
 800b246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b248:	2300      	movs	r3, #0
 800b24a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b252:	78fa      	ldrb	r2, [r7, #3]
 800b254:	4611      	mov	r1, r2
 800b256:	4618      	mov	r0, r3
 800b258:	f7f7 fb10 	bl	800287c <HAL_PCD_SetAddress>
 800b25c:	4603      	mov	r3, r0
 800b25e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b260:	7bfb      	ldrb	r3, [r7, #15]
 800b262:	4618      	mov	r0, r3
 800b264:	f000 f8b4 	bl	800b3d0 <USBD_Get_USB_Status>
 800b268:	4603      	mov	r3, r0
 800b26a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800b26c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3710      	adds	r7, #16
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}

0800b276 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b276:	b580      	push	{r7, lr}
 800b278:	b086      	sub	sp, #24
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	60f8      	str	r0, [r7, #12]
 800b27e:	607a      	str	r2, [r7, #4]
 800b280:	461a      	mov	r2, r3
 800b282:	460b      	mov	r3, r1
 800b284:	72fb      	strb	r3, [r7, #11]
 800b286:	4613      	mov	r3, r2
 800b288:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b28a:	2300      	movs	r3, #0
 800b28c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b28e:	2300      	movs	r3, #0
 800b290:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b298:	893b      	ldrh	r3, [r7, #8]
 800b29a:	7af9      	ldrb	r1, [r7, #11]
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	f7f7 fc03 	bl	8002aa8 <HAL_PCD_EP_Transmit>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2a6:	7dfb      	ldrb	r3, [r7, #23]
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f000 f891 	bl	800b3d0 <USBD_Get_USB_Status>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800b2b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3718      	adds	r7, #24
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b086      	sub	sp, #24
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	607a      	str	r2, [r7, #4]
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	72fb      	strb	r3, [r7, #11]
 800b2cc:	4613      	mov	r3, r2
 800b2ce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b2de:	893b      	ldrh	r3, [r7, #8]
 800b2e0:	7af9      	ldrb	r1, [r7, #11]
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	f7f7 fb91 	bl	8002a0a <HAL_PCD_EP_Receive>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2ec:	7dfb      	ldrb	r3, [r7, #23]
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f000 f86e 	bl	800b3d0 <USBD_Get_USB_Status>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800b2f8:	7dbb      	ldrb	r3, [r7, #22]
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3718      	adds	r7, #24
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}

0800b302 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b302:	b580      	push	{r7, lr}
 800b304:	b082      	sub	sp, #8
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
 800b30a:	460b      	mov	r3, r1
 800b30c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b314:	78fa      	ldrb	r2, [r7, #3]
 800b316:	4611      	mov	r1, r2
 800b318:	4618      	mov	r0, r3
 800b31a:	f7f7 fbb0 	bl	8002a7e <HAL_PCD_EP_GetRxCount>
 800b31e:	4603      	mov	r3, r0
}
 800b320:	4618      	mov	r0, r3
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	460b      	mov	r3, r1
 800b332:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b334:	78fb      	ldrb	r3, [r7, #3]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d002      	beq.n	800b340 <HAL_PCDEx_LPM_Callback+0x18>
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	d013      	beq.n	800b366 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 800b33e:	e023      	b.n	800b388 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	699b      	ldr	r3, [r3, #24]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d007      	beq.n	800b358 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b348:	f000 f83c 	bl	800b3c4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b34c:	4b10      	ldr	r3, [pc, #64]	; (800b390 <HAL_PCDEx_LPM_Callback+0x68>)
 800b34e:	691b      	ldr	r3, [r3, #16]
 800b350:	4a0f      	ldr	r2, [pc, #60]	; (800b390 <HAL_PCDEx_LPM_Callback+0x68>)
 800b352:	f023 0306 	bic.w	r3, r3, #6
 800b356:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b35e:	4618      	mov	r0, r3
 800b360:	f7fd fbbe 	bl	8008ae0 <USBD_LL_Resume>
    break;
 800b364:	e010      	b.n	800b388 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7fd fba2 	bl	8008ab6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	699b      	ldr	r3, [r3, #24]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d005      	beq.n	800b386 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b37a:	4b05      	ldr	r3, [pc, #20]	; (800b390 <HAL_PCDEx_LPM_Callback+0x68>)
 800b37c:	691b      	ldr	r3, [r3, #16]
 800b37e:	4a04      	ldr	r2, [pc, #16]	; (800b390 <HAL_PCDEx_LPM_Callback+0x68>)
 800b380:	f043 0306 	orr.w	r3, r3, #6
 800b384:	6113      	str	r3, [r2, #16]
    break;   
 800b386:	bf00      	nop
}
 800b388:	bf00      	nop
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	e000ed00 	.word	0xe000ed00

0800b394 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b39c:	4b03      	ldr	r3, [pc, #12]	; (800b3ac <USBD_static_malloc+0x18>)
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	370c      	adds	r7, #12
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	2000215c 	.word	0x2000215c

0800b3b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]

}
 800b3b8:	bf00      	nop
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b3c8:	f7f5 f9df 	bl	800078a <SystemClock_Config>
}
 800b3cc:	bf00      	nop
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b3de:	79fb      	ldrb	r3, [r7, #7]
 800b3e0:	2b03      	cmp	r3, #3
 800b3e2:	d817      	bhi.n	800b414 <USBD_Get_USB_Status+0x44>
 800b3e4:	a201      	add	r2, pc, #4	; (adr r2, 800b3ec <USBD_Get_USB_Status+0x1c>)
 800b3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ea:	bf00      	nop
 800b3ec:	0800b3fd 	.word	0x0800b3fd
 800b3f0:	0800b403 	.word	0x0800b403
 800b3f4:	0800b409 	.word	0x0800b409
 800b3f8:	0800b40f 	.word	0x0800b40f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	73fb      	strb	r3, [r7, #15]
    break;
 800b400:	e00b      	b.n	800b41a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b402:	2302      	movs	r3, #2
 800b404:	73fb      	strb	r3, [r7, #15]
    break;
 800b406:	e008      	b.n	800b41a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b408:	2301      	movs	r3, #1
 800b40a:	73fb      	strb	r3, [r7, #15]
    break;
 800b40c:	e005      	b.n	800b41a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b40e:	2302      	movs	r3, #2
 800b410:	73fb      	strb	r3, [r7, #15]
    break;
 800b412:	e002      	b.n	800b41a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b414:	2302      	movs	r3, #2
 800b416:	73fb      	strb	r3, [r7, #15]
    break;
 800b418:	bf00      	nop
  }
  return usb_status;
 800b41a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3714      	adds	r7, #20
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <__libc_init_array>:
 800b428:	b570      	push	{r4, r5, r6, lr}
 800b42a:	4e0d      	ldr	r6, [pc, #52]	; (800b460 <__libc_init_array+0x38>)
 800b42c:	4c0d      	ldr	r4, [pc, #52]	; (800b464 <__libc_init_array+0x3c>)
 800b42e:	1ba4      	subs	r4, r4, r6
 800b430:	10a4      	asrs	r4, r4, #2
 800b432:	2500      	movs	r5, #0
 800b434:	42a5      	cmp	r5, r4
 800b436:	d109      	bne.n	800b44c <__libc_init_array+0x24>
 800b438:	4e0b      	ldr	r6, [pc, #44]	; (800b468 <__libc_init_array+0x40>)
 800b43a:	4c0c      	ldr	r4, [pc, #48]	; (800b46c <__libc_init_array+0x44>)
 800b43c:	f000 f820 	bl	800b480 <_init>
 800b440:	1ba4      	subs	r4, r4, r6
 800b442:	10a4      	asrs	r4, r4, #2
 800b444:	2500      	movs	r5, #0
 800b446:	42a5      	cmp	r5, r4
 800b448:	d105      	bne.n	800b456 <__libc_init_array+0x2e>
 800b44a:	bd70      	pop	{r4, r5, r6, pc}
 800b44c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b450:	4798      	blx	r3
 800b452:	3501      	adds	r5, #1
 800b454:	e7ee      	b.n	800b434 <__libc_init_array+0xc>
 800b456:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b45a:	4798      	blx	r3
 800b45c:	3501      	adds	r5, #1
 800b45e:	e7f2      	b.n	800b446 <__libc_init_array+0x1e>
 800b460:	0800b7a8 	.word	0x0800b7a8
 800b464:	0800b7a8 	.word	0x0800b7a8
 800b468:	0800b7a8 	.word	0x0800b7a8
 800b46c:	0800b7ac 	.word	0x0800b7ac

0800b470 <memset>:
 800b470:	4402      	add	r2, r0
 800b472:	4603      	mov	r3, r0
 800b474:	4293      	cmp	r3, r2
 800b476:	d100      	bne.n	800b47a <memset+0xa>
 800b478:	4770      	bx	lr
 800b47a:	f803 1b01 	strb.w	r1, [r3], #1
 800b47e:	e7f9      	b.n	800b474 <memset+0x4>

0800b480 <_init>:
 800b480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b482:	bf00      	nop
 800b484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b486:	bc08      	pop	{r3}
 800b488:	469e      	mov	lr, r3
 800b48a:	4770      	bx	lr

0800b48c <_fini>:
 800b48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b48e:	bf00      	nop
 800b490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b492:	bc08      	pop	{r3}
 800b494:	469e      	mov	lr, r3
 800b496:	4770      	bx	lr
