
G431KB_Break.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ef0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  080090d0  080090d0  000190d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800939c  0800939c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800939c  0800939c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800939c  0800939c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800939c  0800939c  0001939c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093a0  080093a0  000193a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080093a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002274  20000010  080093b4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002284  080093b4  00022284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e025  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003dd6  00000000  00000000  0003e065  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017f8  00000000  00000000  00041e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001620  00000000  00000000  00043638  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002407d  00000000  00000000  00044c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018c69  00000000  00000000  00068cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d20f5  00000000  00000000  0008193e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00153a33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006364  00000000  00000000  00153ab0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	080090b8 	.word	0x080090b8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	080090b8 	.word	0x080090b8

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a5c:	b5b0      	push	{r4, r5, r7, lr}
 8000a5e:	b090      	sub	sp, #64	; 0x40
 8000a60:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Break_Task */
  osThreadDef(Break_Task, StartBreak_Task, osPriorityNormal, 0, 128);
 8000a62:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <MX_FREERTOS_Init+0x70>)
 8000a64:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000a68:	461d      	mov	r5, r3
 8000a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6e:	682b      	ldr	r3, [r5, #0]
 8000a70:	6023      	str	r3, [r4, #0]
  Break_TaskHandle = osThreadCreate(osThread(Break_Task), NULL);
 8000a72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f007 f9aa 	bl	8007dd2 <osThreadCreate>
 8000a7e:	4602      	mov	r2, r0
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <MX_FREERTOS_Init+0x74>)
 8000a82:	601a      	str	r2, [r3, #0]

  /* definition and creation of RainBow_Task */
  osThreadDef(RainBow_Task, StartRainBow_Task, osPriorityIdle, 0, 128);
 8000a84:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <MX_FREERTOS_Init+0x78>)
 8000a86:	f107 0418 	add.w	r4, r7, #24
 8000a8a:	461d      	mov	r5, r3
 8000a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a90:	682b      	ldr	r3, [r5, #0]
 8000a92:	6023      	str	r3, [r4, #0]
  RainBow_TaskHandle = osThreadCreate(osThread(RainBow_Task), NULL);
 8000a94:	f107 0318 	add.w	r3, r7, #24
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f007 f999 	bl	8007dd2 <osThreadCreate>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <MX_FREERTOS_Init+0x7c>)
 8000aa4:	601a      	str	r2, [r3, #0]

  /* definition and creation of AS504X_Task */
  osThreadDef(AS504X_Task, StartAS504X_Task, osPriorityIdle, 0, 128);
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <MX_FREERTOS_Init+0x80>)
 8000aa8:	1d3c      	adds	r4, r7, #4
 8000aaa:	461d      	mov	r5, r3
 8000aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab0:	682b      	ldr	r3, [r5, #0]
 8000ab2:	6023      	str	r3, [r4, #0]
  AS504X_TaskHandle = osThreadCreate(osThread(AS504X_Task), NULL);
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f007 f98a 	bl	8007dd2 <osThreadCreate>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <MX_FREERTOS_Init+0x84>)
 8000ac2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000ac4:	bf00      	nop
 8000ac6:	3740      	adds	r7, #64	; 0x40
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bdb0      	pop	{r4, r5, r7, pc}
 8000acc:	080090dc 	.word	0x080090dc
 8000ad0:	20001ff4 	.word	0x20001ff4
 8000ad4:	08009100 	.word	0x08009100
 8000ad8:	20002000 	.word	0x20002000
 8000adc:	08009120 	.word	0x08009120
 8000ae0:	20001ff0 	.word	0x20001ff0

08000ae4 <StartBreak_Task>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartBreak_Task */
void StartBreak_Task(void const * argument)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08e      	sub	sp, #56	; 0x38
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBreak_Task */
  /* Infinite loop */

  uint32_t pre_time = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t led_time = 200;
 8000af0:	23c8      	movs	r3, #200	; 0xc8
 8000af2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t firstled = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	613b      	str	r3, [r7, #16]
	uint32_t halfled = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
	uint32_t led_index = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t led_mask= 0b1110000111;
 8000b00:	f240 3387 	movw	r3, #903	; 0x387
 8000b04:	60bb      	str	r3, [r7, #8]


	_Bool led_flg=0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint32_t led_count = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  for(;;)
  {

		if(millis()-pre_time >= led_time)
 8000b10:	f000 fca8 	bl	8001464 <millis>
 8000b14:	4602      	mov	r2, r0
 8000b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	f200 80b4 	bhi.w	8000c8a <StartBreak_Task+0x1a6>
		{
			pre_time = millis();
 8000b22:	f000 fc9f 	bl	8001464 <millis>
 8000b26:	6378      	str	r0, [r7, #52]	; 0x34
			if(g_break_flg == 0) {
 8000b28:	4b5a      	ldr	r3, [pc, #360]	; (8000c94 <StartBreak_Task+0x1b0>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	f083 0301 	eor.w	r3, r3, #1
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d06e      	beq.n	8000c14 <StartBreak_Task+0x130>
					led_time = 200;
				}
				else {
					led_time = 50;
				}*/
				led_time = g_speed/10;
 8000b36:	4b58      	ldr	r3, [pc, #352]	; (8000c98 <StartBreak_Task+0x1b4>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a58      	ldr	r2, [pc, #352]	; (8000c9c <StartBreak_Task+0x1b8>)
 8000b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b40:	08db      	lsrs	r3, r3, #3
 8000b42:	633b      	str	r3, [r7, #48]	; 0x30
				if(led_time < 50)
 8000b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b46:	2b31      	cmp	r3, #49	; 0x31
 8000b48:	d801      	bhi.n	8000b4e <StartBreak_Task+0x6a>
					led_time = 50;
 8000b4a:	2332      	movs	r3, #50	; 0x32
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
				led_count = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
				firstled = rotateLeft(led_mask, led_index%B_LED_CNT);
 8000b52:	68b8      	ldr	r0, [r7, #8]
 8000b54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000b56:	4b51      	ldr	r3, [pc, #324]	; (8000c9c <StartBreak_Task+0x1b8>)
 8000b58:	fba3 2301 	umull	r2, r3, r3, r1
 8000b5c:	091a      	lsrs	r2, r3, #4
 8000b5e:	4613      	mov	r3, r2
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	4413      	add	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	1aca      	subs	r2, r1, r3
 8000b68:	4611      	mov	r1, r2
 8000b6a:	f000 fc83 	bl	8001474 <rotateLeft>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	613b      	str	r3, [r7, #16]
				halfled = rotateRight(led_mask, led_index%B_LED_CNT);
 8000b72:	68b8      	ldr	r0, [r7, #8]
 8000b74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000b76:	4b49      	ldr	r3, [pc, #292]	; (8000c9c <StartBreak_Task+0x1b8>)
 8000b78:	fba3 2301 	umull	r2, r3, r3, r1
 8000b7c:	091a      	lsrs	r2, r3, #4
 8000b7e:	4613      	mov	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	1aca      	subs	r2, r1, r3
 8000b88:	4611      	mov	r1, r2
 8000b8a:	f000 fc9d 	bl	80014c8 <rotateRight>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	60fb      	str	r3, [r7, #12]

				led_index++;
 8000b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b94:	3301      	adds	r3, #1
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
				for(uint32_t j=0; j<12; j++) {
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
 8000b9c:	e017      	b.n	8000bce <StartBreak_Task+0xea>
					if( firstled >> j & 0x01){
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
 8000ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d006      	beq.n	8000bbc <StartBreak_Task+0xd8>
							ws2812SetColor(j, 255, 255, 255);
 8000bae:	23ff      	movs	r3, #255	; 0xff
 8000bb0:	22ff      	movs	r2, #255	; 0xff
 8000bb2:	21ff      	movs	r1, #255	; 0xff
 8000bb4:	6a38      	ldr	r0, [r7, #32]
 8000bb6:	f001 f863 	bl	8001c80 <ws2812SetColor>
 8000bba:	e005      	b.n	8000bc8 <StartBreak_Task+0xe4>
					}else {
						ws2812SetColor(j, 0, 0, 0);
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	6a38      	ldr	r0, [r7, #32]
 8000bc4:	f001 f85c 	bl	8001c80 <ws2812SetColor>
				for(uint32_t j=0; j<12; j++) {
 8000bc8:	6a3b      	ldr	r3, [r7, #32]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	623b      	str	r3, [r7, #32]
 8000bce:	6a3b      	ldr	r3, [r7, #32]
 8000bd0:	2b0b      	cmp	r3, #11
 8000bd2:	d9e4      	bls.n	8000b9e <StartBreak_Task+0xba>
					}
				}
				for(uint32_t j=20; j>11; j--) {
 8000bd4:	2314      	movs	r3, #20
 8000bd6:	61fb      	str	r3, [r7, #28]
 8000bd8:	e018      	b.n	8000c0c <StartBreak_Task+0x128>
					if( halfled >> (j-11) & 0x01){
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3b0b      	subs	r3, #11
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	fa22 f303 	lsr.w	r3, r2, r3
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d006      	beq.n	8000bfa <StartBreak_Task+0x116>
							ws2812SetColor(j, 255, 255, 255);
 8000bec:	23ff      	movs	r3, #255	; 0xff
 8000bee:	22ff      	movs	r2, #255	; 0xff
 8000bf0:	21ff      	movs	r1, #255	; 0xff
 8000bf2:	69f8      	ldr	r0, [r7, #28]
 8000bf4:	f001 f844 	bl	8001c80 <ws2812SetColor>
 8000bf8:	e005      	b.n	8000c06 <StartBreak_Task+0x122>
					}else {
						ws2812SetColor(j, 0, 0, 0);
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2100      	movs	r1, #0
 8000c00:	69f8      	ldr	r0, [r7, #28]
 8000c02:	f001 f83d 	bl	8001c80 <ws2812SetColor>
				for(uint32_t j=20; j>11; j--) {
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	61fb      	str	r3, [r7, #28]
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	2b0b      	cmp	r3, #11
 8000c10:	d8e3      	bhi.n	8000bda <StartBreak_Task+0xf6>
 8000c12:	e03a      	b.n	8000c8a <StartBreak_Task+0x1a6>
					}
				}
			}
			else{ // break
				led_count++;
 8000c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c16:	3301      	adds	r3, #1
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
				if(led_count > 30) {
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1c:	2b1e      	cmp	r3, #30
 8000c1e:	d903      	bls.n	8000c28 <StartBreak_Task+0x144>
					led_time = 500;
 8000c20:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c24:	633b      	str	r3, [r7, #48]	; 0x30
 8000c26:	e001      	b.n	8000c2c <StartBreak_Task+0x148>
				}else {
					led_time = 50;
 8000c28:	2332      	movs	r3, #50	; 0x32
 8000c2a:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if(led_count > 40) {
 8000c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2e:	2b28      	cmp	r3, #40	; 0x28
 8000c30:	d902      	bls.n	8000c38 <StartBreak_Task+0x154>
						//led_count = 0;
						g_break_flg = 0;
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <StartBreak_Task+0x1b0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
				}

				if(led_flg) {
 8000c38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d012      	beq.n	8000c66 <StartBreak_Task+0x182>
					for(int i = 0; i < B_LED_CNT; i++) {
 8000c40:	2300      	movs	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]
 8000c44:	e00b      	b.n	8000c5e <StartBreak_Task+0x17a>
						ws2812SetColor(i, 255, 0, 0);
 8000c46:	69b8      	ldr	r0, [r7, #24]
 8000c48:	2300      	movs	r3, #0
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	21ff      	movs	r1, #255	; 0xff
 8000c4e:	f001 f817 	bl	8001c80 <ws2812SetColor>
						led_flg = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					for(int i = 0; i < B_LED_CNT; i++) {
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	61bb      	str	r3, [r7, #24]
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	2b13      	cmp	r3, #19
 8000c62:	ddf0      	ble.n	8000c46 <StartBreak_Task+0x162>
 8000c64:	e011      	b.n	8000c8a <StartBreak_Task+0x1a6>
					}
				}else {
					for(int i = 0; i < B_LED_CNT; i++) {
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	e00b      	b.n	8000c84 <StartBreak_Task+0x1a0>
						ws2812SetColor(i, 0, 0, 0);
 8000c6c:	6978      	ldr	r0, [r7, #20]
 8000c6e:	2300      	movs	r3, #0
 8000c70:	2200      	movs	r2, #0
 8000c72:	2100      	movs	r1, #0
 8000c74:	f001 f804 	bl	8001c80 <ws2812SetColor>
						led_flg = 1;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					for(int i = 0; i < B_LED_CNT; i++) {
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	3301      	adds	r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	2b13      	cmp	r3, #19
 8000c88:	ddf0      	ble.n	8000c6c <StartBreak_Task+0x188>
					}
				}
			}
		}
    osDelay(1);
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f007 f8c8 	bl	8007e20 <osDelay>
		if(millis()-pre_time >= led_time)
 8000c90:	e73e      	b.n	8000b10 <StartBreak_Task+0x2c>
 8000c92:	bf00      	nop
 8000c94:	2000002c 	.word	0x2000002c
 8000c98:	20000030 	.word	0x20000030
 8000c9c:	cccccccd 	.word	0xcccccccd

08000ca0 <StartRainBow_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRainBow_Task */
void StartRainBow_Task(void const * argument)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRainBow_Task */
  /* Infinite loop */

	uint32_t rainbow_pre_time=0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t rainbow_led_time=10;
 8000cac:	230a      	movs	r3, #10
 8000cae:	623b      	str	r3, [r7, #32]
	_Bool led_flg=0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	77fb      	strb	r3, [r7, #31]
	uint32_t led_count = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61bb      	str	r3, [r7, #24]
	for(;;)
	{
		uint16_t i, j;
		for(j=0; j<256*5;) { // 5 cycles of all colors on wheel
 8000cb8:	2300      	movs	r3, #0
 8000cba:	82bb      	strh	r3, [r7, #20]
 8000cbc:	e06f      	b.n	8000d9e <StartRainBow_Task+0xfe>
			if(millis()-rainbow_pre_time >= rainbow_led_time)
 8000cbe:	f000 fbd1 	bl	8001464 <millis>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	6a3a      	ldr	r2, [r7, #32]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d867      	bhi.n	8000d9e <StartRainBow_Task+0xfe>
			{
				rainbow_pre_time = millis();
 8000cce:	f000 fbc9 	bl	8001464 <millis>
 8000cd2:	6278      	str	r0, [r7, #36]	; 0x24
				j++;
 8000cd4:	8abb      	ldrh	r3, [r7, #20]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	82bb      	strh	r3, [r7, #20]
				rainbow_led_time = 10;
 8000cda:	230a      	movs	r3, #10
 8000cdc:	623b      	str	r3, [r7, #32]
				if(g_break_flg == 0) {
 8000cde:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <StartRainBow_Task+0x110>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	f083 0301 	eor.w	r3, r3, #1
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d01f      	beq.n	8000d2c <StartRainBow_Task+0x8c>
					led_count = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
					for(i=0; i< R_LED_CNT; i++) {
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	82fb      	strh	r3, [r7, #22]
 8000cf4:	e016      	b.n	8000d24 <StartRainBow_Task+0x84>
						setPixelColor(i, Wheel(((i * 256 / R_LED_CNT) + j) & 255));
 8000cf6:	8afb      	ldrh	r3, [r7, #22]
 8000cf8:	021b      	lsls	r3, r3, #8
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	da00      	bge.n	8000d00 <StartRainBow_Task+0x60>
 8000cfe:	337f      	adds	r3, #127	; 0x7f
 8000d00:	11db      	asrs	r3, r3, #7
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	8abb      	ldrh	r3, [r7, #20]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	4413      	add	r3, r2
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f001 f957 	bl	8001fc0 <Wheel>
 8000d12:	4602      	mov	r2, r0
 8000d14:	8afb      	ldrh	r3, [r7, #22]
 8000d16:	4611      	mov	r1, r2
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f001 f8cd 	bl	8001eb8 <setPixelColor>
					for(i=0; i< R_LED_CNT; i++) {
 8000d1e:	8afb      	ldrh	r3, [r7, #22]
 8000d20:	3301      	adds	r3, #1
 8000d22:	82fb      	strh	r3, [r7, #22]
 8000d24:	8afb      	ldrh	r3, [r7, #22]
 8000d26:	2b7f      	cmp	r3, #127	; 0x7f
 8000d28:	d9e5      	bls.n	8000cf6 <StartRainBow_Task+0x56>
 8000d2a:	e038      	b.n	8000d9e <StartRainBow_Task+0xfe>
					}
				}
				else{ // break
					led_count++;
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	61bb      	str	r3, [r7, #24]
					if(led_count > 20) {
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	2b14      	cmp	r3, #20
 8000d36:	d903      	bls.n	8000d40 <StartRainBow_Task+0xa0>
						rainbow_led_time = 500;
 8000d38:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d3c:	623b      	str	r3, [r7, #32]
 8000d3e:	e001      	b.n	8000d44 <StartRainBow_Task+0xa4>
					}else {
						rainbow_led_time = 50;
 8000d40:	2332      	movs	r3, #50	; 0x32
 8000d42:	623b      	str	r3, [r7, #32]
					}
					if(led_count > 30) {
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	2b1e      	cmp	r3, #30
 8000d48:	d902      	bls.n	8000d50 <StartRainBow_Task+0xb0>
							//led_count = 0;
							g_break_flg = 0;
 8000d4a:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <StartRainBow_Task+0x110>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
					}

					if(led_flg) {
 8000d50:	7ffb      	ldrb	r3, [r7, #31]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d012      	beq.n	8000d7c <StartRainBow_Task+0xdc>
						for(int i = 0; i < B_LED_CNT; i++) {
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	e00b      	b.n	8000d74 <StartRainBow_Task+0xd4>
							setPixelColor(i, 0xff0000);
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8000d64:	4618      	mov	r0, r3
 8000d66:	f001 f8a7 	bl	8001eb8 <setPixelColor>
							led_flg = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	77fb      	strb	r3, [r7, #31]
						for(int i = 0; i < B_LED_CNT; i++) {
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	3301      	adds	r3, #1
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	2b13      	cmp	r3, #19
 8000d78:	ddf0      	ble.n	8000d5c <StartRainBow_Task+0xbc>
 8000d7a:	e010      	b.n	8000d9e <StartRainBow_Task+0xfe>
						}
					}else {
						for(int i = 0; i < B_LED_CNT; i++) {
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	e00a      	b.n	8000d98 <StartRainBow_Task+0xf8>
							setPixelColor(i, 0);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f001 f895 	bl	8001eb8 <setPixelColor>
							led_flg = 1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	77fb      	strb	r3, [r7, #31]
						for(int i = 0; i < B_LED_CNT; i++) {
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	3301      	adds	r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b13      	cmp	r3, #19
 8000d9c:	ddf1      	ble.n	8000d82 <StartRainBow_Task+0xe2>
		for(j=0; j<256*5;) { // 5 cycles of all colors on wheel
 8000d9e:	8abb      	ldrh	r3, [r7, #20]
 8000da0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000da4:	d38b      	bcc.n	8000cbe <StartRainBow_Task+0x1e>
						}
					}
				}
			}
		}
		osDelay(1);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f007 f83a 	bl	8007e20 <osDelay>
	{
 8000dac:	e784      	b.n	8000cb8 <StartRainBow_Task+0x18>
 8000dae:	bf00      	nop
 8000db0:	2000002c 	.word	0x2000002c
 8000db4:	00000000 	.word	0x00000000

08000db8 <StartAS504X_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAS504X_Task */
void StartAS504X_Task(void const * argument)
{
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b08b      	sub	sp, #44	; 0x2c
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAS504X_Task */
  /* Infinite loop */

  uint32_t Task03_pre_time = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t Task03_led_time = 1000;
 8000dc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc8:	623b      	str	r3, [r7, #32]
  //uint32_t speed = 0;

  for(;;)
  {

		if (millis()-Task03_pre_time >= Task03_led_time)
 8000dca:	f000 fb4b 	bl	8001464 <millis>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	6a3a      	ldr	r2, [r7, #32]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d83c      	bhi.n	8000e54 <StartAS504X_Task+0x9c>
		{
			Task03_pre_time = millis();
 8000dda:	f000 fb43 	bl	8001464 <millis>
 8000dde:	6278      	str	r0, [r7, #36]	; 0x24
			// max 14bit = 16383 dec
		  uint16_t current_angle = as504x_getRawRotation();
 8000de0:	f000 f8ec 	bl	8000fbc <as504x_getRawRotation>
 8000de4:	4603      	mov	r3, r0
 8000de6:	83fb      	strh	r3, [r7, #30]
		  float current_angle_map = as504x_read2angle(current_angle);
 8000de8:	8bfb      	ldrh	r3, [r7, #30]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 f90e 	bl	800100c <as504x_read2angle>
 8000df0:	ed87 0a06 	vstr	s0, [r7, #24]


			float angle = current_angle_map - zero_position_map;
 8000df4:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <StartAS504X_Task+0xb0>)
 8000df6:	edd3 7a00 	vldr	s15, [r3]
 8000dfa:	ed97 7a06 	vldr	s14, [r7, #24]
 8000dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e02:	edc7 7a05 	vstr	s15, [r7, #20]
			//angle = as504x_normalize(angle);

			float radian = as504x_radian(angle);
 8000e06:	ed97 0a05 	vldr	s0, [r7, #20]
 8000e0a:	f000 f919 	bl	8001040 <as504x_radian>
 8000e0e:	ed87 0a04 	vstr	s0, [r7, #16]
		  // set new zero position
			float rpm = radian/((2*PI)/60);
 8000e12:	6938      	ldr	r0, [r7, #16]
 8000e14:	f7ff fb68 	bl	80004e8 <__aeabi_f2d>
 8000e18:	a311      	add	r3, pc, #68	; (adr r3, 8000e60 <StartAS504X_Task+0xa8>)
 8000e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1e:	f7ff fce5 	bl	80007ec <__aeabi_ddiv>
 8000e22:	4603      	mov	r3, r0
 8000e24:	460c      	mov	r4, r1
 8000e26:	4618      	mov	r0, r3
 8000e28:	4621      	mov	r1, r4
 8000e2a:	f7ff fdc7 	bl	80009bc <__aeabi_d2f>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	60fb      	str	r3, [r7, #12]
		  as504x_setZeroPosition(current_angle);
 8000e32:	8bfb      	ldrh	r3, [r7, #30]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 f8cb 	bl	8000fd0 <as504x_setZeroPosition>
		  zero_position = current_angle;
 8000e3a:	4a0c      	ldr	r2, [pc, #48]	; (8000e6c <StartAS504X_Task+0xb4>)
 8000e3c:	8bfb      	ldrh	r3, [r7, #30]
 8000e3e:	8013      	strh	r3, [r2, #0]
			//zero_position = angleSensor.getRawRotation();
			zero_position_map = as504x_read2angle(zero_position);
 8000e40:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <StartAS504X_Task+0xb4>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 f8e1 	bl	800100c <as504x_read2angle>
 8000e4a:	eef0 7a40 	vmov.f32	s15, s0
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <StartAS504X_Task+0xb0>)
 8000e50:	edc3 7a00 	vstr	s15, [r3]
	  if (as504x_error()) {
		  //printf("ERROR: %d\n", as504x_getErrors());
	  }

*/
    osDelay(1);
 8000e54:	2001      	movs	r0, #1
 8000e56:	f006 ffe3 	bl	8007e20 <osDelay>
		if (millis()-Task03_pre_time >= Task03_led_time)
 8000e5a:	e7b6      	b.n	8000dca <StartAS504X_Task+0x12>
 8000e5c:	f3af 8000 	nop.w
 8000e60:	f37bebd5 	.word	0xf37bebd5
 8000e64:	3fbacee9 	.word	0x3fbacee9
 8000e68:	200020d4 	.word	0x200020d4
 8000e6c:	200020d0 	.word	0x200020d0

08000e70 <as504x_spiCalcEvenParity>:
}

/**
 * Utility function used to calculate even parity of word
 */
uint8_t as504x_spiCalcEvenParity(uint16_t value){
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	80fb      	strh	r3, [r7, #6]
	uint8_t cnt = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	73fb      	strb	r3, [r7, #15]
	uint8_t i;

	for (i = 0; i < 16; i++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73bb      	strb	r3, [r7, #14]
 8000e82:	7bbb      	ldrb	r3, [r7, #14]
 8000e84:	2b0f      	cmp	r3, #15
 8000e86:	d80e      	bhi.n	8000ea6 <as504x_spiCalcEvenParity+0x36>
	{
		if (value & 0x1)
 8000e88:	88fb      	ldrh	r3, [r7, #6]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d002      	beq.n	8000e98 <as504x_spiCalcEvenParity+0x28>
		{
			cnt++;
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	3301      	adds	r3, #1
 8000e96:	73fb      	strb	r3, [r7, #15]
		}
		value >>= 1;
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	105b      	asrs	r3, r3, #1
 8000e9c:	80fb      	strh	r3, [r7, #6]
	for (i = 0; i < 16; i++)
 8000e9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	73bb      	strb	r3, [r7, #14]
 8000ea4:	e7ed      	b.n	8000e82 <as504x_spiCalcEvenParity+0x12>
	}
	return cnt & 0x1;
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	b2db      	uxtb	r3, r3
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <as504x_read>:
/*
 * Read a register from the sensor
 * Takes the address of the register as a 16 bit word
 * Returns the value of the register
 */
uint16_t as504x_read(uint16_t registerAddress){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]

	uint8_t data[2];

	uint16_t command = 0b0100000000000000; // PAR=0 R/W=R
 8000ec6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000eca:	81fb      	strh	r3, [r7, #14]
	command = command | registerAddress;
 8000ecc:	89fa      	ldrh	r2, [r7, #14]
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	81fb      	strh	r3, [r7, #14]

	//Add a parity bit on the the MSB
	command |= ((uint16_t)as504x_spiCalcEvenParity(command)<<15);
 8000ed4:	89fb      	ldrh	r3, [r7, #14]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ffca 	bl	8000e70 <as504x_spiCalcEvenParity>
 8000edc:	4603      	mov	r3, r0
 8000ede:	03db      	lsls	r3, r3, #15
 8000ee0:	b21a      	sxth	r2, r3
 8000ee2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	b21b      	sxth	r3, r3
 8000eea:	81fb      	strh	r3, [r7, #14]

	//Split the command into two bytes
	data[1] = command & 0xFF;
 8000eec:	89fb      	ldrh	r3, [r7, #14]
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	737b      	strb	r3, [r7, #13]
	data[0] = ( command >> 8 ) & 0xFF;
 8000ef2:	89fb      	ldrh	r3, [r7, #14]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	733b      	strb	r3, [r7, #12]

	EN_SPI;
 8000efc:	2200      	movs	r2, #0
 8000efe:	2110      	movs	r1, #16
 8000f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f04:	f002 fac8 	bl	8003498 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&data, 2, 0xFFFF);
 8000f08:	f107 010c 	add.w	r1, r7, #12
 8000f0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f10:	2202      	movs	r2, #2
 8000f12:	4828      	ldr	r0, [pc, #160]	; (8000fb4 <as504x_read+0xf8>)
 8000f14:	f003 fff0 	bl	8004ef8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {}
 8000f18:	4826      	ldr	r0, [pc, #152]	; (8000fb4 <as504x_read+0xf8>)
 8000f1a:	f004 fca9 	bl	8005870 <HAL_SPI_GetState>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	bf14      	ite	ne
 8000f24:	2301      	movne	r3, #1
 8000f26:	2300      	moveq	r3, #0
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d000      	beq.n	8000f30 <as504x_read+0x74>
 8000f2e:	e7f3      	b.n	8000f18 <as504x_read+0x5c>
	DIS_SPI;
 8000f30:	2201      	movs	r2, #1
 8000f32:	2110      	movs	r1, #16
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f38:	f002 faae 	bl	8003498 <HAL_GPIO_WritePin>

	EN_SPI;
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2110      	movs	r1, #16
 8000f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f44:	f002 faa8 	bl	8003498 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)&data, 2, 0xFFFF);
 8000f48:	f107 010c 	add.w	r1, r7, #12
 8000f4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f50:	2202      	movs	r2, #2
 8000f52:	4818      	ldr	r0, [pc, #96]	; (8000fb4 <as504x_read+0xf8>)
 8000f54:	f004 f946 	bl	80051e4 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {}
 8000f58:	4816      	ldr	r0, [pc, #88]	; (8000fb4 <as504x_read+0xf8>)
 8000f5a:	f004 fc89 	bl	8005870 <HAL_SPI_GetState>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	bf14      	ite	ne
 8000f64:	2301      	movne	r3, #1
 8000f66:	2300      	moveq	r3, #0
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d000      	beq.n	8000f70 <as504x_read+0xb4>
 8000f6e:	e7f3      	b.n	8000f58 <as504x_read+0x9c>
	DIS_SPI;
 8000f70:	2201      	movs	r2, #1
 8000f72:	2110      	movs	r1, #16
 8000f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f78:	f002 fa8e 	bl	8003498 <HAL_GPIO_WritePin>

	if (data[1] & 0x40) {
 8000f7c:	7b7b      	ldrb	r3, [r7, #13]
 8000f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <as504x_read+0xd2>
		errorFlag = 1;
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <as504x_read+0xfc>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	701a      	strb	r2, [r3, #0]
 8000f8c:	e002      	b.n	8000f94 <as504x_read+0xd8>
	} else {
		errorFlag = 0;
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <as504x_read+0xfc>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
	}

	//Return the data, stripping the parity and error bits
	return (( ( data[1] & 0xFF ) << 8 ) | ( data[0] & 0xFF )) & ~0xC000;
 8000f94:	7b7b      	ldrb	r3, [r7, #13]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	7b3b      	ldrb	r3, [r7, #12]
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000fa8:	b29b      	uxth	r3, r3
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	2000206c 	.word	0x2000206c
 8000fb8:	20000034 	.word	0x20000034

08000fbc <as504x_getRawRotation>:
}

/**
 * Returns the raw angle directly from the sensor
 */
uint16_t as504x_getRawRotation(){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	return as504x_read(AS5048A_ANGLE);
 8000fc0:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8000fc4:	f7ff ff7a 	bl	8000ebc <as504x_read>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <as504x_setZeroPosition>:
}

/*
 * Set the zero position
 */
void as504x_setZeroPosition(uint16_t arg_position){
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]
	position = arg_position % 0x3FFF;
 8000fda:	88fa      	ldrh	r2, [r7, #6]
 8000fdc:	4b09      	ldr	r3, [pc, #36]	; (8001004 <as504x_setZeroPosition+0x34>)
 8000fde:	fba3 1302 	umull	r1, r3, r3, r2
 8000fe2:	1ad1      	subs	r1, r2, r3
 8000fe4:	0849      	lsrs	r1, r1, #1
 8000fe6:	440b      	add	r3, r1
 8000fe8:	0b59      	lsrs	r1, r3, #13
 8000fea:	460b      	mov	r3, r1
 8000fec:	039b      	lsls	r3, r3, #14
 8000fee:	1a5b      	subs	r3, r3, r1
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <as504x_setZeroPosition+0x38>)
 8000ff6:	801a      	strh	r2, [r3, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	00040011 	.word	0x00040011
 8001008:	20000036 	.word	0x20000036

0800100c <as504x_read2angle>:
}

/*
 * Returns caalculated angle value
 */
float as504x_read2angle(uint16_t angle) {
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	80fb      	strh	r3, [r7, #6]
	 * 14 bits = 2^(14) - 1 = 16.383
	 *
	 * https://www.arduino.cc/en/Reference/Map
	 *
	 */
	return (float)angle * ((float)360 / 16383);
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001020:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001038 <as504x_read2angle+0x2c>
 8001024:	ee67 7a87 	vmul.f32	s15, s15, s14
};
 8001028:	eeb0 0a67 	vmov.f32	s0, s15
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	3cb402d0 	.word	0x3cb402d0
 800103c:	00000000 	.word	0x00000000

08001040 <as504x_radian>:
    return as504x_mask(sensor_result) * 36000 / 0x4000;
}


float as504x_radian(float angle)
{
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	ed87 0a01 	vstr	s0, [r7, #4]
    return (angle * PI) / 180;
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff fa4c 	bl	80004e8 <__aeabi_f2d>
 8001050:	a30e      	add	r3, pc, #56	; (adr r3, 800108c <as504x_radian+0x4c>)
 8001052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001056:	f7ff fa9f 	bl	8000598 <__aeabi_dmul>
 800105a:	4603      	mov	r3, r0
 800105c:	460c      	mov	r4, r1
 800105e:	4618      	mov	r0, r3
 8001060:	4621      	mov	r1, r4
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <as504x_radian+0x48>)
 8001068:	f7ff fbc0 	bl	80007ec <__aeabi_ddiv>
 800106c:	4603      	mov	r3, r0
 800106e:	460c      	mov	r4, r1
 8001070:	4618      	mov	r0, r3
 8001072:	4621      	mov	r1, r4
 8001074:	f7ff fca2 	bl	80009bc <__aeabi_d2f>
 8001078:	4603      	mov	r3, r0
 800107a:	ee07 3a90 	vmov	s15, r3
}
 800107e:	eeb0 0a67 	vmov.f32	s0, s15
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bd90      	pop	{r4, r7, pc}
 8001088:	40668000 	.word	0x40668000
 800108c:	54442d18 	.word	0x54442d18
 8001090:	400921fb 	.word	0x400921fb

08001094 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MX_DMA_Init+0x60>)
 800109c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800109e:	4a15      	ldr	r2, [pc, #84]	; (80010f4 <MX_DMA_Init+0x60>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	6493      	str	r3, [r2, #72]	; 0x48
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <MX_DMA_Init+0x60>)
 80010a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <MX_DMA_Init+0x60>)
 80010b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010b6:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <MX_DMA_Init+0x60>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6493      	str	r3, [r2, #72]	; 0x48
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <MX_DMA_Init+0x60>)
 80010c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2105      	movs	r1, #5
 80010ce:	200d      	movs	r0, #13
 80010d0:	f001 f908 	bl	80022e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80010d4:	200d      	movs	r0, #13
 80010d6:	f001 f92f 	bl	8002338 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2105      	movs	r1, #5
 80010de:	200e      	movs	r0, #14
 80010e0:	f001 f900 	bl	80022e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80010e4:	200e      	movs	r0, #14
 80010e6:	f001 f927 	bl	8002338 <HAL_NVIC_EnableIRQ>

}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000

080010f8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0

  hfdcan1.Instance = FDCAN1;
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <MX_FDCAN1_Init+0x84>)
 80010fe:	4a20      	ldr	r2, [pc, #128]	; (8001180 <MX_FDCAN1_Init+0x88>)
 8001100:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001102:	4b1e      	ldr	r3, [pc, #120]	; (800117c <MX_FDCAN1_Init+0x84>)
 8001104:	2200      	movs	r2, #0
 8001106:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001108:	4b1c      	ldr	r3, [pc, #112]	; (800117c <MX_FDCAN1_Init+0x84>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800110e:	4b1b      	ldr	r3, [pc, #108]	; (800117c <MX_FDCAN1_Init+0x84>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <MX_FDCAN1_Init+0x84>)
 8001116:	2200      	movs	r2, #0
 8001118:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800111a:	4b18      	ldr	r3, [pc, #96]	; (800117c <MX_FDCAN1_Init+0x84>)
 800111c:	2200      	movs	r2, #0
 800111e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <MX_FDCAN1_Init+0x84>)
 8001122:	2200      	movs	r2, #0
 8001124:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <MX_FDCAN1_Init+0x84>)
 8001128:	2201      	movs	r2, #1
 800112a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <MX_FDCAN1_Init+0x84>)
 800112e:	2201      	movs	r2, #1
 8001130:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_FDCAN1_Init+0x84>)
 8001134:	2202      	movs	r2, #2
 8001136:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <MX_FDCAN1_Init+0x84>)
 800113a:	2202      	movs	r2, #2
 800113c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_FDCAN1_Init+0x84>)
 8001140:	2201      	movs	r2, #1
 8001142:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <MX_FDCAN1_Init+0x84>)
 8001146:	2201      	movs	r2, #1
 8001148:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_FDCAN1_Init+0x84>)
 800114c:	2201      	movs	r2, #1
 800114e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <MX_FDCAN1_Init+0x84>)
 8001152:	2201      	movs	r2, #1
 8001154:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_FDCAN1_Init+0x84>)
 8001158:	2200      	movs	r2, #0
 800115a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <MX_FDCAN1_Init+0x84>)
 800115e:	2200      	movs	r2, #0
 8001160:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_FDCAN1_Init+0x84>)
 8001164:	2200      	movs	r2, #0
 8001166:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <MX_FDCAN1_Init+0x84>)
 800116a:	f001 fc51 	bl	8002a10 <HAL_FDCAN_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001174:	f000 f9e8 	bl	8001548 <Error_Handler>
  }

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20002008 	.word	0x20002008
 8001180:	40006400 	.word	0x40006400

08001184 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a18      	ldr	r2, [pc, #96]	; (8001204 <HAL_FDCAN_MspInit+0x80>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d129      	bne.n	80011fa <HAL_FDCAN_MspInit+0x76>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <HAL_FDCAN_MspInit+0x84>)
 80011a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011aa:	4a17      	ldr	r2, [pc, #92]	; (8001208 <HAL_FDCAN_MspInit+0x84>)
 80011ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011b0:	6593      	str	r3, [r2, #88]	; 0x58
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <HAL_FDCAN_MspInit+0x84>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_FDCAN_MspInit+0x84>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	4a11      	ldr	r2, [pc, #68]	; (8001208 <HAL_FDCAN_MspInit+0x84>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <HAL_FDCAN_MspInit+0x84>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80011e8:	2309      	movs	r3, #9
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f6:	f001 fef7 	bl	8002fe8 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	; 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40006400 	.word	0x40006400
 8001208:	40021000 	.word	0x40021000

0800120c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001222:	4b3f      	ldr	r3, [pc, #252]	; (8001320 <MX_GPIO_Init+0x114>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	4a3e      	ldr	r2, [pc, #248]	; (8001320 <MX_GPIO_Init+0x114>)
 8001228:	f043 0320 	orr.w	r3, r3, #32
 800122c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122e:	4b3c      	ldr	r3, [pc, #240]	; (8001320 <MX_GPIO_Init+0x114>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	f003 0320 	and.w	r3, r3, #32
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800123a:	4b39      	ldr	r3, [pc, #228]	; (8001320 <MX_GPIO_Init+0x114>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	4a38      	ldr	r2, [pc, #224]	; (8001320 <MX_GPIO_Init+0x114>)
 8001240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001246:	4b36      	ldr	r3, [pc, #216]	; (8001320 <MX_GPIO_Init+0x114>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	4b33      	ldr	r3, [pc, #204]	; (8001320 <MX_GPIO_Init+0x114>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	4a32      	ldr	r2, [pc, #200]	; (8001320 <MX_GPIO_Init+0x114>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125e:	4b30      	ldr	r3, [pc, #192]	; (8001320 <MX_GPIO_Init+0x114>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <MX_GPIO_Init+0x114>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	4a2c      	ldr	r2, [pc, #176]	; (8001320 <MX_GPIO_Init+0x114>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001276:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <MX_GPIO_Init+0x114>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE0_Pin|LED_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128c:	f002 f904 	bl	8003498 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001290:	2303      	movs	r3, #3
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001294:	2303      	movs	r3, #3
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	4820      	ldr	r0, [pc, #128]	; (8001324 <MX_GPIO_Init+0x118>)
 80012a4:	f001 fea0 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ae:	2303      	movs	r3, #3
 80012b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4619      	mov	r1, r3
 80012bc:	481a      	ldr	r0, [pc, #104]	; (8001328 <MX_GPIO_Init+0x11c>)
 80012be:	f001 fe93 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA9 
                           PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9 
 80012c2:	f248 630e 	movw	r3, #34318	; 0x860e
 80012c6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c8:	2303      	movs	r3, #3
 80012ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4619      	mov	r1, r3
 80012d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012da:	f001 fe85 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CE0_Pin|LED_Pin;
 80012de:	f44f 7388 	mov.w	r3, #272	; 0x110
 80012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fa:	f001 fe75 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 PB4 PB6 
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6 
 80012fe:	f240 13d9 	movw	r3, #473	; 0x1d9
 8001302:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001304:	2303      	movs	r3, #3
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	4806      	ldr	r0, [pc, #24]	; (800132c <MX_GPIO_Init+0x120>)
 8001314:	f001 fe68 	bl	8002fe8 <HAL_GPIO_Init>

}
 8001318:	bf00      	nop
 800131a:	3728      	adds	r7, #40	; 0x28
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40021000 	.word	0x40021000
 8001324:	48001400 	.word	0x48001400
 8001328:	48001800 	.word	0x48001800
 800132c:	48000400 	.word	0x48000400

08001330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001334:	f000 fed1 	bl	80020da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001338:	f000 f82e 	bl	8001398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800133c:	f7ff ff66 	bl	800120c <MX_GPIO_Init>
  MX_DMA_Init();
 8001340:	f7ff fea8 	bl	8001094 <MX_DMA_Init>
  MX_SPI1_Init();
 8001344:	f000 f912 	bl	800156c <MX_SPI1_Init>
  MX_TIM2_Init();
 8001348:	f000 fa8c 	bl	8001864 <MX_TIM2_Init>
  MX_TIM17_Init();
 800134c:	f000 fae2 	bl	8001914 <MX_TIM17_Init>
  MX_FDCAN1_Init();
 8001350:	f7ff fed2 	bl	80010f8 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  ws2812Init();
 8001354:	f000 fc46 	bl	8001be4 <ws2812Init>
  ws2812Begin(B_LED_CNT, R_LED_CNT);
 8001358:	2180      	movs	r1, #128	; 0x80
 800135a:	2014      	movs	r0, #20
 800135c:	f000 fc58 	bl	8001c10 <ws2812Begin>
  zero_position = as504x_getRawRotation();
 8001360:	f7ff fe2c 	bl	8000fbc <as504x_getRawRotation>
 8001364:	4603      	mov	r3, r0
 8001366:	b29a      	uxth	r2, r3
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <main+0x60>)
 800136a:	801a      	strh	r2, [r3, #0]
  //printf("Zero: %d\n", zero_position);
  zero_position_map = as504x_read2angle(zero_position);
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <main+0x60>)
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fe4b 	bl	800100c <as504x_read2angle>
 8001376:	ee07 0a90 	vmov	s15, r0
 800137a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <main+0x64>)
 8001380:	edc3 7a00 	vstr	s15, [r3]
  //printf("Angle: %f\n", zero_position_map);
	//uint32_t led_index=0;
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8001384:	f7ff fb6a 	bl	8000a5c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001388:	f006 fd1c 	bl	8007dc4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800138c:	e7fe      	b.n	800138c <main+0x5c>
 800138e:	bf00      	nop
 8001390:	200020d0 	.word	0x200020d0
 8001394:	200020d4 	.word	0x200020d4

08001398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b0a4      	sub	sp, #144	; 0x90
 800139c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013a2:	2238      	movs	r2, #56	; 0x38
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f007 fe7e 	bl	80090a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013bc:	463b      	mov	r3, r7
 80013be:	2244      	movs	r2, #68	; 0x44
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f007 fe70 	bl	80090a8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80013c8:	2000      	movs	r0, #0
 80013ca:	f002 f895 	bl	80034f8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013ce:	2302      	movs	r3, #2
 80013d0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013d8:	2340      	movs	r3, #64	; 0x40
 80013da:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013dc:	2302      	movs	r3, #2
 80013de:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013e0:	2302      	movs	r3, #2
 80013e2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80013e4:	2304      	movs	r3, #4
 80013e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80013e8:	2355      	movs	r3, #85	; 0x55
 80013ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ee:	2302      	movs	r3, #2
 80013f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013f4:	2302      	movs	r3, #2
 80013f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013fa:	2302      	movs	r3, #2
 80013fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001400:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001404:	4618      	mov	r0, r3
 8001406:	f002 f92b 	bl	8003660 <HAL_RCC_OscConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001410:	f000 f89a 	bl	8001548 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001414:	230f      	movs	r3, #15
 8001416:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001418:	2303      	movs	r3, #3
 800141a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8001428:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800142c:	2108      	movs	r1, #8
 800142e:	4618      	mov	r0, r3
 8001430:	f002 fd28 	bl	8003e84 <HAL_RCC_ClockConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800143a:	f000 f885 	bl	8001548 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800143e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001442:	603b      	str	r3, [r7, #0]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001444:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001448:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800144a:	463b      	mov	r3, r7
 800144c:	4618      	mov	r0, r3
 800144e:	f003 f821 	bl	8004494 <HAL_RCCEx_PeriphCLKConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001458:	f000 f876 	bl	8001548 <Error_Handler>
  }
}
 800145c:	bf00      	nop
 800145e:	3790      	adds	r7, #144	; 0x90
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <millis>:
{
  HAL_Delay(ms);
}

uint32_t millis(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001468:	f000 fe62 	bl	8002130 <HAL_GetTick>
 800146c:	4603      	mov	r3, r0
}
 800146e:	4618      	mov	r0, r3
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <rotateLeft>:
 *
 * @num         Number to rotate.
 * @rotation    Number of times to rotate left.
 */
int rotateLeft(int num, unsigned int rotation)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
    int DROPPED_MSB;

    // The effective rotation
    rotation %= INT_BITS;
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <rotateLeft+0x50>)
 8001482:	fba3 1302 	umull	r1, r3, r3, r2
 8001486:	0919      	lsrs	r1, r3, #4
 8001488:	460b      	mov	r3, r1
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	603b      	str	r3, [r7, #0]


    // Loop till rotation becomes 0
    while(rotation--)
 8001494:	e009      	b.n	80014aa <rotateLeft+0x36>
    {
        // Get MSB of num before it gets dropped
        DROPPED_MSB = (num >> INT_BITS) & 1;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	151b      	asrs	r3, r3, #20
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60fb      	str	r3, [r7, #12]

        // Left rotate num by 1 and
        // Set its dropped MSB as new LSB
        num = (num << 1) | DROPPED_MSB;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	607b      	str	r3, [r7, #4]
    while(rotation--)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	1e5a      	subs	r2, r3, #1
 80014ae:	603a      	str	r2, [r7, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1f0      	bne.n	8001496 <rotateLeft+0x22>
    }

    return num;
 80014b4:	687b      	ldr	r3, [r7, #4]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	cccccccd 	.word	0xcccccccd

080014c8 <rotateRight>:
 *
 * @num         Number to rotate.
 * @rotation    Number of times to rotate right.
 */
int rotateRight(int num, unsigned int rotation)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
    int DROPPED_LSB;

    // The effective rotation
    rotation %= INT_BITS;
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <rotateRight+0x58>)
 80014d6:	fba3 1302 	umull	r1, r3, r3, r2
 80014da:	0919      	lsrs	r1, r3, #4
 80014dc:	460b      	mov	r3, r1
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	603b      	str	r3, [r7, #0]


    // Loop till rotation becomes 0
    while(rotation--)
 80014e8:	e00d      	b.n	8001506 <rotateRight+0x3e>
    {
        // Get LSB of num before it gets dropped
        DROPPED_LSB = num & 1;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]

        // Right shift num by 1 and
        // Clear its MSB
        num = (num >> 1) & (~(1 << INT_BITS));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	105b      	asrs	r3, r3, #1
 80014f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014fa:	607b      	str	r3, [r7, #4]

        // Set its dropped LSB as new MSB
        num = num | (DROPPED_LSB << INT_BITS);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	051b      	lsls	r3, r3, #20
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	4313      	orrs	r3, r2
 8001504:	607b      	str	r3, [r7, #4]
    while(rotation--)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	1e5a      	subs	r2, r3, #1
 800150a:	603a      	str	r2, [r7, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1ec      	bne.n	80014ea <rotateRight+0x22>
    }

    return num;
 8001510:	687b      	ldr	r3, [r7, #4]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	cccccccd 	.word	0xcccccccd

08001524 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d101      	bne.n	800153a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001536:	f000 fde9 	bl	800210c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40012c00 	.word	0x40012c00

08001548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
 800155e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <MX_SPI1_Init+0x74>)
 8001572:	4a1c      	ldr	r2, [pc, #112]	; (80015e4 <MX_SPI1_Init+0x78>)
 8001574:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001576:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <MX_SPI1_Init+0x74>)
 8001578:	f44f 7282 	mov.w	r2, #260	; 0x104
 800157c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <MX_SPI1_Init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <MX_SPI1_Init+0x74>)
 8001586:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800158a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <MX_SPI1_Init+0x74>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <MX_SPI1_Init+0x74>)
 8001594:	2201      	movs	r2, #1
 8001596:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_SPI1_Init+0x74>)
 800159a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015a2:	2218      	movs	r2, #24
 80015a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015ba:	2207      	movs	r2, #7
 80015bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015cc:	f003 fb02 	bl	8004bd4 <HAL_SPI_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015d6:	f7ff ffb7 	bl	8001548 <Error_Handler>
  }

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000206c 	.word	0x2000206c
 80015e4:	40013000 	.word	0x40013000

080015e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a25      	ldr	r2, [pc, #148]	; (800169c <HAL_SPI_MspInit+0xb4>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d144      	bne.n	8001694 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800160a:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <HAL_SPI_MspInit+0xb8>)
 800160c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800160e:	4a24      	ldr	r2, [pc, #144]	; (80016a0 <HAL_SPI_MspInit+0xb8>)
 8001610:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001614:	6613      	str	r3, [r2, #96]	; 0x60
 8001616:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <HAL_SPI_MspInit+0xb8>)
 8001618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	4b1f      	ldr	r3, [pc, #124]	; (80016a0 <HAL_SPI_MspInit+0xb8>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	4a1e      	ldr	r2, [pc, #120]	; (80016a0 <HAL_SPI_MspInit+0xb8>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <HAL_SPI_MspInit+0xb8>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <HAL_SPI_MspInit+0xb8>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	4a18      	ldr	r2, [pc, #96]	; (80016a0 <HAL_SPI_MspInit+0xb8>)
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <HAL_SPI_MspInit+0xb8>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001652:	2360      	movs	r3, #96	; 0x60
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001662:	2305      	movs	r3, #5
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001670:	f001 fcba 	bl	8002fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001674:	2320      	movs	r3, #32
 8001676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2300      	movs	r3, #0
 8001682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001684:	2305      	movs	r3, #5
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4619      	mov	r1, r3
 800168e:	4805      	ldr	r0, [pc, #20]	; (80016a4 <HAL_SPI_MspInit+0xbc>)
 8001690:	f001 fcaa 	bl	8002fe8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	; 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40013000 	.word	0x40013000
 80016a0:	40021000 	.word	0x40021000
 80016a4:	48000400 	.word	0x48000400

080016a8 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80016b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b6:	6093      	str	r3, [r2, #8]
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40007000 	.word	0x40007000

080016c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_MspInit+0x50>)
 80016d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d2:	4a11      	ldr	r2, [pc, #68]	; (8001718 <HAL_MspInit+0x50>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6613      	str	r3, [r2, #96]	; 0x60
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <HAL_MspInit+0x50>)
 80016dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <HAL_MspInit+0x50>)
 80016e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ea:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <HAL_MspInit+0x50>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f0:	6593      	str	r3, [r2, #88]	; 0x58
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <HAL_MspInit+0x50>)
 80016f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	210f      	movs	r1, #15
 8001702:	f06f 0001 	mvn.w	r0, #1
 8001706:	f000 fded 	bl	80022e4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800170a:	f7ff ffcd 	bl	80016a8 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40021000 	.word	0x40021000

0800171c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08c      	sub	sp, #48	; 0x30
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 800172c:	2200      	movs	r2, #0
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	2019      	movs	r0, #25
 8001732:	f000 fdd7 	bl	80022e4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8001736:	2019      	movs	r0, #25
 8001738:	f000 fdfe 	bl	8002338 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800173c:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <HAL_InitTick+0x9c>)
 800173e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001740:	4a1d      	ldr	r2, [pc, #116]	; (80017b8 <HAL_InitTick+0x9c>)
 8001742:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001746:	6613      	str	r3, [r2, #96]	; 0x60
 8001748:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <HAL_InitTick+0x9c>)
 800174a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001754:	f107 0210 	add.w	r2, r7, #16
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f002 fe12 	bl	8004388 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001764:	f002 fdfa 	bl	800435c <HAL_RCC_GetPCLK2Freq>
 8001768:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800176a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176c:	4a13      	ldr	r2, [pc, #76]	; (80017bc <HAL_InitTick+0xa0>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	0c9b      	lsrs	r3, r3, #18
 8001774:	3b01      	subs	r3, #1
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <HAL_InitTick+0xa4>)
 800177a:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <HAL_InitTick+0xa8>)
 800177c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <HAL_InitTick+0xa4>)
 8001780:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001784:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001786:	4a0e      	ldr	r2, [pc, #56]	; (80017c0 <HAL_InitTick+0xa4>)
 8001788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <HAL_InitTick+0xa4>)
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_InitTick+0xa4>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001798:	4809      	ldr	r0, [pc, #36]	; (80017c0 <HAL_InitTick+0xa4>)
 800179a:	f004 f9ed 	bl	8005b78 <HAL_TIM_Base_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d104      	bne.n	80017ae <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80017a4:	4806      	ldr	r0, [pc, #24]	; (80017c0 <HAL_InitTick+0xa4>)
 80017a6:	f004 fac3 	bl	8005d30 <HAL_TIM_Base_Start_IT>
 80017aa:	4603      	mov	r3, r0
 80017ac:	e000      	b.n	80017b0 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3730      	adds	r7, #48	; 0x30
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40021000 	.word	0x40021000
 80017bc:	431bde83 	.word	0x431bde83
 80017c0:	200020d8 	.word	0x200020d8
 80017c4:	40012c00 	.word	0x40012c00

080017c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <HardFault_Handler+0x4>

080017dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <MemManage_Handler+0x4>

080017e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <BusFault_Handler+0x4>

080017e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <UsageFault_Handler+0x4>

080017ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <DMA1_Channel3_IRQHandler+0x10>)
 8001802:	f000 ffb5 	bl	8002770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2000221c 	.word	0x2000221c

08001810 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <DMA1_Channel4_IRQHandler+0x10>)
 8001816:	f000 ffab 	bl	8002770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20002124 	.word	0x20002124

08001824 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800182a:	f004 fe51 	bl	80064d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200020d8 	.word	0x200020d8

08001838 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <SystemInit+0x28>)
 800183e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001842:	4a07      	ldr	r2, [pc, #28]	; (8001860 <SystemInit+0x28>)
 8001844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <SystemInit+0x28>)
 800184e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001852:	609a      	str	r2, [r3, #8]
#endif
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim2_ch1;
DMA_HandleTypeDef hdma_tim17_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800186a:	f107 031c 	add.w	r3, r7, #28
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001876:	463b      	mov	r3, r7
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
 8001884:	615a      	str	r2, [r3, #20]
 8001886:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001888:	4b21      	ldr	r3, [pc, #132]	; (8001910 <MX_TIM2_Init+0xac>)
 800188a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800188e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001890:	4b1f      	ldr	r3, [pc, #124]	; (8001910 <MX_TIM2_Init+0xac>)
 8001892:	2200      	movs	r2, #0
 8001894:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001896:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <MX_TIM2_Init+0xac>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 212;
 800189c:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <MX_TIM2_Init+0xac>)
 800189e:	22d4      	movs	r2, #212	; 0xd4
 80018a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a2:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <MX_TIM2_Init+0xac>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a8:	4b19      	ldr	r3, [pc, #100]	; (8001910 <MX_TIM2_Init+0xac>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018ae:	4818      	ldr	r0, [pc, #96]	; (8001910 <MX_TIM2_Init+0xac>)
 80018b0:	f004 fabe 	bl	8005e30 <HAL_TIM_PWM_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80018ba:	f7ff fe45 	bl	8001548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018c6:	f107 031c 	add.w	r3, r7, #28
 80018ca:	4619      	mov	r1, r3
 80018cc:	4810      	ldr	r0, [pc, #64]	; (8001910 <MX_TIM2_Init+0xac>)
 80018ce:	f005 ff5b 	bl	8007788 <HAL_TIMEx_MasterConfigSynchronization>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80018d8:	f7ff fe36 	bl	8001548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018dc:	2360      	movs	r3, #96	; 0x60
 80018de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ec:	463b      	mov	r3, r7
 80018ee:	2200      	movs	r2, #0
 80018f0:	4619      	mov	r1, r3
 80018f2:	4807      	ldr	r0, [pc, #28]	; (8001910 <MX_TIM2_Init+0xac>)
 80018f4:	f004 ff6c 	bl	80067d0 <HAL_TIM_PWM_ConfigChannel>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80018fe:	f7ff fe23 	bl	8001548 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001902:	4803      	ldr	r0, [pc, #12]	; (8001910 <MX_TIM2_Init+0xac>)
 8001904:	f000 f914 	bl	8001b30 <HAL_TIM_MspPostInit>

}
 8001908:	bf00      	nop
 800190a:	3728      	adds	r7, #40	; 0x28
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	200021d0 	.word	0x200021d0

08001914 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b094      	sub	sp, #80	; 0x50
 8001918:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800191a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	615a      	str	r2, [r3, #20]
 800192c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800192e:	463b      	mov	r3, r7
 8001930:	2234      	movs	r2, #52	; 0x34
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f007 fbb7 	bl	80090a8 <memset>

  htim17.Instance = TIM17;
 800193a:	4b30      	ldr	r3, [pc, #192]	; (80019fc <MX_TIM17_Init+0xe8>)
 800193c:	4a30      	ldr	r2, [pc, #192]	; (8001a00 <MX_TIM17_Init+0xec>)
 800193e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001940:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <MX_TIM17_Init+0xe8>)
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001946:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <MX_TIM17_Init+0xe8>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 212;
 800194c:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <MX_TIM17_Init+0xe8>)
 800194e:	22d4      	movs	r2, #212	; 0xd4
 8001950:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001952:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <MX_TIM17_Init+0xe8>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001958:	4b28      	ldr	r3, [pc, #160]	; (80019fc <MX_TIM17_Init+0xe8>)
 800195a:	2200      	movs	r2, #0
 800195c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195e:	4b27      	ldr	r3, [pc, #156]	; (80019fc <MX_TIM17_Init+0xe8>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001964:	4825      	ldr	r0, [pc, #148]	; (80019fc <MX_TIM17_Init+0xe8>)
 8001966:	f004 f907 	bl	8005b78 <HAL_TIM_Base_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001970:	f7ff fdea 	bl	8001548 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001974:	4821      	ldr	r0, [pc, #132]	; (80019fc <MX_TIM17_Init+0xe8>)
 8001976:	f004 fa5b 	bl	8005e30 <HAL_TIM_PWM_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8001980:	f7ff fde2 	bl	8001548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001984:	2360      	movs	r3, #96	; 0x60
 8001986:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800198c:	2300      	movs	r3, #0
 800198e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001990:	2300      	movs	r3, #0
 8001992:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001998:	2300      	movs	r3, #0
 800199a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800199c:	2300      	movs	r3, #0
 800199e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019a4:	2200      	movs	r2, #0
 80019a6:	4619      	mov	r1, r3
 80019a8:	4814      	ldr	r0, [pc, #80]	; (80019fc <MX_TIM17_Init+0xe8>)
 80019aa:	f004 ff11 	bl	80067d0 <HAL_TIM_PWM_ConfigChannel>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 80019b4:	f7ff fdc8 	bl	8001548 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80019da:	463b      	mov	r3, r7
 80019dc:	4619      	mov	r1, r3
 80019de:	4807      	ldr	r0, [pc, #28]	; (80019fc <MX_TIM17_Init+0xe8>)
 80019e0:	f006 f816 	bl	8007a10 <HAL_TIMEx_ConfigBreakDeadTime>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 80019ea:	f7ff fdad 	bl	8001548 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim17);
 80019ee:	4803      	ldr	r0, [pc, #12]	; (80019fc <MX_TIM17_Init+0xe8>)
 80019f0:	f000 f89e 	bl	8001b30 <HAL_TIM_MspPostInit>

}
 80019f4:	bf00      	nop
 80019f6:	3750      	adds	r7, #80	; 0x50
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20002184 	.word	0x20002184
 8001a00:	40014800 	.word	0x40014800

08001a04 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a14:	d135      	bne.n	8001a82 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a16:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <HAL_TIM_PWM_MspInit+0x88>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	4a1c      	ldr	r2, [pc, #112]	; (8001a8c <HAL_TIM_PWM_MspInit+0x88>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6593      	str	r3, [r2, #88]	; 0x58
 8001a22:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <HAL_TIM_PWM_MspInit+0x88>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel4;
 8001a2e:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a30:	4a18      	ldr	r2, [pc, #96]	; (8001a94 <HAL_TIM_PWM_MspInit+0x90>)
 8001a32:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8001a34:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a36:	2238      	movs	r2, #56	; 0x38
 8001a38:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a3c:	2210      	movs	r2, #16
 8001a3e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a40:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a48:	2280      	movs	r2, #128	; 0x80
 8001a4a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a4c:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a52:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a54:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001a66:	480a      	ldr	r0, [pc, #40]	; (8001a90 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a68:	f000 fc7e 	bl	8002368 <HAL_DMA_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_TIM_PWM_MspInit+0x72>
    {
      Error_Handler();
 8001a72:	f7ff fd69 	bl	8001548 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a7a:	625a      	str	r2, [r3, #36]	; 0x24
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	20002124 	.word	0x20002124
 8001a94:	40020044 	.word	0x40020044

08001a98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a1e      	ldr	r2, [pc, #120]	; (8001b20 <HAL_TIM_Base_MspInit+0x88>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d135      	bne.n	8001b16 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <HAL_TIM_Base_MspInit+0x8c>)
 8001aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aae:	4a1d      	ldr	r2, [pc, #116]	; (8001b24 <HAL_TIM_Base_MspInit+0x8c>)
 8001ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <HAL_TIM_Base_MspInit+0x8c>)
 8001ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM17 DMA Init */
    /* TIM17_CH1 Init */
    hdma_tim17_ch1.Instance = DMA1_Channel3;
 8001ac2:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <HAL_TIM_Base_MspInit+0x90>)
 8001ac4:	4a19      	ldr	r2, [pc, #100]	; (8001b2c <HAL_TIM_Base_MspInit+0x94>)
 8001ac6:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
 8001ac8:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <HAL_TIM_Base_MspInit+0x90>)
 8001aca:	2254      	movs	r2, #84	; 0x54
 8001acc:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ace:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <HAL_TIM_Base_MspInit+0x90>)
 8001ad0:	2210      	movs	r2, #16
 8001ad2:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad4:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <HAL_TIM_Base_MspInit+0x90>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <HAL_TIM_Base_MspInit+0x90>)
 8001adc:	2280      	movs	r2, #128	; 0x80
 8001ade:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <HAL_TIM_Base_MspInit+0x90>)
 8001ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae6:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <HAL_TIM_Base_MspInit+0x90>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1.Init.Mode = DMA_CIRCULAR;
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <HAL_TIM_Base_MspInit+0x90>)
 8001af0:	2220      	movs	r2, #32
 8001af2:	61da      	str	r2, [r3, #28]
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <HAL_TIM_Base_MspInit+0x90>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 8001afa:	480b      	ldr	r0, [pc, #44]	; (8001b28 <HAL_TIM_Base_MspInit+0x90>)
 8001afc:	f000 fc34 	bl	8002368 <HAL_DMA_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8001b06:	f7ff fd1f 	bl	8001548 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a06      	ldr	r2, [pc, #24]	; (8001b28 <HAL_TIM_Base_MspInit+0x90>)
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24
 8001b10:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <HAL_TIM_Base_MspInit+0x90>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40014800 	.word	0x40014800
 8001b24:	40021000 	.word	0x40021000
 8001b28:	2000221c 	.word	0x2000221c
 8001b2c:	40020030 	.word	0x40020030

08001b30 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	; 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b50:	d11d      	bne.n	8001b8e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <HAL_TIM_MspPostInit+0xac>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	4a21      	ldr	r2, [pc, #132]	; (8001bdc <HAL_TIM_MspPostInit+0xac>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b5e:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <HAL_TIM_MspPostInit+0xac>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = B_NP_Pin;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b76:	2303      	movs	r3, #3
 8001b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(B_NP_GPIO_Port, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b88:	f001 fa2e 	bl	8002fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001b8c:	e021      	b.n	8001bd2 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM17)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a13      	ldr	r2, [pc, #76]	; (8001be0 <HAL_TIM_MspPostInit+0xb0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d11c      	bne.n	8001bd2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b98:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <HAL_TIM_MspPostInit+0xac>)
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9c:	4a0f      	ldr	r2, [pc, #60]	; (8001bdc <HAL_TIM_MspPostInit+0xac>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba4:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <HAL_TIM_MspPostInit+0xac>)
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = R_NP_Pin;
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(R_NP_GPIO_Port, &GPIO_InitStruct);
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bce:	f001 fa0b 	bl	8002fe8 <HAL_GPIO_Init>
}
 8001bd2:	bf00      	nop
 8001bd4:	3728      	adds	r7, #40	; 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40014800 	.word	0x40014800

08001be4 <ws2812Init>:
extern TIM_HandleTypeDef htim17;



_Bool ws2812Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  memset(led_buf, 0, sizeof(led_buf));
 8001be8:	f240 6232 	movw	r2, #1586	; 0x632
 8001bec:	2100      	movs	r1, #0
 8001bee:	4806      	ldr	r0, [pc, #24]	; (8001c08 <ws2812Init+0x24>)
 8001bf0:	f007 fa5a 	bl	80090a8 <memset>
  memset(led_buf_rainbow, 0, sizeof(led_buf));
 8001bf4:	f240 6232 	movw	r2, #1586	; 0x632
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4804      	ldr	r0, [pc, #16]	; (8001c0c <ws2812Init+0x28>)
 8001bfc:	f007 fa54 	bl	80090a8 <memset>

  return 0;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000038 	.word	0x20000038
 8001c0c:	2000066c 	.word	0x2000066c

08001c10 <ws2812Begin>:

void ws2812Begin(uint32_t break_led_cnt, uint32_t ranbow_led_cnt)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  ws2812.break_led_cnt = break_led_cnt;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <ws2812Begin+0x5c>)
 8001c20:	801a      	strh	r2, [r3, #0]
  ws2812.ranbow_led_cnt = ranbow_led_cnt;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <ws2812Begin+0x5c>)
 8001c28:	805a      	strh	r2, [r3, #2]


  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)led_buf, (50 + 24 *  ws2812.break_led_cnt) * 1);
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <ws2812Begin+0x5c>)
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	0052      	lsls	r2, r2, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3332      	adds	r3, #50	; 0x32
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	4a0c      	ldr	r2, [pc, #48]	; (8001c70 <ws2812Begin+0x60>)
 8001c3e:	2100      	movs	r1, #0
 8001c40:	480c      	ldr	r0, [pc, #48]	; (8001c74 <ws2812Begin+0x64>)
 8001c42:	f004 f9d1 	bl	8005fe8 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t *)led_buf_rainbow, (50 + 24 *  ws2812.ranbow_led_cnt) * 1);
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <ws2812Begin+0x5c>)
 8001c48:	885b      	ldrh	r3, [r3, #2]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	0052      	lsls	r2, r2, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	3332      	adds	r3, #50	; 0x32
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	4a07      	ldr	r2, [pc, #28]	; (8001c78 <ws2812Begin+0x68>)
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4807      	ldr	r0, [pc, #28]	; (8001c7c <ws2812Begin+0x6c>)
 8001c5e:	f004 f9c3 	bl	8005fe8 <HAL_TIM_PWM_Start_DMA>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	2000227c 	.word	0x2000227c
 8001c70:	20000038 	.word	0x20000038
 8001c74:	200021d0 	.word	0x200021d0
 8001c78:	2000066c 	.word	0x2000066c
 8001c7c:	20002184 	.word	0x20002184

08001c80 <ws2812SetColor>:

void ws2812SetColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b08b      	sub	sp, #44	; 0x2c
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	4608      	mov	r0, r1
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4603      	mov	r3, r0
 8001c90:	70fb      	strb	r3, [r7, #3]
 8001c92:	460b      	mov	r3, r1
 8001c94:	70bb      	strb	r3, [r7, #2]
 8001c96:	4613      	mov	r3, r2
 8001c98:	707b      	strb	r3, [r7, #1]
  uint8_t b_bit[8];

  uint32_t offset;


  for (int i=0; i<8; i++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c9e:	e03e      	b.n	8001d1e <ws2812SetColor+0x9e>
  {
    if (red & (1<<7))
 8001ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	da06      	bge.n	8001cb6 <ws2812SetColor+0x36>
    {
      r_bit[i] = BIT_HIGH;
 8001ca8:	f107 0218 	add.w	r2, r7, #24
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	4413      	add	r3, r2
 8001cb0:	2287      	movs	r2, #135	; 0x87
 8001cb2:	701a      	strb	r2, [r3, #0]
 8001cb4:	e005      	b.n	8001cc2 <ws2812SetColor+0x42>
    }
    else
    {
      r_bit[i] = BIT_LOW;
 8001cb6:	f107 0218 	add.w	r2, r7, #24
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	4413      	add	r3, r2
 8001cbe:	2243      	movs	r2, #67	; 0x43
 8001cc0:	701a      	strb	r2, [r3, #0]
    }
    red <<= 1;
 8001cc2:	78fb      	ldrb	r3, [r7, #3]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	70fb      	strb	r3, [r7, #3]

    if (green & (1<<7))
 8001cc8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	da06      	bge.n	8001cde <ws2812SetColor+0x5e>
    {
      g_bit[i] = BIT_HIGH;
 8001cd0:	f107 0210 	add.w	r2, r7, #16
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	4413      	add	r3, r2
 8001cd8:	2287      	movs	r2, #135	; 0x87
 8001cda:	701a      	strb	r2, [r3, #0]
 8001cdc:	e005      	b.n	8001cea <ws2812SetColor+0x6a>
    }
    else
    {
      g_bit[i] = BIT_LOW;
 8001cde:	f107 0210 	add.w	r2, r7, #16
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	4413      	add	r3, r2
 8001ce6:	2243      	movs	r2, #67	; 0x43
 8001ce8:	701a      	strb	r2, [r3, #0]
    }
    green <<= 1;
 8001cea:	78bb      	ldrb	r3, [r7, #2]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	70bb      	strb	r3, [r7, #2]

    if (blue & (1<<7))
 8001cf0:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	da06      	bge.n	8001d06 <ws2812SetColor+0x86>
    {
      b_bit[i] = BIT_HIGH;
 8001cf8:	f107 0208 	add.w	r2, r7, #8
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	4413      	add	r3, r2
 8001d00:	2287      	movs	r2, #135	; 0x87
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	e005      	b.n	8001d12 <ws2812SetColor+0x92>
    }
    else
    {
      b_bit[i] = BIT_LOW;
 8001d06:	f107 0208 	add.w	r2, r7, #8
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	4413      	add	r3, r2
 8001d0e:	2243      	movs	r2, #67	; 0x43
 8001d10:	701a      	strb	r2, [r3, #0]
    }
    blue <<= 1;
 8001d12:	787b      	ldrb	r3, [r7, #1]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	707b      	strb	r3, [r7, #1]
  for (int i=0; i<8; i++)
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	2b07      	cmp	r3, #7
 8001d22:	ddbd      	ble.n	8001ca0 <ws2812SetColor+0x20>
  }

  offset = 50;
 8001d24:	2332      	movs	r3, #50	; 0x32
 8001d26:	623b      	str	r3, [r7, #32]

  memcpy(&led_buf[offset + index*24 + 8*0], g_bit, 8*1);
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	461a      	mov	r2, r3
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	4413      	add	r3, r2
 8001d38:	4a17      	ldr	r2, [pc, #92]	; (8001d98 <ws2812SetColor+0x118>)
 8001d3a:	4413      	add	r3, r2
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	f107 0310 	add.w	r3, r7, #16
 8001d42:	cb03      	ldmia	r3!, {r0, r1}
 8001d44:	6010      	str	r0, [r2, #0]
 8001d46:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf[offset + index*24 + 8*1], r_bit, 8*1);
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	461a      	mov	r2, r3
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	4413      	add	r3, r2
 8001d58:	3308      	adds	r3, #8
 8001d5a:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <ws2812SetColor+0x118>)
 8001d5c:	4413      	add	r3, r2
 8001d5e:	461a      	mov	r2, r3
 8001d60:	f107 0318 	add.w	r3, r7, #24
 8001d64:	cb03      	ldmia	r3!, {r0, r1}
 8001d66:	6010      	str	r0, [r2, #0]
 8001d68:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf[offset + index*24 + 8*2], b_bit, 8*1);
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	461a      	mov	r2, r3
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	4413      	add	r3, r2
 8001d7a:	3310      	adds	r3, #16
 8001d7c:	4a06      	ldr	r2, [pc, #24]	; (8001d98 <ws2812SetColor+0x118>)
 8001d7e:	4413      	add	r3, r2
 8001d80:	461a      	mov	r2, r3
 8001d82:	f107 0308 	add.w	r3, r7, #8
 8001d86:	cb03      	ldmia	r3!, {r0, r1}
 8001d88:	6010      	str	r0, [r2, #0]
 8001d8a:	6051      	str	r1, [r2, #4]
}
 8001d8c:	bf00      	nop
 8001d8e:	372c      	adds	r7, #44	; 0x2c
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	20000038 	.word	0x20000038

08001d9c <ws2812SetRanbowColor>:

void ws2812SetRanbowColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b08b      	sub	sp, #44	; 0x2c
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	4608      	mov	r0, r1
 8001da6:	4611      	mov	r1, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	4603      	mov	r3, r0
 8001dac:	70fb      	strb	r3, [r7, #3]
 8001dae:	460b      	mov	r3, r1
 8001db0:	70bb      	strb	r3, [r7, #2]
 8001db2:	4613      	mov	r3, r2
 8001db4:	707b      	strb	r3, [r7, #1]
  uint8_t b_bit[8];

  uint32_t offset;


  for (int i=0; i<8; i++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dba:	e03e      	b.n	8001e3a <ws2812SetRanbowColor+0x9e>
  {
    if (red & (1<<7))
 8001dbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	da06      	bge.n	8001dd2 <ws2812SetRanbowColor+0x36>
    {
      r_bit[i] = BIT_HIGH;
 8001dc4:	f107 0218 	add.w	r2, r7, #24
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	4413      	add	r3, r2
 8001dcc:	2287      	movs	r2, #135	; 0x87
 8001dce:	701a      	strb	r2, [r3, #0]
 8001dd0:	e005      	b.n	8001dde <ws2812SetRanbowColor+0x42>
    }
    else
    {
      r_bit[i] = BIT_LOW;
 8001dd2:	f107 0218 	add.w	r2, r7, #24
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	4413      	add	r3, r2
 8001dda:	2243      	movs	r2, #67	; 0x43
 8001ddc:	701a      	strb	r2, [r3, #0]
    }
    red <<= 1;
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	70fb      	strb	r3, [r7, #3]

    if (green & (1<<7))
 8001de4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	da06      	bge.n	8001dfa <ws2812SetRanbowColor+0x5e>
    {
      g_bit[i] = BIT_HIGH;
 8001dec:	f107 0210 	add.w	r2, r7, #16
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	4413      	add	r3, r2
 8001df4:	2287      	movs	r2, #135	; 0x87
 8001df6:	701a      	strb	r2, [r3, #0]
 8001df8:	e005      	b.n	8001e06 <ws2812SetRanbowColor+0x6a>
    }
    else
    {
      g_bit[i] = BIT_LOW;
 8001dfa:	f107 0210 	add.w	r2, r7, #16
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	4413      	add	r3, r2
 8001e02:	2243      	movs	r2, #67	; 0x43
 8001e04:	701a      	strb	r2, [r3, #0]
    }
    green <<= 1;
 8001e06:	78bb      	ldrb	r3, [r7, #2]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	70bb      	strb	r3, [r7, #2]

    if (blue & (1<<7))
 8001e0c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	da06      	bge.n	8001e22 <ws2812SetRanbowColor+0x86>
    {
      b_bit[i] = BIT_HIGH;
 8001e14:	f107 0208 	add.w	r2, r7, #8
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	4413      	add	r3, r2
 8001e1c:	2287      	movs	r2, #135	; 0x87
 8001e1e:	701a      	strb	r2, [r3, #0]
 8001e20:	e005      	b.n	8001e2e <ws2812SetRanbowColor+0x92>
    }
    else
    {
      b_bit[i] = BIT_LOW;
 8001e22:	f107 0208 	add.w	r2, r7, #8
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	4413      	add	r3, r2
 8001e2a:	2243      	movs	r2, #67	; 0x43
 8001e2c:	701a      	strb	r2, [r3, #0]
    }
    blue <<= 1;
 8001e2e:	787b      	ldrb	r3, [r7, #1]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	707b      	strb	r3, [r7, #1]
  for (int i=0; i<8; i++)
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	3301      	adds	r3, #1
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	2b07      	cmp	r3, #7
 8001e3e:	ddbd      	ble.n	8001dbc <ws2812SetRanbowColor+0x20>
  }

  offset = 50;
 8001e40:	2332      	movs	r3, #50	; 0x32
 8001e42:	623b      	str	r3, [r7, #32]

  memcpy(&led_buf_rainbow[offset + index*24 + 8*0], g_bit, 8*1);
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	6a3b      	ldr	r3, [r7, #32]
 8001e52:	4413      	add	r3, r2
 8001e54:	4a17      	ldr	r2, [pc, #92]	; (8001eb4 <ws2812SetRanbowColor+0x118>)
 8001e56:	4413      	add	r3, r2
 8001e58:	461a      	mov	r2, r3
 8001e5a:	f107 0310 	add.w	r3, r7, #16
 8001e5e:	cb03      	ldmia	r3!, {r0, r1}
 8001e60:	6010      	str	r0, [r2, #0]
 8001e62:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf_rainbow[offset + index*24 + 8*1], r_bit, 8*1);
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	4413      	add	r3, r2
 8001e74:	3308      	adds	r3, #8
 8001e76:	4a0f      	ldr	r2, [pc, #60]	; (8001eb4 <ws2812SetRanbowColor+0x118>)
 8001e78:	4413      	add	r3, r2
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	f107 0318 	add.w	r3, r7, #24
 8001e80:	cb03      	ldmia	r3!, {r0, r1}
 8001e82:	6010      	str	r0, [r2, #0]
 8001e84:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf_rainbow[offset + index*24 + 8*2], b_bit, 8*1);
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	461a      	mov	r2, r3
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	4413      	add	r3, r2
 8001e96:	3310      	adds	r3, #16
 8001e98:	4a06      	ldr	r2, [pc, #24]	; (8001eb4 <ws2812SetRanbowColor+0x118>)
 8001e9a:	4413      	add	r3, r2
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	f107 0308 	add.w	r3, r7, #8
 8001ea2:	cb03      	ldmia	r3!, {r0, r1}
 8001ea4:	6010      	str	r0, [r2, #0]
 8001ea6:	6051      	str	r1, [r2, #4]
}
 8001ea8:	bf00      	nop
 8001eaa:	372c      	adds	r7, #44	; 0x2c
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	2000066c 	.word	0x2000066c

08001eb8 <setPixelColor>:
    }
    brightness = newBrightness;
  }
}

void setPixelColor(uint16_t n, uint32_t c) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	80fb      	strh	r3, [r7, #6]
  if(n < ws2812.ranbow_led_cnt) {
 8001ec4:	4b37      	ldr	r3, [pc, #220]	; (8001fa4 <setPixelColor+0xec>)
 8001ec6:	885b      	ldrh	r3, [r3, #2]
 8001ec8:	88fa      	ldrh	r2, [r7, #6]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d266      	bcs.n	8001f9c <setPixelColor+0xe4>
    uint8_t *p,
      r = (uint8_t)(c >> 16),
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	0c1b      	lsrs	r3, r3, #16
 8001ed2:	72fb      	strb	r3, [r7, #11]
      g = (uint8_t)(c >>  8),
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	0a1b      	lsrs	r3, r3, #8
 8001ed8:	72bb      	strb	r3, [r7, #10]
      b = (uint8_t)c;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	727b      	strb	r3, [r7, #9]
    if(brightness) { // See notes in setBrightness()
 8001ede:	4b32      	ldr	r3, [pc, #200]	; (8001fa8 <setPixelColor+0xf0>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d014      	beq.n	8001f10 <setPixelColor+0x58>
      r = (r * brightness) >> 8;
 8001ee6:	7afb      	ldrb	r3, [r7, #11]
 8001ee8:	4a2f      	ldr	r2, [pc, #188]	; (8001fa8 <setPixelColor+0xf0>)
 8001eea:	7812      	ldrb	r2, [r2, #0]
 8001eec:	fb02 f303 	mul.w	r3, r2, r3
 8001ef0:	121b      	asrs	r3, r3, #8
 8001ef2:	72fb      	strb	r3, [r7, #11]
      g = (g * brightness) >> 8;
 8001ef4:	7abb      	ldrb	r3, [r7, #10]
 8001ef6:	4a2c      	ldr	r2, [pc, #176]	; (8001fa8 <setPixelColor+0xf0>)
 8001ef8:	7812      	ldrb	r2, [r2, #0]
 8001efa:	fb02 f303 	mul.w	r3, r2, r3
 8001efe:	121b      	asrs	r3, r3, #8
 8001f00:	72bb      	strb	r3, [r7, #10]
      b = (b * brightness) >> 8;
 8001f02:	7a7b      	ldrb	r3, [r7, #9]
 8001f04:	4a28      	ldr	r2, [pc, #160]	; (8001fa8 <setPixelColor+0xf0>)
 8001f06:	7812      	ldrb	r2, [r2, #0]
 8001f08:	fb02 f303 	mul.w	r3, r2, r3
 8001f0c:	121b      	asrs	r3, r3, #8
 8001f0e:	727b      	strb	r3, [r7, #9]
    }
    if(wOffset == rOffset) {
 8001f10:	4b26      	ldr	r3, [pc, #152]	; (8001fac <setPixelColor+0xf4>)
 8001f12:	781a      	ldrb	r2, [r3, #0]
 8001f14:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <setPixelColor+0xf8>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d108      	bne.n	8001f2e <setPixelColor+0x76>
      p = &pixels[n * 3];
 8001f1c:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <setPixelColor+0xfc>)
 8001f1e:	6819      	ldr	r1, [r3, #0]
 8001f20:	88fa      	ldrh	r2, [r7, #6]
 8001f22:	4613      	mov	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	440b      	add	r3, r1
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	e01b      	b.n	8001f66 <setPixelColor+0xae>
    } else {
      p = &pixels[n * 4];
 8001f2e:	4b21      	ldr	r3, [pc, #132]	; (8001fb4 <setPixelColor+0xfc>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	88fa      	ldrh	r2, [r7, #6]
 8001f34:	0092      	lsls	r2, r2, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
      uint8_t w = (uint8_t)(c >> 24);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	0e1b      	lsrs	r3, r3, #24
 8001f3e:	723b      	strb	r3, [r7, #8]
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <setPixelColor+0xf0>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d007      	beq.n	8001f58 <setPixelColor+0xa0>
 8001f48:	7a3b      	ldrb	r3, [r7, #8]
 8001f4a:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <setPixelColor+0xf0>)
 8001f4c:	7812      	ldrb	r2, [r2, #0]
 8001f4e:	fb02 f303 	mul.w	r3, r2, r3
 8001f52:	121b      	asrs	r3, r3, #8
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	e000      	b.n	8001f5a <setPixelColor+0xa2>
 8001f58:	7a3b      	ldrb	r3, [r7, #8]
 8001f5a:	4a14      	ldr	r2, [pc, #80]	; (8001fac <setPixelColor+0xf4>)
 8001f5c:	7812      	ldrb	r2, [r2, #0]
 8001f5e:	4611      	mov	r1, r2
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	440a      	add	r2, r1
 8001f64:	7013      	strb	r3, [r2, #0]
    }
    p[rOffset] = r;
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <setPixelColor+0xf8>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4413      	add	r3, r2
 8001f70:	7afa      	ldrb	r2, [r7, #11]
 8001f72:	701a      	strb	r2, [r3, #0]
    p[gOffset] = g;
 8001f74:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <setPixelColor+0x100>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	7aba      	ldrb	r2, [r7, #10]
 8001f80:	701a      	strb	r2, [r3, #0]
    p[bOffset] = b;
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <setPixelColor+0x104>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	7a7a      	ldrb	r2, [r7, #9]
 8001f8e:	701a      	strb	r2, [r3, #0]
    ws2812SetRanbowColor(n, r, g , b);
 8001f90:	88f8      	ldrh	r0, [r7, #6]
 8001f92:	7a7b      	ldrb	r3, [r7, #9]
 8001f94:	7aba      	ldrb	r2, [r7, #10]
 8001f96:	7af9      	ldrb	r1, [r7, #11]
 8001f98:	f7ff ff00 	bl	8001d9c <ws2812SetRanbowColor>
  }

}
 8001f9c:	bf00      	nop
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	2000227c 	.word	0x2000227c
 8001fa8:	20002004 	.word	0x20002004
 8001fac:	20001ff8 	.word	0x20001ff8
 8001fb0:	20002006 	.word	0x20002006
 8001fb4:	20001fec 	.word	0x20001fec
 8001fb8:	20001ffc 	.word	0x20001ffc
 8001fbc:	20002005 	.word	0x20002005

08001fc0 <Wheel>:

uint32_t Wheel(uint8_t WheelPos) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
  WheelPos = 255 - WheelPos;
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	71fb      	strb	r3, [r7, #7]
  if(WheelPos < 85) {
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	2b54      	cmp	r3, #84	; 0x54
 8001fd4:	d811      	bhi.n	8001ffa <Wheel+0x3a>
    return Color(255 - WheelPos * 3, 0, WheelPos * 3);
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b2d8      	uxtb	r0, r3
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	0052      	lsls	r2, r2, #1
 8001fea:	4413      	add	r3, r2
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	461a      	mov	r2, r3
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	f000 f832 	bl	800205a <Color>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	e02b      	b.n	8002052 <Wheel+0x92>
  }
  if(WheelPos < 170) {
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	2ba9      	cmp	r3, #169	; 0xa9
 8001ffe:	d814      	bhi.n	800202a <Wheel+0x6a>
  		WheelPos -= 85;
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	3b55      	subs	r3, #85	; 0x55
 8002004:	71fb      	strb	r3, [r7, #7]
    return Color(0, WheelPos * 3, 255 - WheelPos * 3);
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	461a      	mov	r2, r3
 800200a:	0052      	lsls	r2, r2, #1
 800200c:	4413      	add	r3, r2
 800200e:	b2d9      	uxtb	r1, r3
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	461a      	mov	r2, r3
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	b2db      	uxtb	r3, r3
 800201a:	3b01      	subs	r3, #1
 800201c:	b2db      	uxtb	r3, r3
 800201e:	461a      	mov	r2, r3
 8002020:	2000      	movs	r0, #0
 8002022:	f000 f81a 	bl	800205a <Color>
 8002026:	4603      	mov	r3, r0
 8002028:	e013      	b.n	8002052 <Wheel+0x92>
  }
  WheelPos -= 170;
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	3356      	adds	r3, #86	; 0x56
 800202e:	71fb      	strb	r3, [r7, #7]
  return Color(WheelPos * 3, 255 - WheelPos * 3, 0);
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	461a      	mov	r2, r3
 8002034:	0052      	lsls	r2, r2, #1
 8002036:	4413      	add	r3, r2
 8002038:	b2d8      	uxtb	r0, r3
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	461a      	mov	r2, r3
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	3b01      	subs	r3, #1
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2200      	movs	r2, #0
 800204a:	4619      	mov	r1, r3
 800204c:	f000 f805 	bl	800205a <Color>
 8002050:	4603      	mov	r3, r0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <Color>:

uint32_t Color(uint8_t r, uint8_t g, uint8_t b) {
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	71fb      	strb	r3, [r7, #7]
 8002064:	460b      	mov	r3, r1
 8002066:	71bb      	strb	r3, [r7, #6]
 8002068:	4613      	mov	r3, r2
 800206a:	717b      	strb	r3, [r7, #5]
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	041a      	lsls	r2, r3, #16
 8002070:	79bb      	ldrb	r3, [r7, #6]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	431a      	orrs	r2, r3
 8002076:	797b      	ldrb	r3, [r7, #5]
 8002078:	4313      	orrs	r3, r2
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <Reset_Handler>:
 8002088:	480d      	ldr	r0, [pc, #52]	; (80020c0 <LoopForever+0x2>)
 800208a:	4685      	mov	sp, r0
 800208c:	480d      	ldr	r0, [pc, #52]	; (80020c4 <LoopForever+0x6>)
 800208e:	490e      	ldr	r1, [pc, #56]	; (80020c8 <LoopForever+0xa>)
 8002090:	4a0e      	ldr	r2, [pc, #56]	; (80020cc <LoopForever+0xe>)
 8002092:	2300      	movs	r3, #0
 8002094:	e002      	b.n	800209c <LoopCopyDataInit>

08002096 <CopyDataInit>:
 8002096:	58d4      	ldr	r4, [r2, r3]
 8002098:	50c4      	str	r4, [r0, r3]
 800209a:	3304      	adds	r3, #4

0800209c <LoopCopyDataInit>:
 800209c:	18c4      	adds	r4, r0, r3
 800209e:	428c      	cmp	r4, r1
 80020a0:	d3f9      	bcc.n	8002096 <CopyDataInit>
 80020a2:	4a0b      	ldr	r2, [pc, #44]	; (80020d0 <LoopForever+0x12>)
 80020a4:	4c0b      	ldr	r4, [pc, #44]	; (80020d4 <LoopForever+0x16>)
 80020a6:	2300      	movs	r3, #0
 80020a8:	e001      	b.n	80020ae <LoopFillZerobss>

080020aa <FillZerobss>:
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	3204      	adds	r2, #4

080020ae <LoopFillZerobss>:
 80020ae:	42a2      	cmp	r2, r4
 80020b0:	d3fb      	bcc.n	80020aa <FillZerobss>
 80020b2:	f7ff fbc1 	bl	8001838 <SystemInit>
 80020b6:	f006 ffd3 	bl	8009060 <__libc_init_array>
 80020ba:	f7ff f939 	bl	8001330 <main>

080020be <LoopForever>:
 80020be:	e7fe      	b.n	80020be <LoopForever>
 80020c0:	20008000 	.word	0x20008000
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20000010 	.word	0x20000010
 80020cc:	080093a4 	.word	0x080093a4
 80020d0:	20000010 	.word	0x20000010
 80020d4:	20002284 	.word	0x20002284

080020d8 <ADC1_2_IRQHandler>:
 80020d8:	e7fe      	b.n	80020d8 <ADC1_2_IRQHandler>

080020da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e4:	2003      	movs	r0, #3
 80020e6:	f000 f8dd 	bl	80022a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020ea:	2000      	movs	r0, #0
 80020ec:	f7ff fb16 	bl	800171c <HAL_InitTick>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	71fb      	strb	r3, [r7, #7]
 80020fa:	e001      	b.n	8002100 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020fc:	f7ff fae4 	bl	80016c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002100:	79fb      	ldrb	r3, [r7, #7]

}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <HAL_IncTick+0x1c>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <HAL_IncTick+0x20>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4413      	add	r3, r2
 800211a:	4a03      	ldr	r2, [pc, #12]	; (8002128 <HAL_IncTick+0x1c>)
 800211c:	6013      	str	r3, [r2, #0]
}
 800211e:	bf00      	nop
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	20002280 	.word	0x20002280
 800212c:	20000008 	.word	0x20000008

08002130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return uwTick;
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <HAL_GetTick+0x14>)
 8002136:	681b      	ldr	r3, [r3, #0]
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20002280 	.word	0x20002280

08002148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <__NVIC_SetPriorityGrouping+0x44>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002164:	4013      	ands	r3, r2
 8002166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002170:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800217a:	4a04      	ldr	r2, [pc, #16]	; (800218c <__NVIC_SetPriorityGrouping+0x44>)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	60d3      	str	r3, [r2, #12]
}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002194:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	f003 0307 	and.w	r3, r3, #7
}
 800219e:	4618      	mov	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	db0b      	blt.n	80021d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	f003 021f 	and.w	r2, r3, #31
 80021c4:	4907      	ldr	r1, [pc, #28]	; (80021e4 <__NVIC_EnableIRQ+0x38>)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	2001      	movs	r0, #1
 80021ce:	fa00 f202 	lsl.w	r2, r0, r2
 80021d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000e100 	.word	0xe000e100

080021e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	6039      	str	r1, [r7, #0]
 80021f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	db0a      	blt.n	8002212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	490c      	ldr	r1, [pc, #48]	; (8002234 <__NVIC_SetPriority+0x4c>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	0112      	lsls	r2, r2, #4
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	440b      	add	r3, r1
 800220c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002210:	e00a      	b.n	8002228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	b2da      	uxtb	r2, r3
 8002216:	4908      	ldr	r1, [pc, #32]	; (8002238 <__NVIC_SetPriority+0x50>)
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	3b04      	subs	r3, #4
 8002220:	0112      	lsls	r2, r2, #4
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	440b      	add	r3, r1
 8002226:	761a      	strb	r2, [r3, #24]
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000e100 	.word	0xe000e100
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800223c:	b480      	push	{r7}
 800223e:	b089      	sub	sp, #36	; 0x24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f1c3 0307 	rsb	r3, r3, #7
 8002256:	2b04      	cmp	r3, #4
 8002258:	bf28      	it	cs
 800225a:	2304      	movcs	r3, #4
 800225c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3304      	adds	r3, #4
 8002262:	2b06      	cmp	r3, #6
 8002264:	d902      	bls.n	800226c <NVIC_EncodePriority+0x30>
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3b03      	subs	r3, #3
 800226a:	e000      	b.n	800226e <NVIC_EncodePriority+0x32>
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	f04f 32ff 	mov.w	r2, #4294967295
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43da      	mvns	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	401a      	ands	r2, r3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002284:	f04f 31ff 	mov.w	r1, #4294967295
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	fa01 f303 	lsl.w	r3, r1, r3
 800228e:	43d9      	mvns	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	4313      	orrs	r3, r2
         );
}
 8002296:	4618      	mov	r0, r3
 8002298:	3724      	adds	r7, #36	; 0x24
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b07      	cmp	r3, #7
 80022b0:	d00f      	beq.n	80022d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b06      	cmp	r3, #6
 80022b6:	d00c      	beq.n	80022d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b05      	cmp	r3, #5
 80022bc:	d009      	beq.n	80022d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d006      	beq.n	80022d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	d003      	beq.n	80022d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80022ca:	21a7      	movs	r1, #167	; 0xa7
 80022cc:	4804      	ldr	r0, [pc, #16]	; (80022e0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80022ce:	f7ff f942 	bl	8001556 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ff38 	bl	8002148 <__NVIC_SetPriorityGrouping>
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	08009134 	.word	0x08009134

080022e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b0f      	cmp	r3, #15
 80022f6:	d903      	bls.n	8002300 <HAL_NVIC_SetPriority+0x1c>
 80022f8:	21bf      	movs	r1, #191	; 0xbf
 80022fa:	480e      	ldr	r0, [pc, #56]	; (8002334 <HAL_NVIC_SetPriority+0x50>)
 80022fc:	f7ff f92b 	bl	8001556 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b0f      	cmp	r3, #15
 8002304:	d903      	bls.n	800230e <HAL_NVIC_SetPriority+0x2a>
 8002306:	21c0      	movs	r1, #192	; 0xc0
 8002308:	480a      	ldr	r0, [pc, #40]	; (8002334 <HAL_NVIC_SetPriority+0x50>)
 800230a:	f7ff f924 	bl	8001556 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 800230e:	f7ff ff3f 	bl	8002190 <__NVIC_GetPriorityGrouping>
 8002312:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	68b9      	ldr	r1, [r7, #8]
 8002318:	6978      	ldr	r0, [r7, #20]
 800231a:	f7ff ff8f 	bl	800223c <NVIC_EncodePriority>
 800231e:	4602      	mov	r2, r0
 8002320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002324:	4611      	mov	r1, r2
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff ff5e 	bl	80021e8 <__NVIC_SetPriority>
}
 800232c:	bf00      	nop
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	08009134 	.word	0x08009134

08002338 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	2b00      	cmp	r3, #0
 8002348:	da03      	bge.n	8002352 <HAL_NVIC_EnableIRQ+0x1a>
 800234a:	21d3      	movs	r1, #211	; 0xd3
 800234c:	4805      	ldr	r0, [pc, #20]	; (8002364 <HAL_NVIC_EnableIRQ+0x2c>)
 800234e:	f7ff f902 	bl	8001556 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff ff28 	bl	80021ac <__NVIC_EnableIRQ>
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	08009134 	.word	0x08009134

08002368 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e16b      	b.n	8002652 <HAL_DMA_Init+0x2ea>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a97      	ldr	r2, [pc, #604]	; (80025dc <HAL_DMA_Init+0x274>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d03a      	beq.n	80023fa <HAL_DMA_Init+0x92>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a95      	ldr	r2, [pc, #596]	; (80025e0 <HAL_DMA_Init+0x278>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d035      	beq.n	80023fa <HAL_DMA_Init+0x92>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a94      	ldr	r2, [pc, #592]	; (80025e4 <HAL_DMA_Init+0x27c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d030      	beq.n	80023fa <HAL_DMA_Init+0x92>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a92      	ldr	r2, [pc, #584]	; (80025e8 <HAL_DMA_Init+0x280>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d02b      	beq.n	80023fa <HAL_DMA_Init+0x92>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a91      	ldr	r2, [pc, #580]	; (80025ec <HAL_DMA_Init+0x284>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d026      	beq.n	80023fa <HAL_DMA_Init+0x92>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a8f      	ldr	r2, [pc, #572]	; (80025f0 <HAL_DMA_Init+0x288>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d021      	beq.n	80023fa <HAL_DMA_Init+0x92>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a8e      	ldr	r2, [pc, #568]	; (80025f4 <HAL_DMA_Init+0x28c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d01c      	beq.n	80023fa <HAL_DMA_Init+0x92>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a8c      	ldr	r2, [pc, #560]	; (80025f8 <HAL_DMA_Init+0x290>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d017      	beq.n	80023fa <HAL_DMA_Init+0x92>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a8b      	ldr	r2, [pc, #556]	; (80025fc <HAL_DMA_Init+0x294>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d012      	beq.n	80023fa <HAL_DMA_Init+0x92>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a89      	ldr	r2, [pc, #548]	; (8002600 <HAL_DMA_Init+0x298>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00d      	beq.n	80023fa <HAL_DMA_Init+0x92>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a88      	ldr	r2, [pc, #544]	; (8002604 <HAL_DMA_Init+0x29c>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d008      	beq.n	80023fa <HAL_DMA_Init+0x92>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a86      	ldr	r2, [pc, #536]	; (8002608 <HAL_DMA_Init+0x2a0>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d003      	beq.n	80023fa <HAL_DMA_Init+0x92>
 80023f2:	21a3      	movs	r1, #163	; 0xa3
 80023f4:	4885      	ldr	r0, [pc, #532]	; (800260c <HAL_DMA_Init+0x2a4>)
 80023f6:	f7ff f8ae 	bl	8001556 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00c      	beq.n	800241c <HAL_DMA_Init+0xb4>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b10      	cmp	r3, #16
 8002408:	d008      	beq.n	800241c <HAL_DMA_Init+0xb4>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002412:	d003      	beq.n	800241c <HAL_DMA_Init+0xb4>
 8002414:	21a4      	movs	r1, #164	; 0xa4
 8002416:	487d      	ldr	r0, [pc, #500]	; (800260c <HAL_DMA_Init+0x2a4>)
 8002418:	f7ff f89d 	bl	8001556 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2b40      	cmp	r3, #64	; 0x40
 8002422:	d007      	beq.n	8002434 <HAL_DMA_Init+0xcc>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_DMA_Init+0xcc>
 800242c:	21a5      	movs	r1, #165	; 0xa5
 800242e:	4877      	ldr	r0, [pc, #476]	; (800260c <HAL_DMA_Init+0x2a4>)
 8002430:	f7ff f891 	bl	8001556 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	2b80      	cmp	r3, #128	; 0x80
 800243a:	d007      	beq.n	800244c <HAL_DMA_Init+0xe4>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_DMA_Init+0xe4>
 8002444:	21a6      	movs	r1, #166	; 0xa6
 8002446:	4871      	ldr	r0, [pc, #452]	; (800260c <HAL_DMA_Init+0x2a4>)
 8002448:	f7ff f885 	bl	8001556 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00d      	beq.n	8002470 <HAL_DMA_Init+0x108>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800245c:	d008      	beq.n	8002470 <HAL_DMA_Init+0x108>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002466:	d003      	beq.n	8002470 <HAL_DMA_Init+0x108>
 8002468:	21a7      	movs	r1, #167	; 0xa7
 800246a:	4868      	ldr	r0, [pc, #416]	; (800260c <HAL_DMA_Init+0x2a4>)
 800246c:	f7ff f873 	bl	8001556 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00d      	beq.n	8002494 <HAL_DMA_Init+0x12c>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002480:	d008      	beq.n	8002494 <HAL_DMA_Init+0x12c>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800248a:	d003      	beq.n	8002494 <HAL_DMA_Init+0x12c>
 800248c:	21a8      	movs	r1, #168	; 0xa8
 800248e:	485f      	ldr	r0, [pc, #380]	; (800260c <HAL_DMA_Init+0x2a4>)
 8002490:	f7ff f861 	bl	8001556 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d007      	beq.n	80024ac <HAL_DMA_Init+0x144>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	d003      	beq.n	80024ac <HAL_DMA_Init+0x144>
 80024a4:	21a9      	movs	r1, #169	; 0xa9
 80024a6:	4859      	ldr	r0, [pc, #356]	; (800260c <HAL_DMA_Init+0x2a4>)
 80024a8:	f7ff f855 	bl	8001556 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d012      	beq.n	80024da <HAL_DMA_Init+0x172>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024bc:	d00d      	beq.n	80024da <HAL_DMA_Init+0x172>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024c6:	d008      	beq.n	80024da <HAL_DMA_Init+0x172>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80024d0:	d003      	beq.n	80024da <HAL_DMA_Init+0x172>
 80024d2:	21aa      	movs	r1, #170	; 0xaa
 80024d4:	484d      	ldr	r0, [pc, #308]	; (800260c <HAL_DMA_Init+0x2a4>)
 80024d6:	f7ff f83e 	bl	8001556 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b73      	cmp	r3, #115	; 0x73
 80024e0:	d903      	bls.n	80024ea <HAL_DMA_Init+0x182>
 80024e2:	21ac      	movs	r1, #172	; 0xac
 80024e4:	4849      	ldr	r0, [pc, #292]	; (800260c <HAL_DMA_Init+0x2a4>)
 80024e6:	f7ff f836 	bl	8001556 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	4b47      	ldr	r3, [pc, #284]	; (8002610 <HAL_DMA_Init+0x2a8>)
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d80f      	bhi.n	8002516 <HAL_DMA_Init+0x1ae>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	4b45      	ldr	r3, [pc, #276]	; (8002614 <HAL_DMA_Init+0x2ac>)
 80024fe:	4413      	add	r3, r2
 8002500:	4a45      	ldr	r2, [pc, #276]	; (8002618 <HAL_DMA_Init+0x2b0>)
 8002502:	fba2 2303 	umull	r2, r3, r2, r3
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	009a      	lsls	r2, r3, #2
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a42      	ldr	r2, [pc, #264]	; (800261c <HAL_DMA_Init+0x2b4>)
 8002512:	641a      	str	r2, [r3, #64]	; 0x40
 8002514:	e00e      	b.n	8002534 <HAL_DMA_Init+0x1cc>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	4b40      	ldr	r3, [pc, #256]	; (8002620 <HAL_DMA_Init+0x2b8>)
 800251e:	4413      	add	r3, r2
 8002520:	4a3d      	ldr	r2, [pc, #244]	; (8002618 <HAL_DMA_Init+0x2b0>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	091b      	lsrs	r3, r3, #4
 8002528:	009a      	lsls	r2, r3, #2
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a3c      	ldr	r2, [pc, #240]	; (8002624 <HAL_DMA_Init+0x2bc>)
 8002532:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800254a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002558:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002564:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002570:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4313      	orrs	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f9e0 	bl	800294c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002594:	d102      	bne.n	800259c <HAL_DMA_Init+0x234>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80025b0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d036      	beq.n	8002628 <HAL_DMA_Init+0x2c0>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d832      	bhi.n	8002628 <HAL_DMA_Init+0x2c0>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fa00 	bl	80029c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	e02e      	b.n	800263a <HAL_DMA_Init+0x2d2>
 80025dc:	40020008 	.word	0x40020008
 80025e0:	4002001c 	.word	0x4002001c
 80025e4:	40020030 	.word	0x40020030
 80025e8:	40020044 	.word	0x40020044
 80025ec:	40020058 	.word	0x40020058
 80025f0:	4002006c 	.word	0x4002006c
 80025f4:	40020408 	.word	0x40020408
 80025f8:	4002041c 	.word	0x4002041c
 80025fc:	40020430 	.word	0x40020430
 8002600:	40020444 	.word	0x40020444
 8002604:	40020458 	.word	0x40020458
 8002608:	4002046c 	.word	0x4002046c
 800260c:	08009170 	.word	0x08009170
 8002610:	40020407 	.word	0x40020407
 8002614:	bffdfff8 	.word	0xbffdfff8
 8002618:	cccccccd 	.word	0xcccccccd
 800261c:	40020000 	.word	0x40020000
 8002620:	bffdfbf8 	.word	0xbffdfbf8
 8002624:	40020400 	.word	0x40020400
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop

0800265c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_DMA_Start_IT+0x20>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800267a:	d304      	bcc.n	8002686 <HAL_DMA_Start_IT+0x2a>
 800267c:	f240 11ab 	movw	r1, #427	; 0x1ab
 8002680:	483a      	ldr	r0, [pc, #232]	; (800276c <HAL_DMA_Start_IT+0x110>)
 8002682:	f7fe ff68 	bl	8001556 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_DMA_Start_IT+0x38>
 8002690:	2302      	movs	r3, #2
 8002692:	e066      	b.n	8002762 <HAL_DMA_Start_IT+0x106>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d155      	bne.n	8002754 <HAL_DMA_Start_IT+0xf8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0201 	bic.w	r2, r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f8fe 	bl	80028ce <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d008      	beq.n	80026ec <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 020e 	orr.w	r2, r2, #14
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	e00f      	b.n	800270c <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0204 	bic.w	r2, r2, #4
 80026fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 020a 	orr.w	r2, r2, #10
 800270a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d007      	beq.n	800272a <HAL_DMA_Start_IT+0xce>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002724:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002728:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272e:	2b00      	cmp	r3, #0
 8002730:	d007      	beq.n	8002742 <HAL_DMA_Start_IT+0xe6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002740:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0201 	orr.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	e005      	b.n	8002760 <HAL_DMA_Start_IT+0x104>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800275c:	2302      	movs	r3, #2
 800275e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002760:	7dfb      	ldrb	r3, [r7, #23]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	08009170 	.word	0x08009170

08002770 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278c:	f003 031f 	and.w	r3, r3, #31
 8002790:	2204      	movs	r2, #4
 8002792:	409a      	lsls	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d026      	beq.n	80027ea <HAL_DMA_IRQHandler+0x7a>
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d021      	beq.n	80027ea <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d107      	bne.n	80027c4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0204 	bic.w	r2, r2, #4
 80027c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	f003 021f 	and.w	r2, r3, #31
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	2104      	movs	r1, #4
 80027d2:	fa01 f202 	lsl.w	r2, r1, r2
 80027d6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d071      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80027e8:	e06c      	b.n	80028c4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	2202      	movs	r2, #2
 80027f4:	409a      	lsls	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d02e      	beq.n	800285c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d029      	beq.n	800285c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10b      	bne.n	800282e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 020a 	bic.w	r2, r2, #10
 8002824:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	f003 021f 	and.w	r2, r3, #31
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	2102      	movs	r1, #2
 800283c:	fa01 f202 	lsl.w	r2, r1, r2
 8002840:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	2b00      	cmp	r3, #0
 8002850:	d038      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800285a:	e033      	b.n	80028c4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	2208      	movs	r2, #8
 8002866:	409a      	lsls	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d02a      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d025      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 020e 	bic.w	r2, r2, #14
 8002888:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	f003 021f 	and.w	r2, r3, #31
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	2101      	movs	r1, #1
 8002898:	fa01 f202 	lsl.w	r2, r1, r2
 800289c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d004      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028c4:	bf00      	nop
 80028c6:	bf00      	nop
}
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b085      	sub	sp, #20
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80028e4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d004      	beq.n	80028f8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80028f6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fc:	f003 021f 	and.w	r2, r3, #31
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	2101      	movs	r1, #1
 8002906:	fa01 f202 	lsl.w	r2, r1, r2
 800290a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b10      	cmp	r3, #16
 800291a:	d108      	bne.n	800292e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800292c:	e007      	b.n	800293e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	60da      	str	r2, [r3, #12]
}
 800293e:	bf00      	nop
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	461a      	mov	r2, r3
 800295a:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800295c:	429a      	cmp	r2, r3
 800295e:	d802      	bhi.n	8002966 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002960:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	e001      	b.n	800296a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002968:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	3b08      	subs	r3, #8
 8002976:	4a12      	ldr	r2, [pc, #72]	; (80029c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002978:	fba2 2303 	umull	r2, r3, r2, r3
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002984:	089b      	lsrs	r3, r3, #2
 8002986:	009a      	lsls	r2, r3, #2
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4413      	add	r3, r2
 800298c:	461a      	mov	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a0b      	ldr	r2, [pc, #44]	; (80029c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002996:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	2201      	movs	r2, #1
 80029a0:	409a      	lsls	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80029a6:	bf00      	nop
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40020407 	.word	0x40020407
 80029b8:	40020800 	.word	0x40020800
 80029bc:	40020820 	.word	0x40020820
 80029c0:	cccccccd 	.word	0xcccccccd
 80029c4:	40020880 	.word	0x40020880

080029c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	461a      	mov	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a08      	ldr	r2, [pc, #32]	; (8002a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80029ea:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	f003 031f 	and.w	r3, r3, #31
 80029f4:	2201      	movs	r2, #1
 80029f6:	409a      	lsls	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80029fc:	bf00      	nop
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	1000823f 	.word	0x1000823f
 8002a0c:	40020940 	.word	0x40020940

08002a10 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e283      	b.n	8002f2a <HAL_FDCAN_Init+0x51a>
  }

  /* Check function parameters */
  assert_param(IS_FDCAN_ALL_INSTANCE(hfdcan->Instance));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4aa1      	ldr	r2, [pc, #644]	; (8002cac <HAL_FDCAN_Init+0x29c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d004      	beq.n	8002a36 <HAL_FDCAN_Init+0x26>
 8002a2c:	f44f 7193 	mov.w	r1, #294	; 0x126
 8002a30:	489f      	ldr	r0, [pc, #636]	; (8002cb0 <HAL_FDCAN_Init+0x2a0>)
 8002a32:	f7fe fd90 	bl	8001556 <assert_failed>
  if (hfdcan->Instance == FDCAN1)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a9c      	ldr	r2, [pc, #624]	; (8002cac <HAL_FDCAN_Init+0x29c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d144      	bne.n	8002aca <HAL_FDCAN_Init+0xba>
  {
    assert_param(IS_FDCAN_CKDIV(hfdcan->Init.ClockDivider));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d040      	beq.n	8002aca <HAL_FDCAN_Init+0xba>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d03c      	beq.n	8002aca <HAL_FDCAN_Init+0xba>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d038      	beq.n	8002aca <HAL_FDCAN_Init+0xba>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d034      	beq.n	8002aca <HAL_FDCAN_Init+0xba>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d030      	beq.n	8002aca <HAL_FDCAN_Init+0xba>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b05      	cmp	r3, #5
 8002a6e:	d02c      	beq.n	8002aca <HAL_FDCAN_Init+0xba>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b06      	cmp	r3, #6
 8002a76:	d028      	beq.n	8002aca <HAL_FDCAN_Init+0xba>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b07      	cmp	r3, #7
 8002a7e:	d024      	beq.n	8002aca <HAL_FDCAN_Init+0xba>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d020      	beq.n	8002aca <HAL_FDCAN_Init+0xba>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b09      	cmp	r3, #9
 8002a8e:	d01c      	beq.n	8002aca <HAL_FDCAN_Init+0xba>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b0a      	cmp	r3, #10
 8002a96:	d018      	beq.n	8002aca <HAL_FDCAN_Init+0xba>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b0b      	cmp	r3, #11
 8002a9e:	d014      	beq.n	8002aca <HAL_FDCAN_Init+0xba>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b0c      	cmp	r3, #12
 8002aa6:	d010      	beq.n	8002aca <HAL_FDCAN_Init+0xba>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b0d      	cmp	r3, #13
 8002aae:	d00c      	beq.n	8002aca <HAL_FDCAN_Init+0xba>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b0e      	cmp	r3, #14
 8002ab6:	d008      	beq.n	8002aca <HAL_FDCAN_Init+0xba>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b0f      	cmp	r3, #15
 8002abe:	d004      	beq.n	8002aca <HAL_FDCAN_Init+0xba>
 8002ac0:	f240 1129 	movw	r1, #297	; 0x129
 8002ac4:	487a      	ldr	r0, [pc, #488]	; (8002cb0 <HAL_FDCAN_Init+0x2a0>)
 8002ac6:	f7fe fd46 	bl	8001556 <assert_failed>
  }
  assert_param(IS_FDCAN_FRAME_FORMAT(hfdcan->Init.FrameFormat));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00e      	beq.n	8002af0 <HAL_FDCAN_Init+0xe0>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ada:	d009      	beq.n	8002af0 <HAL_FDCAN_Init+0xe0>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ae4:	d004      	beq.n	8002af0 <HAL_FDCAN_Init+0xe0>
 8002ae6:	f240 112b 	movw	r1, #299	; 0x12b
 8002aea:	4871      	ldr	r0, [pc, #452]	; (8002cb0 <HAL_FDCAN_Init+0x2a0>)
 8002aec:	f7fe fd33 	bl	8001556 <assert_failed>
  assert_param(IS_FDCAN_MODE(hfdcan->Init.Mode));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d014      	beq.n	8002b22 <HAL_FDCAN_Init+0x112>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d010      	beq.n	8002b22 <HAL_FDCAN_Init+0x112>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d00c      	beq.n	8002b22 <HAL_FDCAN_Init+0x112>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d008      	beq.n	8002b22 <HAL_FDCAN_Init+0x112>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d004      	beq.n	8002b22 <HAL_FDCAN_Init+0x112>
 8002b18:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002b1c:	4864      	ldr	r0, [pc, #400]	; (8002cb0 <HAL_FDCAN_Init+0x2a0>)
 8002b1e:	f7fe fd1a 	bl	8001556 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.AutoRetransmission));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	7c1b      	ldrb	r3, [r3, #16]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d008      	beq.n	8002b3c <HAL_FDCAN_Init+0x12c>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	7c1b      	ldrb	r3, [r3, #16]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d004      	beq.n	8002b3c <HAL_FDCAN_Init+0x12c>
 8002b32:	f240 112d 	movw	r1, #301	; 0x12d
 8002b36:	485e      	ldr	r0, [pc, #376]	; (8002cb0 <HAL_FDCAN_Init+0x2a0>)
 8002b38:	f7fe fd0d 	bl	8001556 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.TransmitPause));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	7c5b      	ldrb	r3, [r3, #17]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_FDCAN_Init+0x146>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	7c5b      	ldrb	r3, [r3, #17]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d004      	beq.n	8002b56 <HAL_FDCAN_Init+0x146>
 8002b4c:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8002b50:	4857      	ldr	r0, [pc, #348]	; (8002cb0 <HAL_FDCAN_Init+0x2a0>)
 8002b52:	f7fe fd00 	bl	8001556 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.ProtocolException));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	7c9b      	ldrb	r3, [r3, #18]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d008      	beq.n	8002b70 <HAL_FDCAN_Init+0x160>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	7c9b      	ldrb	r3, [r3, #18]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d004      	beq.n	8002b70 <HAL_FDCAN_Init+0x160>
 8002b66:	f240 112f 	movw	r1, #303	; 0x12f
 8002b6a:	4851      	ldr	r0, [pc, #324]	; (8002cb0 <HAL_FDCAN_Init+0x2a0>)
 8002b6c:	f7fe fcf3 	bl	8001556 <assert_failed>
  assert_param(IS_FDCAN_NOMINAL_PRESCALER(hfdcan->Init.NominalPrescaler));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d004      	beq.n	8002b82 <HAL_FDCAN_Init+0x172>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b80:	d904      	bls.n	8002b8c <HAL_FDCAN_Init+0x17c>
 8002b82:	f44f 7198 	mov.w	r1, #304	; 0x130
 8002b86:	484a      	ldr	r0, [pc, #296]	; (8002cb0 <HAL_FDCAN_Init+0x2a0>)
 8002b88:	f7fe fce5 	bl	8001556 <assert_failed>
  assert_param(IS_FDCAN_NOMINAL_SJW(hfdcan->Init.NominalSyncJumpWidth));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_FDCAN_Init+0x18c>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2b80      	cmp	r3, #128	; 0x80
 8002b9a:	d904      	bls.n	8002ba6 <HAL_FDCAN_Init+0x196>
 8002b9c:	f240 1131 	movw	r1, #305	; 0x131
 8002ba0:	4843      	ldr	r0, [pc, #268]	; (8002cb0 <HAL_FDCAN_Init+0x2a0>)
 8002ba2:	f7fe fcd8 	bl	8001556 <assert_failed>
  assert_param(IS_FDCAN_NOMINAL_TSEG1(hfdcan->Init.NominalTimeSeg1));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d004      	beq.n	8002bb8 <HAL_FDCAN_Init+0x1a8>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb6:	d904      	bls.n	8002bc2 <HAL_FDCAN_Init+0x1b2>
 8002bb8:	f44f 7199 	mov.w	r1, #306	; 0x132
 8002bbc:	483c      	ldr	r0, [pc, #240]	; (8002cb0 <HAL_FDCAN_Init+0x2a0>)
 8002bbe:	f7fe fcca 	bl	8001556 <assert_failed>
  assert_param(IS_FDCAN_NOMINAL_TSEG2(hfdcan->Init.NominalTimeSeg2));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_FDCAN_Init+0x1c2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	2b80      	cmp	r3, #128	; 0x80
 8002bd0:	d904      	bls.n	8002bdc <HAL_FDCAN_Init+0x1cc>
 8002bd2:	f240 1133 	movw	r1, #307	; 0x133
 8002bd6:	4836      	ldr	r0, [pc, #216]	; (8002cb0 <HAL_FDCAN_Init+0x2a0>)
 8002bd8:	f7fe fcbd 	bl	8001556 <assert_failed>
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002be4:	d133      	bne.n	8002c4e <HAL_FDCAN_Init+0x23e>
  {
    assert_param(IS_FDCAN_DATA_PRESCALER(hfdcan->Init.DataPrescaler));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_FDCAN_Init+0x1e6>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	d904      	bls.n	8002c00 <HAL_FDCAN_Init+0x1f0>
 8002bf6:	f44f 719b 	mov.w	r1, #310	; 0x136
 8002bfa:	482d      	ldr	r0, [pc, #180]	; (8002cb0 <HAL_FDCAN_Init+0x2a0>)
 8002bfc:	f7fe fcab 	bl	8001556 <assert_failed>
    assert_param(IS_FDCAN_DATA_SJW(hfdcan->Init.DataSyncJumpWidth));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_FDCAN_Init+0x200>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	2b10      	cmp	r3, #16
 8002c0e:	d904      	bls.n	8002c1a <HAL_FDCAN_Init+0x20a>
 8002c10:	f240 1137 	movw	r1, #311	; 0x137
 8002c14:	4826      	ldr	r0, [pc, #152]	; (8002cb0 <HAL_FDCAN_Init+0x2a0>)
 8002c16:	f7fe fc9e 	bl	8001556 <assert_failed>
    assert_param(IS_FDCAN_DATA_TSEG1(hfdcan->Init.DataTimeSeg1));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_FDCAN_Init+0x21a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	d904      	bls.n	8002c34 <HAL_FDCAN_Init+0x224>
 8002c2a:	f44f 719c 	mov.w	r1, #312	; 0x138
 8002c2e:	4820      	ldr	r0, [pc, #128]	; (8002cb0 <HAL_FDCAN_Init+0x2a0>)
 8002c30:	f7fe fc91 	bl	8001556 <assert_failed>
    assert_param(IS_FDCAN_DATA_TSEG2(hfdcan->Init.DataTimeSeg2));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_FDCAN_Init+0x234>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	2b10      	cmp	r3, #16
 8002c42:	d904      	bls.n	8002c4e <HAL_FDCAN_Init+0x23e>
 8002c44:	f240 1139 	movw	r1, #313	; 0x139
 8002c48:	4819      	ldr	r0, [pc, #100]	; (8002cb0 <HAL_FDCAN_Init+0x2a0>)
 8002c4a:	f7fe fc84 	bl	8001556 <assert_failed>
  }
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.StdFiltersNbr, SRAMCAN_FLS_NBR));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c52:	2b1c      	cmp	r3, #28
 8002c54:	d904      	bls.n	8002c60 <HAL_FDCAN_Init+0x250>
 8002c56:	f240 113b 	movw	r1, #315	; 0x13b
 8002c5a:	4815      	ldr	r0, [pc, #84]	; (8002cb0 <HAL_FDCAN_Init+0x2a0>)
 8002c5c:	f7fe fc7b 	bl	8001556 <assert_failed>
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.ExtFiltersNbr, SRAMCAN_FLE_NBR));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d904      	bls.n	8002c72 <HAL_FDCAN_Init+0x262>
 8002c68:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8002c6c:	4810      	ldr	r0, [pc, #64]	; (8002cb0 <HAL_FDCAN_Init+0x2a0>)
 8002c6e:	f7fe fc72 	bl	8001556 <assert_failed>
  assert_param(IS_FDCAN_TX_FIFO_QUEUE_MODE(hfdcan->Init.TxFifoQueueMode));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d009      	beq.n	8002c8e <HAL_FDCAN_Init+0x27e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c82:	d004      	beq.n	8002c8e <HAL_FDCAN_Init+0x27e>
 8002c84:	f240 113d 	movw	r1, #317	; 0x13d
 8002c88:	4809      	ldr	r0, [pc, #36]	; (8002cb0 <HAL_FDCAN_Init+0x2a0>)
 8002c8a:	f7fe fc64 	bl	8001556 <assert_failed>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10c      	bne.n	8002cb4 <HAL_FDCAN_Init+0x2a4>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fe fa6e 	bl	8001184 <HAL_FDCAN_MspInit>
 8002ca8:	e004      	b.n	8002cb4 <HAL_FDCAN_Init+0x2a4>
 8002caa:	bf00      	nop
 8002cac:	40006400 	.word	0x40006400
 8002cb0:	080091a8 	.word	0x080091a8
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699a      	ldr	r2, [r3, #24]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0210 	bic.w	r2, r2, #16
 8002cc2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cc4:	f7ff fa34 	bl	8002130 <HAL_GetTick>
 8002cc8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002cca:	e012      	b.n	8002cf2 <HAL_FDCAN_Init+0x2e2>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002ccc:	f7ff fa30 	bl	8002130 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b0a      	cmp	r3, #10
 8002cd8:	d90b      	bls.n	8002cf2 <HAL_FDCAN_Init+0x2e2>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cde:	f043 0201 	orr.w	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2203      	movs	r2, #3
 8002cea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e11b      	b.n	8002f2a <HAL_FDCAN_Init+0x51a>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d0e5      	beq.n	8002ccc <HAL_FDCAN_Init+0x2bc>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0201 	orr.w	r2, r2, #1
 8002d0e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d10:	f7ff fa0e 	bl	8002130 <HAL_GetTick>
 8002d14:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002d16:	e012      	b.n	8002d3e <HAL_FDCAN_Init+0x32e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002d18:	f7ff fa0a 	bl	8002130 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b0a      	cmp	r3, #10
 8002d24:	d90b      	bls.n	8002d3e <HAL_FDCAN_Init+0x32e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2a:	f043 0201 	orr.w	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2203      	movs	r2, #3
 8002d36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e0f5      	b.n	8002f2a <HAL_FDCAN_Init+0x51a>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0e5      	beq.n	8002d18 <HAL_FDCAN_Init+0x308>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0202 	orr.w	r2, r2, #2
 8002d5a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a74      	ldr	r2, [pc, #464]	; (8002f34 <HAL_FDCAN_Init+0x524>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d103      	bne.n	8002d6e <HAL_FDCAN_Init+0x35e>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002d66:	4a74      	ldr	r2, [pc, #464]	; (8002f38 <HAL_FDCAN_Init+0x528>)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	7c1b      	ldrb	r3, [r3, #16]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d108      	bne.n	8002d88 <HAL_FDCAN_Init+0x378>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699a      	ldr	r2, [r3, #24]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d84:	619a      	str	r2, [r3, #24]
 8002d86:	e007      	b.n	8002d98 <HAL_FDCAN_Init+0x388>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699a      	ldr	r2, [r3, #24]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d96:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	7c5b      	ldrb	r3, [r3, #17]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d108      	bne.n	8002db2 <HAL_FDCAN_Init+0x3a2>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dae:	619a      	str	r2, [r3, #24]
 8002db0:	e007      	b.n	8002dc2 <HAL_FDCAN_Init+0x3b2>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699a      	ldr	r2, [r3, #24]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002dc0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	7c9b      	ldrb	r3, [r3, #18]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d108      	bne.n	8002ddc <HAL_FDCAN_Init+0x3cc>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699a      	ldr	r2, [r3, #24]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dd8:	619a      	str	r2, [r3, #24]
 8002dda:	e007      	b.n	8002dec <HAL_FDCAN_Init+0x3dc>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699a      	ldr	r2, [r3, #24]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dea:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	699a      	ldr	r2, [r3, #24]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002e10:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0210 	bic.w	r2, r2, #16
 8002e20:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d108      	bne.n	8002e3c <HAL_FDCAN_Init+0x42c>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699a      	ldr	r2, [r3, #24]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0204 	orr.w	r2, r2, #4
 8002e38:	619a      	str	r2, [r3, #24]
 8002e3a:	e02c      	b.n	8002e96 <HAL_FDCAN_Init+0x486>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d028      	beq.n	8002e96 <HAL_FDCAN_Init+0x486>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d01c      	beq.n	8002e86 <HAL_FDCAN_Init+0x476>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699a      	ldr	r2, [r3, #24]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e5a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0210 	orr.w	r2, r2, #16
 8002e6a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d110      	bne.n	8002e96 <HAL_FDCAN_Init+0x486>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699a      	ldr	r2, [r3, #24]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0220 	orr.w	r2, r2, #32
 8002e82:	619a      	str	r2, [r3, #24]
 8002e84:	e007      	b.n	8002e96 <HAL_FDCAN_Init+0x486>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699a      	ldr	r2, [r3, #24]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f042 0220 	orr.w	r2, r2, #32
 8002e94:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ea6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002eae:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002ebe:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ec0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eca:	d115      	bne.n	8002ef8 <HAL_FDCAN_Init+0x4e8>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002eda:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002ee4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	3b01      	subs	r3, #1
 8002eee:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002ef4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ef6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f814 	bl	8002f3c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40006400 	.word	0x40006400
 8002f38:	40006500 	.word	0x40006500

08002f3c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002f44:	4b27      	ldr	r3, [pc, #156]	; (8002fe4 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002f46:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f56:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f5e:	041a      	lsls	r2, r3, #16
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f7c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	061a      	lsls	r2, r3, #24
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	e005      	b.n	8002fca <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d3f3      	bcc.n	8002fbe <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002fd6:	bf00      	nop
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	4000a400 	.word	0x4000a400

08002fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ffc:	d01b      	beq.n	8003036 <HAL_GPIO_Init+0x4e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a3b      	ldr	r2, [pc, #236]	; (80030f0 <HAL_GPIO_Init+0x108>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d017      	beq.n	8003036 <HAL_GPIO_Init+0x4e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a3a      	ldr	r2, [pc, #232]	; (80030f4 <HAL_GPIO_Init+0x10c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d013      	beq.n	8003036 <HAL_GPIO_Init+0x4e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a39      	ldr	r2, [pc, #228]	; (80030f8 <HAL_GPIO_Init+0x110>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00f      	beq.n	8003036 <HAL_GPIO_Init+0x4e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a38      	ldr	r2, [pc, #224]	; (80030fc <HAL_GPIO_Init+0x114>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d00b      	beq.n	8003036 <HAL_GPIO_Init+0x4e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a37      	ldr	r2, [pc, #220]	; (8003100 <HAL_GPIO_Init+0x118>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d007      	beq.n	8003036 <HAL_GPIO_Init+0x4e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a36      	ldr	r2, [pc, #216]	; (8003104 <HAL_GPIO_Init+0x11c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d003      	beq.n	8003036 <HAL_GPIO_Init+0x4e>
 800302e:	21b1      	movs	r1, #177	; 0xb1
 8003030:	4835      	ldr	r0, [pc, #212]	; (8003108 <HAL_GPIO_Init+0x120>)
 8003032:	f7fe fa90 	bl	8001556 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	b29b      	uxth	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_GPIO_Init+0x64>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	0c1b      	lsrs	r3, r3, #16
 8003046:	041b      	lsls	r3, r3, #16
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_GPIO_Init+0x6c>
 800304c:	21b2      	movs	r1, #178	; 0xb2
 800304e:	482e      	ldr	r0, [pc, #184]	; (8003108 <HAL_GPIO_Init+0x120>)
 8003050:	f7fe fa81 	bl	8001556 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d035      	beq.n	80030c8 <HAL_GPIO_Init+0xe0>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d031      	beq.n	80030c8 <HAL_GPIO_Init+0xe0>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b11      	cmp	r3, #17
 800306a:	d02d      	beq.n	80030c8 <HAL_GPIO_Init+0xe0>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b02      	cmp	r3, #2
 8003072:	d029      	beq.n	80030c8 <HAL_GPIO_Init+0xe0>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b12      	cmp	r3, #18
 800307a:	d025      	beq.n	80030c8 <HAL_GPIO_Init+0xe0>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	4a22      	ldr	r2, [pc, #136]	; (800310c <HAL_GPIO_Init+0x124>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d020      	beq.n	80030c8 <HAL_GPIO_Init+0xe0>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4a21      	ldr	r2, [pc, #132]	; (8003110 <HAL_GPIO_Init+0x128>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d01b      	beq.n	80030c8 <HAL_GPIO_Init+0xe0>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	4a1f      	ldr	r2, [pc, #124]	; (8003114 <HAL_GPIO_Init+0x12c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d016      	beq.n	80030c8 <HAL_GPIO_Init+0xe0>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4a1e      	ldr	r2, [pc, #120]	; (8003118 <HAL_GPIO_Init+0x130>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d011      	beq.n	80030c8 <HAL_GPIO_Init+0xe0>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	4a1c      	ldr	r2, [pc, #112]	; (800311c <HAL_GPIO_Init+0x134>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d00c      	beq.n	80030c8 <HAL_GPIO_Init+0xe0>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4a1b      	ldr	r2, [pc, #108]	; (8003120 <HAL_GPIO_Init+0x138>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d007      	beq.n	80030c8 <HAL_GPIO_Init+0xe0>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d003      	beq.n	80030c8 <HAL_GPIO_Init+0xe0>
 80030c0:	21b3      	movs	r1, #179	; 0xb3
 80030c2:	4811      	ldr	r0, [pc, #68]	; (8003108 <HAL_GPIO_Init+0x120>)
 80030c4:	f7fe fa47 	bl	8001556 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 81d2 	beq.w	8003476 <HAL_GPIO_Init+0x48e>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	f000 81cd 	beq.w	8003476 <HAL_GPIO_Init+0x48e>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	f000 81c8 	beq.w	8003476 <HAL_GPIO_Init+0x48e>
 80030e6:	21b4      	movs	r1, #180	; 0xb4
 80030e8:	4807      	ldr	r0, [pc, #28]	; (8003108 <HAL_GPIO_Init+0x120>)
 80030ea:	f7fe fa34 	bl	8001556 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80030ee:	e1c2      	b.n	8003476 <HAL_GPIO_Init+0x48e>
 80030f0:	48000400 	.word	0x48000400
 80030f4:	48000800 	.word	0x48000800
 80030f8:	48000c00 	.word	0x48000c00
 80030fc:	48001000 	.word	0x48001000
 8003100:	48001400 	.word	0x48001400
 8003104:	48001800 	.word	0x48001800
 8003108:	080091e4 	.word	0x080091e4
 800310c:	10110000 	.word	0x10110000
 8003110:	10210000 	.word	0x10210000
 8003114:	10310000 	.word	0x10310000
 8003118:	10120000 	.word	0x10120000
 800311c:	10220000 	.word	0x10220000
 8003120:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	2101      	movs	r1, #1
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	fa01 f303 	lsl.w	r3, r1, r3
 8003130:	4013      	ands	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 819a 	beq.w	8003470 <HAL_GPIO_Init+0x488>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d00b      	beq.n	800315c <HAL_GPIO_Init+0x174>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d007      	beq.n	800315c <HAL_GPIO_Init+0x174>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003150:	2b11      	cmp	r3, #17
 8003152:	d003      	beq.n	800315c <HAL_GPIO_Init+0x174>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b12      	cmp	r3, #18
 800315a:	d144      	bne.n	80031e6 <HAL_GPIO_Init+0x1fe>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00f      	beq.n	8003184 <HAL_GPIO_Init+0x19c>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d00b      	beq.n	8003184 <HAL_GPIO_Init+0x19c>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	2b02      	cmp	r3, #2
 8003172:	d007      	beq.n	8003184 <HAL_GPIO_Init+0x19c>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b03      	cmp	r3, #3
 800317a:	d003      	beq.n	8003184 <HAL_GPIO_Init+0x19c>
 800317c:	21c4      	movs	r1, #196	; 0xc4
 800317e:	4881      	ldr	r0, [pc, #516]	; (8003384 <HAL_GPIO_Init+0x39c>)
 8003180:	f7fe f9e9 	bl	8001556 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	2203      	movs	r2, #3
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4013      	ands	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031ba:	2201      	movs	r2, #1
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	4013      	ands	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	091b      	lsrs	r3, r3, #4
 80031d0:	f003 0201 	and.w	r2, r3, #1
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	2203      	movs	r2, #3
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4013      	ands	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_Init+0x23e>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b12      	cmp	r3, #18
 8003224:	d14b      	bne.n	80032be <HAL_GPIO_Init+0x2d6>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800322c:	d01b      	beq.n	8003266 <HAL_GPIO_Init+0x27e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a55      	ldr	r2, [pc, #340]	; (8003388 <HAL_GPIO_Init+0x3a0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d017      	beq.n	8003266 <HAL_GPIO_Init+0x27e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a54      	ldr	r2, [pc, #336]	; (800338c <HAL_GPIO_Init+0x3a4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d013      	beq.n	8003266 <HAL_GPIO_Init+0x27e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a53      	ldr	r2, [pc, #332]	; (8003390 <HAL_GPIO_Init+0x3a8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00f      	beq.n	8003266 <HAL_GPIO_Init+0x27e>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a52      	ldr	r2, [pc, #328]	; (8003394 <HAL_GPIO_Init+0x3ac>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d00b      	beq.n	8003266 <HAL_GPIO_Init+0x27e>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a51      	ldr	r2, [pc, #324]	; (8003398 <HAL_GPIO_Init+0x3b0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d007      	beq.n	8003266 <HAL_GPIO_Init+0x27e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a50      	ldr	r2, [pc, #320]	; (800339c <HAL_GPIO_Init+0x3b4>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_Init+0x27e>
 800325e:	21dc      	movs	r1, #220	; 0xdc
 8003260:	4848      	ldr	r0, [pc, #288]	; (8003384 <HAL_GPIO_Init+0x39c>)
 8003262:	f7fe f978 	bl	8001556 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	2b0f      	cmp	r3, #15
 800326c:	d903      	bls.n	8003276 <HAL_GPIO_Init+0x28e>
 800326e:	21dd      	movs	r1, #221	; 0xdd
 8003270:	4844      	ldr	r0, [pc, #272]	; (8003384 <HAL_GPIO_Init+0x39c>)
 8003272:	f7fe f970 	bl	8001556 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	08da      	lsrs	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3208      	adds	r2, #8
 800327e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003282:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	220f      	movs	r2, #15
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43db      	mvns	r3, r3
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4013      	ands	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	691a      	ldr	r2, [r3, #16]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	08da      	lsrs	r2, r3, #3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3208      	adds	r2, #8
 80032b8:	6939      	ldr	r1, [r7, #16]
 80032ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	2203      	movs	r2, #3
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43db      	mvns	r3, r3
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4013      	ands	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f003 0203 	and.w	r2, r3, #3
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 80b8 	beq.w	8003470 <HAL_GPIO_Init+0x488>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003300:	4b27      	ldr	r3, [pc, #156]	; (80033a0 <HAL_GPIO_Init+0x3b8>)
 8003302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003304:	4a26      	ldr	r2, [pc, #152]	; (80033a0 <HAL_GPIO_Init+0x3b8>)
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	6613      	str	r3, [r2, #96]	; 0x60
 800330c:	4b24      	ldr	r3, [pc, #144]	; (80033a0 <HAL_GPIO_Init+0x3b8>)
 800330e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003318:	4a22      	ldr	r2, [pc, #136]	; (80033a4 <HAL_GPIO_Init+0x3bc>)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	089b      	lsrs	r3, r3, #2
 800331e:	3302      	adds	r3, #2
 8003320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003324:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	220f      	movs	r2, #15
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4013      	ands	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003342:	d031      	beq.n	80033a8 <HAL_GPIO_Init+0x3c0>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a10      	ldr	r2, [pc, #64]	; (8003388 <HAL_GPIO_Init+0x3a0>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d019      	beq.n	8003380 <HAL_GPIO_Init+0x398>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a0f      	ldr	r2, [pc, #60]	; (800338c <HAL_GPIO_Init+0x3a4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d013      	beq.n	800337c <HAL_GPIO_Init+0x394>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a0e      	ldr	r2, [pc, #56]	; (8003390 <HAL_GPIO_Init+0x3a8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d00d      	beq.n	8003378 <HAL_GPIO_Init+0x390>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a0d      	ldr	r2, [pc, #52]	; (8003394 <HAL_GPIO_Init+0x3ac>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d007      	beq.n	8003374 <HAL_GPIO_Init+0x38c>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a0c      	ldr	r2, [pc, #48]	; (8003398 <HAL_GPIO_Init+0x3b0>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d101      	bne.n	8003370 <HAL_GPIO_Init+0x388>
 800336c:	2305      	movs	r3, #5
 800336e:	e01c      	b.n	80033aa <HAL_GPIO_Init+0x3c2>
 8003370:	2306      	movs	r3, #6
 8003372:	e01a      	b.n	80033aa <HAL_GPIO_Init+0x3c2>
 8003374:	2304      	movs	r3, #4
 8003376:	e018      	b.n	80033aa <HAL_GPIO_Init+0x3c2>
 8003378:	2303      	movs	r3, #3
 800337a:	e016      	b.n	80033aa <HAL_GPIO_Init+0x3c2>
 800337c:	2302      	movs	r3, #2
 800337e:	e014      	b.n	80033aa <HAL_GPIO_Init+0x3c2>
 8003380:	2301      	movs	r3, #1
 8003382:	e012      	b.n	80033aa <HAL_GPIO_Init+0x3c2>
 8003384:	080091e4 	.word	0x080091e4
 8003388:	48000400 	.word	0x48000400
 800338c:	48000800 	.word	0x48000800
 8003390:	48000c00 	.word	0x48000c00
 8003394:	48001000 	.word	0x48001000
 8003398:	48001400 	.word	0x48001400
 800339c:	48001800 	.word	0x48001800
 80033a0:	40021000 	.word	0x40021000
 80033a4:	40010000 	.word	0x40010000
 80033a8:	2300      	movs	r3, #0
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	f002 0203 	and.w	r2, r2, #3
 80033b0:	0092      	lsls	r2, r2, #2
 80033b2:	4093      	lsls	r3, r2
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033ba:	4935      	ldr	r1, [pc, #212]	; (8003490 <HAL_GPIO_Init+0x4a8>)
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	089b      	lsrs	r3, r3, #2
 80033c0:	3302      	adds	r3, #2
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80033c8:	4b32      	ldr	r3, [pc, #200]	; (8003494 <HAL_GPIO_Init+0x4ac>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	43db      	mvns	r3, r3
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4013      	ands	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_GPIO_Init+0x404>
        {
          temp |= iocurrent;
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033ec:	4a29      	ldr	r2, [pc, #164]	; (8003494 <HAL_GPIO_Init+0x4ac>)
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80033f2:	4b28      	ldr	r3, [pc, #160]	; (8003494 <HAL_GPIO_Init+0x4ac>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	43db      	mvns	r3, r3
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4013      	ands	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_GPIO_Init+0x42e>
        {
          temp |= iocurrent;
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003416:	4a1f      	ldr	r2, [pc, #124]	; (8003494 <HAL_GPIO_Init+0x4ac>)
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800341c:	4b1d      	ldr	r3, [pc, #116]	; (8003494 <HAL_GPIO_Init+0x4ac>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	43db      	mvns	r3, r3
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4013      	ands	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_GPIO_Init+0x458>
        {
          temp |= iocurrent;
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003440:	4a14      	ldr	r2, [pc, #80]	; (8003494 <HAL_GPIO_Init+0x4ac>)
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003446:	4b13      	ldr	r3, [pc, #76]	; (8003494 <HAL_GPIO_Init+0x4ac>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	43db      	mvns	r3, r3
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	4013      	ands	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_GPIO_Init+0x482>
        {
          temp |= iocurrent;
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800346a:	4a0a      	ldr	r2, [pc, #40]	; (8003494 <HAL_GPIO_Init+0x4ac>)
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	3301      	adds	r3, #1
 8003474:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	fa22 f303 	lsr.w	r3, r2, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	f47f ae4f 	bne.w	8003124 <HAL_GPIO_Init+0x13c>
  }
}
 8003486:	bf00      	nop
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40010000 	.word	0x40010000
 8003494:	40010400 	.word	0x40010400

08003498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	807b      	strh	r3, [r7, #2]
 80034a4:	4613      	mov	r3, r2
 80034a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80034a8:	887b      	ldrh	r3, [r7, #2]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d004      	beq.n	80034b8 <HAL_GPIO_WritePin+0x20>
 80034ae:	887b      	ldrh	r3, [r7, #2]
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	041b      	lsls	r3, r3, #16
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d004      	beq.n	80034c2 <HAL_GPIO_WritePin+0x2a>
 80034b8:	f240 119d 	movw	r1, #413	; 0x19d
 80034bc:	480d      	ldr	r0, [pc, #52]	; (80034f4 <HAL_GPIO_WritePin+0x5c>)
 80034be:	f7fe f84a 	bl	8001556 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80034c2:	787b      	ldrb	r3, [r7, #1]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d007      	beq.n	80034d8 <HAL_GPIO_WritePin+0x40>
 80034c8:	787b      	ldrb	r3, [r7, #1]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d004      	beq.n	80034d8 <HAL_GPIO_WritePin+0x40>
 80034ce:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80034d2:	4808      	ldr	r0, [pc, #32]	; (80034f4 <HAL_GPIO_WritePin+0x5c>)
 80034d4:	f7fe f83f 	bl	8001556 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80034d8:	787b      	ldrb	r3, [r7, #1]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034de:	887a      	ldrh	r2, [r7, #2]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034e4:	e002      	b.n	80034ec <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034e6:	887a      	ldrh	r2, [r7, #2]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034ec:	bf00      	nop
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	080091e4 	.word	0x080091e4

080034f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00b      	beq.n	800351e <HAL_PWREx_ControlVoltageScaling+0x26>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800350c:	d007      	beq.n	800351e <HAL_PWREx_ControlVoltageScaling+0x26>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003514:	d003      	beq.n	800351e <HAL_PWREx_ControlVoltageScaling+0x26>
 8003516:	219e      	movs	r1, #158	; 0x9e
 8003518:	484d      	ldr	r0, [pc, #308]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x158>)
 800351a:	f7fe f81c 	bl	8001556 <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d141      	bne.n	80035a8 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003524:	4b4b      	ldr	r3, [pc, #300]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800352c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003530:	d131      	bne.n	8003596 <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003532:	4b48      	ldr	r3, [pc, #288]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003538:	4a46      	ldr	r2, [pc, #280]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800353a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800353e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003542:	4b44      	ldr	r3, [pc, #272]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800354a:	4a42      	ldr	r2, [pc, #264]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800354c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003550:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003552:	4b41      	ldr	r3, [pc, #260]	; (8003658 <HAL_PWREx_ControlVoltageScaling+0x160>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2232      	movs	r2, #50	; 0x32
 8003558:	fb02 f303 	mul.w	r3, r2, r3
 800355c:	4a3f      	ldr	r2, [pc, #252]	; (800365c <HAL_PWREx_ControlVoltageScaling+0x164>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	0c9b      	lsrs	r3, r3, #18
 8003564:	3301      	adds	r3, #1
 8003566:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003568:	e002      	b.n	8003570 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	3b01      	subs	r3, #1
 800356e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003570:	4b38      	ldr	r3, [pc, #224]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800357c:	d102      	bne.n	8003584 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1f2      	bne.n	800356a <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003584:	4b33      	ldr	r3, [pc, #204]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003590:	d158      	bne.n	8003644 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e057      	b.n	8003646 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003596:	4b2f      	ldr	r3, [pc, #188]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003598:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800359c:	4a2d      	ldr	r2, [pc, #180]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800359e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035a2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80035a6:	e04d      	b.n	8003644 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ae:	d141      	bne.n	8003634 <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035b0:	4b28      	ldr	r3, [pc, #160]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035bc:	d131      	bne.n	8003622 <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035be:	4b25      	ldr	r3, [pc, #148]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80035c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035c4:	4a23      	ldr	r2, [pc, #140]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80035c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035ce:	4b21      	ldr	r3, [pc, #132]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035d6:	4a1f      	ldr	r2, [pc, #124]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80035d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035de:	4b1e      	ldr	r3, [pc, #120]	; (8003658 <HAL_PWREx_ControlVoltageScaling+0x160>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2232      	movs	r2, #50	; 0x32
 80035e4:	fb02 f303 	mul.w	r3, r2, r3
 80035e8:	4a1c      	ldr	r2, [pc, #112]	; (800365c <HAL_PWREx_ControlVoltageScaling+0x164>)
 80035ea:	fba2 2303 	umull	r2, r3, r2, r3
 80035ee:	0c9b      	lsrs	r3, r3, #18
 80035f0:	3301      	adds	r3, #1
 80035f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035f4:	e002      	b.n	80035fc <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	3b01      	subs	r3, #1
 80035fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035fc:	4b15      	ldr	r3, [pc, #84]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003608:	d102      	bne.n	8003610 <HAL_PWREx_ControlVoltageScaling+0x118>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f2      	bne.n	80035f6 <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003610:	4b10      	ldr	r3, [pc, #64]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800361c:	d112      	bne.n	8003644 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e011      	b.n	8003646 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003622:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003628:	4a0a      	ldr	r2, [pc, #40]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800362a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003632:	e007      	b.n	8003644 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003634:	4b07      	ldr	r3, [pc, #28]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800363c:	4a05      	ldr	r2, [pc, #20]	; (8003654 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800363e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003642:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	08009220 	.word	0x08009220
 8003654:	40007000 	.word	0x40007000
 8003658:	20000000 	.word	0x20000000
 800365c:	431bde83 	.word	0x431bde83

08003660 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d102      	bne.n	8003674 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	f000 bc03 	b.w	8003e7a <HAL_RCC_OscConfig+0x81a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d022      	beq.n	80036c2 <HAL_RCC_OscConfig+0x62>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d11c      	bne.n	80036c2 <HAL_RCC_OscConfig+0x62>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d116      	bne.n	80036c2 <HAL_RCC_OscConfig+0x62>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d110      	bne.n	80036c2 <HAL_RCC_OscConfig+0x62>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10a      	bne.n	80036c2 <HAL_RCC_OscConfig+0x62>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d104      	bne.n	80036c2 <HAL_RCC_OscConfig+0x62>
 80036b8:	f240 114b 	movw	r1, #331	; 0x14b
 80036bc:	48a4      	ldr	r0, [pc, #656]	; (8003950 <HAL_RCC_OscConfig+0x2f0>)
 80036be:	f7fd ff4a 	bl	8001556 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 8089 	beq.w	80037e2 <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00e      	beq.n	80036f6 <HAL_RCC_OscConfig+0x96>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e0:	d009      	beq.n	80036f6 <HAL_RCC_OscConfig+0x96>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036ea:	d004      	beq.n	80036f6 <HAL_RCC_OscConfig+0x96>
 80036ec:	f240 1151 	movw	r1, #337	; 0x151
 80036f0:	4897      	ldr	r0, [pc, #604]	; (8003950 <HAL_RCC_OscConfig+0x2f0>)
 80036f2:	f7fd ff30 	bl	8001556 <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036f6:	4b97      	ldr	r3, [pc, #604]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003700:	4b94      	ldr	r3, [pc, #592]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2b0c      	cmp	r3, #12
 800370e:	d102      	bne.n	8003716 <HAL_RCC_OscConfig+0xb6>
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	2b03      	cmp	r3, #3
 8003714:	d002      	beq.n	800371c <HAL_RCC_OscConfig+0xbc>
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	2b08      	cmp	r3, #8
 800371a:	d10b      	bne.n	8003734 <HAL_RCC_OscConfig+0xd4>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800371c:	4b8d      	ldr	r3, [pc, #564]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d05b      	beq.n	80037e0 <HAL_RCC_OscConfig+0x180>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d157      	bne.n	80037e0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e3a2      	b.n	8003e7a <HAL_RCC_OscConfig+0x81a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373c:	d106      	bne.n	800374c <HAL_RCC_OscConfig+0xec>
 800373e:	4b85      	ldr	r3, [pc, #532]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a84      	ldr	r2, [pc, #528]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 8003744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	e01d      	b.n	8003788 <HAL_RCC_OscConfig+0x128>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003754:	d10c      	bne.n	8003770 <HAL_RCC_OscConfig+0x110>
 8003756:	4b7f      	ldr	r3, [pc, #508]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a7e      	ldr	r2, [pc, #504]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 800375c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	4b7c      	ldr	r3, [pc, #496]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a7b      	ldr	r2, [pc, #492]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 8003768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	e00b      	b.n	8003788 <HAL_RCC_OscConfig+0x128>
 8003770:	4b78      	ldr	r3, [pc, #480]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a77      	ldr	r2, [pc, #476]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 8003776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	4b75      	ldr	r3, [pc, #468]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a74      	ldr	r2, [pc, #464]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 8003782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d013      	beq.n	80037b8 <HAL_RCC_OscConfig+0x158>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7fe fcce 	bl	8002130 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003798:	f7fe fcca 	bl	8002130 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b64      	cmp	r3, #100	; 0x64
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e367      	b.n	8003e7a <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037aa:	4b6a      	ldr	r3, [pc, #424]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCC_OscConfig+0x138>
 80037b6:	e014      	b.n	80037e2 <HAL_RCC_OscConfig+0x182>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b8:	f7fe fcba 	bl	8002130 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c0:	f7fe fcb6 	bl	8002130 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b64      	cmp	r3, #100	; 0x64
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e353      	b.n	8003e7a <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037d2:	4b60      	ldr	r3, [pc, #384]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x160>
 80037de:	e000      	b.n	80037e2 <HAL_RCC_OscConfig+0x182>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 808d 	beq.w	800390a <HAL_RCC_OscConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d009      	beq.n	800380c <HAL_RCC_OscConfig+0x1ac>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003800:	d004      	beq.n	800380c <HAL_RCC_OscConfig+0x1ac>
 8003802:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8003806:	4852      	ldr	r0, [pc, #328]	; (8003950 <HAL_RCC_OscConfig+0x2f0>)
 8003808:	f7fd fea5 	bl	8001556 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	2b7f      	cmp	r3, #127	; 0x7f
 8003812:	d904      	bls.n	800381e <HAL_RCC_OscConfig+0x1be>
 8003814:	f240 1187 	movw	r1, #391	; 0x187
 8003818:	484d      	ldr	r0, [pc, #308]	; (8003950 <HAL_RCC_OscConfig+0x2f0>)
 800381a:	f7fd fe9c 	bl	8001556 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800381e:	4b4d      	ldr	r3, [pc, #308]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
 8003826:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003828:	4b4a      	ldr	r3, [pc, #296]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	2b0c      	cmp	r3, #12
 8003836:	d102      	bne.n	800383e <HAL_RCC_OscConfig+0x1de>
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d002      	beq.n	8003844 <HAL_RCC_OscConfig+0x1e4>
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	2b04      	cmp	r3, #4
 8003842:	d11f      	bne.n	8003884 <HAL_RCC_OscConfig+0x224>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003844:	4b43      	ldr	r3, [pc, #268]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_RCC_OscConfig+0x1fc>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_RCC_OscConfig+0x1fc>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e30e      	b.n	8003e7a <HAL_RCC_OscConfig+0x81a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385c:	4b3d      	ldr	r3, [pc, #244]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	061b      	lsls	r3, r3, #24
 800386a:	493a      	ldr	r1, [pc, #232]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 800386c:	4313      	orrs	r3, r2
 800386e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003870:	4b39      	ldr	r3, [pc, #228]	; (8003958 <HAL_RCC_OscConfig+0x2f8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f7fd ff51 	bl	800171c <HAL_InitTick>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d043      	beq.n	8003908 <HAL_RCC_OscConfig+0x2a8>
        {
          return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e2fa      	b.n	8003e7a <HAL_RCC_OscConfig+0x81a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d023      	beq.n	80038d4 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800388c:	4b31      	ldr	r3, [pc, #196]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a30      	ldr	r2, [pc, #192]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 8003892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003898:	f7fe fc4a 	bl	8002130 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x252>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a0:	f7fe fc46 	bl	8002130 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x252>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e2e3      	b.n	8003e7a <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b2:	4b28      	ldr	r3, [pc, #160]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0f0      	beq.n	80038a0 <HAL_RCC_OscConfig+0x240>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038be:	4b25      	ldr	r3, [pc, #148]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	061b      	lsls	r3, r3, #24
 80038cc:	4921      	ldr	r1, [pc, #132]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	604b      	str	r3, [r1, #4]
 80038d2:	e01a      	b.n	800390a <HAL_RCC_OscConfig+0x2aa>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038d4:	4b1f      	ldr	r3, [pc, #124]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a1e      	ldr	r2, [pc, #120]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 80038da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e0:	f7fe fc26 	bl	8002130 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x29a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038e8:	f7fe fc22 	bl	8002130 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e2bf      	b.n	8003e7a <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038fa:	4b16      	ldr	r3, [pc, #88]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0x288>
 8003906:	e000      	b.n	800390a <HAL_RCC_OscConfig+0x2aa>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003908:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d04f      	beq.n	80039b6 <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d008      	beq.n	8003930 <HAL_RCC_OscConfig+0x2d0>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d004      	beq.n	8003930 <HAL_RCC_OscConfig+0x2d0>
 8003926:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 800392a:	4809      	ldr	r0, [pc, #36]	; (8003950 <HAL_RCC_OscConfig+0x2f0>)
 800392c:	f7fd fe13 	bl	8001556 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d022      	beq.n	800397e <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003938:	4b06      	ldr	r3, [pc, #24]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 800393a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800393e:	4a05      	ldr	r2, [pc, #20]	; (8003954 <HAL_RCC_OscConfig+0x2f4>)
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003948:	f7fe fbf2 	bl	8002130 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800394e:	e00e      	b.n	800396e <HAL_RCC_OscConfig+0x30e>
 8003950:	0800925c 	.word	0x0800925c
 8003954:	40021000 	.word	0x40021000
 8003958:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800395c:	f7fe fbe8 	bl	8002130 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e285      	b.n	8003e7a <HAL_RCC_OscConfig+0x81a>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800396e:	4b95      	ldr	r3, [pc, #596]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 8003970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0ef      	beq.n	800395c <HAL_RCC_OscConfig+0x2fc>
 800397c:	e01b      	b.n	80039b6 <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800397e:	4b91      	ldr	r3, [pc, #580]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 8003980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003984:	4a8f      	ldr	r2, [pc, #572]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398e:	f7fe fbcf 	bl	8002130 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003996:	f7fe fbcb 	bl	8002130 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e268      	b.n	8003e7a <HAL_RCC_OscConfig+0x81a>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039a8:	4b86      	ldr	r3, [pc, #536]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 80039aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1ef      	bne.n	8003996 <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 80b7 	beq.w	8003b32 <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039c4:	2300      	movs	r3, #0
 80039c6:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00c      	beq.n	80039ea <HAL_RCC_OscConfig+0x38a>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d008      	beq.n	80039ea <HAL_RCC_OscConfig+0x38a>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	2b05      	cmp	r3, #5
 80039de:	d004      	beq.n	80039ea <HAL_RCC_OscConfig+0x38a>
 80039e0:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 80039e4:	4878      	ldr	r0, [pc, #480]	; (8003bc8 <HAL_RCC_OscConfig+0x568>)
 80039e6:	f7fd fdb6 	bl	8001556 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039ea:	4b76      	ldr	r3, [pc, #472]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 80039ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_RCC_OscConfig+0x39a>
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <HAL_RCC_OscConfig+0x39c>
 80039fa:	2300      	movs	r3, #0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00d      	beq.n	8003a1c <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a00:	4b70      	ldr	r3, [pc, #448]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 8003a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a04:	4a6f      	ldr	r2, [pc, #444]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 8003a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a0a:	6593      	str	r3, [r2, #88]	; 0x58
 8003a0c:	4b6d      	ldr	r3, [pc, #436]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a1c:	4b6b      	ldr	r3, [pc, #428]	; (8003bcc <HAL_RCC_OscConfig+0x56c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d118      	bne.n	8003a5a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a28:	4b68      	ldr	r3, [pc, #416]	; (8003bcc <HAL_RCC_OscConfig+0x56c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a67      	ldr	r2, [pc, #412]	; (8003bcc <HAL_RCC_OscConfig+0x56c>)
 8003a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a34:	f7fe fb7c 	bl	8002130 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3c:	f7fe fb78 	bl	8002130 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e215      	b.n	8003e7a <HAL_RCC_OscConfig+0x81a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a4e:	4b5f      	ldr	r3, [pc, #380]	; (8003bcc <HAL_RCC_OscConfig+0x56c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d108      	bne.n	8003a74 <HAL_RCC_OscConfig+0x414>
 8003a62:	4b58      	ldr	r3, [pc, #352]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 8003a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a68:	4a56      	ldr	r2, [pc, #344]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a72:	e024      	b.n	8003abe <HAL_RCC_OscConfig+0x45e>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2b05      	cmp	r3, #5
 8003a7a:	d110      	bne.n	8003a9e <HAL_RCC_OscConfig+0x43e>
 8003a7c:	4b51      	ldr	r3, [pc, #324]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a82:	4a50      	ldr	r2, [pc, #320]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 8003a84:	f043 0304 	orr.w	r3, r3, #4
 8003a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a8c:	4b4d      	ldr	r3, [pc, #308]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	4a4c      	ldr	r2, [pc, #304]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 8003a94:	f043 0301 	orr.w	r3, r3, #1
 8003a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a9c:	e00f      	b.n	8003abe <HAL_RCC_OscConfig+0x45e>
 8003a9e:	4b49      	ldr	r3, [pc, #292]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 8003aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa4:	4a47      	ldr	r2, [pc, #284]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 8003aa6:	f023 0301 	bic.w	r3, r3, #1
 8003aaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aae:	4b45      	ldr	r3, [pc, #276]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab4:	4a43      	ldr	r2, [pc, #268]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 8003ab6:	f023 0304 	bic.w	r3, r3, #4
 8003aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d016      	beq.n	8003af4 <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac6:	f7fe fb33 	bl	8002130 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003acc:	e00a      	b.n	8003ae4 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ace:	f7fe fb2f 	bl	8002130 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e1ca      	b.n	8003e7a <HAL_RCC_OscConfig+0x81a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae4:	4b37      	ldr	r3, [pc, #220]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0ed      	beq.n	8003ace <HAL_RCC_OscConfig+0x46e>
 8003af2:	e015      	b.n	8003b20 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af4:	f7fe fb1c 	bl	8002130 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003afa:	e00a      	b.n	8003b12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afc:	f7fe fb18 	bl	8002130 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e1b3      	b.n	8003e7a <HAL_RCC_OscConfig+0x81a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b12:	4b2c      	ldr	r3, [pc, #176]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 8003b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1ed      	bne.n	8003afc <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b20:	7ffb      	ldrb	r3, [r7, #31]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d105      	bne.n	8003b32 <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b26:	4b27      	ldr	r3, [pc, #156]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 8003b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2a:	4a26      	ldr	r2, [pc, #152]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 8003b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d04f      	beq.n	8003bde <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d008      	beq.n	8003b58 <HAL_RCC_OscConfig+0x4f8>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d004      	beq.n	8003b58 <HAL_RCC_OscConfig+0x4f8>
 8003b4e:	f240 2141 	movw	r1, #577	; 0x241
 8003b52:	481d      	ldr	r0, [pc, #116]	; (8003bc8 <HAL_RCC_OscConfig+0x568>)
 8003b54:	f7fd fcff 	bl	8001556 <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01c      	beq.n	8003b9a <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b60:	4b18      	ldr	r3, [pc, #96]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 8003b62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b66:	4a17      	ldr	r2, [pc, #92]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 8003b68:	f043 0301 	orr.w	r3, r3, #1
 8003b6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b70:	f7fe fade 	bl	8002130 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b78:	f7fe fada 	bl	8002130 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e177      	b.n	8003e7a <HAL_RCC_OscConfig+0x81a>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b8a:	4b0e      	ldr	r3, [pc, #56]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 8003b8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0ef      	beq.n	8003b78 <HAL_RCC_OscConfig+0x518>
 8003b98:	e021      	b.n	8003bde <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 8003b9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ba0:	4a08      	ldr	r2, [pc, #32]	; (8003bc4 <HAL_RCC_OscConfig+0x564>)
 8003ba2:	f023 0301 	bic.w	r3, r3, #1
 8003ba6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003baa:	f7fe fac1 	bl	8002130 <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bb0:	e00e      	b.n	8003bd0 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bb2:	f7fe fabd 	bl	8002130 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d907      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e15a      	b.n	8003e7a <HAL_RCC_OscConfig+0x81a>
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	0800925c 	.word	0x0800925c
 8003bcc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bd0:	4ba6      	ldr	r3, [pc, #664]	; (8003e6c <HAL_RCC_OscConfig+0x80c>)
 8003bd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1e9      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00c      	beq.n	8003c00 <HAL_RCC_OscConfig+0x5a0>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d008      	beq.n	8003c00 <HAL_RCC_OscConfig+0x5a0>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d004      	beq.n	8003c00 <HAL_RCC_OscConfig+0x5a0>
 8003bf6:	f240 216a 	movw	r1, #618	; 0x26a
 8003bfa:	489d      	ldr	r0, [pc, #628]	; (8003e70 <HAL_RCC_OscConfig+0x810>)
 8003bfc:	f7fd fcab 	bl	8001556 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8137 	beq.w	8003e78 <HAL_RCC_OscConfig+0x818>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c0a:	4b98      	ldr	r3, [pc, #608]	; (8003e6c <HAL_RCC_OscConfig+0x80c>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 030c 	and.w	r3, r3, #12
 8003c12:	2b0c      	cmp	r3, #12
 8003c14:	f000 80ea 	beq.w	8003dec <HAL_RCC_OscConfig+0x78c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	f040 80bd 	bne.w	8003d9c <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00c      	beq.n	8003c44 <HAL_RCC_OscConfig+0x5e4>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d008      	beq.n	8003c44 <HAL_RCC_OscConfig+0x5e4>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	d004      	beq.n	8003c44 <HAL_RCC_OscConfig+0x5e4>
 8003c3a:	f44f 711d 	mov.w	r1, #628	; 0x274
 8003c3e:	488c      	ldr	r0, [pc, #560]	; (8003e70 <HAL_RCC_OscConfig+0x810>)
 8003c40:	f7fd fc89 	bl	8001556 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_RCC_OscConfig+0x5f4>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	2b10      	cmp	r3, #16
 8003c52:	d904      	bls.n	8003c5e <HAL_RCC_OscConfig+0x5fe>
 8003c54:	f240 2175 	movw	r1, #629	; 0x275
 8003c58:	4885      	ldr	r0, [pc, #532]	; (8003e70 <HAL_RCC_OscConfig+0x810>)
 8003c5a:	f7fd fc7c 	bl	8001556 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c62:	2b07      	cmp	r3, #7
 8003c64:	d903      	bls.n	8003c6e <HAL_RCC_OscConfig+0x60e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	2b7f      	cmp	r3, #127	; 0x7f
 8003c6c:	d904      	bls.n	8003c78 <HAL_RCC_OscConfig+0x618>
 8003c6e:	f240 2176 	movw	r1, #630	; 0x276
 8003c72:	487f      	ldr	r0, [pc, #508]	; (8003e70 <HAL_RCC_OscConfig+0x810>)
 8003c74:	f7fd fc6f 	bl	8001556 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d903      	bls.n	8003c88 <HAL_RCC_OscConfig+0x628>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	2b1f      	cmp	r3, #31
 8003c86:	d904      	bls.n	8003c92 <HAL_RCC_OscConfig+0x632>
 8003c88:	f240 2177 	movw	r1, #631	; 0x277
 8003c8c:	4878      	ldr	r0, [pc, #480]	; (8003e70 <HAL_RCC_OscConfig+0x810>)
 8003c8e:	f7fd fc62 	bl	8001556 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d010      	beq.n	8003cbc <HAL_RCC_OscConfig+0x65c>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d00c      	beq.n	8003cbc <HAL_RCC_OscConfig+0x65c>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	2b06      	cmp	r3, #6
 8003ca8:	d008      	beq.n	8003cbc <HAL_RCC_OscConfig+0x65c>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d004      	beq.n	8003cbc <HAL_RCC_OscConfig+0x65c>
 8003cb2:	f44f 711e 	mov.w	r1, #632	; 0x278
 8003cb6:	486e      	ldr	r0, [pc, #440]	; (8003e70 <HAL_RCC_OscConfig+0x810>)
 8003cb8:	f7fd fc4d 	bl	8001556 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d010      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x686>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d00c      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x686>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd0:	2b06      	cmp	r3, #6
 8003cd2:	d008      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x686>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d004      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x686>
 8003cdc:	f240 2179 	movw	r1, #633	; 0x279
 8003ce0:	4863      	ldr	r0, [pc, #396]	; (8003e70 <HAL_RCC_OscConfig+0x810>)
 8003ce2:	f7fd fc38 	bl	8001556 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce6:	4b61      	ldr	r3, [pc, #388]	; (8003e6c <HAL_RCC_OscConfig+0x80c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a60      	ldr	r2, [pc, #384]	; (8003e6c <HAL_RCC_OscConfig+0x80c>)
 8003cec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf2:	f7fe fa1d 	bl	8002130 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfa:	f7fe fa19 	bl	8002130 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e0b6      	b.n	8003e7a <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d0c:	4b57      	ldr	r3, [pc, #348]	; (8003e6c <HAL_RCC_OscConfig+0x80c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1f0      	bne.n	8003cfa <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d18:	4b54      	ldr	r3, [pc, #336]	; (8003e6c <HAL_RCC_OscConfig+0x80c>)
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	4b55      	ldr	r3, [pc, #340]	; (8003e74 <HAL_RCC_OscConfig+0x814>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6a11      	ldr	r1, [r2, #32]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d28:	3a01      	subs	r2, #1
 8003d2a:	0112      	lsls	r2, r2, #4
 8003d2c:	4311      	orrs	r1, r2
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003d32:	0212      	lsls	r2, r2, #8
 8003d34:	4311      	orrs	r1, r2
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d3a:	0852      	lsrs	r2, r2, #1
 8003d3c:	3a01      	subs	r2, #1
 8003d3e:	0552      	lsls	r2, r2, #21
 8003d40:	4311      	orrs	r1, r2
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d46:	0852      	lsrs	r2, r2, #1
 8003d48:	3a01      	subs	r2, #1
 8003d4a:	0652      	lsls	r2, r2, #25
 8003d4c:	4311      	orrs	r1, r2
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d52:	06d2      	lsls	r2, r2, #27
 8003d54:	430a      	orrs	r2, r1
 8003d56:	4945      	ldr	r1, [pc, #276]	; (8003e6c <HAL_RCC_OscConfig+0x80c>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d5c:	4b43      	ldr	r3, [pc, #268]	; (8003e6c <HAL_RCC_OscConfig+0x80c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a42      	ldr	r2, [pc, #264]	; (8003e6c <HAL_RCC_OscConfig+0x80c>)
 8003d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d66:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d68:	4b40      	ldr	r3, [pc, #256]	; (8003e6c <HAL_RCC_OscConfig+0x80c>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4a3f      	ldr	r2, [pc, #252]	; (8003e6c <HAL_RCC_OscConfig+0x80c>)
 8003d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d74:	f7fe f9dc 	bl	8002130 <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d7c:	f7fe f9d8 	bl	8002130 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e075      	b.n	8003e7a <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d8e:	4b37      	ldr	r3, [pc, #220]	; (8003e6c <HAL_RCC_OscConfig+0x80c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f0      	beq.n	8003d7c <HAL_RCC_OscConfig+0x71c>
 8003d9a:	e06d      	b.n	8003e78 <HAL_RCC_OscConfig+0x818>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9c:	4b33      	ldr	r3, [pc, #204]	; (8003e6c <HAL_RCC_OscConfig+0x80c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a32      	ldr	r2, [pc, #200]	; (8003e6c <HAL_RCC_OscConfig+0x80c>)
 8003da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003da6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003da8:	4b30      	ldr	r3, [pc, #192]	; (8003e6c <HAL_RCC_OscConfig+0x80c>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	4a2f      	ldr	r2, [pc, #188]	; (8003e6c <HAL_RCC_OscConfig+0x80c>)
 8003dae:	f023 0303 	bic.w	r3, r3, #3
 8003db2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003db4:	4b2d      	ldr	r3, [pc, #180]	; (8003e6c <HAL_RCC_OscConfig+0x80c>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4a2c      	ldr	r2, [pc, #176]	; (8003e6c <HAL_RCC_OscConfig+0x80c>)
 8003dba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7fe f9b4 	bl	8002130 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x77e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dcc:	f7fe f9b0 	bl	8002130 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x77e>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e04d      	b.n	8003e7a <HAL_RCC_OscConfig+0x81a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dde:	4b23      	ldr	r3, [pc, #140]	; (8003e6c <HAL_RCC_OscConfig+0x80c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0x76c>
 8003dea:	e045      	b.n	8003e78 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_RCC_OscConfig+0x798>
      {
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e040      	b.n	8003e7a <HAL_RCC_OscConfig+0x81a>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003df8:	4b1c      	ldr	r3, [pc, #112]	; (8003e6c <HAL_RCC_OscConfig+0x80c>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f003 0203 	and.w	r2, r3, #3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d12c      	bne.n	8003e66 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	3b01      	subs	r3, #1
 8003e18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d123      	bne.n	8003e66 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d11b      	bne.n	8003e66 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d113      	bne.n	8003e66 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	085b      	lsrs	r3, r3, #1
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d109      	bne.n	8003e66 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5c:	085b      	lsrs	r3, r3, #1
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d008      	beq.n	8003e78 <HAL_RCC_OscConfig+0x818>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e007      	b.n	8003e7a <HAL_RCC_OscConfig+0x81a>
 8003e6a:	bf00      	nop
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	0800925c 	.word	0x0800925c
 8003e74:	019f800c 	.word	0x019f800c
      }
    }
  }
  }

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3720      	adds	r7, #32
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop

08003e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e1e2      	b.n	8004262 <HAL_RCC_ClockConfig+0x3de>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x30>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f023 030f 	bic.w	r3, r3, #15
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d004      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x3a>
 8003eb4:	f240 3112 	movw	r1, #786	; 0x312
 8003eb8:	4897      	ldr	r0, [pc, #604]	; (8004118 <HAL_RCC_ClockConfig+0x294>)
 8003eba:	f7fd fb4c 	bl	8001556 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d031      	beq.n	8003f28 <HAL_RCC_ClockConfig+0xa4>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d02e      	beq.n	8003f28 <HAL_RCC_ClockConfig+0xa4>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d02b      	beq.n	8003f28 <HAL_RCC_ClockConfig+0xa4>
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d028      	beq.n	8003f28 <HAL_RCC_ClockConfig+0xa4>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d025      	beq.n	8003f28 <HAL_RCC_ClockConfig+0xa4>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b05      	cmp	r3, #5
 8003ee0:	d022      	beq.n	8003f28 <HAL_RCC_ClockConfig+0xa4>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b06      	cmp	r3, #6
 8003ee6:	d01f      	beq.n	8003f28 <HAL_RCC_ClockConfig+0xa4>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	2b07      	cmp	r3, #7
 8003eec:	d01c      	beq.n	8003f28 <HAL_RCC_ClockConfig+0xa4>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d019      	beq.n	8003f28 <HAL_RCC_ClockConfig+0xa4>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2b09      	cmp	r3, #9
 8003ef8:	d016      	beq.n	8003f28 <HAL_RCC_ClockConfig+0xa4>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b0a      	cmp	r3, #10
 8003efe:	d013      	beq.n	8003f28 <HAL_RCC_ClockConfig+0xa4>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	2b0b      	cmp	r3, #11
 8003f04:	d010      	beq.n	8003f28 <HAL_RCC_ClockConfig+0xa4>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b0c      	cmp	r3, #12
 8003f0a:	d00d      	beq.n	8003f28 <HAL_RCC_ClockConfig+0xa4>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2b0d      	cmp	r3, #13
 8003f10:	d00a      	beq.n	8003f28 <HAL_RCC_ClockConfig+0xa4>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b0e      	cmp	r3, #14
 8003f16:	d007      	beq.n	8003f28 <HAL_RCC_ClockConfig+0xa4>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	2b0f      	cmp	r3, #15
 8003f1c:	d004      	beq.n	8003f28 <HAL_RCC_ClockConfig+0xa4>
 8003f1e:	f240 3113 	movw	r1, #787	; 0x313
 8003f22:	487d      	ldr	r0, [pc, #500]	; (8004118 <HAL_RCC_ClockConfig+0x294>)
 8003f24:	f7fd fb17 	bl	8001556 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f28:	4b7c      	ldr	r3, [pc, #496]	; (800411c <HAL_RCC_ClockConfig+0x298>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d910      	bls.n	8003f58 <HAL_RCC_ClockConfig+0xd4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f36:	4b79      	ldr	r3, [pc, #484]	; (800411c <HAL_RCC_ClockConfig+0x298>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 020f 	bic.w	r2, r3, #15
 8003f3e:	4977      	ldr	r1, [pc, #476]	; (800411c <HAL_RCC_ClockConfig+0x298>)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f46:	4b75      	ldr	r3, [pc, #468]	; (800411c <HAL_RCC_ClockConfig+0x298>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d001      	beq.n	8003f58 <HAL_RCC_ClockConfig+0xd4>
    {
      return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e184      	b.n	8004262 <HAL_RCC_ClockConfig+0x3de>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8085 	beq.w	8004070 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d00c      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x104>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d008      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x104>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	d004      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x104>
 8003f7e:	f240 312a 	movw	r1, #810	; 0x32a
 8003f82:	4865      	ldr	r0, [pc, #404]	; (8004118 <HAL_RCC_ClockConfig+0x294>)
 8003f84:	f7fd fae7 	bl	8001556 <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	d129      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f90:	4b63      	ldr	r3, [pc, #396]	; (8004120 <HAL_RCC_ClockConfig+0x29c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0x11c>
      {
        return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e160      	b.n	8004262 <HAL_RCC_ClockConfig+0x3de>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003fa0:	f000 fa34 	bl	800440c <RCC_GetSysClockFreqFromPLLSource>
 8003fa4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4a5e      	ldr	r2, [pc, #376]	; (8004124 <HAL_RCC_ClockConfig+0x2a0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d93f      	bls.n	800402e <HAL_RCC_ClockConfig+0x1aa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003fae:	4b5c      	ldr	r3, [pc, #368]	; (8004120 <HAL_RCC_ClockConfig+0x29c>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d009      	beq.n	8003fce <HAL_RCC_ClockConfig+0x14a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d033      	beq.n	800402e <HAL_RCC_ClockConfig+0x1aa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d12f      	bne.n	800402e <HAL_RCC_ClockConfig+0x1aa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003fce:	4b54      	ldr	r3, [pc, #336]	; (8004120 <HAL_RCC_ClockConfig+0x29c>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fd6:	4a52      	ldr	r2, [pc, #328]	; (8004120 <HAL_RCC_ClockConfig+0x29c>)
 8003fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fdc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003fde:	2380      	movs	r3, #128	; 0x80
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	e024      	b.n	800402e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d107      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fec:	4b4c      	ldr	r3, [pc, #304]	; (8004120 <HAL_RCC_ClockConfig+0x29c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d109      	bne.n	800400c <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e132      	b.n	8004262 <HAL_RCC_ClockConfig+0x3de>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ffc:	4b48      	ldr	r3, [pc, #288]	; (8004120 <HAL_RCC_ClockConfig+0x29c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e12a      	b.n	8004262 <HAL_RCC_ClockConfig+0x3de>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800400c:	f000 f93a 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 8004010:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	4a43      	ldr	r2, [pc, #268]	; (8004124 <HAL_RCC_ClockConfig+0x2a0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d909      	bls.n	800402e <HAL_RCC_ClockConfig+0x1aa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800401a:	4b41      	ldr	r3, [pc, #260]	; (8004120 <HAL_RCC_ClockConfig+0x29c>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004022:	4a3f      	ldr	r2, [pc, #252]	; (8004120 <HAL_RCC_ClockConfig+0x29c>)
 8004024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004028:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800402a:	2380      	movs	r3, #128	; 0x80
 800402c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800402e:	4b3c      	ldr	r3, [pc, #240]	; (8004120 <HAL_RCC_ClockConfig+0x29c>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f023 0203 	bic.w	r2, r3, #3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	4939      	ldr	r1, [pc, #228]	; (8004120 <HAL_RCC_ClockConfig+0x29c>)
 800403c:	4313      	orrs	r3, r2
 800403e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004040:	f7fe f876 	bl	8002130 <HAL_GetTick>
 8004044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004046:	e00a      	b.n	800405e <HAL_RCC_ClockConfig+0x1da>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004048:	f7fe f872 	bl	8002130 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f241 3288 	movw	r2, #5000	; 0x1388
 8004056:	4293      	cmp	r3, r2
 8004058:	d901      	bls.n	800405e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e101      	b.n	8004262 <HAL_RCC_ClockConfig+0x3de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405e:	4b30      	ldr	r3, [pc, #192]	; (8004120 <HAL_RCC_ClockConfig+0x29c>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 020c 	and.w	r2, r3, #12
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	429a      	cmp	r2, r3
 800406e:	d1eb      	bne.n	8004048 <HAL_RCC_ClockConfig+0x1c4>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d055      	beq.n	8004128 <HAL_RCC_ClockConfig+0x2a4>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <HAL_RCC_ClockConfig+0x210>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004088:	4b25      	ldr	r3, [pc, #148]	; (8004120 <HAL_RCC_ClockConfig+0x29c>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	4a24      	ldr	r2, [pc, #144]	; (8004120 <HAL_RCC_ClockConfig+0x29c>)
 800408e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004092:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b00      	cmp	r3, #0
 800409e:	d007      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x22c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80040a0:	4b1f      	ldr	r3, [pc, #124]	; (8004120 <HAL_RCC_ClockConfig+0x29c>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80040a8:	4a1d      	ldr	r2, [pc, #116]	; (8004120 <HAL_RCC_ClockConfig+0x29c>)
 80040aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d024      	beq.n	8004102 <HAL_RCC_ClockConfig+0x27e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b80      	cmp	r3, #128	; 0x80
 80040be:	d020      	beq.n	8004102 <HAL_RCC_ClockConfig+0x27e>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b90      	cmp	r3, #144	; 0x90
 80040c6:	d01c      	beq.n	8004102 <HAL_RCC_ClockConfig+0x27e>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2ba0      	cmp	r3, #160	; 0xa0
 80040ce:	d018      	beq.n	8004102 <HAL_RCC_ClockConfig+0x27e>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	2bb0      	cmp	r3, #176	; 0xb0
 80040d6:	d014      	beq.n	8004102 <HAL_RCC_ClockConfig+0x27e>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	2bc0      	cmp	r3, #192	; 0xc0
 80040de:	d010      	beq.n	8004102 <HAL_RCC_ClockConfig+0x27e>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2bd0      	cmp	r3, #208	; 0xd0
 80040e6:	d00c      	beq.n	8004102 <HAL_RCC_ClockConfig+0x27e>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2be0      	cmp	r3, #224	; 0xe0
 80040ee:	d008      	beq.n	8004102 <HAL_RCC_ClockConfig+0x27e>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2bf0      	cmp	r3, #240	; 0xf0
 80040f6:	d004      	beq.n	8004102 <HAL_RCC_ClockConfig+0x27e>
 80040f8:	f240 3181 	movw	r1, #897	; 0x381
 80040fc:	4806      	ldr	r0, [pc, #24]	; (8004118 <HAL_RCC_ClockConfig+0x294>)
 80040fe:	f7fd fa2a 	bl	8001556 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004102:	4b07      	ldr	r3, [pc, #28]	; (8004120 <HAL_RCC_ClockConfig+0x29c>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	4904      	ldr	r1, [pc, #16]	; (8004120 <HAL_RCC_ClockConfig+0x29c>)
 8004110:	4313      	orrs	r3, r2
 8004112:	608b      	str	r3, [r1, #8]
 8004114:	e011      	b.n	800413a <HAL_RCC_ClockConfig+0x2b6>
 8004116:	bf00      	nop
 8004118:	0800925c 	.word	0x0800925c
 800411c:	40022000 	.word	0x40022000
 8004120:	40021000 	.word	0x40021000
 8004124:	04c4b400 	.word	0x04c4b400
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2b80      	cmp	r3, #128	; 0x80
 800412c:	d105      	bne.n	800413a <HAL_RCC_ClockConfig+0x2b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800412e:	4b4f      	ldr	r3, [pc, #316]	; (800426c <HAL_RCC_ClockConfig+0x3e8>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	4a4e      	ldr	r2, [pc, #312]	; (800426c <HAL_RCC_ClockConfig+0x3e8>)
 8004134:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004138:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800413a:	4b4d      	ldr	r3, [pc, #308]	; (8004270 <HAL_RCC_ClockConfig+0x3ec>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d21d      	bcs.n	8004184 <HAL_RCC_ClockConfig+0x300>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004148:	4b49      	ldr	r3, [pc, #292]	; (8004270 <HAL_RCC_ClockConfig+0x3ec>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f023 020f 	bic.w	r2, r3, #15
 8004150:	4947      	ldr	r1, [pc, #284]	; (8004270 <HAL_RCC_ClockConfig+0x3ec>)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	4313      	orrs	r3, r2
 8004156:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004158:	f7fd ffea 	bl	8002130 <HAL_GetTick>
 800415c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800415e:	e00a      	b.n	8004176 <HAL_RCC_ClockConfig+0x2f2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004160:	f7fd ffe6 	bl	8002130 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	; 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_ClockConfig+0x2f2>
      {
        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e075      	b.n	8004262 <HAL_RCC_ClockConfig+0x3de>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004176:	4b3e      	ldr	r3, [pc, #248]	; (8004270 <HAL_RCC_ClockConfig+0x3ec>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d1ed      	bne.n	8004160 <HAL_RCC_ClockConfig+0x2dc>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d025      	beq.n	80041dc <HAL_RCC_ClockConfig+0x358>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d018      	beq.n	80041ca <HAL_RCC_ClockConfig+0x346>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a0:	d013      	beq.n	80041ca <HAL_RCC_ClockConfig+0x346>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80041aa:	d00e      	beq.n	80041ca <HAL_RCC_ClockConfig+0x346>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80041b4:	d009      	beq.n	80041ca <HAL_RCC_ClockConfig+0x346>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041be:	d004      	beq.n	80041ca <HAL_RCC_ClockConfig+0x346>
 80041c0:	f240 31a3 	movw	r1, #931	; 0x3a3
 80041c4:	482b      	ldr	r0, [pc, #172]	; (8004274 <HAL_RCC_ClockConfig+0x3f0>)
 80041c6:	f7fd f9c6 	bl	8001556 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041ca:	4b28      	ldr	r3, [pc, #160]	; (800426c <HAL_RCC_ClockConfig+0x3e8>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	4925      	ldr	r1, [pc, #148]	; (800426c <HAL_RCC_ClockConfig+0x3e8>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d026      	beq.n	8004236 <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d018      	beq.n	8004222 <HAL_RCC_ClockConfig+0x39e>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f8:	d013      	beq.n	8004222 <HAL_RCC_ClockConfig+0x39e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004202:	d00e      	beq.n	8004222 <HAL_RCC_ClockConfig+0x39e>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800420c:	d009      	beq.n	8004222 <HAL_RCC_ClockConfig+0x39e>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004216:	d004      	beq.n	8004222 <HAL_RCC_ClockConfig+0x39e>
 8004218:	f240 31aa 	movw	r1, #938	; 0x3aa
 800421c:	4815      	ldr	r0, [pc, #84]	; (8004274 <HAL_RCC_ClockConfig+0x3f0>)
 800421e:	f7fd f99a 	bl	8001556 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004222:	4b12      	ldr	r3, [pc, #72]	; (800426c <HAL_RCC_ClockConfig+0x3e8>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	490e      	ldr	r1, [pc, #56]	; (800426c <HAL_RCC_ClockConfig+0x3e8>)
 8004232:	4313      	orrs	r3, r2
 8004234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004236:	f000 f825 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 800423a:	4601      	mov	r1, r0
 800423c:	4b0b      	ldr	r3, [pc, #44]	; (800426c <HAL_RCC_ClockConfig+0x3e8>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	091b      	lsrs	r3, r3, #4
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	4a0c      	ldr	r2, [pc, #48]	; (8004278 <HAL_RCC_ClockConfig+0x3f4>)
 8004248:	5cd3      	ldrb	r3, [r2, r3]
 800424a:	f003 031f 	and.w	r3, r3, #31
 800424e:	fa21 f303 	lsr.w	r3, r1, r3
 8004252:	4a0a      	ldr	r2, [pc, #40]	; (800427c <HAL_RCC_ClockConfig+0x3f8>)
 8004254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004256:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <HAL_RCC_ClockConfig+0x3fc>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f7fd fa5e 	bl	800171c <HAL_InitTick>
 8004260:	4603      	mov	r3, r0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40021000 	.word	0x40021000
 8004270:	40022000 	.word	0x40022000
 8004274:	0800925c 	.word	0x0800925c
 8004278:	08009384 	.word	0x08009384
 800427c:	20000000 	.word	0x20000000
 8004280:	20000004 	.word	0x20000004

08004284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800428a:	4b2c      	ldr	r3, [pc, #176]	; (800433c <HAL_RCC_GetSysClockFreq+0xb8>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 030c 	and.w	r3, r3, #12
 8004292:	2b04      	cmp	r3, #4
 8004294:	d102      	bne.n	800429c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004296:	4b2a      	ldr	r3, [pc, #168]	; (8004340 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004298:	613b      	str	r3, [r7, #16]
 800429a:	e047      	b.n	800432c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800429c:	4b27      	ldr	r3, [pc, #156]	; (800433c <HAL_RCC_GetSysClockFreq+0xb8>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 030c 	and.w	r3, r3, #12
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d102      	bne.n	80042ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042a8:	4b25      	ldr	r3, [pc, #148]	; (8004340 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042aa:	613b      	str	r3, [r7, #16]
 80042ac:	e03e      	b.n	800432c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80042ae:	4b23      	ldr	r3, [pc, #140]	; (800433c <HAL_RCC_GetSysClockFreq+0xb8>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 030c 	and.w	r3, r3, #12
 80042b6:	2b0c      	cmp	r3, #12
 80042b8:	d136      	bne.n	8004328 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042ba:	4b20      	ldr	r3, [pc, #128]	; (800433c <HAL_RCC_GetSysClockFreq+0xb8>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042c4:	4b1d      	ldr	r3, [pc, #116]	; (800433c <HAL_RCC_GetSysClockFreq+0xb8>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	091b      	lsrs	r3, r3, #4
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	3301      	adds	r3, #1
 80042d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b03      	cmp	r3, #3
 80042d6:	d10c      	bne.n	80042f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042d8:	4a19      	ldr	r2, [pc, #100]	; (8004340 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e0:	4a16      	ldr	r2, [pc, #88]	; (800433c <HAL_RCC_GetSysClockFreq+0xb8>)
 80042e2:	68d2      	ldr	r2, [r2, #12]
 80042e4:	0a12      	lsrs	r2, r2, #8
 80042e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042ea:	fb02 f303 	mul.w	r3, r2, r3
 80042ee:	617b      	str	r3, [r7, #20]
      break;
 80042f0:	e00c      	b.n	800430c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042f2:	4a13      	ldr	r2, [pc, #76]	; (8004340 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fa:	4a10      	ldr	r2, [pc, #64]	; (800433c <HAL_RCC_GetSysClockFreq+0xb8>)
 80042fc:	68d2      	ldr	r2, [r2, #12]
 80042fe:	0a12      	lsrs	r2, r2, #8
 8004300:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004304:	fb02 f303 	mul.w	r3, r2, r3
 8004308:	617b      	str	r3, [r7, #20]
      break;
 800430a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800430c:	4b0b      	ldr	r3, [pc, #44]	; (800433c <HAL_RCC_GetSysClockFreq+0xb8>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	0e5b      	lsrs	r3, r3, #25
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	3301      	adds	r3, #1
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	fbb2 f3f3 	udiv	r3, r2, r3
 8004324:	613b      	str	r3, [r7, #16]
 8004326:	e001      	b.n	800432c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800432c:	693b      	ldr	r3, [r7, #16]
}
 800432e:	4618      	mov	r0, r3
 8004330:	371c      	adds	r7, #28
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	40021000 	.word	0x40021000
 8004340:	00f42400 	.word	0x00f42400

08004344 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004348:	4b03      	ldr	r3, [pc, #12]	; (8004358 <HAL_RCC_GetHCLKFreq+0x14>)
 800434a:	681b      	ldr	r3, [r3, #0]
}
 800434c:	4618      	mov	r0, r3
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	20000000 	.word	0x20000000

0800435c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004360:	f7ff fff0 	bl	8004344 <HAL_RCC_GetHCLKFreq>
 8004364:	4601      	mov	r1, r0
 8004366:	4b06      	ldr	r3, [pc, #24]	; (8004380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	0adb      	lsrs	r3, r3, #11
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	4a04      	ldr	r2, [pc, #16]	; (8004384 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004372:	5cd3      	ldrb	r3, [r2, r3]
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	fa21 f303 	lsr.w	r3, r1, r3
}
 800437c:	4618      	mov	r0, r3
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40021000 	.word	0x40021000
 8004384:	08009394 	.word	0x08009394

08004388 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d104      	bne.n	80043a2 <HAL_RCC_GetClockConfig+0x1a>
 8004398:	f240 41d9 	movw	r1, #1241	; 0x4d9
 800439c:	4818      	ldr	r0, [pc, #96]	; (8004400 <HAL_RCC_GetClockConfig+0x78>)
 800439e:	f7fd f8da 	bl	8001556 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d104      	bne.n	80043b2 <HAL_RCC_GetClockConfig+0x2a>
 80043a8:	f240 41da 	movw	r1, #1242	; 0x4da
 80043ac:	4814      	ldr	r0, [pc, #80]	; (8004400 <HAL_RCC_GetClockConfig+0x78>)
 80043ae:	f7fd f8d2 	bl	8001556 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	220f      	movs	r2, #15
 80043b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80043b8:	4b12      	ldr	r3, [pc, #72]	; (8004404 <HAL_RCC_GetClockConfig+0x7c>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f003 0203 	and.w	r2, r3, #3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80043c4:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <HAL_RCC_GetClockConfig+0x7c>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80043d0:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <HAL_RCC_GetClockConfig+0x7c>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80043dc:	4b09      	ldr	r3, [pc, #36]	; (8004404 <HAL_RCC_GetClockConfig+0x7c>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	08db      	lsrs	r3, r3, #3
 80043e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80043ea:	4b07      	ldr	r3, [pc, #28]	; (8004408 <HAL_RCC_GetClockConfig+0x80>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 020f 	and.w	r2, r3, #15
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	601a      	str	r2, [r3, #0]
}
 80043f6:	bf00      	nop
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	0800925c 	.word	0x0800925c
 8004404:	40021000 	.word	0x40021000
 8004408:	40022000 	.word	0x40022000

0800440c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004412:	4b1e      	ldr	r3, [pc, #120]	; (800448c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800441c:	4b1b      	ldr	r3, [pc, #108]	; (800448c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	091b      	lsrs	r3, r3, #4
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	3301      	adds	r3, #1
 8004428:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	2b03      	cmp	r3, #3
 800442e:	d10c      	bne.n	800444a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004430:	4a17      	ldr	r2, [pc, #92]	; (8004490 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	fbb2 f3f3 	udiv	r3, r2, r3
 8004438:	4a14      	ldr	r2, [pc, #80]	; (800448c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800443a:	68d2      	ldr	r2, [r2, #12]
 800443c:	0a12      	lsrs	r2, r2, #8
 800443e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004442:	fb02 f303 	mul.w	r3, r2, r3
 8004446:	617b      	str	r3, [r7, #20]
    break;
 8004448:	e00c      	b.n	8004464 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800444a:	4a11      	ldr	r2, [pc, #68]	; (8004490 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004452:	4a0e      	ldr	r2, [pc, #56]	; (800448c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004454:	68d2      	ldr	r2, [r2, #12]
 8004456:	0a12      	lsrs	r2, r2, #8
 8004458:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800445c:	fb02 f303 	mul.w	r3, r2, r3
 8004460:	617b      	str	r3, [r7, #20]
    break;
 8004462:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004464:	4b09      	ldr	r3, [pc, #36]	; (800448c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	0e5b      	lsrs	r3, r3, #25
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	3301      	adds	r3, #1
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	fbb2 f3f3 	udiv	r3, r2, r3
 800447c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800447e:	687b      	ldr	r3, [r7, #4]
}
 8004480:	4618      	mov	r0, r3
 8004482:	371c      	adds	r7, #28
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	40021000 	.word	0x40021000
 8004490:	00f42400 	.word	0x00f42400

08004494 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800449c:	2300      	movs	r3, #0
 800449e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044a0:	2300      	movs	r3, #0
 80044a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d15d      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d157      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d151      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d14b      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d145      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d13f      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d139      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d133      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800450c:	2b00      	cmp	r3, #0
 800450e:	d12d      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004518:	2b00      	cmp	r3, #0
 800451a:	d127      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004524:	2b00      	cmp	r3, #0
 8004526:	d121      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d11b      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d115      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10f      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d109      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d103      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004564:	2185      	movs	r1, #133	; 0x85
 8004566:	4855      	ldr	r0, [pc, #340]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004568:	f7fc fff5 	bl	8001556 <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 80b2 	beq.w	80046de <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800457a:	2300      	movs	r3, #0
 800457c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	2b00      	cmp	r3, #0
 8004584:	d012      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x118>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800458e:	d00d      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x118>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004598:	d008      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x118>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045a2:	d003      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x118>
 80045a4:	218d      	movs	r1, #141	; 0x8d
 80045a6:	4845      	ldr	r0, [pc, #276]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80045a8:	f7fc ffd5 	bl	8001556 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ac:	4b44      	ldr	r3, [pc, #272]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80045ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10d      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b8:	4b41      	ldr	r3, [pc, #260]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80045ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045bc:	4a40      	ldr	r2, [pc, #256]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80045be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c2:	6593      	str	r3, [r2, #88]	; 0x58
 80045c4:	4b3e      	ldr	r3, [pc, #248]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80045c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045d0:	2301      	movs	r3, #1
 80045d2:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045d4:	4b3b      	ldr	r3, [pc, #236]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a3a      	ldr	r2, [pc, #232]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80045da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045e0:	f7fd fda6 	bl	8002130 <HAL_GetTick>
 80045e4:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045e6:	e009      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e8:	f7fd fda2 	bl	8002130 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d902      	bls.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        ret = HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	74fb      	strb	r3, [r7, #19]
        break;
 80045fa:	e005      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x174>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045fc:	4b31      	ldr	r3, [pc, #196]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0ef      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
      }
    }

    if(ret == HAL_OK)
 8004608:	7cfb      	ldrb	r3, [r7, #19]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d15c      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800460e:	4b2c      	ldr	r3, [pc, #176]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004614:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004618:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d01e      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	429a      	cmp	r2, r3
 8004628:	d019      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800462a:	4b25      	ldr	r3, [pc, #148]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800462c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004634:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004636:	4b22      	ldr	r3, [pc, #136]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463c:	4a20      	ldr	r2, [pc, #128]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800463e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004646:	4b1e      	ldr	r3, [pc, #120]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464c:	4a1c      	ldr	r2, [pc, #112]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800464e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004652:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004656:	4a1a      	ldr	r2, [pc, #104]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d016      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x202>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004668:	f7fd fd62 	bl	8002130 <HAL_GetTick>
 800466c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800466e:	e00b      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004670:	f7fd fd5e 	bl	8002130 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	f241 3288 	movw	r2, #5000	; 0x1388
 800467e:	4293      	cmp	r3, r2
 8004680:	d902      	bls.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
          {
            ret = HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	74fb      	strb	r3, [r7, #19]
            break;
 8004686:	e006      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x202>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004688:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800468a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0ec      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004696:	7cfb      	ldrb	r3, [r7, #19]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10b      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800469c:	4b08      	ldr	r3, [pc, #32]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800469e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	4905      	ldr	r1, [pc, #20]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046b2:	e00b      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046b4:	7cfb      	ldrb	r3, [r7, #19]
 80046b6:	74bb      	strb	r3, [r7, #18]
 80046b8:	e008      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x238>
 80046ba:	bf00      	nop
 80046bc:	08009294 	.word	0x08009294
 80046c0:	40021000 	.word	0x40021000
 80046c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c8:	7cfb      	ldrb	r3, [r7, #19]
 80046ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046cc:	7c7b      	ldrb	r3, [r7, #17]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d105      	bne.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x24a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d2:	4ba7      	ldr	r3, [pc, #668]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80046d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d6:	4aa6      	ldr	r2, [pc, #664]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80046d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d01e      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00f      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d00b      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b03      	cmp	r3, #3
 8004700:	d007      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d003      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800470a:	21e2      	movs	r1, #226	; 0xe2
 800470c:	4899      	ldr	r0, [pc, #612]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800470e:	f7fc ff22 	bl	8001556 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004712:	4b97      	ldr	r3, [pc, #604]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004718:	f023 0203 	bic.w	r2, r3, #3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	4993      	ldr	r1, [pc, #588]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d01e      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00f      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b04      	cmp	r3, #4
 8004742:	d00b      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	2b0c      	cmp	r3, #12
 800474a:	d007      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	2b08      	cmp	r3, #8
 8004752:	d003      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004754:	21ec      	movs	r1, #236	; 0xec
 8004756:	4887      	ldr	r0, [pc, #540]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004758:	f7fc fefd 	bl	8001556 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800475c:	4b84      	ldr	r3, [pc, #528]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004762:	f023 020c 	bic.w	r2, r3, #12
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	4981      	ldr	r1, [pc, #516]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	2b00      	cmp	r3, #0
 800477c:	d01e      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00f      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	2b10      	cmp	r3, #16
 800478c:	d00b      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	2b30      	cmp	r3, #48	; 0x30
 8004794:	d007      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	2b20      	cmp	r3, #32
 800479c:	d003      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800479e:	21f6      	movs	r1, #246	; 0xf6
 80047a0:	4874      	ldr	r0, [pc, #464]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80047a2:	f7fc fed8 	bl	8001556 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047a6:	4b72      	ldr	r3, [pc, #456]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80047a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	496e      	ldr	r1, [pc, #440]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01f      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d010      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	2b40      	cmp	r3, #64	; 0x40
 80047d6:	d00c      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	2bc0      	cmp	r3, #192	; 0xc0
 80047de:	d008      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	2b80      	cmp	r3, #128	; 0x80
 80047e6:	d004      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80047e8:	f240 1101 	movw	r1, #257	; 0x101
 80047ec:	4861      	ldr	r0, [pc, #388]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80047ee:	f7fc feb2 	bl	8001556 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047f2:	4b5f      	ldr	r3, [pc, #380]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80047f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	495b      	ldr	r1, [pc, #364]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0320 	and.w	r3, r3, #32
 8004810:	2b00      	cmp	r3, #0
 8004812:	d022      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d013      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004824:	d00e      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800482e:	d009      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004838:	d004      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800483a:	f44f 718d 	mov.w	r1, #282	; 0x11a
 800483e:	484d      	ldr	r0, [pc, #308]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004840:	f7fc fe89 	bl	8001556 <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004844:	4b4a      	ldr	r3, [pc, #296]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	4947      	ldr	r1, [pc, #284]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004862:	2b00      	cmp	r3, #0
 8004864:	d01d      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00e      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004876:	d009      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004880:	d004      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004882:	f44f 7192 	mov.w	r1, #292	; 0x124
 8004886:	483b      	ldr	r0, [pc, #236]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004888:	f7fc fe65 	bl	8001556 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800488c:	4b38      	ldr	r3, [pc, #224]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800488e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004892:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	4935      	ldr	r1, [pc, #212]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d01d      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00e      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048be:	d009      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048c8:	d004      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80048ca:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80048ce:	4829      	ldr	r0, [pc, #164]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80048d0:	f7fc fe41 	bl	8001556 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048d4:	4b26      	ldr	r3, [pc, #152]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80048d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	4923      	ldr	r1, [pc, #140]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d01d      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x49e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00e      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x488>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004906:	d009      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004910:	d004      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004912:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004916:	4817      	ldr	r0, [pc, #92]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004918:	f7fc fe1d 	bl	8001556 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800491c:	4b14      	ldr	r3, [pc, #80]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004922:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	4911      	ldr	r1, [pc, #68]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800493a:	2b00      	cmp	r3, #0
 800493c:	d027      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	2b00      	cmp	r3, #0
 8004944:	d018      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800494e:	d013      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004958:	d00e      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004962:	d009      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004964:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004968:	4802      	ldr	r0, [pc, #8]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800496a:	f7fc fdf4 	bl	8001556 <assert_failed>
 800496e:	e003      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004970:	40021000 	.word	0x40021000
 8004974:	08009294 	.word	0x08009294

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004978:	4b94      	ldr	r3, [pc, #592]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	4991      	ldr	r1, [pc, #580]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004996:	2b00      	cmp	r3, #0
 8004998:	d02d      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d013      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x536>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049aa:	d00e      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x536>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049b4:	d009      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x536>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049be:	d004      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x536>
 80049c0:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 80049c4:	4882      	ldr	r0, [pc, #520]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80049c6:	f7fc fdc6 	bl	8001556 <assert_failed>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049ca:	4b80      	ldr	r3, [pc, #512]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80049cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d8:	497c      	ldr	r1, [pc, #496]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049e8:	d105      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049ea:	4b78      	ldr	r3, [pc, #480]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	4a77      	ldr	r2, [pc, #476]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80049f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049f4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d02d      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d013      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a12:	d00e      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a1c:	d009      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a26:	d004      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004a28:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8004a2c:	4868      	ldr	r0, [pc, #416]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004a2e:	f7fc fd92 	bl	8001556 <assert_failed>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a32:	4b66      	ldr	r3, [pc, #408]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	4962      	ldr	r1, [pc, #392]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a50:	d105      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a52:	4b5e      	ldr	r3, [pc, #376]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	4a5d      	ldr	r2, [pc, #372]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004a58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a5c:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d028      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00e      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a7a:	d009      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a84:	d004      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8004a86:	f240 117b 	movw	r1, #379	; 0x17b
 8004a8a:	4851      	ldr	r0, [pc, #324]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004a8c:	f7fc fd63 	bl	8001556 <assert_failed>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a90:	4b4e      	ldr	r3, [pc, #312]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a96:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9e:	494b      	ldr	r1, [pc, #300]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aaa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004aae:	d105      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ab0:	4b46      	ldr	r3, [pc, #280]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	4a45      	ldr	r2, [pc, #276]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d023      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d009      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ad8:	d004      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004ada:	f240 118d 	movw	r1, #397	; 0x18d
 8004ade:	483c      	ldr	r0, [pc, #240]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004ae0:	f7fc fd39 	bl	8001556 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ae4:	4b39      	ldr	r3, [pc, #228]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af2:	4936      	ldr	r1, [pc, #216]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b02:	d105      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b04:	4b31      	ldr	r3, [pc, #196]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	4a30      	ldr	r2, [pc, #192]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b0e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d023      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d009      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b2c:	d004      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8004b2e:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8004b32:	4827      	ldr	r0, [pc, #156]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004b34:	f7fc fd0f 	bl	8001556 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b38:	4b24      	ldr	r3, [pc, #144]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	4921      	ldr	r1, [pc, #132]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b56:	d105      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b58:	4b1c      	ldr	r3, [pc, #112]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	4a1b      	ldr	r2, [pc, #108]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b62:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d028      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x72e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00e      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x702>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b80:	d009      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x702>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b8a:	d004      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x702>
 8004b8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004b90:	480f      	ldr	r0, [pc, #60]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004b92:	f7fc fce0 	bl	8001556 <assert_failed>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b96:	4b0d      	ldr	r3, [pc, #52]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba4:	4909      	ldr	r1, [pc, #36]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bb4:	d105      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x72e>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004bb6:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	4a04      	ldr	r2, [pc, #16]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004bc2:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	08009294 	.word	0x08009294

08004bd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e184      	b.n	8004ef0 <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a9b      	ldr	r2, [pc, #620]	; (8004e58 <HAL_SPI_Init+0x284>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d00e      	beq.n	8004c0e <HAL_SPI_Init+0x3a>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a99      	ldr	r2, [pc, #612]	; (8004e5c <HAL_SPI_Init+0x288>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d009      	beq.n	8004c0e <HAL_SPI_Init+0x3a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a98      	ldr	r2, [pc, #608]	; (8004e60 <HAL_SPI_Init+0x28c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d004      	beq.n	8004c0e <HAL_SPI_Init+0x3a>
 8004c04:	f240 1147 	movw	r1, #327	; 0x147
 8004c08:	4896      	ldr	r0, [pc, #600]	; (8004e64 <HAL_SPI_Init+0x290>)
 8004c0a:	f7fc fca4 	bl	8001556 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d009      	beq.n	8004c2a <HAL_SPI_Init+0x56>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c1e:	d004      	beq.n	8004c2a <HAL_SPI_Init+0x56>
 8004c20:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004c24:	488f      	ldr	r0, [pc, #572]	; (8004e64 <HAL_SPI_Init+0x290>)
 8004c26:	f7fc fc96 	bl	8001556 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00e      	beq.n	8004c50 <HAL_SPI_Init+0x7c>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c3a:	d009      	beq.n	8004c50 <HAL_SPI_Init+0x7c>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c44:	d004      	beq.n	8004c50 <HAL_SPI_Init+0x7c>
 8004c46:	f240 1149 	movw	r1, #329	; 0x149
 8004c4a:	4886      	ldr	r0, [pc, #536]	; (8004e64 <HAL_SPI_Init+0x290>)
 8004c4c:	f7fc fc83 	bl	8001556 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c58:	d040      	beq.n	8004cdc <HAL_SPI_Init+0x108>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8004c62:	d03b      	beq.n	8004cdc <HAL_SPI_Init+0x108>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004c6c:	d036      	beq.n	8004cdc <HAL_SPI_Init+0x108>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c76:	d031      	beq.n	8004cdc <HAL_SPI_Init+0x108>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004c80:	d02c      	beq.n	8004cdc <HAL_SPI_Init+0x108>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004c8a:	d027      	beq.n	8004cdc <HAL_SPI_Init+0x108>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004c94:	d022      	beq.n	8004cdc <HAL_SPI_Init+0x108>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c9e:	d01d      	beq.n	8004cdc <HAL_SPI_Init+0x108>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ca8:	d018      	beq.n	8004cdc <HAL_SPI_Init+0x108>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004cb2:	d013      	beq.n	8004cdc <HAL_SPI_Init+0x108>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004cbc:	d00e      	beq.n	8004cdc <HAL_SPI_Init+0x108>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc6:	d009      	beq.n	8004cdc <HAL_SPI_Init+0x108>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cd0:	d004      	beq.n	8004cdc <HAL_SPI_Init+0x108>
 8004cd2:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004cd6:	4863      	ldr	r0, [pc, #396]	; (8004e64 <HAL_SPI_Init+0x290>)
 8004cd8:	f7fc fc3d 	bl	8001556 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ce4:	d00d      	beq.n	8004d02 <HAL_SPI_Init+0x12e>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d009      	beq.n	8004d02 <HAL_SPI_Init+0x12e>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004cf6:	d004      	beq.n	8004d02 <HAL_SPI_Init+0x12e>
 8004cf8:	f240 114b 	movw	r1, #331	; 0x14b
 8004cfc:	4859      	ldr	r0, [pc, #356]	; (8004e64 <HAL_SPI_Init+0x290>)
 8004cfe:	f7fc fc2a 	bl	8001556 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d06:	2b08      	cmp	r3, #8
 8004d08:	d008      	beq.n	8004d1c <HAL_SPI_Init+0x148>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d004      	beq.n	8004d1c <HAL_SPI_Init+0x148>
 8004d12:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004d16:	4853      	ldr	r0, [pc, #332]	; (8004e64 <HAL_SPI_Init+0x290>)
 8004d18:	f7fc fc1d 	bl	8001556 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d020      	beq.n	8004d66 <HAL_SPI_Init+0x192>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d01c      	beq.n	8004d66 <HAL_SPI_Init+0x192>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	2b10      	cmp	r3, #16
 8004d32:	d018      	beq.n	8004d66 <HAL_SPI_Init+0x192>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	2b18      	cmp	r3, #24
 8004d3a:	d014      	beq.n	8004d66 <HAL_SPI_Init+0x192>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d010      	beq.n	8004d66 <HAL_SPI_Init+0x192>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	2b28      	cmp	r3, #40	; 0x28
 8004d4a:	d00c      	beq.n	8004d66 <HAL_SPI_Init+0x192>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	2b30      	cmp	r3, #48	; 0x30
 8004d52:	d008      	beq.n	8004d66 <HAL_SPI_Init+0x192>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	2b38      	cmp	r3, #56	; 0x38
 8004d5a:	d004      	beq.n	8004d66 <HAL_SPI_Init+0x192>
 8004d5c:	f240 114d 	movw	r1, #333	; 0x14d
 8004d60:	4840      	ldr	r0, [pc, #256]	; (8004e64 <HAL_SPI_Init+0x290>)
 8004d62:	f7fc fbf8 	bl	8001556 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d008      	beq.n	8004d80 <HAL_SPI_Init+0x1ac>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	2b80      	cmp	r3, #128	; 0x80
 8004d74:	d004      	beq.n	8004d80 <HAL_SPI_Init+0x1ac>
 8004d76:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8004d7a:	483a      	ldr	r0, [pc, #232]	; (8004e64 <HAL_SPI_Init+0x290>)
 8004d7c:	f7fc fbeb 	bl	8001556 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d008      	beq.n	8004d9a <HAL_SPI_Init+0x1c6>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	2b10      	cmp	r3, #16
 8004d8e:	d004      	beq.n	8004d9a <HAL_SPI_Init+0x1c6>
 8004d90:	f240 114f 	movw	r1, #335	; 0x14f
 8004d94:	4833      	ldr	r0, [pc, #204]	; (8004e64 <HAL_SPI_Init+0x290>)
 8004d96:	f7fc fbde 	bl	8001556 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d119      	bne.n	8004dd6 <HAL_SPI_Init+0x202>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d008      	beq.n	8004dbc <HAL_SPI_Init+0x1e8>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d004      	beq.n	8004dbc <HAL_SPI_Init+0x1e8>
 8004db2:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8004db6:	482b      	ldr	r0, [pc, #172]	; (8004e64 <HAL_SPI_Init+0x290>)
 8004db8:	f7fc fbcd 	bl	8001556 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <HAL_SPI_Init+0x202>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d004      	beq.n	8004dd6 <HAL_SPI_Init+0x202>
 8004dcc:	f240 1153 	movw	r1, #339	; 0x153
 8004dd0:	4824      	ldr	r0, [pc, #144]	; (8004e64 <HAL_SPI_Init+0x290>)
 8004dd2:	f7fc fbc0 	bl	8001556 <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d106      	bne.n	8004df6 <HAL_SPI_Init+0x222>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7fc fbf9 	bl	80015e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2202      	movs	r2, #2
 8004dfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e0c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e16:	d902      	bls.n	8004e1e <HAL_SPI_Init+0x24a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	e002      	b.n	8004e24 <HAL_SPI_Init+0x250>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e22:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e2c:	d007      	beq.n	8004e3e <HAL_SPI_Init+0x26a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e36:	d002      	beq.n	8004e3e <HAL_SPI_Init+0x26a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d113      	bne.n	8004e6e <HAL_SPI_Init+0x29a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e4e:	d90b      	bls.n	8004e68 <HAL_SPI_Init+0x294>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	631a      	str	r2, [r3, #48]	; 0x30
 8004e56:	e00a      	b.n	8004e6e <HAL_SPI_Init+0x29a>
 8004e58:	40013000 	.word	0x40013000
 8004e5c:	40003800 	.word	0x40003800
 8004e60:	40003c00 	.word	0x40003c00
 8004e64:	080092d0 	.word	0x080092d0
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	ea42 0103 	orr.w	r1, r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	0c1b      	lsrs	r3, r3, #16
 8004eae:	f003 0204 	and.w	r2, r3, #4
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	ea42 0103 	orr.w	r1, r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	69da      	ldr	r2, [r3, #28]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ede:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	603b      	str	r3, [r7, #0]
 8004f04:	4613      	mov	r3, r2
 8004f06:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d009      	beq.n	8004f28 <HAL_SPI_Transmit+0x30>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f1c:	d004      	beq.n	8004f28 <HAL_SPI_Transmit+0x30>
 8004f1e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8004f22:	4895      	ldr	r0, [pc, #596]	; (8005178 <HAL_SPI_Transmit+0x280>)
 8004f24:	f7fc fb17 	bl	8001556 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d101      	bne.n	8004f36 <HAL_SPI_Transmit+0x3e>
 8004f32:	2302      	movs	r3, #2
 8004f34:	e152      	b.n	80051dc <HAL_SPI_Transmit+0x2e4>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f3e:	f7fd f8f7 	bl	8002130 <HAL_GetTick>
 8004f42:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f44:	88fb      	ldrh	r3, [r7, #6]
 8004f46:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d002      	beq.n	8004f5a <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8004f54:	2302      	movs	r3, #2
 8004f56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f58:	e137      	b.n	80051ca <HAL_SPI_Transmit+0x2d2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <HAL_SPI_Transmit+0x6e>
 8004f60:	88fb      	ldrh	r3, [r7, #6]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d102      	bne.n	8004f6c <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f6a:	e12e      	b.n	80051ca <HAL_SPI_Transmit+0x2d2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2203      	movs	r2, #3
 8004f70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	88fa      	ldrh	r2, [r7, #6]
 8004f84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	88fa      	ldrh	r2, [r7, #6]
 8004f8a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fb6:	d107      	bne.n	8004fc8 <HAL_SPI_Transmit+0xd0>
  {
    SPI_1LINE_TX(hspi);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fc6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd2:	2b40      	cmp	r3, #64	; 0x40
 8004fd4:	d007      	beq.n	8004fe6 <HAL_SPI_Transmit+0xee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fe4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fee:	d94b      	bls.n	8005088 <HAL_SPI_Transmit+0x190>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d002      	beq.n	8004ffe <HAL_SPI_Transmit+0x106>
 8004ff8:	8afb      	ldrh	r3, [r7, #22]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d13e      	bne.n	800507c <HAL_SPI_Transmit+0x184>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	881a      	ldrh	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	1c9a      	adds	r2, r3, #2
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005018:	b29b      	uxth	r3, r3
 800501a:	3b01      	subs	r3, #1
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005022:	e02b      	b.n	800507c <HAL_SPI_Transmit+0x184>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b02      	cmp	r3, #2
 8005030:	d112      	bne.n	8005058 <HAL_SPI_Transmit+0x160>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	881a      	ldrh	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	1c9a      	adds	r2, r3, #2
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005056:	e011      	b.n	800507c <HAL_SPI_Transmit+0x184>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005058:	f7fd f86a 	bl	8002130 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	429a      	cmp	r2, r3
 8005066:	d803      	bhi.n	8005070 <HAL_SPI_Transmit+0x178>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506e:	d102      	bne.n	8005076 <HAL_SPI_Transmit+0x17e>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d102      	bne.n	800507c <HAL_SPI_Transmit+0x184>
        {
          errorcode = HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	77fb      	strb	r3, [r7, #31]
          goto error;
 800507a:	e0a6      	b.n	80051ca <HAL_SPI_Transmit+0x2d2>
    while (hspi->TxXferCount > 0U)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005080:	b29b      	uxth	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1ce      	bne.n	8005024 <HAL_SPI_Transmit+0x12c>
 8005086:	e07e      	b.n	8005186 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <HAL_SPI_Transmit+0x19e>
 8005090:	8afb      	ldrh	r3, [r7, #22]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d172      	bne.n	800517c <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800509a:	b29b      	uxth	r3, r3
 800509c:	2b01      	cmp	r3, #1
 800509e:	d912      	bls.n	80050c6 <HAL_SPI_Transmit+0x1ce>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	881a      	ldrh	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	1c9a      	adds	r2, r3, #2
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	3b02      	subs	r3, #2
 80050be:	b29a      	uxth	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050c4:	e05a      	b.n	800517c <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	330c      	adds	r3, #12
 80050d0:	7812      	ldrb	r2, [r2, #0]
 80050d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80050ec:	e046      	b.n	800517c <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d12b      	bne.n	8005154 <HAL_SPI_Transmit+0x25c>
      {
        if (hspi->TxXferCount > 1U)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005100:	b29b      	uxth	r3, r3
 8005102:	2b01      	cmp	r3, #1
 8005104:	d912      	bls.n	800512c <HAL_SPI_Transmit+0x234>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	881a      	ldrh	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005116:	1c9a      	adds	r2, r3, #2
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005120:	b29b      	uxth	r3, r3
 8005122:	3b02      	subs	r3, #2
 8005124:	b29a      	uxth	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	87da      	strh	r2, [r3, #62]	; 0x3e
 800512a:	e027      	b.n	800517c <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	330c      	adds	r3, #12
 8005136:	7812      	ldrb	r2, [r2, #0]
 8005138:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005148:	b29b      	uxth	r3, r3
 800514a:	3b01      	subs	r3, #1
 800514c:	b29a      	uxth	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005152:	e013      	b.n	800517c <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005154:	f7fc ffec 	bl	8002130 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d803      	bhi.n	800516c <HAL_SPI_Transmit+0x274>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516a:	d102      	bne.n	8005172 <HAL_SPI_Transmit+0x27a>
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d104      	bne.n	800517c <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005176:	e028      	b.n	80051ca <HAL_SPI_Transmit+0x2d2>
 8005178:	080092d0 	.word	0x080092d0
    while (hspi->TxXferCount > 0U)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1b3      	bne.n	80050ee <HAL_SPI_Transmit+0x1f6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	6839      	ldr	r1, [r7, #0]
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 fcad 	bl	8005aea <SPI_EndRxTxTransaction>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2220      	movs	r2, #32
 800519a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10a      	bne.n	80051ba <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051a4:	2300      	movs	r3, #0
 80051a6:	613b      	str	r3, [r7, #16]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	613b      	str	r3, [r7, #16]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	613b      	str	r3, [r7, #16]
 80051b8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d002      	beq.n	80051c8 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	77fb      	strb	r3, [r7, #31]
 80051c6:	e000      	b.n	80051ca <HAL_SPI_Transmit+0x2d2>
  }

error:
 80051c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80051da:	7ffb      	ldrb	r3, [r7, #31]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3720      	adds	r7, #32
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	603b      	str	r3, [r7, #0]
 80051f0:	4613      	mov	r3, r2
 80051f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051f4:	2300      	movs	r3, #0
 80051f6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005200:	d112      	bne.n	8005228 <HAL_SPI_Receive+0x44>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10e      	bne.n	8005228 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2204      	movs	r2, #4
 800520e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005212:	88fa      	ldrh	r2, [r7, #6]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	4613      	mov	r3, r2
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	68b9      	ldr	r1, [r7, #8]
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 f908 	bl	8005434 <HAL_SPI_TransmitReceive>
 8005224:	4603      	mov	r3, r0
 8005226:	e101      	b.n	800542c <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800522e:	2b01      	cmp	r3, #1
 8005230:	d101      	bne.n	8005236 <HAL_SPI_Receive+0x52>
 8005232:	2302      	movs	r3, #2
 8005234:	e0fa      	b.n	800542c <HAL_SPI_Receive+0x248>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800523e:	f7fc ff77 	bl	8002130 <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b01      	cmp	r3, #1
 800524e:	d002      	beq.n	8005256 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005250:	2302      	movs	r3, #2
 8005252:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005254:	e0e1      	b.n	800541a <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <HAL_SPI_Receive+0x7e>
 800525c:	88fb      	ldrh	r3, [r7, #6]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d102      	bne.n	8005268 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005266:	e0d8      	b.n	800541a <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2204      	movs	r2, #4
 800526c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	88fa      	ldrh	r2, [r7, #6]
 8005280:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	88fa      	ldrh	r2, [r7, #6]
 8005288:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052b2:	d908      	bls.n	80052c6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052c2:	605a      	str	r2, [r3, #4]
 80052c4:	e007      	b.n	80052d6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052d4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052de:	d107      	bne.n	80052f0 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052ee:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fa:	2b40      	cmp	r3, #64	; 0x40
 80052fc:	d007      	beq.n	800530e <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800530c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005316:	d867      	bhi.n	80053e8 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005318:	e030      	b.n	800537c <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b01      	cmp	r3, #1
 8005326:	d117      	bne.n	8005358 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f103 020c 	add.w	r2, r3, #12
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	7812      	ldrb	r2, [r2, #0]
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	1c5a      	adds	r2, r3, #1
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800534a:	b29b      	uxth	r3, r3
 800534c:	3b01      	subs	r3, #1
 800534e:	b29a      	uxth	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005356:	e011      	b.n	800537c <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005358:	f7fc feea 	bl	8002130 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	429a      	cmp	r2, r3
 8005366:	d803      	bhi.n	8005370 <HAL_SPI_Receive+0x18c>
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536e:	d102      	bne.n	8005376 <HAL_SPI_Receive+0x192>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d102      	bne.n	800537c <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	75fb      	strb	r3, [r7, #23]
          goto error;
 800537a:	e04e      	b.n	800541a <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005382:	b29b      	uxth	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1c8      	bne.n	800531a <HAL_SPI_Receive+0x136>
 8005388:	e034      	b.n	80053f4 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b01      	cmp	r3, #1
 8005396:	d115      	bne.n	80053c4 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	b292      	uxth	r2, r2
 80053a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	1c9a      	adds	r2, r3, #2
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	3b01      	subs	r3, #1
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80053c2:	e011      	b.n	80053e8 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053c4:	f7fc feb4 	bl	8002130 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d803      	bhi.n	80053dc <HAL_SPI_Receive+0x1f8>
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053da:	d102      	bne.n	80053e2 <HAL_SPI_Receive+0x1fe>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d102      	bne.n	80053e8 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80053e6:	e018      	b.n	800541a <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1ca      	bne.n	800538a <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	6839      	ldr	r1, [r7, #0]
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 fb1e 	bl	8005a3a <SPI_EndRxTransaction>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2220      	movs	r2, #32
 8005408:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	75fb      	strb	r3, [r7, #23]
 8005416:	e000      	b.n	800541a <HAL_SPI_Receive+0x236>
  }

error :
 8005418:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800542a:	7dfb      	ldrb	r3, [r7, #23]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08a      	sub	sp, #40	; 0x28
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005442:	2301      	movs	r3, #1
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005446:	2300      	movs	r3, #0
 8005448:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d004      	beq.n	800545e <HAL_SPI_TransmitReceive+0x2a>
 8005454:	f240 41c3 	movw	r1, #1219	; 0x4c3
 8005458:	4895      	ldr	r0, [pc, #596]	; (80056b0 <HAL_SPI_TransmitReceive+0x27c>)
 800545a:	f7fc f87c 	bl	8001556 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_SPI_TransmitReceive+0x38>
 8005468:	2302      	movs	r3, #2
 800546a:	e1fd      	b.n	8005868 <HAL_SPI_TransmitReceive+0x434>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005474:	f7fc fe5c 	bl	8002130 <HAL_GetTick>
 8005478:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005480:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005488:	887b      	ldrh	r3, [r7, #2]
 800548a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800548c:	887b      	ldrh	r3, [r7, #2]
 800548e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005490:	7efb      	ldrb	r3, [r7, #27]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d00e      	beq.n	80054b4 <HAL_SPI_TransmitReceive+0x80>
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800549c:	d106      	bne.n	80054ac <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d102      	bne.n	80054ac <HAL_SPI_TransmitReceive+0x78>
 80054a6:	7efb      	ldrb	r3, [r7, #27]
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	d003      	beq.n	80054b4 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 80054ac:	2302      	movs	r3, #2
 80054ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80054b2:	e1cf      	b.n	8005854 <HAL_SPI_TransmitReceive+0x420>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d005      	beq.n	80054c6 <HAL_SPI_TransmitReceive+0x92>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <HAL_SPI_TransmitReceive+0x92>
 80054c0:	887b      	ldrh	r3, [r7, #2]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d103      	bne.n	80054ce <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80054cc:	e1c2      	b.n	8005854 <HAL_SPI_TransmitReceive+0x420>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	d003      	beq.n	80054e2 <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2205      	movs	r2, #5
 80054de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	887a      	ldrh	r2, [r7, #2]
 80054f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	887a      	ldrh	r2, [r7, #2]
 80054fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	887a      	ldrh	r2, [r7, #2]
 8005508:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	887a      	ldrh	r2, [r7, #2]
 800550e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005524:	d802      	bhi.n	800552c <HAL_SPI_TransmitReceive+0xf8>
 8005526:	8a3b      	ldrh	r3, [r7, #16]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d908      	bls.n	800553e <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800553a:	605a      	str	r2, [r3, #4]
 800553c:	e007      	b.n	800554e <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800554c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005558:	2b40      	cmp	r3, #64	; 0x40
 800555a:	d007      	beq.n	800556c <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800556a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005574:	d97c      	bls.n	8005670 <HAL_SPI_TransmitReceive+0x23c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d002      	beq.n	8005584 <HAL_SPI_TransmitReceive+0x150>
 800557e:	8a7b      	ldrh	r3, [r7, #18]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d169      	bne.n	8005658 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005588:	881a      	ldrh	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005594:	1c9a      	adds	r2, r3, #2
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800559e:	b29b      	uxth	r3, r3
 80055a0:	3b01      	subs	r3, #1
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055a8:	e056      	b.n	8005658 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d11b      	bne.n	80055f0 <HAL_SPI_TransmitReceive+0x1bc>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055bc:	b29b      	uxth	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d016      	beq.n	80055f0 <HAL_SPI_TransmitReceive+0x1bc>
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d113      	bne.n	80055f0 <HAL_SPI_TransmitReceive+0x1bc>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055cc:	881a      	ldrh	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d8:	1c9a      	adds	r2, r3, #2
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d11c      	bne.n	8005638 <HAL_SPI_TransmitReceive+0x204>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d016      	beq.n	8005638 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	b292      	uxth	r2, r2
 8005616:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561c:	1c9a      	adds	r2, r3, #2
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005628:	b29b      	uxth	r3, r3
 800562a:	3b01      	subs	r3, #1
 800562c:	b29a      	uxth	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005634:	2301      	movs	r3, #1
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005638:	f7fc fd7a 	bl	8002130 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005644:	429a      	cmp	r2, r3
 8005646:	d807      	bhi.n	8005658 <HAL_SPI_TransmitReceive+0x224>
 8005648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564e:	d003      	beq.n	8005658 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005656:	e0fd      	b.n	8005854 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800565c:	b29b      	uxth	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1a3      	bne.n	80055aa <HAL_SPI_TransmitReceive+0x176>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005668:	b29b      	uxth	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d19d      	bne.n	80055aa <HAL_SPI_TransmitReceive+0x176>
 800566e:	e0e1      	b.n	8005834 <HAL_SPI_TransmitReceive+0x400>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <HAL_SPI_TransmitReceive+0x24c>
 8005678:	8a7b      	ldrh	r3, [r7, #18]
 800567a:	2b01      	cmp	r3, #1
 800567c:	f040 80cd 	bne.w	800581a <HAL_SPI_TransmitReceive+0x3e6>
    {
      if (hspi->TxXferCount > 1U)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005684:	b29b      	uxth	r3, r3
 8005686:	2b01      	cmp	r3, #1
 8005688:	d914      	bls.n	80056b4 <HAL_SPI_TransmitReceive+0x280>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	881a      	ldrh	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569a:	1c9a      	adds	r2, r3, #2
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	3b02      	subs	r3, #2
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056ae:	e0b4      	b.n	800581a <HAL_SPI_TransmitReceive+0x3e6>
 80056b0:	080092d0 	.word	0x080092d0
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	330c      	adds	r3, #12
 80056be:	7812      	ldrb	r2, [r2, #0]
 80056c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	3b01      	subs	r3, #1
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056da:	e09e      	b.n	800581a <HAL_SPI_TransmitReceive+0x3e6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d134      	bne.n	8005754 <HAL_SPI_TransmitReceive+0x320>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d02f      	beq.n	8005754 <HAL_SPI_TransmitReceive+0x320>
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d12c      	bne.n	8005754 <HAL_SPI_TransmitReceive+0x320>
      {
        if (hspi->TxXferCount > 1U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b01      	cmp	r3, #1
 8005702:	d912      	bls.n	800572a <HAL_SPI_TransmitReceive+0x2f6>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005708:	881a      	ldrh	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005714:	1c9a      	adds	r2, r3, #2
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800571e:	b29b      	uxth	r3, r3
 8005720:	3b02      	subs	r3, #2
 8005722:	b29a      	uxth	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005728:	e012      	b.n	8005750 <HAL_SPI_TransmitReceive+0x31c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	330c      	adds	r3, #12
 8005734:	7812      	ldrb	r2, [r2, #0]
 8005736:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573c:	1c5a      	adds	r2, r3, #1
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005746:	b29b      	uxth	r3, r3
 8005748:	3b01      	subs	r3, #1
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b01      	cmp	r3, #1
 8005760:	d148      	bne.n	80057f4 <HAL_SPI_TransmitReceive+0x3c0>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005768:	b29b      	uxth	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d042      	beq.n	80057f4 <HAL_SPI_TransmitReceive+0x3c0>
      {
        if (hspi->RxXferCount > 1U)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b01      	cmp	r3, #1
 8005778:	d923      	bls.n	80057c2 <HAL_SPI_TransmitReceive+0x38e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005784:	b292      	uxth	r2, r2
 8005786:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578c:	1c9a      	adds	r2, r3, #2
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b02      	subs	r3, #2
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d81f      	bhi.n	80057f0 <HAL_SPI_TransmitReceive+0x3bc>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057be:	605a      	str	r2, [r3, #4]
 80057c0:	e016      	b.n	80057f0 <HAL_SPI_TransmitReceive+0x3bc>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f103 020c 	add.w	r2, r3, #12
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	7812      	ldrb	r2, [r2, #0]
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	1c5a      	adds	r2, r3, #1
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057f0:	2301      	movs	r3, #1
 80057f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80057f4:	f7fc fc9c 	bl	8002130 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005800:	429a      	cmp	r2, r3
 8005802:	d803      	bhi.n	800580c <HAL_SPI_TransmitReceive+0x3d8>
 8005804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580a:	d102      	bne.n	8005812 <HAL_SPI_TransmitReceive+0x3de>
 800580c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580e:	2b00      	cmp	r3, #0
 8005810:	d103      	bne.n	800581a <HAL_SPI_TransmitReceive+0x3e6>
      {
        errorcode = HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005818:	e01c      	b.n	8005854 <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800581e:	b29b      	uxth	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	f47f af5b 	bne.w	80056dc <HAL_SPI_TransmitReceive+0x2a8>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	f47f af54 	bne.w	80056dc <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005834:	69fa      	ldr	r2, [r7, #28]
 8005836:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 f956 	bl	8005aea <SPI_EndRxTxTransaction>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d006      	beq.n	8005852 <HAL_SPI_TransmitReceive+0x41e>
  {
    errorcode = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2220      	movs	r2, #32
 800584e:	661a      	str	r2, [r3, #96]	; 0x60
 8005850:	e000      	b.n	8005854 <HAL_SPI_TransmitReceive+0x420>
  }

error :
 8005852:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005864:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005868:	4618      	mov	r0, r3
 800586a:	3728      	adds	r7, #40	; 0x28
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800587e:	b2db      	uxtb	r3, r3
}
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	603b      	str	r3, [r7, #0]
 8005898:	4613      	mov	r3, r2
 800589a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800589c:	e04c      	b.n	8005938 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a4:	d048      	beq.n	8005938 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80058a6:	f7fc fc43 	bl	8002130 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d902      	bls.n	80058bc <SPI_WaitFlagStateUntilTimeout+0x30>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d13d      	bne.n	8005938 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058d4:	d111      	bne.n	80058fa <SPI_WaitFlagStateUntilTimeout+0x6e>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058de:	d004      	beq.n	80058ea <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058e8:	d107      	bne.n	80058fa <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005902:	d10f      	bne.n	8005924 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005922:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e00f      	b.n	8005958 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	4013      	ands	r3, r2
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	429a      	cmp	r2, r3
 8005946:	bf0c      	ite	eq
 8005948:	2301      	moveq	r3, #1
 800594a:	2300      	movne	r3, #0
 800594c:	b2db      	uxtb	r3, r3
 800594e:	461a      	mov	r2, r3
 8005950:	79fb      	ldrb	r3, [r7, #7]
 8005952:	429a      	cmp	r2, r3
 8005954:	d1a3      	bne.n	800589e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
 800596c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800596e:	e057      	b.n	8005a20 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005976:	d106      	bne.n	8005986 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d103      	bne.n	8005986 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	330c      	adds	r3, #12
 8005984:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598c:	d048      	beq.n	8005a20 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800598e:	f7fc fbcf 	bl	8002130 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d902      	bls.n	80059a4 <SPI_WaitFifoStateUntilTimeout+0x44>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d13d      	bne.n	8005a20 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059bc:	d111      	bne.n	80059e2 <SPI_WaitFifoStateUntilTimeout+0x82>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059c6:	d004      	beq.n	80059d2 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d0:	d107      	bne.n	80059e2 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ea:	d10f      	bne.n	8005a0c <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e008      	b.n	8005a32 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689a      	ldr	r2, [r3, #8]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d19f      	bne.n	8005970 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b086      	sub	sp, #24
 8005a3e:	af02      	add	r7, sp, #8
 8005a40:	60f8      	str	r0, [r7, #12]
 8005a42:	60b9      	str	r1, [r7, #8]
 8005a44:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a4e:	d111      	bne.n	8005a74 <SPI_EndRxTransaction+0x3a>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a58:	d004      	beq.n	8005a64 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a62:	d107      	bne.n	8005a74 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a72:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	2180      	movs	r1, #128	; 0x80
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f7ff ff04 	bl	800588c <SPI_WaitFlagStateUntilTimeout>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d007      	beq.n	8005a9a <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a8e:	f043 0220 	orr.w	r2, r3, #32
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e023      	b.n	8005ae2 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aa2:	d11d      	bne.n	8005ae0 <SPI_EndRxTransaction+0xa6>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aac:	d004      	beq.n	8005ab8 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab6:	d113      	bne.n	8005ae0 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f7ff ff4b 	bl	8005960 <SPI_WaitFifoStateUntilTimeout>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d007      	beq.n	8005ae0 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad4:	f043 0220 	orr.w	r2, r3, #32
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e000      	b.n	8005ae2 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b086      	sub	sp, #24
 8005aee:	af02      	add	r7, sp, #8
 8005af0:	60f8      	str	r0, [r7, #12]
 8005af2:	60b9      	str	r1, [r7, #8]
 8005af4:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f7ff ff2c 	bl	8005960 <SPI_WaitFifoStateUntilTimeout>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d007      	beq.n	8005b1e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b12:	f043 0220 	orr.w	r2, r3, #32
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e027      	b.n	8005b6e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2200      	movs	r2, #0
 8005b26:	2180      	movs	r1, #128	; 0x80
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f7ff feaf 	bl	800588c <SPI_WaitFlagStateUntilTimeout>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d007      	beq.n	8005b44 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b38:	f043 0220 	orr.w	r2, r3, #32
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e014      	b.n	8005b6e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f7ff ff05 	bl	8005960 <SPI_WaitFifoStateUntilTimeout>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d007      	beq.n	8005b6c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b60:	f043 0220 	orr.w	r2, r3, #32
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e000      	b.n	8005b6e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e0b9      	b.n	8005cfe <HAL_TIM_Base_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a5e      	ldr	r2, [pc, #376]	; (8005d08 <HAL_TIM_Base_Init+0x190>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d031      	beq.n	8005bf8 <HAL_TIM_Base_Init+0x80>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b9c:	d02c      	beq.n	8005bf8 <HAL_TIM_Base_Init+0x80>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a5a      	ldr	r2, [pc, #360]	; (8005d0c <HAL_TIM_Base_Init+0x194>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d027      	beq.n	8005bf8 <HAL_TIM_Base_Init+0x80>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a58      	ldr	r2, [pc, #352]	; (8005d10 <HAL_TIM_Base_Init+0x198>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d022      	beq.n	8005bf8 <HAL_TIM_Base_Init+0x80>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a57      	ldr	r2, [pc, #348]	; (8005d14 <HAL_TIM_Base_Init+0x19c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d01d      	beq.n	8005bf8 <HAL_TIM_Base_Init+0x80>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a55      	ldr	r2, [pc, #340]	; (8005d18 <HAL_TIM_Base_Init+0x1a0>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d018      	beq.n	8005bf8 <HAL_TIM_Base_Init+0x80>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a54      	ldr	r2, [pc, #336]	; (8005d1c <HAL_TIM_Base_Init+0x1a4>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d013      	beq.n	8005bf8 <HAL_TIM_Base_Init+0x80>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a52      	ldr	r2, [pc, #328]	; (8005d20 <HAL_TIM_Base_Init+0x1a8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d00e      	beq.n	8005bf8 <HAL_TIM_Base_Init+0x80>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a51      	ldr	r2, [pc, #324]	; (8005d24 <HAL_TIM_Base_Init+0x1ac>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d009      	beq.n	8005bf8 <HAL_TIM_Base_Init+0x80>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a4f      	ldr	r2, [pc, #316]	; (8005d28 <HAL_TIM_Base_Init+0x1b0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d004      	beq.n	8005bf8 <HAL_TIM_Base_Init+0x80>
 8005bee:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8005bf2:	484e      	ldr	r0, [pc, #312]	; (8005d2c <HAL_TIM_Base_Init+0x1b4>)
 8005bf4:	f7fb fcaf 	bl	8001556 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d014      	beq.n	8005c2a <HAL_TIM_Base_Init+0xb2>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	2b10      	cmp	r3, #16
 8005c06:	d010      	beq.n	8005c2a <HAL_TIM_Base_Init+0xb2>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	2b20      	cmp	r3, #32
 8005c0e:	d00c      	beq.n	8005c2a <HAL_TIM_Base_Init+0xb2>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	2b40      	cmp	r3, #64	; 0x40
 8005c16:	d008      	beq.n	8005c2a <HAL_TIM_Base_Init+0xb2>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	2b60      	cmp	r3, #96	; 0x60
 8005c1e:	d004      	beq.n	8005c2a <HAL_TIM_Base_Init+0xb2>
 8005c20:	f240 111d 	movw	r1, #285	; 0x11d
 8005c24:	4841      	ldr	r0, [pc, #260]	; (8005d2c <HAL_TIM_Base_Init+0x1b4>)
 8005c26:	f7fb fc96 	bl	8001556 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00e      	beq.n	8005c50 <HAL_TIM_Base_Init+0xd8>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c3a:	d009      	beq.n	8005c50 <HAL_TIM_Base_Init+0xd8>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c44:	d004      	beq.n	8005c50 <HAL_TIM_Base_Init+0xd8>
 8005c46:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8005c4a:	4838      	ldr	r0, [pc, #224]	; (8005d2c <HAL_TIM_Base_Init+0x1b4>)
 8005c4c:	f7fb fc83 	bl	8001556 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d008      	beq.n	8005c6a <HAL_TIM_Base_Init+0xf2>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	2b80      	cmp	r3, #128	; 0x80
 8005c5e:	d004      	beq.n	8005c6a <HAL_TIM_Base_Init+0xf2>
 8005c60:	f240 111f 	movw	r1, #287	; 0x11f
 8005c64:	4831      	ldr	r0, [pc, #196]	; (8005d2c <HAL_TIM_Base_Init+0x1b4>)
 8005c66:	f7fb fc76 	bl	8001556 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <HAL_TIM_Base_Init+0x10c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7fb ff0a 	bl	8001a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3304      	adds	r3, #4
 8005c94:	4619      	mov	r1, r3
 8005c96:	4610      	mov	r0, r2
 8005c98:	f001 f8da 	bl	8006e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	40012c00 	.word	0x40012c00
 8005d0c:	40000400 	.word	0x40000400
 8005d10:	40000800 	.word	0x40000800
 8005d14:	40001000 	.word	0x40001000
 8005d18:	40001400 	.word	0x40001400
 8005d1c:	40013400 	.word	0x40013400
 8005d20:	40014000 	.word	0x40014000
 8005d24:	40014400 	.word	0x40014400
 8005d28:	40014800 	.word	0x40014800
 8005d2c:	08009308 	.word	0x08009308

08005d30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a31      	ldr	r2, [pc, #196]	; (8005e04 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d031      	beq.n	8005da6 <HAL_TIM_Base_Start_IT+0x76>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d4a:	d02c      	beq.n	8005da6 <HAL_TIM_Base_Start_IT+0x76>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a2d      	ldr	r2, [pc, #180]	; (8005e08 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d027      	beq.n	8005da6 <HAL_TIM_Base_Start_IT+0x76>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a2c      	ldr	r2, [pc, #176]	; (8005e0c <HAL_TIM_Base_Start_IT+0xdc>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d022      	beq.n	8005da6 <HAL_TIM_Base_Start_IT+0x76>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a2a      	ldr	r2, [pc, #168]	; (8005e10 <HAL_TIM_Base_Start_IT+0xe0>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d01d      	beq.n	8005da6 <HAL_TIM_Base_Start_IT+0x76>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a29      	ldr	r2, [pc, #164]	; (8005e14 <HAL_TIM_Base_Start_IT+0xe4>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d018      	beq.n	8005da6 <HAL_TIM_Base_Start_IT+0x76>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a27      	ldr	r2, [pc, #156]	; (8005e18 <HAL_TIM_Base_Start_IT+0xe8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d013      	beq.n	8005da6 <HAL_TIM_Base_Start_IT+0x76>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a26      	ldr	r2, [pc, #152]	; (8005e1c <HAL_TIM_Base_Start_IT+0xec>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d00e      	beq.n	8005da6 <HAL_TIM_Base_Start_IT+0x76>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a24      	ldr	r2, [pc, #144]	; (8005e20 <HAL_TIM_Base_Start_IT+0xf0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d009      	beq.n	8005da6 <HAL_TIM_Base_Start_IT+0x76>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a23      	ldr	r2, [pc, #140]	; (8005e24 <HAL_TIM_Base_Start_IT+0xf4>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d004      	beq.n	8005da6 <HAL_TIM_Base_Start_IT+0x76>
 8005d9c:	f240 11d1 	movw	r1, #465	; 0x1d1
 8005da0:	4821      	ldr	r0, [pc, #132]	; (8005e28 <HAL_TIM_Base_Start_IT+0xf8>)
 8005da2:	f7fb fbd8 	bl	8001556 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d001      	beq.n	8005db6 <HAL_TIM_Base_Start_IT+0x86>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e021      	b.n	8005dfa <HAL_TIM_Base_Start_IT+0xca>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2202      	movs	r2, #2
 8005dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68da      	ldr	r2, [r3, #12]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f042 0201 	orr.w	r2, r2, #1
 8005dcc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	4b15      	ldr	r3, [pc, #84]	; (8005e2c <HAL_TIM_Base_Start_IT+0xfc>)
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b06      	cmp	r3, #6
 8005dde:	d00b      	beq.n	8005df8 <HAL_TIM_Base_Start_IT+0xc8>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de6:	d007      	beq.n	8005df8 <HAL_TIM_Base_Start_IT+0xc8>
  {
    __HAL_TIM_ENABLE(htim);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0201 	orr.w	r2, r2, #1
 8005df6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	40012c00 	.word	0x40012c00
 8005e08:	40000400 	.word	0x40000400
 8005e0c:	40000800 	.word	0x40000800
 8005e10:	40001000 	.word	0x40001000
 8005e14:	40001400 	.word	0x40001400
 8005e18:	40013400 	.word	0x40013400
 8005e1c:	40014000 	.word	0x40014000
 8005e20:	40014400 	.word	0x40014400
 8005e24:	40014800 	.word	0x40014800
 8005e28:	08009308 	.word	0x08009308
 8005e2c:	00010007 	.word	0x00010007

08005e30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e0b9      	b.n	8005fb6 <HAL_TIM_PWM_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a5e      	ldr	r2, [pc, #376]	; (8005fc0 <HAL_TIM_PWM_Init+0x190>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d031      	beq.n	8005eb0 <HAL_TIM_PWM_Init+0x80>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e54:	d02c      	beq.n	8005eb0 <HAL_TIM_PWM_Init+0x80>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a5a      	ldr	r2, [pc, #360]	; (8005fc4 <HAL_TIM_PWM_Init+0x194>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d027      	beq.n	8005eb0 <HAL_TIM_PWM_Init+0x80>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a58      	ldr	r2, [pc, #352]	; (8005fc8 <HAL_TIM_PWM_Init+0x198>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d022      	beq.n	8005eb0 <HAL_TIM_PWM_Init+0x80>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a57      	ldr	r2, [pc, #348]	; (8005fcc <HAL_TIM_PWM_Init+0x19c>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d01d      	beq.n	8005eb0 <HAL_TIM_PWM_Init+0x80>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a55      	ldr	r2, [pc, #340]	; (8005fd0 <HAL_TIM_PWM_Init+0x1a0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d018      	beq.n	8005eb0 <HAL_TIM_PWM_Init+0x80>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a54      	ldr	r2, [pc, #336]	; (8005fd4 <HAL_TIM_PWM_Init+0x1a4>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d013      	beq.n	8005eb0 <HAL_TIM_PWM_Init+0x80>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a52      	ldr	r2, [pc, #328]	; (8005fd8 <HAL_TIM_PWM_Init+0x1a8>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d00e      	beq.n	8005eb0 <HAL_TIM_PWM_Init+0x80>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a51      	ldr	r2, [pc, #324]	; (8005fdc <HAL_TIM_PWM_Init+0x1ac>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d009      	beq.n	8005eb0 <HAL_TIM_PWM_Init+0x80>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a4f      	ldr	r2, [pc, #316]	; (8005fe0 <HAL_TIM_PWM_Init+0x1b0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d004      	beq.n	8005eb0 <HAL_TIM_PWM_Init+0x80>
 8005ea6:	f240 41ec 	movw	r1, #1260	; 0x4ec
 8005eaa:	484e      	ldr	r0, [pc, #312]	; (8005fe4 <HAL_TIM_PWM_Init+0x1b4>)
 8005eac:	f7fb fb53 	bl	8001556 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d014      	beq.n	8005ee2 <HAL_TIM_PWM_Init+0xb2>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	2b10      	cmp	r3, #16
 8005ebe:	d010      	beq.n	8005ee2 <HAL_TIM_PWM_Init+0xb2>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	2b20      	cmp	r3, #32
 8005ec6:	d00c      	beq.n	8005ee2 <HAL_TIM_PWM_Init+0xb2>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	2b40      	cmp	r3, #64	; 0x40
 8005ece:	d008      	beq.n	8005ee2 <HAL_TIM_PWM_Init+0xb2>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	2b60      	cmp	r3, #96	; 0x60
 8005ed6:	d004      	beq.n	8005ee2 <HAL_TIM_PWM_Init+0xb2>
 8005ed8:	f240 41ed 	movw	r1, #1261	; 0x4ed
 8005edc:	4841      	ldr	r0, [pc, #260]	; (8005fe4 <HAL_TIM_PWM_Init+0x1b4>)
 8005ede:	f7fb fb3a 	bl	8001556 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00e      	beq.n	8005f08 <HAL_TIM_PWM_Init+0xd8>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ef2:	d009      	beq.n	8005f08 <HAL_TIM_PWM_Init+0xd8>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005efc:	d004      	beq.n	8005f08 <HAL_TIM_PWM_Init+0xd8>
 8005efe:	f240 41ee 	movw	r1, #1262	; 0x4ee
 8005f02:	4838      	ldr	r0, [pc, #224]	; (8005fe4 <HAL_TIM_PWM_Init+0x1b4>)
 8005f04:	f7fb fb27 	bl	8001556 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d008      	beq.n	8005f22 <HAL_TIM_PWM_Init+0xf2>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	2b80      	cmp	r3, #128	; 0x80
 8005f16:	d004      	beq.n	8005f22 <HAL_TIM_PWM_Init+0xf2>
 8005f18:	f240 41ef 	movw	r1, #1263	; 0x4ef
 8005f1c:	4831      	ldr	r0, [pc, #196]	; (8005fe4 <HAL_TIM_PWM_Init+0x1b4>)
 8005f1e:	f7fb fb1a 	bl	8001556 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d106      	bne.n	8005f3c <HAL_TIM_PWM_Init+0x10c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7fb fd64 	bl	8001a04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4610      	mov	r0, r2
 8005f50:	f000 ff7e 	bl	8006e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	40012c00 	.word	0x40012c00
 8005fc4:	40000400 	.word	0x40000400
 8005fc8:	40000800 	.word	0x40000800
 8005fcc:	40001000 	.word	0x40001000
 8005fd0:	40001400 	.word	0x40001400
 8005fd4:	40013400 	.word	0x40013400
 8005fd8:	40014000 	.word	0x40014000
 8005fdc:	40014400 	.word	0x40014400
 8005fe0:	40014800 	.word	0x40014800
 8005fe4:	08009308 	.word	0x08009308

08005fe8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
 8005ff4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a94      	ldr	r2, [pc, #592]	; (800624c <HAL_TIM_PWM_Start_DMA+0x264>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d111      	bne.n	8006024 <HAL_TIM_PWM_Start_DMA+0x3c>
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d078      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	2b04      	cmp	r3, #4
 800600a:	d075      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b08      	cmp	r3, #8
 8006010:	d072      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b0c      	cmp	r3, #12
 8006016:	d06f      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2b10      	cmp	r3, #16
 800601c:	d06c      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2b14      	cmp	r3, #20
 8006022:	d069      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800602c:	d10b      	bne.n	8006046 <HAL_TIM_PWM_Start_DMA+0x5e>
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d061      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2b04      	cmp	r3, #4
 8006038:	d05e      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b08      	cmp	r3, #8
 800603e:	d05b      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2b0c      	cmp	r3, #12
 8006044:	d058      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a81      	ldr	r2, [pc, #516]	; (8006250 <HAL_TIM_PWM_Start_DMA+0x268>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d10b      	bne.n	8006068 <HAL_TIM_PWM_Start_DMA+0x80>
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d050      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b04      	cmp	r3, #4
 800605a:	d04d      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2b08      	cmp	r3, #8
 8006060:	d04a      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b0c      	cmp	r3, #12
 8006066:	d047      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a79      	ldr	r2, [pc, #484]	; (8006254 <HAL_TIM_PWM_Start_DMA+0x26c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d10b      	bne.n	800608a <HAL_TIM_PWM_Start_DMA+0xa2>
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d03f      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2b04      	cmp	r3, #4
 800607c:	d03c      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	2b08      	cmp	r3, #8
 8006082:	d039      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2b0c      	cmp	r3, #12
 8006088:	d036      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a72      	ldr	r2, [pc, #456]	; (8006258 <HAL_TIM_PWM_Start_DMA+0x270>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d111      	bne.n	80060b8 <HAL_TIM_PWM_Start_DMA+0xd0>
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d02e      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	2b04      	cmp	r3, #4
 800609e:	d02b      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b08      	cmp	r3, #8
 80060a4:	d028      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	2b0c      	cmp	r3, #12
 80060aa:	d025      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b10      	cmp	r3, #16
 80060b0:	d022      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2b14      	cmp	r3, #20
 80060b6:	d01f      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a67      	ldr	r2, [pc, #412]	; (800625c <HAL_TIM_PWM_Start_DMA+0x274>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d105      	bne.n	80060ce <HAL_TIM_PWM_Start_DMA+0xe6>
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d017      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2b04      	cmp	r3, #4
 80060cc:	d014      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a63      	ldr	r2, [pc, #396]	; (8006260 <HAL_TIM_PWM_Start_DMA+0x278>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d102      	bne.n	80060de <HAL_TIM_PWM_Start_DMA+0xf6>
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00c      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a60      	ldr	r2, [pc, #384]	; (8006264 <HAL_TIM_PWM_Start_DMA+0x27c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d102      	bne.n	80060ee <HAL_TIM_PWM_Start_DMA+0x106>
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d004      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x110>
 80060ee:	f240 615f 	movw	r1, #1631	; 0x65f
 80060f2:	485d      	ldr	r0, [pc, #372]	; (8006268 <HAL_TIM_PWM_Start_DMA+0x280>)
 80060f4:	f7fb fa2f 	bl	8001556 <assert_failed>

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d109      	bne.n	8006112 <HAL_TIM_PWM_Start_DMA+0x12a>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	bf0c      	ite	eq
 800610a:	2301      	moveq	r3, #1
 800610c:	2300      	movne	r3, #0
 800610e:	b2db      	uxtb	r3, r3
 8006110:	e03c      	b.n	800618c <HAL_TIM_PWM_Start_DMA+0x1a4>
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	2b04      	cmp	r3, #4
 8006116:	d109      	bne.n	800612c <HAL_TIM_PWM_Start_DMA+0x144>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b02      	cmp	r3, #2
 8006122:	bf0c      	ite	eq
 8006124:	2301      	moveq	r3, #1
 8006126:	2300      	movne	r3, #0
 8006128:	b2db      	uxtb	r3, r3
 800612a:	e02f      	b.n	800618c <HAL_TIM_PWM_Start_DMA+0x1a4>
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2b08      	cmp	r3, #8
 8006130:	d109      	bne.n	8006146 <HAL_TIM_PWM_Start_DMA+0x15e>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b02      	cmp	r3, #2
 800613c:	bf0c      	ite	eq
 800613e:	2301      	moveq	r3, #1
 8006140:	2300      	movne	r3, #0
 8006142:	b2db      	uxtb	r3, r3
 8006144:	e022      	b.n	800618c <HAL_TIM_PWM_Start_DMA+0x1a4>
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	2b0c      	cmp	r3, #12
 800614a:	d109      	bne.n	8006160 <HAL_TIM_PWM_Start_DMA+0x178>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b02      	cmp	r3, #2
 8006156:	bf0c      	ite	eq
 8006158:	2301      	moveq	r3, #1
 800615a:	2300      	movne	r3, #0
 800615c:	b2db      	uxtb	r3, r3
 800615e:	e015      	b.n	800618c <HAL_TIM_PWM_Start_DMA+0x1a4>
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	2b10      	cmp	r3, #16
 8006164:	d109      	bne.n	800617a <HAL_TIM_PWM_Start_DMA+0x192>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b02      	cmp	r3, #2
 8006170:	bf0c      	ite	eq
 8006172:	2301      	moveq	r3, #1
 8006174:	2300      	movne	r3, #0
 8006176:	b2db      	uxtb	r3, r3
 8006178:	e008      	b.n	800618c <HAL_TIM_PWM_Start_DMA+0x1a4>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	bf0c      	ite	eq
 8006186:	2301      	moveq	r3, #1
 8006188:	2300      	movne	r3, #0
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    return HAL_BUSY;
 8006190:	2302      	movs	r3, #2
 8006192:	e187      	b.n	80064a4 <HAL_TIM_PWM_Start_DMA+0x4bc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d109      	bne.n	80061ae <HAL_TIM_PWM_Start_DMA+0x1c6>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	bf0c      	ite	eq
 80061a6:	2301      	moveq	r3, #1
 80061a8:	2300      	movne	r3, #0
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	e03c      	b.n	8006228 <HAL_TIM_PWM_Start_DMA+0x240>
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b04      	cmp	r3, #4
 80061b2:	d109      	bne.n	80061c8 <HAL_TIM_PWM_Start_DMA+0x1e0>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b01      	cmp	r3, #1
 80061be:	bf0c      	ite	eq
 80061c0:	2301      	moveq	r3, #1
 80061c2:	2300      	movne	r3, #0
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	e02f      	b.n	8006228 <HAL_TIM_PWM_Start_DMA+0x240>
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	2b08      	cmp	r3, #8
 80061cc:	d109      	bne.n	80061e2 <HAL_TIM_PWM_Start_DMA+0x1fa>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	bf0c      	ite	eq
 80061da:	2301      	moveq	r3, #1
 80061dc:	2300      	movne	r3, #0
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	e022      	b.n	8006228 <HAL_TIM_PWM_Start_DMA+0x240>
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2b0c      	cmp	r3, #12
 80061e6:	d109      	bne.n	80061fc <HAL_TIM_PWM_Start_DMA+0x214>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	bf0c      	ite	eq
 80061f4:	2301      	moveq	r3, #1
 80061f6:	2300      	movne	r3, #0
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	e015      	b.n	8006228 <HAL_TIM_PWM_Start_DMA+0x240>
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2b10      	cmp	r3, #16
 8006200:	d109      	bne.n	8006216 <HAL_TIM_PWM_Start_DMA+0x22e>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b01      	cmp	r3, #1
 800620c:	bf0c      	ite	eq
 800620e:	2301      	moveq	r3, #1
 8006210:	2300      	movne	r3, #0
 8006212:	b2db      	uxtb	r3, r3
 8006214:	e008      	b.n	8006228 <HAL_TIM_PWM_Start_DMA+0x240>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b01      	cmp	r3, #1
 8006220:	bf0c      	ite	eq
 8006222:	2301      	moveq	r3, #1
 8006224:	2300      	movne	r3, #0
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b00      	cmp	r3, #0
 800622a:	d044      	beq.n	80062b6 <HAL_TIM_PWM_Start_DMA+0x2ce>
  {
    if ((pData == NULL) && (Length > 0U))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d104      	bne.n	800623c <HAL_TIM_PWM_Start_DMA+0x254>
 8006232:	887b      	ldrh	r3, [r7, #2]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <HAL_TIM_PWM_Start_DMA+0x254>
    {
      return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e133      	b.n	80064a4 <HAL_TIM_PWM_Start_DMA+0x4bc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d114      	bne.n	800626c <HAL_TIM_PWM_Start_DMA+0x284>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2202      	movs	r2, #2
 8006246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800624a:	e036      	b.n	80062ba <HAL_TIM_PWM_Start_DMA+0x2d2>
 800624c:	40012c00 	.word	0x40012c00
 8006250:	40000400 	.word	0x40000400
 8006254:	40000800 	.word	0x40000800
 8006258:	40013400 	.word	0x40013400
 800625c:	40014000 	.word	0x40014000
 8006260:	40014400 	.word	0x40014400
 8006264:	40014800 	.word	0x40014800
 8006268:	08009308 	.word	0x08009308
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2b04      	cmp	r3, #4
 8006270:	d104      	bne.n	800627c <HAL_TIM_PWM_Start_DMA+0x294>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2202      	movs	r2, #2
 8006276:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800627a:	e01e      	b.n	80062ba <HAL_TIM_PWM_Start_DMA+0x2d2>
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2b08      	cmp	r3, #8
 8006280:	d104      	bne.n	800628c <HAL_TIM_PWM_Start_DMA+0x2a4>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2202      	movs	r2, #2
 8006286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800628a:	e016      	b.n	80062ba <HAL_TIM_PWM_Start_DMA+0x2d2>
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2b0c      	cmp	r3, #12
 8006290:	d104      	bne.n	800629c <HAL_TIM_PWM_Start_DMA+0x2b4>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2202      	movs	r2, #2
 8006296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800629a:	e00e      	b.n	80062ba <HAL_TIM_PWM_Start_DMA+0x2d2>
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2b10      	cmp	r3, #16
 80062a0:	d104      	bne.n	80062ac <HAL_TIM_PWM_Start_DMA+0x2c4>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2202      	movs	r2, #2
 80062a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062aa:	e006      	b.n	80062ba <HAL_TIM_PWM_Start_DMA+0x2d2>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062b4:	e001      	b.n	80062ba <HAL_TIM_PWM_Start_DMA+0x2d2>
    }
  }
  else
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e0f4      	b.n	80064a4 <HAL_TIM_PWM_Start_DMA+0x4bc>
  }

  switch (Channel)
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2b0c      	cmp	r3, #12
 80062be:	f200 80ad 	bhi.w	800641c <HAL_TIM_PWM_Start_DMA+0x434>
 80062c2:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <HAL_TIM_PWM_Start_DMA+0x2e0>)
 80062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c8:	080062fd 	.word	0x080062fd
 80062cc:	0800641d 	.word	0x0800641d
 80062d0:	0800641d 	.word	0x0800641d
 80062d4:	0800641d 	.word	0x0800641d
 80062d8:	08006345 	.word	0x08006345
 80062dc:	0800641d 	.word	0x0800641d
 80062e0:	0800641d 	.word	0x0800641d
 80062e4:	0800641d 	.word	0x0800641d
 80062e8:	0800638d 	.word	0x0800638d
 80062ec:	0800641d 	.word	0x0800641d
 80062f0:	0800641d 	.word	0x0800641d
 80062f4:	0800641d 	.word	0x0800641d
 80062f8:	080063d5 	.word	0x080063d5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	4a6a      	ldr	r2, [pc, #424]	; (80064ac <HAL_TIM_PWM_Start_DMA+0x4c4>)
 8006302:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	4a69      	ldr	r2, [pc, #420]	; (80064b0 <HAL_TIM_PWM_Start_DMA+0x4c8>)
 800630a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	4a68      	ldr	r2, [pc, #416]	; (80064b4 <HAL_TIM_PWM_Start_DMA+0x4cc>)
 8006312:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006318:	6879      	ldr	r1, [r7, #4]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3334      	adds	r3, #52	; 0x34
 8006320:	461a      	mov	r2, r3
 8006322:	887b      	ldrh	r3, [r7, #2]
 8006324:	f7fc f99a 	bl	800265c <HAL_DMA_Start_IT>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <HAL_TIM_PWM_Start_DMA+0x34a>
      {
        return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e0b8      	b.n	80064a4 <HAL_TIM_PWM_Start_DMA+0x4bc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68da      	ldr	r2, [r3, #12]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006340:	60da      	str	r2, [r3, #12]
      break;
 8006342:	e06c      	b.n	800641e <HAL_TIM_PWM_Start_DMA+0x436>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006348:	4a58      	ldr	r2, [pc, #352]	; (80064ac <HAL_TIM_PWM_Start_DMA+0x4c4>)
 800634a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006350:	4a57      	ldr	r2, [pc, #348]	; (80064b0 <HAL_TIM_PWM_Start_DMA+0x4c8>)
 8006352:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006358:	4a56      	ldr	r2, [pc, #344]	; (80064b4 <HAL_TIM_PWM_Start_DMA+0x4cc>)
 800635a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006360:	6879      	ldr	r1, [r7, #4]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3338      	adds	r3, #56	; 0x38
 8006368:	461a      	mov	r2, r3
 800636a:	887b      	ldrh	r3, [r7, #2]
 800636c:	f7fc f976 	bl	800265c <HAL_DMA_Start_IT>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <HAL_TIM_PWM_Start_DMA+0x392>
      {
        return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e094      	b.n	80064a4 <HAL_TIM_PWM_Start_DMA+0x4bc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68da      	ldr	r2, [r3, #12]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006388:	60da      	str	r2, [r3, #12]
      break;
 800638a:	e048      	b.n	800641e <HAL_TIM_PWM_Start_DMA+0x436>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	4a46      	ldr	r2, [pc, #280]	; (80064ac <HAL_TIM_PWM_Start_DMA+0x4c4>)
 8006392:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006398:	4a45      	ldr	r2, [pc, #276]	; (80064b0 <HAL_TIM_PWM_Start_DMA+0x4c8>)
 800639a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	4a44      	ldr	r2, [pc, #272]	; (80064b4 <HAL_TIM_PWM_Start_DMA+0x4cc>)
 80063a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80063a8:	6879      	ldr	r1, [r7, #4]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	333c      	adds	r3, #60	; 0x3c
 80063b0:	461a      	mov	r2, r3
 80063b2:	887b      	ldrh	r3, [r7, #2]
 80063b4:	f7fc f952 	bl	800265c <HAL_DMA_Start_IT>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <HAL_TIM_PWM_Start_DMA+0x3da>
      {
        return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e070      	b.n	80064a4 <HAL_TIM_PWM_Start_DMA+0x4bc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68da      	ldr	r2, [r3, #12]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063d0:	60da      	str	r2, [r3, #12]
      break;
 80063d2:	e024      	b.n	800641e <HAL_TIM_PWM_Start_DMA+0x436>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d8:	4a34      	ldr	r2, [pc, #208]	; (80064ac <HAL_TIM_PWM_Start_DMA+0x4c4>)
 80063da:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e0:	4a33      	ldr	r2, [pc, #204]	; (80064b0 <HAL_TIM_PWM_Start_DMA+0x4c8>)
 80063e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e8:	4a32      	ldr	r2, [pc, #200]	; (80064b4 <HAL_TIM_PWM_Start_DMA+0x4cc>)
 80063ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80063f0:	6879      	ldr	r1, [r7, #4]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3340      	adds	r3, #64	; 0x40
 80063f8:	461a      	mov	r2, r3
 80063fa:	887b      	ldrh	r3, [r7, #2]
 80063fc:	f7fc f92e 	bl	800265c <HAL_DMA_Start_IT>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <HAL_TIM_PWM_Start_DMA+0x422>
      {
        return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e04c      	b.n	80064a4 <HAL_TIM_PWM_Start_DMA+0x4bc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68da      	ldr	r2, [r3, #12]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006418:	60da      	str	r2, [r3, #12]
      break;
 800641a:	e000      	b.n	800641e <HAL_TIM_PWM_Start_DMA+0x436>
    }

    default:
      break;
 800641c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2201      	movs	r2, #1
 8006424:	68b9      	ldr	r1, [r7, #8]
 8006426:	4618      	mov	r0, r3
 8006428:	f001 f93c 	bl	80076a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a21      	ldr	r2, [pc, #132]	; (80064b8 <HAL_TIM_PWM_Start_DMA+0x4d0>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d013      	beq.n	800645e <HAL_TIM_PWM_Start_DMA+0x476>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a20      	ldr	r2, [pc, #128]	; (80064bc <HAL_TIM_PWM_Start_DMA+0x4d4>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d00e      	beq.n	800645e <HAL_TIM_PWM_Start_DMA+0x476>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a1e      	ldr	r2, [pc, #120]	; (80064c0 <HAL_TIM_PWM_Start_DMA+0x4d8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d009      	beq.n	800645e <HAL_TIM_PWM_Start_DMA+0x476>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a1d      	ldr	r2, [pc, #116]	; (80064c4 <HAL_TIM_PWM_Start_DMA+0x4dc>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d004      	beq.n	800645e <HAL_TIM_PWM_Start_DMA+0x476>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a1b      	ldr	r2, [pc, #108]	; (80064c8 <HAL_TIM_PWM_Start_DMA+0x4e0>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d101      	bne.n	8006462 <HAL_TIM_PWM_Start_DMA+0x47a>
 800645e:	2301      	movs	r3, #1
 8006460:	e000      	b.n	8006464 <HAL_TIM_PWM_Start_DMA+0x47c>
 8006462:	2300      	movs	r3, #0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d007      	beq.n	8006478 <HAL_TIM_PWM_Start_DMA+0x490>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006476:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689a      	ldr	r2, [r3, #8]
 800647e:	4b13      	ldr	r3, [pc, #76]	; (80064cc <HAL_TIM_PWM_Start_DMA+0x4e4>)
 8006480:	4013      	ands	r3, r2
 8006482:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	2b06      	cmp	r3, #6
 8006488:	d00b      	beq.n	80064a2 <HAL_TIM_PWM_Start_DMA+0x4ba>
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006490:	d007      	beq.n	80064a2 <HAL_TIM_PWM_Start_DMA+0x4ba>
  {
    __HAL_TIM_ENABLE(htim);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f042 0201 	orr.w	r2, r2, #1
 80064a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	08006d3f 	.word	0x08006d3f
 80064b0:	08006de7 	.word	0x08006de7
 80064b4:	08006cad 	.word	0x08006cad
 80064b8:	40012c00 	.word	0x40012c00
 80064bc:	40013400 	.word	0x40013400
 80064c0:	40014000 	.word	0x40014000
 80064c4:	40014400 	.word	0x40014400
 80064c8:	40014800 	.word	0x40014800
 80064cc:	00010007 	.word	0x00010007

080064d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d122      	bne.n	800652c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d11b      	bne.n	800652c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f06f 0202 	mvn.w	r2, #2
 80064fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fb98 	bl	8006c48 <HAL_TIM_IC_CaptureCallback>
 8006518:	e005      	b.n	8006526 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fb8a 	bl	8006c34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 fb9b 	bl	8006c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	f003 0304 	and.w	r3, r3, #4
 8006536:	2b04      	cmp	r3, #4
 8006538:	d122      	bne.n	8006580 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	2b04      	cmp	r3, #4
 8006546:	d11b      	bne.n	8006580 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f06f 0204 	mvn.w	r2, #4
 8006550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2202      	movs	r2, #2
 8006556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fb6e 	bl	8006c48 <HAL_TIM_IC_CaptureCallback>
 800656c:	e005      	b.n	800657a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fb60 	bl	8006c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fb71 	bl	8006c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	f003 0308 	and.w	r3, r3, #8
 800658a:	2b08      	cmp	r3, #8
 800658c:	d122      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b08      	cmp	r3, #8
 800659a:	d11b      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f06f 0208 	mvn.w	r2, #8
 80065a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2204      	movs	r2, #4
 80065aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	f003 0303 	and.w	r3, r3, #3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fb44 	bl	8006c48 <HAL_TIM_IC_CaptureCallback>
 80065c0:	e005      	b.n	80065ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fb36 	bl	8006c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fb47 	bl	8006c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	f003 0310 	and.w	r3, r3, #16
 80065de:	2b10      	cmp	r3, #16
 80065e0:	d122      	bne.n	8006628 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f003 0310 	and.w	r3, r3, #16
 80065ec:	2b10      	cmp	r3, #16
 80065ee:	d11b      	bne.n	8006628 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f06f 0210 	mvn.w	r2, #16
 80065f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2208      	movs	r2, #8
 80065fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fb1a 	bl	8006c48 <HAL_TIM_IC_CaptureCallback>
 8006614:	e005      	b.n	8006622 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fb0c 	bl	8006c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fb1d 	bl	8006c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b01      	cmp	r3, #1
 8006634:	d10e      	bne.n	8006654 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b01      	cmp	r3, #1
 8006642:	d107      	bne.n	8006654 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f06f 0201 	mvn.w	r2, #1
 800664c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fa ff68 	bl	8001524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800665e:	2b80      	cmp	r3, #128	; 0x80
 8006660:	d10e      	bne.n	8006680 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800666c:	2b80      	cmp	r3, #128	; 0x80
 800666e:	d107      	bne.n	8006680 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f001 fb4e 	bl	8007d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800668a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800668e:	d10e      	bne.n	80066ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669a:	2b80      	cmp	r3, #128	; 0x80
 800669c:	d107      	bne.n	80066ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f001 fb41 	bl	8007d30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b8:	2b40      	cmp	r3, #64	; 0x40
 80066ba:	d10e      	bne.n	80066da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c6:	2b40      	cmp	r3, #64	; 0x40
 80066c8:	d107      	bne.n	80066da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 fad5 	bl	8006c84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	f003 0320 	and.w	r3, r3, #32
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	d10e      	bne.n	8006706 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	f003 0320 	and.w	r3, r3, #32
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	d107      	bne.n	8006706 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f06f 0220 	mvn.w	r2, #32
 80066fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f001 fb01 	bl	8007d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006710:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006714:	d10f      	bne.n	8006736 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006724:	d107      	bne.n	8006736 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800672e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f001 fb07 	bl	8007d44 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006740:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006744:	d10f      	bne.n	8006766 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006750:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006754:	d107      	bne.n	8006766 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800675e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f001 faf9 	bl	8007d58 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006770:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006774:	d10f      	bne.n	8006796 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006784:	d107      	bne.n	8006796 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800678e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f001 faeb 	bl	8007d6c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067a4:	d10f      	bne.n	80067c6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067b4:	d107      	bne.n	80067c6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80067be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f001 fadd 	bl	8007d80 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067c6:	bf00      	nop
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
	...

080067d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d016      	beq.n	8006810 <HAL_TIM_PWM_ConfigChannel+0x40>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b04      	cmp	r3, #4
 80067e6:	d013      	beq.n	8006810 <HAL_TIM_PWM_ConfigChannel+0x40>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b08      	cmp	r3, #8
 80067ec:	d010      	beq.n	8006810 <HAL_TIM_PWM_ConfigChannel+0x40>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2b0c      	cmp	r3, #12
 80067f2:	d00d      	beq.n	8006810 <HAL_TIM_PWM_ConfigChannel+0x40>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b10      	cmp	r3, #16
 80067f8:	d00a      	beq.n	8006810 <HAL_TIM_PWM_ConfigChannel+0x40>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b14      	cmp	r3, #20
 80067fe:	d007      	beq.n	8006810 <HAL_TIM_PWM_ConfigChannel+0x40>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b3c      	cmp	r3, #60	; 0x3c
 8006804:	d004      	beq.n	8006810 <HAL_TIM_PWM_ConfigChannel+0x40>
 8006806:	f241 0118 	movw	r1, #4120	; 0x1018
 800680a:	4886      	ldr	r0, [pc, #536]	; (8006a24 <HAL_TIM_PWM_ConfigChannel+0x254>)
 800680c:	f7fa fea3 	bl	8001556 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b60      	cmp	r3, #96	; 0x60
 8006816:	d01c      	beq.n	8006852 <HAL_TIM_PWM_ConfigChannel+0x82>
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b70      	cmp	r3, #112	; 0x70
 800681e:	d018      	beq.n	8006852 <HAL_TIM_PWM_ConfigChannel+0x82>
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a80      	ldr	r2, [pc, #512]	; (8006a28 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d013      	beq.n	8006852 <HAL_TIM_PWM_ConfigChannel+0x82>
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a7f      	ldr	r2, [pc, #508]	; (8006a2c <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d00e      	beq.n	8006852 <HAL_TIM_PWM_ConfigChannel+0x82>
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a7d      	ldr	r2, [pc, #500]	; (8006a30 <HAL_TIM_PWM_ConfigChannel+0x260>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d009      	beq.n	8006852 <HAL_TIM_PWM_ConfigChannel+0x82>
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a7c      	ldr	r2, [pc, #496]	; (8006a34 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d004      	beq.n	8006852 <HAL_TIM_PWM_ConfigChannel+0x82>
 8006848:	f241 0119 	movw	r1, #4121	; 0x1019
 800684c:	4875      	ldr	r0, [pc, #468]	; (8006a24 <HAL_TIM_PWM_ConfigChannel+0x254>)
 800684e:	f7fa fe82 	bl	8001556 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d008      	beq.n	800686c <HAL_TIM_PWM_ConfigChannel+0x9c>
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	2b02      	cmp	r3, #2
 8006860:	d004      	beq.n	800686c <HAL_TIM_PWM_ConfigChannel+0x9c>
 8006862:	f241 011a 	movw	r1, #4122	; 0x101a
 8006866:	486f      	ldr	r0, [pc, #444]	; (8006a24 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8006868:	f7fa fe75 	bl	8001556 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d008      	beq.n	8006886 <HAL_TIM_PWM_ConfigChannel+0xb6>
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	2b04      	cmp	r3, #4
 800687a:	d004      	beq.n	8006886 <HAL_TIM_PWM_ConfigChannel+0xb6>
 800687c:	f241 011b 	movw	r1, #4123	; 0x101b
 8006880:	4868      	ldr	r0, [pc, #416]	; (8006a24 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8006882:	f7fa fe68 	bl	8001556 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_TIM_PWM_ConfigChannel+0xc4>
 8006890:	2302      	movs	r3, #2
 8006892:	e1c1      	b.n	8006c18 <HAL_TIM_PWM_ConfigChannel+0x448>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b14      	cmp	r3, #20
 80068a0:	f200 81b4 	bhi.w	8006c0c <HAL_TIM_PWM_ConfigChannel+0x43c>
 80068a4:	a201      	add	r2, pc, #4	; (adr r2, 80068ac <HAL_TIM_PWM_ConfigChannel+0xdc>)
 80068a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068aa:	bf00      	nop
 80068ac:	08006901 	.word	0x08006901
 80068b0:	08006c0d 	.word	0x08006c0d
 80068b4:	08006c0d 	.word	0x08006c0d
 80068b8:	08006c0d 	.word	0x08006c0d
 80068bc:	0800699b 	.word	0x0800699b
 80068c0:	08006c0d 	.word	0x08006c0d
 80068c4:	08006c0d 	.word	0x08006c0d
 80068c8:	08006c0d 	.word	0x08006c0d
 80068cc:	08006a55 	.word	0x08006a55
 80068d0:	08006c0d 	.word	0x08006c0d
 80068d4:	08006c0d 	.word	0x08006c0d
 80068d8:	08006c0d 	.word	0x08006c0d
 80068dc:	08006ad1 	.word	0x08006ad1
 80068e0:	08006c0d 	.word	0x08006c0d
 80068e4:	08006c0d 	.word	0x08006c0d
 80068e8:	08006c0d 	.word	0x08006c0d
 80068ec:	08006b4f 	.word	0x08006b4f
 80068f0:	08006c0d 	.word	0x08006c0d
 80068f4:	08006c0d 	.word	0x08006c0d
 80068f8:	08006c0d 	.word	0x08006c0d
 80068fc:	08006bad 	.word	0x08006bad
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a4c      	ldr	r2, [pc, #304]	; (8006a38 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d027      	beq.n	800695a <HAL_TIM_PWM_ConfigChannel+0x18a>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006912:	d022      	beq.n	800695a <HAL_TIM_PWM_ConfigChannel+0x18a>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a48      	ldr	r2, [pc, #288]	; (8006a3c <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d01d      	beq.n	800695a <HAL_TIM_PWM_ConfigChannel+0x18a>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a47      	ldr	r2, [pc, #284]	; (8006a40 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d018      	beq.n	800695a <HAL_TIM_PWM_ConfigChannel+0x18a>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a45      	ldr	r2, [pc, #276]	; (8006a44 <HAL_TIM_PWM_ConfigChannel+0x274>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d013      	beq.n	800695a <HAL_TIM_PWM_ConfigChannel+0x18a>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a44      	ldr	r2, [pc, #272]	; (8006a48 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d00e      	beq.n	800695a <HAL_TIM_PWM_ConfigChannel+0x18a>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a42      	ldr	r2, [pc, #264]	; (8006a4c <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d009      	beq.n	800695a <HAL_TIM_PWM_ConfigChannel+0x18a>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a41      	ldr	r2, [pc, #260]	; (8006a50 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d004      	beq.n	800695a <HAL_TIM_PWM_ConfigChannel+0x18a>
 8006950:	f241 0125 	movw	r1, #4133	; 0x1025
 8006954:	4833      	ldr	r0, [pc, #204]	; (8006a24 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8006956:	f7fa fdfe 	bl	8001556 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68b9      	ldr	r1, [r7, #8]
 8006960:	4618      	mov	r0, r3
 8006962:	f000 fb05 	bl	8006f70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	699a      	ldr	r2, [r3, #24]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f042 0208 	orr.w	r2, r2, #8
 8006974:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	699a      	ldr	r2, [r3, #24]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0204 	bic.w	r2, r2, #4
 8006984:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6999      	ldr	r1, [r3, #24]
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	691a      	ldr	r2, [r3, #16]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	430a      	orrs	r2, r1
 8006996:	619a      	str	r2, [r3, #24]
      break;
 8006998:	e139      	b.n	8006c0e <HAL_TIM_PWM_ConfigChannel+0x43e>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a26      	ldr	r2, [pc, #152]	; (8006a38 <HAL_TIM_PWM_ConfigChannel+0x268>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d01d      	beq.n	80069e0 <HAL_TIM_PWM_ConfigChannel+0x210>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ac:	d018      	beq.n	80069e0 <HAL_TIM_PWM_ConfigChannel+0x210>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a22      	ldr	r2, [pc, #136]	; (8006a3c <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d013      	beq.n	80069e0 <HAL_TIM_PWM_ConfigChannel+0x210>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a20      	ldr	r2, [pc, #128]	; (8006a40 <HAL_TIM_PWM_ConfigChannel+0x270>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d00e      	beq.n	80069e0 <HAL_TIM_PWM_ConfigChannel+0x210>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a1f      	ldr	r2, [pc, #124]	; (8006a44 <HAL_TIM_PWM_ConfigChannel+0x274>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d009      	beq.n	80069e0 <HAL_TIM_PWM_ConfigChannel+0x210>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a1d      	ldr	r2, [pc, #116]	; (8006a48 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d004      	beq.n	80069e0 <HAL_TIM_PWM_ConfigChannel+0x210>
 80069d6:	f241 0136 	movw	r1, #4150	; 0x1036
 80069da:	4812      	ldr	r0, [pc, #72]	; (8006a24 <HAL_TIM_PWM_ConfigChannel+0x254>)
 80069dc:	f7fa fdbb 	bl	8001556 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68b9      	ldr	r1, [r7, #8]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 fb7c 	bl	80070e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	699a      	ldr	r2, [r3, #24]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	699a      	ldr	r2, [r3, #24]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6999      	ldr	r1, [r3, #24]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	021a      	lsls	r2, r3, #8
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	619a      	str	r2, [r3, #24]
      break;
 8006a20:	e0f5      	b.n	8006c0e <HAL_TIM_PWM_ConfigChannel+0x43e>
 8006a22:	bf00      	nop
 8006a24:	08009308 	.word	0x08009308
 8006a28:	00010040 	.word	0x00010040
 8006a2c:	00010050 	.word	0x00010050
 8006a30:	00010060 	.word	0x00010060
 8006a34:	00010070 	.word	0x00010070
 8006a38:	40012c00 	.word	0x40012c00
 8006a3c:	40000400 	.word	0x40000400
 8006a40:	40000800 	.word	0x40000800
 8006a44:	40013400 	.word	0x40013400
 8006a48:	40014000 	.word	0x40014000
 8006a4c:	40014400 	.word	0x40014400
 8006a50:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a71      	ldr	r2, [pc, #452]	; (8006c20 <HAL_TIM_PWM_ConfigChannel+0x450>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d018      	beq.n	8006a90 <HAL_TIM_PWM_ConfigChannel+0x2c0>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a66:	d013      	beq.n	8006a90 <HAL_TIM_PWM_ConfigChannel+0x2c0>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a6d      	ldr	r2, [pc, #436]	; (8006c24 <HAL_TIM_PWM_ConfigChannel+0x454>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d00e      	beq.n	8006a90 <HAL_TIM_PWM_ConfigChannel+0x2c0>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a6c      	ldr	r2, [pc, #432]	; (8006c28 <HAL_TIM_PWM_ConfigChannel+0x458>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d009      	beq.n	8006a90 <HAL_TIM_PWM_ConfigChannel+0x2c0>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a6a      	ldr	r2, [pc, #424]	; (8006c2c <HAL_TIM_PWM_ConfigChannel+0x45c>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d004      	beq.n	8006a90 <HAL_TIM_PWM_ConfigChannel+0x2c0>
 8006a86:	f241 0147 	movw	r1, #4167	; 0x1047
 8006a8a:	4869      	ldr	r0, [pc, #420]	; (8006c30 <HAL_TIM_PWM_ConfigChannel+0x460>)
 8006a8c:	f7fa fd63 	bl	8001556 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68b9      	ldr	r1, [r7, #8]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 fbd6 	bl	8007248 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	69da      	ldr	r2, [r3, #28]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f042 0208 	orr.w	r2, r2, #8
 8006aaa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	69da      	ldr	r2, [r3, #28]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0204 	bic.w	r2, r2, #4
 8006aba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	69d9      	ldr	r1, [r3, #28]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	691a      	ldr	r2, [r3, #16]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	61da      	str	r2, [r3, #28]
      break;
 8006ace:	e09e      	b.n	8006c0e <HAL_TIM_PWM_ConfigChannel+0x43e>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a52      	ldr	r2, [pc, #328]	; (8006c20 <HAL_TIM_PWM_ConfigChannel+0x450>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d018      	beq.n	8006b0c <HAL_TIM_PWM_ConfigChannel+0x33c>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae2:	d013      	beq.n	8006b0c <HAL_TIM_PWM_ConfigChannel+0x33c>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a4e      	ldr	r2, [pc, #312]	; (8006c24 <HAL_TIM_PWM_ConfigChannel+0x454>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00e      	beq.n	8006b0c <HAL_TIM_PWM_ConfigChannel+0x33c>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a4d      	ldr	r2, [pc, #308]	; (8006c28 <HAL_TIM_PWM_ConfigChannel+0x458>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d009      	beq.n	8006b0c <HAL_TIM_PWM_ConfigChannel+0x33c>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a4b      	ldr	r2, [pc, #300]	; (8006c2c <HAL_TIM_PWM_ConfigChannel+0x45c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d004      	beq.n	8006b0c <HAL_TIM_PWM_ConfigChannel+0x33c>
 8006b02:	f241 0158 	movw	r1, #4184	; 0x1058
 8006b06:	484a      	ldr	r0, [pc, #296]	; (8006c30 <HAL_TIM_PWM_ConfigChannel+0x460>)
 8006b08:	f7fa fd25 	bl	8001556 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68b9      	ldr	r1, [r7, #8]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 fc4a 	bl	80073ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	69da      	ldr	r2, [r3, #28]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b26:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	69da      	ldr	r2, [r3, #28]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b36:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	69d9      	ldr	r1, [r3, #28]
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	021a      	lsls	r2, r3, #8
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	61da      	str	r2, [r3, #28]
      break;
 8006b4c:	e05f      	b.n	8006c0e <HAL_TIM_PWM_ConfigChannel+0x43e>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a33      	ldr	r2, [pc, #204]	; (8006c20 <HAL_TIM_PWM_ConfigChannel+0x450>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d009      	beq.n	8006b6c <HAL_TIM_PWM_ConfigChannel+0x39c>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a33      	ldr	r2, [pc, #204]	; (8006c2c <HAL_TIM_PWM_ConfigChannel+0x45c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d004      	beq.n	8006b6c <HAL_TIM_PWM_ConfigChannel+0x39c>
 8006b62:	f241 0169 	movw	r1, #4201	; 0x1069
 8006b66:	4832      	ldr	r0, [pc, #200]	; (8006c30 <HAL_TIM_PWM_ConfigChannel+0x460>)
 8006b68:	f7fa fcf5 	bl	8001556 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68b9      	ldr	r1, [r7, #8]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 fccc 	bl	8007510 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0208 	orr.w	r2, r2, #8
 8006b86:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 0204 	bic.w	r2, r2, #4
 8006b96:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	691a      	ldr	r2, [r3, #16]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006baa:	e030      	b.n	8006c0e <HAL_TIM_PWM_ConfigChannel+0x43e>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a1b      	ldr	r2, [pc, #108]	; (8006c20 <HAL_TIM_PWM_ConfigChannel+0x450>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d009      	beq.n	8006bca <HAL_TIM_PWM_ConfigChannel+0x3fa>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a1c      	ldr	r2, [pc, #112]	; (8006c2c <HAL_TIM_PWM_ConfigChannel+0x45c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d004      	beq.n	8006bca <HAL_TIM_PWM_ConfigChannel+0x3fa>
 8006bc0:	f241 017a 	movw	r1, #4218	; 0x107a
 8006bc4:	481a      	ldr	r0, [pc, #104]	; (8006c30 <HAL_TIM_PWM_ConfigChannel+0x460>)
 8006bc6:	f7fa fcc6 	bl	8001556 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68b9      	ldr	r1, [r7, #8]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 fd01 	bl	80075d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006be4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bf4:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	021a      	lsls	r2, r3, #8
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006c0a:	e000      	b.n	8006c0e <HAL_TIM_PWM_ConfigChannel+0x43e>
    }

    default:
      break;
 8006c0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	40012c00 	.word	0x40012c00
 8006c24:	40000400 	.word	0x40000400
 8006c28:	40000800 	.word	0x40000800
 8006c2c:	40013400 	.word	0x40013400
 8006c30:	08009308 	.word	0x08009308

08006c34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d107      	bne.n	8006cd4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cd2:	e02a      	b.n	8006d2a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d107      	bne.n	8006cee <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cec:	e01d      	b.n	8006d2a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d107      	bne.n	8006d08 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2204      	movs	r2, #4
 8006cfc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d06:	e010      	b.n	8006d2a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d107      	bne.n	8006d22 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2208      	movs	r2, #8
 8006d16:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d20:	e003      	b.n	8006d2a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f7ff ffb4 	bl	8006c98 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	771a      	strb	r2, [r3, #28]
}
 8006d36:	bf00      	nop
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b084      	sub	sp, #16
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d10b      	bne.n	8006d6e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	69db      	ldr	r3, [r3, #28]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d136      	bne.n	8006dd2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d6c:	e031      	b.n	8006dd2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d10b      	bne.n	8006d90 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d125      	bne.n	8006dd2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d8e:	e020      	b.n	8006dd2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d10b      	bne.n	8006db2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2204      	movs	r2, #4
 8006d9e:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	69db      	ldr	r3, [r3, #28]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d114      	bne.n	8006dd2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006db0:	e00f      	b.n	8006dd2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d10a      	bne.n	8006dd2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2208      	movs	r2, #8
 8006dc0:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d103      	bne.n	8006dd2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f7ff ff42 	bl	8006c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	771a      	strb	r2, [r3, #28]
}
 8006dde:	bf00      	nop
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b084      	sub	sp, #16
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d103      	bne.n	8006e06 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2201      	movs	r2, #1
 8006e02:	771a      	strb	r2, [r3, #28]
 8006e04:	e019      	b.n	8006e3a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d103      	bne.n	8006e18 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2202      	movs	r2, #2
 8006e14:	771a      	strb	r2, [r3, #28]
 8006e16:	e010      	b.n	8006e3a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d103      	bne.n	8006e2a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2204      	movs	r2, #4
 8006e26:	771a      	strb	r2, [r3, #28]
 8006e28:	e007      	b.n	8006e3a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d102      	bne.n	8006e3a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2208      	movs	r2, #8
 8006e38:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f7ff ff18 	bl	8006c70 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	771a      	strb	r2, [r3, #28]
}
 8006e46:	bf00      	nop
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
	...

08006e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a3c      	ldr	r2, [pc, #240]	; (8006f54 <TIM_Base_SetConfig+0x104>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00f      	beq.n	8006e88 <TIM_Base_SetConfig+0x38>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e6e:	d00b      	beq.n	8006e88 <TIM_Base_SetConfig+0x38>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a39      	ldr	r2, [pc, #228]	; (8006f58 <TIM_Base_SetConfig+0x108>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d007      	beq.n	8006e88 <TIM_Base_SetConfig+0x38>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a38      	ldr	r2, [pc, #224]	; (8006f5c <TIM_Base_SetConfig+0x10c>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d003      	beq.n	8006e88 <TIM_Base_SetConfig+0x38>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a37      	ldr	r2, [pc, #220]	; (8006f60 <TIM_Base_SetConfig+0x110>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d108      	bne.n	8006e9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a2d      	ldr	r2, [pc, #180]	; (8006f54 <TIM_Base_SetConfig+0x104>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d01b      	beq.n	8006eda <TIM_Base_SetConfig+0x8a>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea8:	d017      	beq.n	8006eda <TIM_Base_SetConfig+0x8a>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a2a      	ldr	r2, [pc, #168]	; (8006f58 <TIM_Base_SetConfig+0x108>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d013      	beq.n	8006eda <TIM_Base_SetConfig+0x8a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a29      	ldr	r2, [pc, #164]	; (8006f5c <TIM_Base_SetConfig+0x10c>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d00f      	beq.n	8006eda <TIM_Base_SetConfig+0x8a>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a28      	ldr	r2, [pc, #160]	; (8006f60 <TIM_Base_SetConfig+0x110>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d00b      	beq.n	8006eda <TIM_Base_SetConfig+0x8a>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a27      	ldr	r2, [pc, #156]	; (8006f64 <TIM_Base_SetConfig+0x114>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d007      	beq.n	8006eda <TIM_Base_SetConfig+0x8a>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a26      	ldr	r2, [pc, #152]	; (8006f68 <TIM_Base_SetConfig+0x118>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d003      	beq.n	8006eda <TIM_Base_SetConfig+0x8a>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a25      	ldr	r2, [pc, #148]	; (8006f6c <TIM_Base_SetConfig+0x11c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d108      	bne.n	8006eec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	689a      	ldr	r2, [r3, #8]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a10      	ldr	r2, [pc, #64]	; (8006f54 <TIM_Base_SetConfig+0x104>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d00f      	beq.n	8006f38 <TIM_Base_SetConfig+0xe8>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a11      	ldr	r2, [pc, #68]	; (8006f60 <TIM_Base_SetConfig+0x110>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d00b      	beq.n	8006f38 <TIM_Base_SetConfig+0xe8>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a10      	ldr	r2, [pc, #64]	; (8006f64 <TIM_Base_SetConfig+0x114>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d007      	beq.n	8006f38 <TIM_Base_SetConfig+0xe8>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a0f      	ldr	r2, [pc, #60]	; (8006f68 <TIM_Base_SetConfig+0x118>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d003      	beq.n	8006f38 <TIM_Base_SetConfig+0xe8>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a0e      	ldr	r2, [pc, #56]	; (8006f6c <TIM_Base_SetConfig+0x11c>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d103      	bne.n	8006f40 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	691a      	ldr	r2, [r3, #16]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	615a      	str	r2, [r3, #20]
}
 8006f46:	bf00      	nop
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	40012c00 	.word	0x40012c00
 8006f58:	40000400 	.word	0x40000400
 8006f5c:	40000800 	.word	0x40000800
 8006f60:	40013400 	.word	0x40013400
 8006f64:	40014000 	.word	0x40014000
 8006f68:	40014400 	.word	0x40014400
 8006f6c:	40014800 	.word	0x40014800

08006f70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	f023 0201 	bic.w	r2, r3, #1
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f023 0303 	bic.w	r3, r3, #3
 8006faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f023 0302 	bic.w	r3, r3, #2
 8006fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a40      	ldr	r2, [pc, #256]	; (80070cc <TIM_OC1_SetConfig+0x15c>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d00f      	beq.n	8006ff0 <TIM_OC1_SetConfig+0x80>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a3f      	ldr	r2, [pc, #252]	; (80070d0 <TIM_OC1_SetConfig+0x160>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d00b      	beq.n	8006ff0 <TIM_OC1_SetConfig+0x80>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a3e      	ldr	r2, [pc, #248]	; (80070d4 <TIM_OC1_SetConfig+0x164>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d007      	beq.n	8006ff0 <TIM_OC1_SetConfig+0x80>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a3d      	ldr	r2, [pc, #244]	; (80070d8 <TIM_OC1_SetConfig+0x168>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d003      	beq.n	8006ff0 <TIM_OC1_SetConfig+0x80>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a3c      	ldr	r2, [pc, #240]	; (80070dc <TIM_OC1_SetConfig+0x16c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d119      	bne.n	8007024 <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d008      	beq.n	800700a <TIM_OC1_SetConfig+0x9a>
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	2b08      	cmp	r3, #8
 8006ffe:	d004      	beq.n	800700a <TIM_OC1_SetConfig+0x9a>
 8007000:	f641 21d6 	movw	r1, #6870	; 0x1ad6
 8007004:	4836      	ldr	r0, [pc, #216]	; (80070e0 <TIM_OC1_SetConfig+0x170>)
 8007006:	f7fa faa6 	bl	8001556 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f023 0308 	bic.w	r3, r3, #8
 8007010:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	4313      	orrs	r3, r2
 800701a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	f023 0304 	bic.w	r3, r3, #4
 8007022:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a29      	ldr	r2, [pc, #164]	; (80070cc <TIM_OC1_SetConfig+0x15c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d00f      	beq.n	800704c <TIM_OC1_SetConfig+0xdc>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a28      	ldr	r2, [pc, #160]	; (80070d0 <TIM_OC1_SetConfig+0x160>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d00b      	beq.n	800704c <TIM_OC1_SetConfig+0xdc>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a27      	ldr	r2, [pc, #156]	; (80070d4 <TIM_OC1_SetConfig+0x164>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d007      	beq.n	800704c <TIM_OC1_SetConfig+0xdc>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a26      	ldr	r2, [pc, #152]	; (80070d8 <TIM_OC1_SetConfig+0x168>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d003      	beq.n	800704c <TIM_OC1_SetConfig+0xdc>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a25      	ldr	r2, [pc, #148]	; (80070dc <TIM_OC1_SetConfig+0x16c>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d12d      	bne.n	80070a8 <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007054:	d008      	beq.n	8007068 <TIM_OC1_SetConfig+0xf8>
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d004      	beq.n	8007068 <TIM_OC1_SetConfig+0xf8>
 800705e:	f641 21e3 	movw	r1, #6883	; 0x1ae3
 8007062:	481f      	ldr	r0, [pc, #124]	; (80070e0 <TIM_OC1_SetConfig+0x170>)
 8007064:	f7fa fa77 	bl	8001556 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007070:	d008      	beq.n	8007084 <TIM_OC1_SetConfig+0x114>
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d004      	beq.n	8007084 <TIM_OC1_SetConfig+0x114>
 800707a:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 800707e:	4818      	ldr	r0, [pc, #96]	; (80070e0 <TIM_OC1_SetConfig+0x170>)
 8007080:	f7fa fa69 	bl	8001556 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800708a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007092:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	4313      	orrs	r3, r2
 800709c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	621a      	str	r2, [r3, #32]
}
 80070c2:	bf00      	nop
 80070c4:	3718      	adds	r7, #24
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	40012c00 	.word	0x40012c00
 80070d0:	40013400 	.word	0x40013400
 80070d4:	40014000 	.word	0x40014000
 80070d8:	40014400 	.word	0x40014400
 80070dc:	40014800 	.word	0x40014800
 80070e0:	08009308 	.word	0x08009308

080070e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	f023 0210 	bic.w	r2, r3, #16
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800711e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	021b      	lsls	r3, r3, #8
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	4313      	orrs	r3, r2
 800712a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f023 0320 	bic.w	r3, r3, #32
 8007132:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	011b      	lsls	r3, r3, #4
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	4313      	orrs	r3, r2
 800713e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a3b      	ldr	r2, [pc, #236]	; (8007230 <TIM_OC2_SetConfig+0x14c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d003      	beq.n	8007150 <TIM_OC2_SetConfig+0x6c>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a3a      	ldr	r2, [pc, #232]	; (8007234 <TIM_OC2_SetConfig+0x150>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d11a      	bne.n	8007186 <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d008      	beq.n	800716a <TIM_OC2_SetConfig+0x86>
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	2b08      	cmp	r3, #8
 800715e:	d004      	beq.n	800716a <TIM_OC2_SetConfig+0x86>
 8007160:	f641 3121 	movw	r1, #6945	; 0x1b21
 8007164:	4834      	ldr	r0, [pc, #208]	; (8007238 <TIM_OC2_SetConfig+0x154>)
 8007166:	f7fa f9f6 	bl	8001556 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007170:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	011b      	lsls	r3, r3, #4
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	4313      	orrs	r3, r2
 800717c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007184:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a29      	ldr	r2, [pc, #164]	; (8007230 <TIM_OC2_SetConfig+0x14c>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d00f      	beq.n	80071ae <TIM_OC2_SetConfig+0xca>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a28      	ldr	r2, [pc, #160]	; (8007234 <TIM_OC2_SetConfig+0x150>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d00b      	beq.n	80071ae <TIM_OC2_SetConfig+0xca>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a28      	ldr	r2, [pc, #160]	; (800723c <TIM_OC2_SetConfig+0x158>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d007      	beq.n	80071ae <TIM_OC2_SetConfig+0xca>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a27      	ldr	r2, [pc, #156]	; (8007240 <TIM_OC2_SetConfig+0x15c>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d003      	beq.n	80071ae <TIM_OC2_SetConfig+0xca>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a26      	ldr	r2, [pc, #152]	; (8007244 <TIM_OC2_SetConfig+0x160>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d12f      	bne.n	800720e <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071b6:	d008      	beq.n	80071ca <TIM_OC2_SetConfig+0xe6>
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d004      	beq.n	80071ca <TIM_OC2_SetConfig+0xe6>
 80071c0:	f641 312f 	movw	r1, #6959	; 0x1b2f
 80071c4:	481c      	ldr	r0, [pc, #112]	; (8007238 <TIM_OC2_SetConfig+0x154>)
 80071c6:	f7fa f9c6 	bl	8001556 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071d2:	d008      	beq.n	80071e6 <TIM_OC2_SetConfig+0x102>
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d004      	beq.n	80071e6 <TIM_OC2_SetConfig+0x102>
 80071dc:	f641 3130 	movw	r1, #6960	; 0x1b30
 80071e0:	4815      	ldr	r0, [pc, #84]	; (8007238 <TIM_OC2_SetConfig+0x154>)
 80071e2:	f7fa f9b8 	bl	8001556 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	4313      	orrs	r3, r2
 8007200:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	4313      	orrs	r3, r2
 800720c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	685a      	ldr	r2, [r3, #4]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	621a      	str	r2, [r3, #32]
}
 8007228:	bf00      	nop
 800722a:	3718      	adds	r7, #24
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	40012c00 	.word	0x40012c00
 8007234:	40013400 	.word	0x40013400
 8007238:	08009308 	.word	0x08009308
 800723c:	40014000 	.word	0x40014000
 8007240:	40014400 	.word	0x40014400
 8007244:	40014800 	.word	0x40014800

08007248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	69db      	ldr	r3, [r3, #28]
 800726e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800727a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f023 0303 	bic.w	r3, r3, #3
 8007282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	4313      	orrs	r3, r2
 800728c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	021b      	lsls	r3, r3, #8
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	4313      	orrs	r3, r2
 80072a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a3b      	ldr	r2, [pc, #236]	; (8007394 <TIM_OC3_SetConfig+0x14c>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d003      	beq.n	80072b2 <TIM_OC3_SetConfig+0x6a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a3a      	ldr	r2, [pc, #232]	; (8007398 <TIM_OC3_SetConfig+0x150>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d11a      	bne.n	80072e8 <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d008      	beq.n	80072cc <TIM_OC3_SetConfig+0x84>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	2b08      	cmp	r3, #8
 80072c0:	d004      	beq.n	80072cc <TIM_OC3_SetConfig+0x84>
 80072c2:	f641 316c 	movw	r1, #7020	; 0x1b6c
 80072c6:	4835      	ldr	r0, [pc, #212]	; (800739c <TIM_OC3_SetConfig+0x154>)
 80072c8:	f7fa f945 	bl	8001556 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	021b      	lsls	r3, r3, #8
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	4313      	orrs	r3, r2
 80072de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a2a      	ldr	r2, [pc, #168]	; (8007394 <TIM_OC3_SetConfig+0x14c>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d00f      	beq.n	8007310 <TIM_OC3_SetConfig+0xc8>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a29      	ldr	r2, [pc, #164]	; (8007398 <TIM_OC3_SetConfig+0x150>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d00b      	beq.n	8007310 <TIM_OC3_SetConfig+0xc8>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a29      	ldr	r2, [pc, #164]	; (80073a0 <TIM_OC3_SetConfig+0x158>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d007      	beq.n	8007310 <TIM_OC3_SetConfig+0xc8>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a28      	ldr	r2, [pc, #160]	; (80073a4 <TIM_OC3_SetConfig+0x15c>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d003      	beq.n	8007310 <TIM_OC3_SetConfig+0xc8>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a27      	ldr	r2, [pc, #156]	; (80073a8 <TIM_OC3_SetConfig+0x160>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d12f      	bne.n	8007370 <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007318:	d008      	beq.n	800732c <TIM_OC3_SetConfig+0xe4>
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d004      	beq.n	800732c <TIM_OC3_SetConfig+0xe4>
 8007322:	f641 3179 	movw	r1, #7033	; 0x1b79
 8007326:	481d      	ldr	r0, [pc, #116]	; (800739c <TIM_OC3_SetConfig+0x154>)
 8007328:	f7fa f915 	bl	8001556 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	695b      	ldr	r3, [r3, #20]
 8007330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007334:	d008      	beq.n	8007348 <TIM_OC3_SetConfig+0x100>
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d004      	beq.n	8007348 <TIM_OC3_SetConfig+0x100>
 800733e:	f641 317a 	movw	r1, #7034	; 0x1b7a
 8007342:	4816      	ldr	r0, [pc, #88]	; (800739c <TIM_OC3_SetConfig+0x154>)
 8007344:	f7fa f907 	bl	8001556 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800734e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007356:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	011b      	lsls	r3, r3, #4
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	4313      	orrs	r3, r2
 8007362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	011b      	lsls	r3, r3, #4
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	4313      	orrs	r3, r2
 800736e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	621a      	str	r2, [r3, #32]
}
 800738a:	bf00      	nop
 800738c:	3718      	adds	r7, #24
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	40012c00 	.word	0x40012c00
 8007398:	40013400 	.word	0x40013400
 800739c:	08009308 	.word	0x08009308
 80073a0:	40014000 	.word	0x40014000
 80073a4:	40014400 	.word	0x40014400
 80073a8:	40014800 	.word	0x40014800

080073ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	021b      	lsls	r3, r3, #8
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	031b      	lsls	r3, r3, #12
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	4313      	orrs	r3, r2
 8007406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a3b      	ldr	r2, [pc, #236]	; (80074f8 <TIM_OC4_SetConfig+0x14c>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d003      	beq.n	8007418 <TIM_OC4_SetConfig+0x6c>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a3a      	ldr	r2, [pc, #232]	; (80074fc <TIM_OC4_SetConfig+0x150>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d11a      	bne.n	800744e <TIM_OC4_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d008      	beq.n	8007432 <TIM_OC4_SetConfig+0x86>
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	2b08      	cmp	r3, #8
 8007426:	d004      	beq.n	8007432 <TIM_OC4_SetConfig+0x86>
 8007428:	f641 31b7 	movw	r1, #7095	; 0x1bb7
 800742c:	4834      	ldr	r0, [pc, #208]	; (8007500 <TIM_OC4_SetConfig+0x154>)
 800742e:	f7fa f892 	bl	8001556 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007438:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	031b      	lsls	r3, r3, #12
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	4313      	orrs	r3, r2
 8007444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800744c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a29      	ldr	r2, [pc, #164]	; (80074f8 <TIM_OC4_SetConfig+0x14c>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d00f      	beq.n	8007476 <TIM_OC4_SetConfig+0xca>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a28      	ldr	r2, [pc, #160]	; (80074fc <TIM_OC4_SetConfig+0x150>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d00b      	beq.n	8007476 <TIM_OC4_SetConfig+0xca>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a28      	ldr	r2, [pc, #160]	; (8007504 <TIM_OC4_SetConfig+0x158>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d007      	beq.n	8007476 <TIM_OC4_SetConfig+0xca>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a27      	ldr	r2, [pc, #156]	; (8007508 <TIM_OC4_SetConfig+0x15c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d003      	beq.n	8007476 <TIM_OC4_SetConfig+0xca>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a26      	ldr	r2, [pc, #152]	; (800750c <TIM_OC4_SetConfig+0x160>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d12f      	bne.n	80074d6 <TIM_OC4_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800747e:	d008      	beq.n	8007492 <TIM_OC4_SetConfig+0xe6>
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d004      	beq.n	8007492 <TIM_OC4_SetConfig+0xe6>
 8007488:	f641 31c4 	movw	r1, #7108	; 0x1bc4
 800748c:	481c      	ldr	r0, [pc, #112]	; (8007500 <TIM_OC4_SetConfig+0x154>)
 800748e:	f7fa f862 	bl	8001556 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800749a:	d008      	beq.n	80074ae <TIM_OC4_SetConfig+0x102>
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d004      	beq.n	80074ae <TIM_OC4_SetConfig+0x102>
 80074a4:	f641 31c5 	movw	r1, #7109	; 0x1bc5
 80074a8:	4815      	ldr	r0, [pc, #84]	; (8007500 <TIM_OC4_SetConfig+0x154>)
 80074aa:	f7fa f854 	bl	8001556 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074b4:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074bc:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	019b      	lsls	r3, r3, #6
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	019b      	lsls	r3, r3, #6
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	685a      	ldr	r2, [r3, #4]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	621a      	str	r2, [r3, #32]
}
 80074f0:	bf00      	nop
 80074f2:	3718      	adds	r7, #24
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	40012c00 	.word	0x40012c00
 80074fc:	40013400 	.word	0x40013400
 8007500:	08009308 	.word	0x08009308
 8007504:	40014000 	.word	0x40014000
 8007508:	40014400 	.word	0x40014400
 800750c:	40014800 	.word	0x40014800

08007510 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007510:	b480      	push	{r7}
 8007512:	b087      	sub	sp, #28
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a1b      	ldr	r3, [r3, #32]
 800751e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800753e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	4313      	orrs	r3, r2
 800754c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007554:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	041b      	lsls	r3, r3, #16
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	4313      	orrs	r3, r2
 8007560:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a17      	ldr	r2, [pc, #92]	; (80075c4 <TIM_OC5_SetConfig+0xb4>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d00f      	beq.n	800758a <TIM_OC5_SetConfig+0x7a>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a16      	ldr	r2, [pc, #88]	; (80075c8 <TIM_OC5_SetConfig+0xb8>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d00b      	beq.n	800758a <TIM_OC5_SetConfig+0x7a>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a15      	ldr	r2, [pc, #84]	; (80075cc <TIM_OC5_SetConfig+0xbc>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d007      	beq.n	800758a <TIM_OC5_SetConfig+0x7a>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a14      	ldr	r2, [pc, #80]	; (80075d0 <TIM_OC5_SetConfig+0xc0>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d003      	beq.n	800758a <TIM_OC5_SetConfig+0x7a>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a13      	ldr	r2, [pc, #76]	; (80075d4 <TIM_OC5_SetConfig+0xc4>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d109      	bne.n	800759e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007590:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	021b      	lsls	r3, r3, #8
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	4313      	orrs	r3, r2
 800759c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	621a      	str	r2, [r3, #32]
}
 80075b8:	bf00      	nop
 80075ba:	371c      	adds	r7, #28
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr
 80075c4:	40012c00 	.word	0x40012c00
 80075c8:	40013400 	.word	0x40013400
 80075cc:	40014000 	.word	0x40014000
 80075d0:	40014400 	.word	0x40014400
 80075d4:	40014800 	.word	0x40014800

080075d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80075d8:	b480      	push	{r7}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a1b      	ldr	r3, [r3, #32]
 80075e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800760a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	021b      	lsls	r3, r3, #8
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	4313      	orrs	r3, r2
 8007616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800761e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	051b      	lsls	r3, r3, #20
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	4313      	orrs	r3, r2
 800762a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a18      	ldr	r2, [pc, #96]	; (8007690 <TIM_OC6_SetConfig+0xb8>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d00f      	beq.n	8007654 <TIM_OC6_SetConfig+0x7c>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a17      	ldr	r2, [pc, #92]	; (8007694 <TIM_OC6_SetConfig+0xbc>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d00b      	beq.n	8007654 <TIM_OC6_SetConfig+0x7c>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a16      	ldr	r2, [pc, #88]	; (8007698 <TIM_OC6_SetConfig+0xc0>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d007      	beq.n	8007654 <TIM_OC6_SetConfig+0x7c>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a15      	ldr	r2, [pc, #84]	; (800769c <TIM_OC6_SetConfig+0xc4>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d003      	beq.n	8007654 <TIM_OC6_SetConfig+0x7c>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a14      	ldr	r2, [pc, #80]	; (80076a0 <TIM_OC6_SetConfig+0xc8>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d109      	bne.n	8007668 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800765a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	029b      	lsls	r3, r3, #10
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	4313      	orrs	r3, r2
 8007666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	621a      	str	r2, [r3, #32]
}
 8007682:	bf00      	nop
 8007684:	371c      	adds	r7, #28
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	40012c00 	.word	0x40012c00
 8007694:	40013400 	.word	0x40013400
 8007698:	40014000 	.word	0x40014000
 800769c:	40014400 	.word	0x40014400
 80076a0:	40014800 	.word	0x40014800

080076a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b086      	sub	sp, #24
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4a2d      	ldr	r2, [pc, #180]	; (8007768 <TIM_CCxChannelCmd+0xc4>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d020      	beq.n	80076fa <TIM_CCxChannelCmd+0x56>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076be:	d01c      	beq.n	80076fa <TIM_CCxChannelCmd+0x56>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	4a2a      	ldr	r2, [pc, #168]	; (800776c <TIM_CCxChannelCmd+0xc8>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d018      	beq.n	80076fa <TIM_CCxChannelCmd+0x56>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	4a29      	ldr	r2, [pc, #164]	; (8007770 <TIM_CCxChannelCmd+0xcc>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d014      	beq.n	80076fa <TIM_CCxChannelCmd+0x56>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	4a28      	ldr	r2, [pc, #160]	; (8007774 <TIM_CCxChannelCmd+0xd0>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d010      	beq.n	80076fa <TIM_CCxChannelCmd+0x56>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	4a27      	ldr	r2, [pc, #156]	; (8007778 <TIM_CCxChannelCmd+0xd4>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d00c      	beq.n	80076fa <TIM_CCxChannelCmd+0x56>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4a26      	ldr	r2, [pc, #152]	; (800777c <TIM_CCxChannelCmd+0xd8>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d008      	beq.n	80076fa <TIM_CCxChannelCmd+0x56>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4a25      	ldr	r2, [pc, #148]	; (8007780 <TIM_CCxChannelCmd+0xdc>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d004      	beq.n	80076fa <TIM_CCxChannelCmd+0x56>
 80076f0:	f641 6135 	movw	r1, #7733	; 0x1e35
 80076f4:	4823      	ldr	r0, [pc, #140]	; (8007784 <TIM_CCxChannelCmd+0xe0>)
 80076f6:	f7f9 ff2e 	bl	8001556 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d016      	beq.n	800772e <TIM_CCxChannelCmd+0x8a>
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2b04      	cmp	r3, #4
 8007704:	d013      	beq.n	800772e <TIM_CCxChannelCmd+0x8a>
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2b08      	cmp	r3, #8
 800770a:	d010      	beq.n	800772e <TIM_CCxChannelCmd+0x8a>
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2b0c      	cmp	r3, #12
 8007710:	d00d      	beq.n	800772e <TIM_CCxChannelCmd+0x8a>
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	2b10      	cmp	r3, #16
 8007716:	d00a      	beq.n	800772e <TIM_CCxChannelCmd+0x8a>
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2b14      	cmp	r3, #20
 800771c:	d007      	beq.n	800772e <TIM_CCxChannelCmd+0x8a>
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	2b3c      	cmp	r3, #60	; 0x3c
 8007722:	d004      	beq.n	800772e <TIM_CCxChannelCmd+0x8a>
 8007724:	f641 6136 	movw	r1, #7734	; 0x1e36
 8007728:	4816      	ldr	r0, [pc, #88]	; (8007784 <TIM_CCxChannelCmd+0xe0>)
 800772a:	f7f9 ff14 	bl	8001556 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	f003 031f 	and.w	r3, r3, #31
 8007734:	2201      	movs	r2, #1
 8007736:	fa02 f303 	lsl.w	r3, r2, r3
 800773a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6a1a      	ldr	r2, [r3, #32]
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	43db      	mvns	r3, r3
 8007744:	401a      	ands	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6a1a      	ldr	r2, [r3, #32]
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	f003 031f 	and.w	r3, r3, #31
 8007754:	6879      	ldr	r1, [r7, #4]
 8007756:	fa01 f303 	lsl.w	r3, r1, r3
 800775a:	431a      	orrs	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	621a      	str	r2, [r3, #32]
}
 8007760:	bf00      	nop
 8007762:	3718      	adds	r7, #24
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	40012c00 	.word	0x40012c00
 800776c:	40000400 	.word	0x40000400
 8007770:	40000800 	.word	0x40000800
 8007774:	40013400 	.word	0x40013400
 8007778:	40014000 	.word	0x40014000
 800777c:	40014400 	.word	0x40014400
 8007780:	40014800 	.word	0x40014800
 8007784:	08009308 	.word	0x08009308

08007788 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a96      	ldr	r2, [pc, #600]	; (80079f0 <HAL_TIMEx_MasterConfigSynchronization+0x268>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d027      	beq.n	80077ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077a4:	d022      	beq.n	80077ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a92      	ldr	r2, [pc, #584]	; (80079f4 <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d01d      	beq.n	80077ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a90      	ldr	r2, [pc, #576]	; (80079f8 <HAL_TIMEx_MasterConfigSynchronization+0x270>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d018      	beq.n	80077ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a8f      	ldr	r2, [pc, #572]	; (80079fc <HAL_TIMEx_MasterConfigSynchronization+0x274>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d013      	beq.n	80077ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a8d      	ldr	r2, [pc, #564]	; (8007a00 <HAL_TIMEx_MasterConfigSynchronization+0x278>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d00e      	beq.n	80077ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a8c      	ldr	r2, [pc, #560]	; (8007a04 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d009      	beq.n	80077ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a8a      	ldr	r2, [pc, #552]	; (8007a08 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d004      	beq.n	80077ec <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80077e2:	f44f 61fd 	mov.w	r1, #2024	; 0x7e8
 80077e6:	4889      	ldr	r0, [pc, #548]	; (8007a0c <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 80077e8:	f7f9 feb5 	bl	8001556 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d025      	beq.n	8007840 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b10      	cmp	r3, #16
 80077fa:	d021      	beq.n	8007840 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b20      	cmp	r3, #32
 8007802:	d01d      	beq.n	8007840 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b30      	cmp	r3, #48	; 0x30
 800780a:	d019      	beq.n	8007840 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b40      	cmp	r3, #64	; 0x40
 8007812:	d015      	beq.n	8007840 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b50      	cmp	r3, #80	; 0x50
 800781a:	d011      	beq.n	8007840 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b60      	cmp	r3, #96	; 0x60
 8007822:	d00d      	beq.n	8007840 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b70      	cmp	r3, #112	; 0x70
 800782a:	d009      	beq.n	8007840 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007834:	d004      	beq.n	8007840 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007836:	f240 71e9 	movw	r1, #2025	; 0x7e9
 800783a:	4874      	ldr	r0, [pc, #464]	; (8007a0c <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 800783c:	f7f9 fe8b 	bl	8001556 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	2b80      	cmp	r3, #128	; 0x80
 8007846:	d008      	beq.n	800785a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d004      	beq.n	800785a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8007850:	f240 71ea 	movw	r1, #2026	; 0x7ea
 8007854:	486d      	ldr	r0, [pc, #436]	; (8007a0c <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 8007856:	f7f9 fe7e 	bl	8001556 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007860:	2b01      	cmp	r3, #1
 8007862:	d101      	bne.n	8007868 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007864:	2302      	movs	r3, #2
 8007866:	e0be      	b.n	80079e6 <HAL_TIMEx_MasterConfigSynchronization+0x25e>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a58      	ldr	r2, [pc, #352]	; (80079f0 <HAL_TIMEx_MasterConfigSynchronization+0x268>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d004      	beq.n	800789c <HAL_TIMEx_MasterConfigSynchronization+0x114>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a5b      	ldr	r2, [pc, #364]	; (8007a04 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d161      	bne.n	8007960 <HAL_TIMEx_MasterConfigSynchronization+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d054      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078ac:	d04f      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078b6:	d04a      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078c0:	d045      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078ca:	d040      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80078d4:	d03b      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80078de:	d036      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80078e8:	d031      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80078f2:	d02c      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078fc:	d027      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8007906:	d022      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007910:	d01d      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 800791a:	d018      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007924:	d013      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 800792e:	d00e      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8007938:	d009      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8007942:	d004      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x1c6>
 8007944:	f240 71fc 	movw	r1, #2044	; 0x7fc
 8007948:	4830      	ldr	r0, [pc, #192]	; (8007a0c <HAL_TIMEx_MasterConfigSynchronization+0x284>)
 800794a:	f7f9 fe04 	bl	8001556 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007954:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	4313      	orrs	r3, r2
 800795e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800796a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	4313      	orrs	r3, r2
 8007974:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a1b      	ldr	r2, [pc, #108]	; (80079f0 <HAL_TIMEx_MasterConfigSynchronization+0x268>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d018      	beq.n	80079ba <HAL_TIMEx_MasterConfigSynchronization+0x232>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007990:	d013      	beq.n	80079ba <HAL_TIMEx_MasterConfigSynchronization+0x232>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a17      	ldr	r2, [pc, #92]	; (80079f4 <HAL_TIMEx_MasterConfigSynchronization+0x26c>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d00e      	beq.n	80079ba <HAL_TIMEx_MasterConfigSynchronization+0x232>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a15      	ldr	r2, [pc, #84]	; (80079f8 <HAL_TIMEx_MasterConfigSynchronization+0x270>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d009      	beq.n	80079ba <HAL_TIMEx_MasterConfigSynchronization+0x232>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a16      	ldr	r2, [pc, #88]	; (8007a04 <HAL_TIMEx_MasterConfigSynchronization+0x27c>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d004      	beq.n	80079ba <HAL_TIMEx_MasterConfigSynchronization+0x232>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a14      	ldr	r2, [pc, #80]	; (8007a08 <HAL_TIMEx_MasterConfigSynchronization+0x280>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d10c      	bne.n	80079d4 <HAL_TIMEx_MasterConfigSynchronization+0x24c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	68ba      	ldr	r2, [r7, #8]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68ba      	ldr	r2, [r7, #8]
 80079d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	40012c00 	.word	0x40012c00
 80079f4:	40000400 	.word	0x40000400
 80079f8:	40000800 	.word	0x40000800
 80079fc:	40001000 	.word	0x40001000
 8007a00:	40001400 	.word	0x40001400
 8007a04:	40013400 	.word	0x40013400
 8007a08:	40014000 	.word	0x40014000
 8007a0c:	08009340 	.word	0x08009340

08007a10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a49      	ldr	r2, [pc, #292]	; (8007b48 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d018      	beq.n	8007a5a <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a47      	ldr	r2, [pc, #284]	; (8007b4c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d013      	beq.n	8007a5a <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a46      	ldr	r2, [pc, #280]	; (8007b50 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d00e      	beq.n	8007a5a <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a44      	ldr	r2, [pc, #272]	; (8007b54 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d009      	beq.n	8007a5a <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a43      	ldr	r2, [pc, #268]	; (8007b58 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d004      	beq.n	8007a5a <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8007a50:	f640 0131 	movw	r1, #2097	; 0x831
 8007a54:	4841      	ldr	r0, [pc, #260]	; (8007b5c <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8007a56:	f7f9 fd7e 	bl	8001556 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a62:	d008      	beq.n	8007a76 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d004      	beq.n	8007a76 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8007a6c:	f640 0132 	movw	r1, #2098	; 0x832
 8007a70:	483a      	ldr	r0, [pc, #232]	; (8007b5c <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8007a72:	f7f9 fd70 	bl	8001556 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a7e:	d008      	beq.n	8007a92 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d004      	beq.n	8007a92 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8007a88:	f640 0133 	movw	r1, #2099	; 0x833
 8007a8c:	4833      	ldr	r0, [pc, #204]	; (8007b5c <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8007a8e:	f7f9 fd62 	bl	8001556 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d013      	beq.n	8007ac2 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aa2:	d00e      	beq.n	8007ac2 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aac:	d009      	beq.n	8007ac2 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ab6:	d004      	beq.n	8007ac2 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8007ab8:	f640 0134 	movw	r1, #2100	; 0x834
 8007abc:	4827      	ldr	r0, [pc, #156]	; (8007b5c <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8007abe:	f7f9 fd4a 	bl	8001556 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	2bff      	cmp	r3, #255	; 0xff
 8007ac8:	d904      	bls.n	8007ad4 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>
 8007aca:	f640 0135 	movw	r1, #2101	; 0x835
 8007ace:	4823      	ldr	r0, [pc, #140]	; (8007b5c <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8007ad0:	f7f9 fd41 	bl	8001556 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007adc:	d008      	beq.n	8007af0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d004      	beq.n	8007af0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007ae6:	f640 0136 	movw	r1, #2102	; 0x836
 8007aea:	481c      	ldr	r0, [pc, #112]	; (8007b5c <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8007aec:	f7f9 fd33 	bl	8001556 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d009      	beq.n	8007b0c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b00:	d004      	beq.n	8007b0c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8007b02:	f640 0137 	movw	r1, #2103	; 0x837
 8007b06:	4815      	ldr	r0, [pc, #84]	; (8007b5c <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8007b08:	f7f9 fd25 	bl	8001556 <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	2b0f      	cmp	r3, #15
 8007b12:	d904      	bls.n	8007b1e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007b14:	f640 0138 	movw	r1, #2104	; 0x838
 8007b18:	4810      	ldr	r0, [pc, #64]	; (8007b5c <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8007b1a:	f7f9 fd1c 	bl	8001556 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b26:	d008      	beq.n	8007b3a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d004      	beq.n	8007b3a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007b30:	f640 0139 	movw	r1, #2105	; 0x839
 8007b34:	4809      	ldr	r0, [pc, #36]	; (8007b5c <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 8007b36:	f7f9 fd0e 	bl	8001556 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d10d      	bne.n	8007b60 <HAL_TIMEx_ConfigBreakDeadTime+0x150>
 8007b44:	2302      	movs	r3, #2
 8007b46:	e0d4      	b.n	8007cf2 <HAL_TIMEx_ConfigBreakDeadTime+0x2e2>
 8007b48:	40012c00 	.word	0x40012c00
 8007b4c:	40013400 	.word	0x40013400
 8007b50:	40014000 	.word	0x40014000
 8007b54:	40014400 	.word	0x40014400
 8007b58:	40014800 	.word	0x40014800
 8007b5c:	08009340 	.word	0x08009340
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	041b      	lsls	r3, r3, #16
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a47      	ldr	r2, [pc, #284]	; (8007cfc <HAL_TIMEx_ConfigBreakDeadTime+0x2ec>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d004      	beq.n	8007bee <HAL_TIMEx_ConfigBreakDeadTime+0x1de>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a45      	ldr	r2, [pc, #276]	; (8007d00 <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d114      	bne.n	8007c18 <HAL_TIMEx_ConfigBreakDeadTime+0x208>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	69db      	ldr	r3, [r3, #28]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d009      	beq.n	8007c0a <HAL_TIMEx_ConfigBreakDeadTime+0x1fa>
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bfe:	d004      	beq.n	8007c0a <HAL_TIMEx_ConfigBreakDeadTime+0x1fa>
 8007c00:	f640 014e 	movw	r1, #2126	; 0x84e
 8007c04:	483f      	ldr	r0, [pc, #252]	; (8007d04 <HAL_TIMEx_ConfigBreakDeadTime+0x2f4>)
 8007c06:	f7f9 fca6 	bl	8001556 <assert_failed>

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	69db      	ldr	r3, [r3, #28]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a37      	ldr	r2, [pc, #220]	; (8007cfc <HAL_TIMEx_ConfigBreakDeadTime+0x2ec>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d004      	beq.n	8007c2c <HAL_TIMEx_ConfigBreakDeadTime+0x21c>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a36      	ldr	r2, [pc, #216]	; (8007d00 <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d159      	bne.n	8007ce0 <HAL_TIMEx_ConfigBreakDeadTime+0x2d0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	6a1b      	ldr	r3, [r3, #32]
 8007c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c34:	d008      	beq.n	8007c48 <HAL_TIMEx_ConfigBreakDeadTime+0x238>
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d004      	beq.n	8007c48 <HAL_TIMEx_ConfigBreakDeadTime+0x238>
 8007c3e:	f640 0157 	movw	r1, #2135	; 0x857
 8007c42:	4830      	ldr	r0, [pc, #192]	; (8007d04 <HAL_TIMEx_ConfigBreakDeadTime+0x2f4>)
 8007c44:	f7f9 fc87 	bl	8001556 <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d009      	beq.n	8007c64 <HAL_TIMEx_ConfigBreakDeadTime+0x254>
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c58:	d004      	beq.n	8007c64 <HAL_TIMEx_ConfigBreakDeadTime+0x254>
 8007c5a:	f640 0158 	movw	r1, #2136	; 0x858
 8007c5e:	4829      	ldr	r0, [pc, #164]	; (8007d04 <HAL_TIMEx_ConfigBreakDeadTime+0x2f4>)
 8007c60:	f7f9 fc79 	bl	8001556 <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c68:	2b0f      	cmp	r3, #15
 8007c6a:	d904      	bls.n	8007c76 <HAL_TIMEx_ConfigBreakDeadTime+0x266>
 8007c6c:	f640 0159 	movw	r1, #2137	; 0x859
 8007c70:	4824      	ldr	r0, [pc, #144]	; (8007d04 <HAL_TIMEx_ConfigBreakDeadTime+0x2f4>)
 8007c72:	f7f9 fc70 	bl	8001556 <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c80:	051b      	lsls	r3, r3, #20
 8007c82:	4313      	orrs	r3, r2
 8007c84:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	6a1b      	ldr	r3, [r3, #32]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a15      	ldr	r2, [pc, #84]	; (8007cfc <HAL_TIMEx_ConfigBreakDeadTime+0x2ec>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d004      	beq.n	8007cb6 <HAL_TIMEx_ConfigBreakDeadTime+0x2a6>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a13      	ldr	r2, [pc, #76]	; (8007d00 <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d114      	bne.n	8007ce0 <HAL_TIMEx_ConfigBreakDeadTime+0x2d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d009      	beq.n	8007cd2 <HAL_TIMEx_ConfigBreakDeadTime+0x2c2>
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cc6:	d004      	beq.n	8007cd2 <HAL_TIMEx_ConfigBreakDeadTime+0x2c2>
 8007cc8:	f640 0163 	movw	r1, #2147	; 0x863
 8007ccc:	480d      	ldr	r0, [pc, #52]	; (8007d04 <HAL_TIMEx_ConfigBreakDeadTime+0x2f4>)
 8007cce:	f7f9 fc42 	bl	8001556 <assert_failed>

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	40012c00 	.word	0x40012c00
 8007d00:	40013400 	.word	0x40013400
 8007d04:	08009340 	.word	0x08009340

08007d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007d4c:	bf00      	nop
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007da2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007da6:	2b84      	cmp	r3, #132	; 0x84
 8007da8:	d005      	beq.n	8007db6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007daa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	4413      	add	r3, r2
 8007db2:	3303      	adds	r3, #3
 8007db4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007db6:	68fb      	ldr	r3, [r7, #12]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007dc8:	f000 fa58 	bl	800827c <vTaskStartScheduler>
  
  return osOK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007dd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dd4:	b087      	sub	sp, #28
 8007dd6:	af02      	add	r7, sp, #8
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685c      	ldr	r4, [r3, #4]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007de8:	b29e      	uxth	r6, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7ff ffcf 	bl	8007d94 <makeFreeRtosPriority>
 8007df6:	4602      	mov	r2, r0
 8007df8:	f107 030c 	add.w	r3, r7, #12
 8007dfc:	9301      	str	r3, [sp, #4]
 8007dfe:	9200      	str	r2, [sp, #0]
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	4632      	mov	r2, r6
 8007e04:	4629      	mov	r1, r5
 8007e06:	4620      	mov	r0, r4
 8007e08:	f000 f8d2 	bl	8007fb0 <xTaskCreate>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d001      	beq.n	8007e16 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8007e12:	2300      	movs	r3, #0
 8007e14:	e000      	b.n	8007e18 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8007e16:	68fb      	ldr	r3, [r7, #12]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3714      	adds	r7, #20
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e20 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <osDelay+0x16>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	e000      	b.n	8007e38 <osDelay+0x18>
 8007e36:	2301      	movs	r3, #1
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 f9eb 	bl	8008214 <vTaskDelay>
  
  return osOK;
 8007e3e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f103 0208 	add.w	r2, r3, #8
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f103 0208 	add.w	r2, r3, #8
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f103 0208 	add.w	r2, r3, #8
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e96:	bf00      	nop
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b085      	sub	sp, #20
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	689a      	ldr	r2, [r3, #8]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	683a      	ldr	r2, [r7, #0]
 8007ec6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	1c5a      	adds	r2, r3, #1
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	601a      	str	r2, [r3, #0]
}
 8007ede:	bf00      	nop
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007eea:	b480      	push	{r7}
 8007eec:	b085      	sub	sp, #20
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f00:	d103      	bne.n	8007f0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	60fb      	str	r3, [r7, #12]
 8007f08:	e00c      	b.n	8007f24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	3308      	adds	r3, #8
 8007f0e:	60fb      	str	r3, [r7, #12]
 8007f10:	e002      	b.n	8007f18 <vListInsert+0x2e>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	60fb      	str	r3, [r7, #12]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d2f6      	bcs.n	8007f12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	685a      	ldr	r2, [r3, #4]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	683a      	ldr	r2, [r7, #0]
 8007f32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	683a      	ldr	r2, [r7, #0]
 8007f3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	1c5a      	adds	r2, r3, #1
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	601a      	str	r2, [r3, #0]
}
 8007f50:	bf00      	nop
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	6892      	ldr	r2, [r2, #8]
 8007f72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	6852      	ldr	r2, [r2, #4]
 8007f7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d103      	bne.n	8007f90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	689a      	ldr	r2, [r3, #8]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	1e5a      	subs	r2, r3, #1
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b08c      	sub	sp, #48	; 0x30
 8007fb4:	af04      	add	r7, sp, #16
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007fc0:	88fb      	ldrh	r3, [r7, #6]
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 fe75 	bl	8008cb4 <pvPortMalloc>
 8007fca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00e      	beq.n	8007ff0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007fd2:	2054      	movs	r0, #84	; 0x54
 8007fd4:	f000 fe6e 	bl	8008cb4 <pvPortMalloc>
 8007fd8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d003      	beq.n	8007fe8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	631a      	str	r2, [r3, #48]	; 0x30
 8007fe6:	e005      	b.n	8007ff4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007fe8:	6978      	ldr	r0, [r7, #20]
 8007fea:	f000 ff25 	bl	8008e38 <vPortFree>
 8007fee:	e001      	b.n	8007ff4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d013      	beq.n	8008022 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ffa:	88fa      	ldrh	r2, [r7, #6]
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	9303      	str	r3, [sp, #12]
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	9302      	str	r3, [sp, #8]
 8008004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008006:	9301      	str	r3, [sp, #4]
 8008008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	68b9      	ldr	r1, [r7, #8]
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f000 f80e 	bl	8008032 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008016:	69f8      	ldr	r0, [r7, #28]
 8008018:	f000 f892 	bl	8008140 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800801c:	2301      	movs	r3, #1
 800801e:	61bb      	str	r3, [r7, #24]
 8008020:	e002      	b.n	8008028 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008022:	f04f 33ff 	mov.w	r3, #4294967295
 8008026:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008028:	69bb      	ldr	r3, [r7, #24]
	}
 800802a:	4618      	mov	r0, r3
 800802c:	3720      	adds	r7, #32
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b088      	sub	sp, #32
 8008036:	af00      	add	r7, sp, #0
 8008038:	60f8      	str	r0, [r7, #12]
 800803a:	60b9      	str	r1, [r7, #8]
 800803c:	607a      	str	r2, [r7, #4]
 800803e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800804a:	3b01      	subs	r3, #1
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4413      	add	r3, r2
 8008050:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	f023 0307 	bic.w	r3, r3, #7
 8008058:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	f003 0307 	and.w	r3, r3, #7
 8008060:	2b00      	cmp	r3, #0
 8008062:	d009      	beq.n	8008078 <prvInitialiseNewTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008068:	f383 8811 	msr	BASEPRI, r3
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	617b      	str	r3, [r7, #20]
 8008076:	e7fe      	b.n	8008076 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d01f      	beq.n	80080be <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800807e:	2300      	movs	r3, #0
 8008080:	61fb      	str	r3, [r7, #28]
 8008082:	e012      	b.n	80080aa <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008084:	68ba      	ldr	r2, [r7, #8]
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	4413      	add	r3, r2
 800808a:	7819      	ldrb	r1, [r3, #0]
 800808c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	4413      	add	r3, r2
 8008092:	3334      	adds	r3, #52	; 0x34
 8008094:	460a      	mov	r2, r1
 8008096:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	4413      	add	r3, r2
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d006      	beq.n	80080b2 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	3301      	adds	r3, #1
 80080a8:	61fb      	str	r3, [r7, #28]
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	2b0f      	cmp	r3, #15
 80080ae:	d9e9      	bls.n	8008084 <prvInitialiseNewTask+0x52>
 80080b0:	e000      	b.n	80080b4 <prvInitialiseNewTask+0x82>
			{
				break;
 80080b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080bc:	e003      	b.n	80080c6 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80080be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c8:	2b06      	cmp	r3, #6
 80080ca:	d901      	bls.n	80080d0 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080cc:	2306      	movs	r3, #6
 80080ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80080d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80080dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080de:	2200      	movs	r2, #0
 80080e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e4:	3304      	adds	r3, #4
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7ff fece 	bl	8007e88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80080ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ee:	3318      	adds	r3, #24
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7ff fec9 	bl	8007e88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fe:	f1c3 0207 	rsb	r2, r3, #7
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800810a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800810c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810e:	2200      	movs	r2, #0
 8008110:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	68f9      	ldr	r1, [r7, #12]
 800811e:	69b8      	ldr	r0, [r7, #24]
 8008120:	f000 fbc8 	bl	80088b4 <pxPortInitialiseStack>
 8008124:	4602      	mov	r2, r0
 8008126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008128:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800812a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812c:	2b00      	cmp	r3, #0
 800812e:	d002      	beq.n	8008136 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008136:	bf00      	nop
 8008138:	3720      	adds	r7, #32
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
	...

08008140 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008148:	f000 fcd8 	bl	8008afc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800814c:	4b2a      	ldr	r3, [pc, #168]	; (80081f8 <prvAddNewTaskToReadyList+0xb8>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	3301      	adds	r3, #1
 8008152:	4a29      	ldr	r2, [pc, #164]	; (80081f8 <prvAddNewTaskToReadyList+0xb8>)
 8008154:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008156:	4b29      	ldr	r3, [pc, #164]	; (80081fc <prvAddNewTaskToReadyList+0xbc>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d109      	bne.n	8008172 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800815e:	4a27      	ldr	r2, [pc, #156]	; (80081fc <prvAddNewTaskToReadyList+0xbc>)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008164:	4b24      	ldr	r3, [pc, #144]	; (80081f8 <prvAddNewTaskToReadyList+0xb8>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d110      	bne.n	800818e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800816c:	f000 faa0 	bl	80086b0 <prvInitialiseTaskLists>
 8008170:	e00d      	b.n	800818e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008172:	4b23      	ldr	r3, [pc, #140]	; (8008200 <prvAddNewTaskToReadyList+0xc0>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d109      	bne.n	800818e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800817a:	4b20      	ldr	r3, [pc, #128]	; (80081fc <prvAddNewTaskToReadyList+0xbc>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008184:	429a      	cmp	r2, r3
 8008186:	d802      	bhi.n	800818e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008188:	4a1c      	ldr	r2, [pc, #112]	; (80081fc <prvAddNewTaskToReadyList+0xbc>)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800818e:	4b1d      	ldr	r3, [pc, #116]	; (8008204 <prvAddNewTaskToReadyList+0xc4>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3301      	adds	r3, #1
 8008194:	4a1b      	ldr	r2, [pc, #108]	; (8008204 <prvAddNewTaskToReadyList+0xc4>)
 8008196:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819c:	2201      	movs	r2, #1
 800819e:	409a      	lsls	r2, r3
 80081a0:	4b19      	ldr	r3, [pc, #100]	; (8008208 <prvAddNewTaskToReadyList+0xc8>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	4a18      	ldr	r2, [pc, #96]	; (8008208 <prvAddNewTaskToReadyList+0xc8>)
 80081a8:	6013      	str	r3, [r2, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ae:	4613      	mov	r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	4413      	add	r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4a15      	ldr	r2, [pc, #84]	; (800820c <prvAddNewTaskToReadyList+0xcc>)
 80081b8:	441a      	add	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	3304      	adds	r3, #4
 80081be:	4619      	mov	r1, r3
 80081c0:	4610      	mov	r0, r2
 80081c2:	f7ff fe6e 	bl	8007ea2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80081c6:	f000 fcc7 	bl	8008b58 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80081ca:	4b0d      	ldr	r3, [pc, #52]	; (8008200 <prvAddNewTaskToReadyList+0xc0>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00e      	beq.n	80081f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80081d2:	4b0a      	ldr	r3, [pc, #40]	; (80081fc <prvAddNewTaskToReadyList+0xbc>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081dc:	429a      	cmp	r2, r3
 80081de:	d207      	bcs.n	80081f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80081e0:	4b0b      	ldr	r3, [pc, #44]	; (8008210 <prvAddNewTaskToReadyList+0xd0>)
 80081e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081f0:	bf00      	nop
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	200013a0 	.word	0x200013a0
 80081fc:	200012a0 	.word	0x200012a0
 8008200:	200013ac 	.word	0x200013ac
 8008204:	200013bc 	.word	0x200013bc
 8008208:	200013a8 	.word	0x200013a8
 800820c:	200012a4 	.word	0x200012a4
 8008210:	e000ed04 	.word	0xe000ed04

08008214 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800821c:	2300      	movs	r3, #0
 800821e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d016      	beq.n	8008254 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008226:	4b13      	ldr	r3, [pc, #76]	; (8008274 <vTaskDelay+0x60>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d009      	beq.n	8008242 <vTaskDelay+0x2e>
 800822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	60bb      	str	r3, [r7, #8]
 8008240:	e7fe      	b.n	8008240 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008242:	f000 f861 	bl	8008308 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008246:	2100      	movs	r1, #0
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 facd 	bl	80087e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800824e:	f000 f869 	bl	8008324 <xTaskResumeAll>
 8008252:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d107      	bne.n	800826a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800825a:	4b07      	ldr	r3, [pc, #28]	; (8008278 <vTaskDelay+0x64>)
 800825c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008260:	601a      	str	r2, [r3, #0]
 8008262:	f3bf 8f4f 	dsb	sy
 8008266:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800826a:	bf00      	nop
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	200013c8 	.word	0x200013c8
 8008278:	e000ed04 	.word	0xe000ed04

0800827c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8008282:	4b1b      	ldr	r3, [pc, #108]	; (80082f0 <vTaskStartScheduler+0x74>)
 8008284:	9301      	str	r3, [sp, #4]
 8008286:	2300      	movs	r3, #0
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	2300      	movs	r3, #0
 800828c:	2280      	movs	r2, #128	; 0x80
 800828e:	4919      	ldr	r1, [pc, #100]	; (80082f4 <vTaskStartScheduler+0x78>)
 8008290:	4819      	ldr	r0, [pc, #100]	; (80082f8 <vTaskStartScheduler+0x7c>)
 8008292:	f7ff fe8d 	bl	8007fb0 <xTaskCreate>
 8008296:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d115      	bne.n	80082ca <vTaskStartScheduler+0x4e>
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80082b0:	4b12      	ldr	r3, [pc, #72]	; (80082fc <vTaskStartScheduler+0x80>)
 80082b2:	f04f 32ff 	mov.w	r2, #4294967295
 80082b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80082b8:	4b11      	ldr	r3, [pc, #68]	; (8008300 <vTaskStartScheduler+0x84>)
 80082ba:	2201      	movs	r2, #1
 80082bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80082be:	4b11      	ldr	r3, [pc, #68]	; (8008304 <vTaskStartScheduler+0x88>)
 80082c0:	2200      	movs	r2, #0
 80082c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80082c4:	f000 fb7c 	bl	80089c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80082c8:	e00d      	b.n	80082e6 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d0:	d109      	bne.n	80082e6 <vTaskStartScheduler+0x6a>
 80082d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d6:	f383 8811 	msr	BASEPRI, r3
 80082da:	f3bf 8f6f 	isb	sy
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	607b      	str	r3, [r7, #4]
 80082e4:	e7fe      	b.n	80082e4 <vTaskStartScheduler+0x68>
}
 80082e6:	bf00      	nop
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	200013c4 	.word	0x200013c4
 80082f4:	0800937c 	.word	0x0800937c
 80082f8:	08008681 	.word	0x08008681
 80082fc:	200013c0 	.word	0x200013c0
 8008300:	200013ac 	.word	0x200013ac
 8008304:	200013a4 	.word	0x200013a4

08008308 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008308:	b480      	push	{r7}
 800830a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800830c:	4b04      	ldr	r3, [pc, #16]	; (8008320 <vTaskSuspendAll+0x18>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	3301      	adds	r3, #1
 8008312:	4a03      	ldr	r2, [pc, #12]	; (8008320 <vTaskSuspendAll+0x18>)
 8008314:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008316:	bf00      	nop
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr
 8008320:	200013c8 	.word	0x200013c8

08008324 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800832a:	2300      	movs	r3, #0
 800832c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800832e:	2300      	movs	r3, #0
 8008330:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008332:	4b41      	ldr	r3, [pc, #260]	; (8008438 <xTaskResumeAll+0x114>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d109      	bne.n	800834e <xTaskResumeAll+0x2a>
 800833a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833e:	f383 8811 	msr	BASEPRI, r3
 8008342:	f3bf 8f6f 	isb	sy
 8008346:	f3bf 8f4f 	dsb	sy
 800834a:	603b      	str	r3, [r7, #0]
 800834c:	e7fe      	b.n	800834c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800834e:	f000 fbd5 	bl	8008afc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008352:	4b39      	ldr	r3, [pc, #228]	; (8008438 <xTaskResumeAll+0x114>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	3b01      	subs	r3, #1
 8008358:	4a37      	ldr	r2, [pc, #220]	; (8008438 <xTaskResumeAll+0x114>)
 800835a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800835c:	4b36      	ldr	r3, [pc, #216]	; (8008438 <xTaskResumeAll+0x114>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d161      	bne.n	8008428 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008364:	4b35      	ldr	r3, [pc, #212]	; (800843c <xTaskResumeAll+0x118>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d05d      	beq.n	8008428 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800836c:	e02e      	b.n	80083cc <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800836e:	4b34      	ldr	r3, [pc, #208]	; (8008440 <xTaskResumeAll+0x11c>)
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	3318      	adds	r3, #24
 800837a:	4618      	mov	r0, r3
 800837c:	f7ff fdee 	bl	8007f5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	3304      	adds	r3, #4
 8008384:	4618      	mov	r0, r3
 8008386:	f7ff fde9 	bl	8007f5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838e:	2201      	movs	r2, #1
 8008390:	409a      	lsls	r2, r3
 8008392:	4b2c      	ldr	r3, [pc, #176]	; (8008444 <xTaskResumeAll+0x120>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4313      	orrs	r3, r2
 8008398:	4a2a      	ldr	r2, [pc, #168]	; (8008444 <xTaskResumeAll+0x120>)
 800839a:	6013      	str	r3, [r2, #0]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083a0:	4613      	mov	r3, r2
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	4413      	add	r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4a27      	ldr	r2, [pc, #156]	; (8008448 <xTaskResumeAll+0x124>)
 80083aa:	441a      	add	r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	3304      	adds	r3, #4
 80083b0:	4619      	mov	r1, r3
 80083b2:	4610      	mov	r0, r2
 80083b4:	f7ff fd75 	bl	8007ea2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083bc:	4b23      	ldr	r3, [pc, #140]	; (800844c <xTaskResumeAll+0x128>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d302      	bcc.n	80083cc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80083c6:	4b22      	ldr	r3, [pc, #136]	; (8008450 <xTaskResumeAll+0x12c>)
 80083c8:	2201      	movs	r2, #1
 80083ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083cc:	4b1c      	ldr	r3, [pc, #112]	; (8008440 <xTaskResumeAll+0x11c>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d1cc      	bne.n	800836e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d001      	beq.n	80083de <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80083da:	f000 f9e5 	bl	80087a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80083de:	4b1d      	ldr	r3, [pc, #116]	; (8008454 <xTaskResumeAll+0x130>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d010      	beq.n	800840c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80083ea:	f000 f837 	bl	800845c <xTaskIncrementTick>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d002      	beq.n	80083fa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80083f4:	4b16      	ldr	r3, [pc, #88]	; (8008450 <xTaskResumeAll+0x12c>)
 80083f6:	2201      	movs	r2, #1
 80083f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	3b01      	subs	r3, #1
 80083fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1f1      	bne.n	80083ea <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008406:	4b13      	ldr	r3, [pc, #76]	; (8008454 <xTaskResumeAll+0x130>)
 8008408:	2200      	movs	r2, #0
 800840a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800840c:	4b10      	ldr	r3, [pc, #64]	; (8008450 <xTaskResumeAll+0x12c>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d009      	beq.n	8008428 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008414:	2301      	movs	r3, #1
 8008416:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008418:	4b0f      	ldr	r3, [pc, #60]	; (8008458 <xTaskResumeAll+0x134>)
 800841a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800841e:	601a      	str	r2, [r3, #0]
 8008420:	f3bf 8f4f 	dsb	sy
 8008424:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008428:	f000 fb96 	bl	8008b58 <vPortExitCritical>

	return xAlreadyYielded;
 800842c:	68bb      	ldr	r3, [r7, #8]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	200013c8 	.word	0x200013c8
 800843c:	200013a0 	.word	0x200013a0
 8008440:	20001360 	.word	0x20001360
 8008444:	200013a8 	.word	0x200013a8
 8008448:	200012a4 	.word	0x200012a4
 800844c:	200012a0 	.word	0x200012a0
 8008450:	200013b4 	.word	0x200013b4
 8008454:	200013b0 	.word	0x200013b0
 8008458:	e000ed04 	.word	0xe000ed04

0800845c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b086      	sub	sp, #24
 8008460:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008462:	2300      	movs	r3, #0
 8008464:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008466:	4b4e      	ldr	r3, [pc, #312]	; (80085a0 <xTaskIncrementTick+0x144>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	f040 8087 	bne.w	800857e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008470:	4b4c      	ldr	r3, [pc, #304]	; (80085a4 <xTaskIncrementTick+0x148>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3301      	adds	r3, #1
 8008476:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008478:	4a4a      	ldr	r2, [pc, #296]	; (80085a4 <xTaskIncrementTick+0x148>)
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d11f      	bne.n	80084c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008484:	4b48      	ldr	r3, [pc, #288]	; (80085a8 <xTaskIncrementTick+0x14c>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d009      	beq.n	80084a2 <xTaskIncrementTick+0x46>
 800848e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	603b      	str	r3, [r7, #0]
 80084a0:	e7fe      	b.n	80084a0 <xTaskIncrementTick+0x44>
 80084a2:	4b41      	ldr	r3, [pc, #260]	; (80085a8 <xTaskIncrementTick+0x14c>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	60fb      	str	r3, [r7, #12]
 80084a8:	4b40      	ldr	r3, [pc, #256]	; (80085ac <xTaskIncrementTick+0x150>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a3e      	ldr	r2, [pc, #248]	; (80085a8 <xTaskIncrementTick+0x14c>)
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	4a3e      	ldr	r2, [pc, #248]	; (80085ac <xTaskIncrementTick+0x150>)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6013      	str	r3, [r2, #0]
 80084b6:	4b3e      	ldr	r3, [pc, #248]	; (80085b0 <xTaskIncrementTick+0x154>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	3301      	adds	r3, #1
 80084bc:	4a3c      	ldr	r2, [pc, #240]	; (80085b0 <xTaskIncrementTick+0x154>)
 80084be:	6013      	str	r3, [r2, #0]
 80084c0:	f000 f972 	bl	80087a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80084c4:	4b3b      	ldr	r3, [pc, #236]	; (80085b4 <xTaskIncrementTick+0x158>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d348      	bcc.n	8008560 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084ce:	4b36      	ldr	r3, [pc, #216]	; (80085a8 <xTaskIncrementTick+0x14c>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d104      	bne.n	80084e2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084d8:	4b36      	ldr	r3, [pc, #216]	; (80085b4 <xTaskIncrementTick+0x158>)
 80084da:	f04f 32ff 	mov.w	r2, #4294967295
 80084de:	601a      	str	r2, [r3, #0]
					break;
 80084e0:	e03e      	b.n	8008560 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084e2:	4b31      	ldr	r3, [pc, #196]	; (80085a8 <xTaskIncrementTick+0x14c>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d203      	bcs.n	8008502 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80084fa:	4a2e      	ldr	r2, [pc, #184]	; (80085b4 <xTaskIncrementTick+0x158>)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008500:	e02e      	b.n	8008560 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	3304      	adds	r3, #4
 8008506:	4618      	mov	r0, r3
 8008508:	f7ff fd28 	bl	8007f5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008510:	2b00      	cmp	r3, #0
 8008512:	d004      	beq.n	800851e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	3318      	adds	r3, #24
 8008518:	4618      	mov	r0, r3
 800851a:	f7ff fd1f 	bl	8007f5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008522:	2201      	movs	r2, #1
 8008524:	409a      	lsls	r2, r3
 8008526:	4b24      	ldr	r3, [pc, #144]	; (80085b8 <xTaskIncrementTick+0x15c>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4313      	orrs	r3, r2
 800852c:	4a22      	ldr	r2, [pc, #136]	; (80085b8 <xTaskIncrementTick+0x15c>)
 800852e:	6013      	str	r3, [r2, #0]
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008534:	4613      	mov	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4413      	add	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4a1f      	ldr	r2, [pc, #124]	; (80085bc <xTaskIncrementTick+0x160>)
 800853e:	441a      	add	r2, r3
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	3304      	adds	r3, #4
 8008544:	4619      	mov	r1, r3
 8008546:	4610      	mov	r0, r2
 8008548:	f7ff fcab 	bl	8007ea2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008550:	4b1b      	ldr	r3, [pc, #108]	; (80085c0 <xTaskIncrementTick+0x164>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008556:	429a      	cmp	r2, r3
 8008558:	d3b9      	bcc.n	80084ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800855a:	2301      	movs	r3, #1
 800855c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800855e:	e7b6      	b.n	80084ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008560:	4b17      	ldr	r3, [pc, #92]	; (80085c0 <xTaskIncrementTick+0x164>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008566:	4915      	ldr	r1, [pc, #84]	; (80085bc <xTaskIncrementTick+0x160>)
 8008568:	4613      	mov	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	440b      	add	r3, r1
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d907      	bls.n	8008588 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8008578:	2301      	movs	r3, #1
 800857a:	617b      	str	r3, [r7, #20]
 800857c:	e004      	b.n	8008588 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800857e:	4b11      	ldr	r3, [pc, #68]	; (80085c4 <xTaskIncrementTick+0x168>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	3301      	adds	r3, #1
 8008584:	4a0f      	ldr	r2, [pc, #60]	; (80085c4 <xTaskIncrementTick+0x168>)
 8008586:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008588:	4b0f      	ldr	r3, [pc, #60]	; (80085c8 <xTaskIncrementTick+0x16c>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d001      	beq.n	8008594 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8008590:	2301      	movs	r3, #1
 8008592:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008594:	697b      	ldr	r3, [r7, #20]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3718      	adds	r7, #24
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	200013c8 	.word	0x200013c8
 80085a4:	200013a4 	.word	0x200013a4
 80085a8:	20001358 	.word	0x20001358
 80085ac:	2000135c 	.word	0x2000135c
 80085b0:	200013b8 	.word	0x200013b8
 80085b4:	200013c0 	.word	0x200013c0
 80085b8:	200013a8 	.word	0x200013a8
 80085bc:	200012a4 	.word	0x200012a4
 80085c0:	200012a0 	.word	0x200012a0
 80085c4:	200013b0 	.word	0x200013b0
 80085c8:	200013b4 	.word	0x200013b4

080085cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80085cc:	b480      	push	{r7}
 80085ce:	b087      	sub	sp, #28
 80085d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80085d2:	4b26      	ldr	r3, [pc, #152]	; (800866c <vTaskSwitchContext+0xa0>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d003      	beq.n	80085e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80085da:	4b25      	ldr	r3, [pc, #148]	; (8008670 <vTaskSwitchContext+0xa4>)
 80085dc:	2201      	movs	r2, #1
 80085de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80085e0:	e03e      	b.n	8008660 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80085e2:	4b23      	ldr	r3, [pc, #140]	; (8008670 <vTaskSwitchContext+0xa4>)
 80085e4:	2200      	movs	r2, #0
 80085e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085e8:	4b22      	ldr	r3, [pc, #136]	; (8008674 <vTaskSwitchContext+0xa8>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	fab3 f383 	clz	r3, r3
 80085f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80085f6:	7afb      	ldrb	r3, [r7, #11]
 80085f8:	f1c3 031f 	rsb	r3, r3, #31
 80085fc:	617b      	str	r3, [r7, #20]
 80085fe:	491e      	ldr	r1, [pc, #120]	; (8008678 <vTaskSwitchContext+0xac>)
 8008600:	697a      	ldr	r2, [r7, #20]
 8008602:	4613      	mov	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4413      	add	r3, r2
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	440b      	add	r3, r1
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d109      	bne.n	8008626 <vTaskSwitchContext+0x5a>
	__asm volatile
 8008612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008616:	f383 8811 	msr	BASEPRI, r3
 800861a:	f3bf 8f6f 	isb	sy
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	607b      	str	r3, [r7, #4]
 8008624:	e7fe      	b.n	8008624 <vTaskSwitchContext+0x58>
 8008626:	697a      	ldr	r2, [r7, #20]
 8008628:	4613      	mov	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4413      	add	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4a11      	ldr	r2, [pc, #68]	; (8008678 <vTaskSwitchContext+0xac>)
 8008632:	4413      	add	r3, r2
 8008634:	613b      	str	r3, [r7, #16]
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	685a      	ldr	r2, [r3, #4]
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	605a      	str	r2, [r3, #4]
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	685a      	ldr	r2, [r3, #4]
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	3308      	adds	r3, #8
 8008648:	429a      	cmp	r2, r3
 800864a:	d104      	bne.n	8008656 <vTaskSwitchContext+0x8a>
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	605a      	str	r2, [r3, #4]
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	4a07      	ldr	r2, [pc, #28]	; (800867c <vTaskSwitchContext+0xb0>)
 800865e:	6013      	str	r3, [r2, #0]
}
 8008660:	bf00      	nop
 8008662:	371c      	adds	r7, #28
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr
 800866c:	200013c8 	.word	0x200013c8
 8008670:	200013b4 	.word	0x200013b4
 8008674:	200013a8 	.word	0x200013a8
 8008678:	200012a4 	.word	0x200012a4
 800867c:	200012a0 	.word	0x200012a0

08008680 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008688:	f000 f852 	bl	8008730 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800868c:	4b06      	ldr	r3, [pc, #24]	; (80086a8 <prvIdleTask+0x28>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d9f9      	bls.n	8008688 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008694:	4b05      	ldr	r3, [pc, #20]	; (80086ac <prvIdleTask+0x2c>)
 8008696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800869a:	601a      	str	r2, [r3, #0]
 800869c:	f3bf 8f4f 	dsb	sy
 80086a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80086a4:	e7f0      	b.n	8008688 <prvIdleTask+0x8>
 80086a6:	bf00      	nop
 80086a8:	200012a4 	.word	0x200012a4
 80086ac:	e000ed04 	.word	0xe000ed04

080086b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086b6:	2300      	movs	r3, #0
 80086b8:	607b      	str	r3, [r7, #4]
 80086ba:	e00c      	b.n	80086d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	4613      	mov	r3, r2
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	4413      	add	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4a12      	ldr	r2, [pc, #72]	; (8008710 <prvInitialiseTaskLists+0x60>)
 80086c8:	4413      	add	r3, r2
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7ff fbbc 	bl	8007e48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3301      	adds	r3, #1
 80086d4:	607b      	str	r3, [r7, #4]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b06      	cmp	r3, #6
 80086da:	d9ef      	bls.n	80086bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80086dc:	480d      	ldr	r0, [pc, #52]	; (8008714 <prvInitialiseTaskLists+0x64>)
 80086de:	f7ff fbb3 	bl	8007e48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80086e2:	480d      	ldr	r0, [pc, #52]	; (8008718 <prvInitialiseTaskLists+0x68>)
 80086e4:	f7ff fbb0 	bl	8007e48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80086e8:	480c      	ldr	r0, [pc, #48]	; (800871c <prvInitialiseTaskLists+0x6c>)
 80086ea:	f7ff fbad 	bl	8007e48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80086ee:	480c      	ldr	r0, [pc, #48]	; (8008720 <prvInitialiseTaskLists+0x70>)
 80086f0:	f7ff fbaa 	bl	8007e48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80086f4:	480b      	ldr	r0, [pc, #44]	; (8008724 <prvInitialiseTaskLists+0x74>)
 80086f6:	f7ff fba7 	bl	8007e48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80086fa:	4b0b      	ldr	r3, [pc, #44]	; (8008728 <prvInitialiseTaskLists+0x78>)
 80086fc:	4a05      	ldr	r2, [pc, #20]	; (8008714 <prvInitialiseTaskLists+0x64>)
 80086fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008700:	4b0a      	ldr	r3, [pc, #40]	; (800872c <prvInitialiseTaskLists+0x7c>)
 8008702:	4a05      	ldr	r2, [pc, #20]	; (8008718 <prvInitialiseTaskLists+0x68>)
 8008704:	601a      	str	r2, [r3, #0]
}
 8008706:	bf00      	nop
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	200012a4 	.word	0x200012a4
 8008714:	20001330 	.word	0x20001330
 8008718:	20001344 	.word	0x20001344
 800871c:	20001360 	.word	0x20001360
 8008720:	20001374 	.word	0x20001374
 8008724:	2000138c 	.word	0x2000138c
 8008728:	20001358 	.word	0x20001358
 800872c:	2000135c 	.word	0x2000135c

08008730 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008736:	e019      	b.n	800876c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008738:	f000 f9e0 	bl	8008afc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800873c:	4b0f      	ldr	r3, [pc, #60]	; (800877c <prvCheckTasksWaitingTermination+0x4c>)
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	3304      	adds	r3, #4
 8008748:	4618      	mov	r0, r3
 800874a:	f7ff fc07 	bl	8007f5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800874e:	4b0c      	ldr	r3, [pc, #48]	; (8008780 <prvCheckTasksWaitingTermination+0x50>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	3b01      	subs	r3, #1
 8008754:	4a0a      	ldr	r2, [pc, #40]	; (8008780 <prvCheckTasksWaitingTermination+0x50>)
 8008756:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008758:	4b0a      	ldr	r3, [pc, #40]	; (8008784 <prvCheckTasksWaitingTermination+0x54>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	3b01      	subs	r3, #1
 800875e:	4a09      	ldr	r2, [pc, #36]	; (8008784 <prvCheckTasksWaitingTermination+0x54>)
 8008760:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008762:	f000 f9f9 	bl	8008b58 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f80e 	bl	8008788 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800876c:	4b05      	ldr	r3, [pc, #20]	; (8008784 <prvCheckTasksWaitingTermination+0x54>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1e1      	bne.n	8008738 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008774:	bf00      	nop
 8008776:	3708      	adds	r7, #8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	20001374 	.word	0x20001374
 8008780:	200013a0 	.word	0x200013a0
 8008784:	20001388 	.word	0x20001388

08008788 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008794:	4618      	mov	r0, r3
 8008796:	f000 fb4f 	bl	8008e38 <vPortFree>
			vPortFree( pxTCB );
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fb4c 	bl	8008e38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80087a0:	bf00      	nop
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087ae:	4b0c      	ldr	r3, [pc, #48]	; (80087e0 <prvResetNextTaskUnblockTime+0x38>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d104      	bne.n	80087c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80087b8:	4b0a      	ldr	r3, [pc, #40]	; (80087e4 <prvResetNextTaskUnblockTime+0x3c>)
 80087ba:	f04f 32ff 	mov.w	r2, #4294967295
 80087be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80087c0:	e008      	b.n	80087d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087c2:	4b07      	ldr	r3, [pc, #28]	; (80087e0 <prvResetNextTaskUnblockTime+0x38>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	4a04      	ldr	r2, [pc, #16]	; (80087e4 <prvResetNextTaskUnblockTime+0x3c>)
 80087d2:	6013      	str	r3, [r2, #0]
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr
 80087e0:	20001358 	.word	0x20001358
 80087e4:	200013c0 	.word	0x200013c0

080087e8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80087f2:	4b29      	ldr	r3, [pc, #164]	; (8008898 <prvAddCurrentTaskToDelayedList+0xb0>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087f8:	4b28      	ldr	r3, [pc, #160]	; (800889c <prvAddCurrentTaskToDelayedList+0xb4>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	3304      	adds	r3, #4
 80087fe:	4618      	mov	r0, r3
 8008800:	f7ff fbac 	bl	8007f5c <uxListRemove>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d10b      	bne.n	8008822 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800880a:	4b24      	ldr	r3, [pc, #144]	; (800889c <prvAddCurrentTaskToDelayedList+0xb4>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008810:	2201      	movs	r2, #1
 8008812:	fa02 f303 	lsl.w	r3, r2, r3
 8008816:	43da      	mvns	r2, r3
 8008818:	4b21      	ldr	r3, [pc, #132]	; (80088a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4013      	ands	r3, r2
 800881e:	4a20      	ldr	r2, [pc, #128]	; (80088a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008820:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008828:	d10a      	bne.n	8008840 <prvAddCurrentTaskToDelayedList+0x58>
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d007      	beq.n	8008840 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008830:	4b1a      	ldr	r3, [pc, #104]	; (800889c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	3304      	adds	r3, #4
 8008836:	4619      	mov	r1, r3
 8008838:	481a      	ldr	r0, [pc, #104]	; (80088a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800883a:	f7ff fb32 	bl	8007ea2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800883e:	e026      	b.n	800888e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4413      	add	r3, r2
 8008846:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008848:	4b14      	ldr	r3, [pc, #80]	; (800889c <prvAddCurrentTaskToDelayedList+0xb4>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	429a      	cmp	r2, r3
 8008856:	d209      	bcs.n	800886c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008858:	4b13      	ldr	r3, [pc, #76]	; (80088a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	4b0f      	ldr	r3, [pc, #60]	; (800889c <prvAddCurrentTaskToDelayedList+0xb4>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	3304      	adds	r3, #4
 8008862:	4619      	mov	r1, r3
 8008864:	4610      	mov	r0, r2
 8008866:	f7ff fb40 	bl	8007eea <vListInsert>
}
 800886a:	e010      	b.n	800888e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800886c:	4b0f      	ldr	r3, [pc, #60]	; (80088ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	4b0a      	ldr	r3, [pc, #40]	; (800889c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	3304      	adds	r3, #4
 8008876:	4619      	mov	r1, r3
 8008878:	4610      	mov	r0, r2
 800887a:	f7ff fb36 	bl	8007eea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800887e:	4b0c      	ldr	r3, [pc, #48]	; (80088b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	429a      	cmp	r2, r3
 8008886:	d202      	bcs.n	800888e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008888:	4a09      	ldr	r2, [pc, #36]	; (80088b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	6013      	str	r3, [r2, #0]
}
 800888e:	bf00      	nop
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	200013a4 	.word	0x200013a4
 800889c:	200012a0 	.word	0x200012a0
 80088a0:	200013a8 	.word	0x200013a8
 80088a4:	2000138c 	.word	0x2000138c
 80088a8:	2000135c 	.word	0x2000135c
 80088ac:	20001358 	.word	0x20001358
 80088b0:	200013c0 	.word	0x200013c0

080088b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	3b04      	subs	r3, #4
 80088c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80088cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	3b04      	subs	r3, #4
 80088d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	f023 0201 	bic.w	r2, r3, #1
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3b04      	subs	r3, #4
 80088e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80088e4:	4a0c      	ldr	r2, [pc, #48]	; (8008918 <pxPortInitialiseStack+0x64>)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	3b14      	subs	r3, #20
 80088ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	3b04      	subs	r3, #4
 80088fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f06f 0202 	mvn.w	r2, #2
 8008902:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	3b20      	subs	r3, #32
 8008908:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800890a:	68fb      	ldr	r3, [r7, #12]
}
 800890c:	4618      	mov	r0, r3
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	0800891d 	.word	0x0800891d

0800891c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008922:	2300      	movs	r3, #0
 8008924:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008926:	4b11      	ldr	r3, [pc, #68]	; (800896c <prvTaskExitError+0x50>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892e:	d009      	beq.n	8008944 <prvTaskExitError+0x28>
 8008930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	60fb      	str	r3, [r7, #12]
 8008942:	e7fe      	b.n	8008942 <prvTaskExitError+0x26>
 8008944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008948:	f383 8811 	msr	BASEPRI, r3
 800894c:	f3bf 8f6f 	isb	sy
 8008950:	f3bf 8f4f 	dsb	sy
 8008954:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008956:	bf00      	nop
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d0fc      	beq.n	8008958 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800895e:	bf00      	nop
 8008960:	3714      	adds	r7, #20
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	2000000c 	.word	0x2000000c

08008970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008970:	4b07      	ldr	r3, [pc, #28]	; (8008990 <pxCurrentTCBConst2>)
 8008972:	6819      	ldr	r1, [r3, #0]
 8008974:	6808      	ldr	r0, [r1, #0]
 8008976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897a:	f380 8809 	msr	PSP, r0
 800897e:	f3bf 8f6f 	isb	sy
 8008982:	f04f 0000 	mov.w	r0, #0
 8008986:	f380 8811 	msr	BASEPRI, r0
 800898a:	4770      	bx	lr
 800898c:	f3af 8000 	nop.w

08008990 <pxCurrentTCBConst2>:
 8008990:	200012a0 	.word	0x200012a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008994:	bf00      	nop
 8008996:	bf00      	nop

08008998 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008998:	4808      	ldr	r0, [pc, #32]	; (80089bc <prvPortStartFirstTask+0x24>)
 800899a:	6800      	ldr	r0, [r0, #0]
 800899c:	6800      	ldr	r0, [r0, #0]
 800899e:	f380 8808 	msr	MSP, r0
 80089a2:	f04f 0000 	mov.w	r0, #0
 80089a6:	f380 8814 	msr	CONTROL, r0
 80089aa:	b662      	cpsie	i
 80089ac:	b661      	cpsie	f
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	df00      	svc	0
 80089b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80089ba:	bf00      	nop
 80089bc:	e000ed08 	.word	0xe000ed08

080089c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80089c6:	4b44      	ldr	r3, [pc, #272]	; (8008ad8 <xPortStartScheduler+0x118>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a44      	ldr	r2, [pc, #272]	; (8008adc <xPortStartScheduler+0x11c>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d109      	bne.n	80089e4 <xPortStartScheduler+0x24>
 80089d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d4:	f383 8811 	msr	BASEPRI, r3
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	f3bf 8f4f 	dsb	sy
 80089e0:	613b      	str	r3, [r7, #16]
 80089e2:	e7fe      	b.n	80089e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80089e4:	4b3c      	ldr	r3, [pc, #240]	; (8008ad8 <xPortStartScheduler+0x118>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a3d      	ldr	r2, [pc, #244]	; (8008ae0 <xPortStartScheduler+0x120>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d109      	bne.n	8008a02 <xPortStartScheduler+0x42>
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	60fb      	str	r3, [r7, #12]
 8008a00:	e7fe      	b.n	8008a00 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a02:	4b38      	ldr	r3, [pc, #224]	; (8008ae4 <xPortStartScheduler+0x124>)
 8008a04:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	22ff      	movs	r2, #255	; 0xff
 8008a12:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a1c:	78fb      	ldrb	r3, [r7, #3]
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	4b30      	ldr	r3, [pc, #192]	; (8008ae8 <xPortStartScheduler+0x128>)
 8008a28:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a2a:	4b30      	ldr	r3, [pc, #192]	; (8008aec <xPortStartScheduler+0x12c>)
 8008a2c:	2207      	movs	r2, #7
 8008a2e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a30:	e009      	b.n	8008a46 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008a32:	4b2e      	ldr	r3, [pc, #184]	; (8008aec <xPortStartScheduler+0x12c>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	3b01      	subs	r3, #1
 8008a38:	4a2c      	ldr	r2, [pc, #176]	; (8008aec <xPortStartScheduler+0x12c>)
 8008a3a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a3c:	78fb      	ldrb	r3, [r7, #3]
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	005b      	lsls	r3, r3, #1
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a46:	78fb      	ldrb	r3, [r7, #3]
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a4e:	2b80      	cmp	r3, #128	; 0x80
 8008a50:	d0ef      	beq.n	8008a32 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a52:	4b26      	ldr	r3, [pc, #152]	; (8008aec <xPortStartScheduler+0x12c>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f1c3 0307 	rsb	r3, r3, #7
 8008a5a:	2b04      	cmp	r3, #4
 8008a5c:	d009      	beq.n	8008a72 <xPortStartScheduler+0xb2>
 8008a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a62:	f383 8811 	msr	BASEPRI, r3
 8008a66:	f3bf 8f6f 	isb	sy
 8008a6a:	f3bf 8f4f 	dsb	sy
 8008a6e:	60bb      	str	r3, [r7, #8]
 8008a70:	e7fe      	b.n	8008a70 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a72:	4b1e      	ldr	r3, [pc, #120]	; (8008aec <xPortStartScheduler+0x12c>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	021b      	lsls	r3, r3, #8
 8008a78:	4a1c      	ldr	r2, [pc, #112]	; (8008aec <xPortStartScheduler+0x12c>)
 8008a7a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a7c:	4b1b      	ldr	r3, [pc, #108]	; (8008aec <xPortStartScheduler+0x12c>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a84:	4a19      	ldr	r2, [pc, #100]	; (8008aec <xPortStartScheduler+0x12c>)
 8008a86:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	b2da      	uxtb	r2, r3
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a90:	4b17      	ldr	r3, [pc, #92]	; (8008af0 <xPortStartScheduler+0x130>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a16      	ldr	r2, [pc, #88]	; (8008af0 <xPortStartScheduler+0x130>)
 8008a96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008a9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a9c:	4b14      	ldr	r3, [pc, #80]	; (8008af0 <xPortStartScheduler+0x130>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a13      	ldr	r2, [pc, #76]	; (8008af0 <xPortStartScheduler+0x130>)
 8008aa2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008aa6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008aa8:	f000 f8d6 	bl	8008c58 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008aac:	4b11      	ldr	r3, [pc, #68]	; (8008af4 <xPortStartScheduler+0x134>)
 8008aae:	2200      	movs	r2, #0
 8008ab0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ab2:	f000 f8f5 	bl	8008ca0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ab6:	4b10      	ldr	r3, [pc, #64]	; (8008af8 <xPortStartScheduler+0x138>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a0f      	ldr	r2, [pc, #60]	; (8008af8 <xPortStartScheduler+0x138>)
 8008abc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ac0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ac2:	f7ff ff69 	bl	8008998 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ac6:	f7ff fd81 	bl	80085cc <vTaskSwitchContext>
	prvTaskExitError();
 8008aca:	f7ff ff27 	bl	800891c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3718      	adds	r7, #24
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	e000ed00 	.word	0xe000ed00
 8008adc:	410fc271 	.word	0x410fc271
 8008ae0:	410fc270 	.word	0x410fc270
 8008ae4:	e000e400 	.word	0xe000e400
 8008ae8:	200013cc 	.word	0x200013cc
 8008aec:	200013d0 	.word	0x200013d0
 8008af0:	e000ed20 	.word	0xe000ed20
 8008af4:	2000000c 	.word	0x2000000c
 8008af8:	e000ef34 	.word	0xe000ef34

08008afc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b14:	4b0e      	ldr	r3, [pc, #56]	; (8008b50 <vPortEnterCritical+0x54>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	4a0d      	ldr	r2, [pc, #52]	; (8008b50 <vPortEnterCritical+0x54>)
 8008b1c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b1e:	4b0c      	ldr	r3, [pc, #48]	; (8008b50 <vPortEnterCritical+0x54>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d10e      	bne.n	8008b44 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b26:	4b0b      	ldr	r3, [pc, #44]	; (8008b54 <vPortEnterCritical+0x58>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d009      	beq.n	8008b44 <vPortEnterCritical+0x48>
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	603b      	str	r3, [r7, #0]
 8008b42:	e7fe      	b.n	8008b42 <vPortEnterCritical+0x46>
	}
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr
 8008b50:	2000000c 	.word	0x2000000c
 8008b54:	e000ed04 	.word	0xe000ed04

08008b58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b5e:	4b11      	ldr	r3, [pc, #68]	; (8008ba4 <vPortExitCritical+0x4c>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d109      	bne.n	8008b7a <vPortExitCritical+0x22>
 8008b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6a:	f383 8811 	msr	BASEPRI, r3
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f3bf 8f4f 	dsb	sy
 8008b76:	607b      	str	r3, [r7, #4]
 8008b78:	e7fe      	b.n	8008b78 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008b7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ba4 <vPortExitCritical+0x4c>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	4a08      	ldr	r2, [pc, #32]	; (8008ba4 <vPortExitCritical+0x4c>)
 8008b82:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b84:	4b07      	ldr	r3, [pc, #28]	; (8008ba4 <vPortExitCritical+0x4c>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d104      	bne.n	8008b96 <vPortExitCritical+0x3e>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b96:	bf00      	nop
 8008b98:	370c      	adds	r7, #12
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	2000000c 	.word	0x2000000c
	...

08008bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008bb0:	f3ef 8009 	mrs	r0, PSP
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	4b15      	ldr	r3, [pc, #84]	; (8008c10 <pxCurrentTCBConst>)
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	f01e 0f10 	tst.w	lr, #16
 8008bc0:	bf08      	it	eq
 8008bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bca:	6010      	str	r0, [r2, #0]
 8008bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008bd4:	f380 8811 	msr	BASEPRI, r0
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f7ff fcf4 	bl	80085cc <vTaskSwitchContext>
 8008be4:	f04f 0000 	mov.w	r0, #0
 8008be8:	f380 8811 	msr	BASEPRI, r0
 8008bec:	bc09      	pop	{r0, r3}
 8008bee:	6819      	ldr	r1, [r3, #0]
 8008bf0:	6808      	ldr	r0, [r1, #0]
 8008bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf6:	f01e 0f10 	tst.w	lr, #16
 8008bfa:	bf08      	it	eq
 8008bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c00:	f380 8809 	msr	PSP, r0
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	f3af 8000 	nop.w

08008c10 <pxCurrentTCBConst>:
 8008c10:	200012a0 	.word	0x200012a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop

08008c18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c22:	f383 8811 	msr	BASEPRI, r3
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c30:	f7ff fc14 	bl	800845c <xTaskIncrementTick>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d003      	beq.n	8008c42 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c3a:	4b06      	ldr	r3, [pc, #24]	; (8008c54 <SysTick_Handler+0x3c>)
 8008c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c40:	601a      	str	r2, [r3, #0]
 8008c42:	2300      	movs	r3, #0
 8008c44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c4c:	bf00      	nop
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	e000ed04 	.word	0xe000ed04

08008c58 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c58:	b480      	push	{r7}
 8008c5a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c5c:	4b0b      	ldr	r3, [pc, #44]	; (8008c8c <vPortSetupTimerInterrupt+0x34>)
 8008c5e:	2200      	movs	r2, #0
 8008c60:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c62:	4b0b      	ldr	r3, [pc, #44]	; (8008c90 <vPortSetupTimerInterrupt+0x38>)
 8008c64:	2200      	movs	r2, #0
 8008c66:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c68:	4b0a      	ldr	r3, [pc, #40]	; (8008c94 <vPortSetupTimerInterrupt+0x3c>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a0a      	ldr	r2, [pc, #40]	; (8008c98 <vPortSetupTimerInterrupt+0x40>)
 8008c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c72:	099b      	lsrs	r3, r3, #6
 8008c74:	4a09      	ldr	r2, [pc, #36]	; (8008c9c <vPortSetupTimerInterrupt+0x44>)
 8008c76:	3b01      	subs	r3, #1
 8008c78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c7a:	4b04      	ldr	r3, [pc, #16]	; (8008c8c <vPortSetupTimerInterrupt+0x34>)
 8008c7c:	2207      	movs	r2, #7
 8008c7e:	601a      	str	r2, [r3, #0]
}
 8008c80:	bf00      	nop
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	e000e010 	.word	0xe000e010
 8008c90:	e000e018 	.word	0xe000e018
 8008c94:	20000000 	.word	0x20000000
 8008c98:	10624dd3 	.word	0x10624dd3
 8008c9c:	e000e014 	.word	0xe000e014

08008ca0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ca0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008cb0 <vPortEnableVFP+0x10>
 8008ca4:	6801      	ldr	r1, [r0, #0]
 8008ca6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008caa:	6001      	str	r1, [r0, #0]
 8008cac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008cae:	bf00      	nop
 8008cb0:	e000ed88 	.word	0xe000ed88

08008cb4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b08a      	sub	sp, #40	; 0x28
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008cc0:	f7ff fb22 	bl	8008308 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008cc4:	4b57      	ldr	r3, [pc, #348]	; (8008e24 <pvPortMalloc+0x170>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d101      	bne.n	8008cd0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ccc:	f000 f90c 	bl	8008ee8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008cd0:	4b55      	ldr	r3, [pc, #340]	; (8008e28 <pvPortMalloc+0x174>)
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f040 808c 	bne.w	8008df6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d01c      	beq.n	8008d1e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008ce4:	2208      	movs	r2, #8
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4413      	add	r3, r2
 8008cea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f003 0307 	and.w	r3, r3, #7
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d013      	beq.n	8008d1e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f023 0307 	bic.w	r3, r3, #7
 8008cfc:	3308      	adds	r3, #8
 8008cfe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f003 0307 	and.w	r3, r3, #7
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d009      	beq.n	8008d1e <pvPortMalloc+0x6a>
	__asm volatile
 8008d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0e:	f383 8811 	msr	BASEPRI, r3
 8008d12:	f3bf 8f6f 	isb	sy
 8008d16:	f3bf 8f4f 	dsb	sy
 8008d1a:	617b      	str	r3, [r7, #20]
 8008d1c:	e7fe      	b.n	8008d1c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d068      	beq.n	8008df6 <pvPortMalloc+0x142>
 8008d24:	4b41      	ldr	r3, [pc, #260]	; (8008e2c <pvPortMalloc+0x178>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d863      	bhi.n	8008df6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d2e:	4b40      	ldr	r3, [pc, #256]	; (8008e30 <pvPortMalloc+0x17c>)
 8008d30:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d32:	4b3f      	ldr	r3, [pc, #252]	; (8008e30 <pvPortMalloc+0x17c>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d38:	e004      	b.n	8008d44 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d903      	bls.n	8008d56 <pvPortMalloc+0xa2>
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1f1      	bne.n	8008d3a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d56:	4b33      	ldr	r3, [pc, #204]	; (8008e24 <pvPortMalloc+0x170>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d04a      	beq.n	8008df6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d60:	6a3b      	ldr	r3, [r7, #32]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2208      	movs	r2, #8
 8008d66:	4413      	add	r3, r2
 8008d68:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	6a3b      	ldr	r3, [r7, #32]
 8008d70:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d74:	685a      	ldr	r2, [r3, #4]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	1ad2      	subs	r2, r2, r3
 8008d7a:	2308      	movs	r3, #8
 8008d7c:	005b      	lsls	r3, r3, #1
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d91e      	bls.n	8008dc0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4413      	add	r3, r2
 8008d88:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	f003 0307 	and.w	r3, r3, #7
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d009      	beq.n	8008da8 <pvPortMalloc+0xf4>
 8008d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d98:	f383 8811 	msr	BASEPRI, r3
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	613b      	str	r3, [r7, #16]
 8008da6:	e7fe      	b.n	8008da6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008daa:	685a      	ldr	r2, [r3, #4]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	1ad2      	subs	r2, r2, r3
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008dba:	69b8      	ldr	r0, [r7, #24]
 8008dbc:	f000 f8f6 	bl	8008fac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008dc0:	4b1a      	ldr	r3, [pc, #104]	; (8008e2c <pvPortMalloc+0x178>)
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	4a18      	ldr	r2, [pc, #96]	; (8008e2c <pvPortMalloc+0x178>)
 8008dcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008dce:	4b17      	ldr	r3, [pc, #92]	; (8008e2c <pvPortMalloc+0x178>)
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	4b18      	ldr	r3, [pc, #96]	; (8008e34 <pvPortMalloc+0x180>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d203      	bcs.n	8008de2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008dda:	4b14      	ldr	r3, [pc, #80]	; (8008e2c <pvPortMalloc+0x178>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a15      	ldr	r2, [pc, #84]	; (8008e34 <pvPortMalloc+0x180>)
 8008de0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de4:	685a      	ldr	r2, [r3, #4]
 8008de6:	4b10      	ldr	r3, [pc, #64]	; (8008e28 <pvPortMalloc+0x174>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	431a      	orrs	r2, r3
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	2200      	movs	r2, #0
 8008df4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008df6:	f7ff fa95 	bl	8008324 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	f003 0307 	and.w	r3, r3, #7
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d009      	beq.n	8008e18 <pvPortMalloc+0x164>
 8008e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	60fb      	str	r3, [r7, #12]
 8008e16:	e7fe      	b.n	8008e16 <pvPortMalloc+0x162>
	return pvReturn;
 8008e18:	69fb      	ldr	r3, [r7, #28]
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3728      	adds	r7, #40	; 0x28
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	20001fdc 	.word	0x20001fdc
 8008e28:	20001fe8 	.word	0x20001fe8
 8008e2c:	20001fe0 	.word	0x20001fe0
 8008e30:	20001fd4 	.word	0x20001fd4
 8008e34:	20001fe4 	.word	0x20001fe4

08008e38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b086      	sub	sp, #24
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d046      	beq.n	8008ed8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e4a:	2308      	movs	r3, #8
 8008e4c:	425b      	negs	r3, r3
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	4413      	add	r3, r2
 8008e52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	685a      	ldr	r2, [r3, #4]
 8008e5c:	4b20      	ldr	r3, [pc, #128]	; (8008ee0 <vPortFree+0xa8>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4013      	ands	r3, r2
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d109      	bne.n	8008e7a <vPortFree+0x42>
 8008e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	60fb      	str	r3, [r7, #12]
 8008e78:	e7fe      	b.n	8008e78 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d009      	beq.n	8008e96 <vPortFree+0x5e>
 8008e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e86:	f383 8811 	msr	BASEPRI, r3
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	60bb      	str	r3, [r7, #8]
 8008e94:	e7fe      	b.n	8008e94 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	685a      	ldr	r2, [r3, #4]
 8008e9a:	4b11      	ldr	r3, [pc, #68]	; (8008ee0 <vPortFree+0xa8>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d019      	beq.n	8008ed8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d115      	bne.n	8008ed8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	685a      	ldr	r2, [r3, #4]
 8008eb0:	4b0b      	ldr	r3, [pc, #44]	; (8008ee0 <vPortFree+0xa8>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	43db      	mvns	r3, r3
 8008eb6:	401a      	ands	r2, r3
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ebc:	f7ff fa24 	bl	8008308 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	685a      	ldr	r2, [r3, #4]
 8008ec4:	4b07      	ldr	r3, [pc, #28]	; (8008ee4 <vPortFree+0xac>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4413      	add	r3, r2
 8008eca:	4a06      	ldr	r2, [pc, #24]	; (8008ee4 <vPortFree+0xac>)
 8008ecc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008ece:	6938      	ldr	r0, [r7, #16]
 8008ed0:	f000 f86c 	bl	8008fac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008ed4:	f7ff fa26 	bl	8008324 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ed8:	bf00      	nop
 8008eda:	3718      	adds	r7, #24
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	20001fe8 	.word	0x20001fe8
 8008ee4:	20001fe0 	.word	0x20001fe0

08008ee8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b085      	sub	sp, #20
 8008eec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008eee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008ef2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ef4:	4b27      	ldr	r3, [pc, #156]	; (8008f94 <prvHeapInit+0xac>)
 8008ef6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f003 0307 	and.w	r3, r3, #7
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00c      	beq.n	8008f1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	3307      	adds	r3, #7
 8008f06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f023 0307 	bic.w	r3, r3, #7
 8008f0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f10:	68ba      	ldr	r2, [r7, #8]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	1ad3      	subs	r3, r2, r3
 8008f16:	4a1f      	ldr	r2, [pc, #124]	; (8008f94 <prvHeapInit+0xac>)
 8008f18:	4413      	add	r3, r2
 8008f1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f20:	4a1d      	ldr	r2, [pc, #116]	; (8008f98 <prvHeapInit+0xb0>)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f26:	4b1c      	ldr	r3, [pc, #112]	; (8008f98 <prvHeapInit+0xb0>)
 8008f28:	2200      	movs	r2, #0
 8008f2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	4413      	add	r3, r2
 8008f32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f34:	2208      	movs	r2, #8
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	1a9b      	subs	r3, r3, r2
 8008f3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f023 0307 	bic.w	r3, r3, #7
 8008f42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	4a15      	ldr	r2, [pc, #84]	; (8008f9c <prvHeapInit+0xb4>)
 8008f48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f4a:	4b14      	ldr	r3, [pc, #80]	; (8008f9c <prvHeapInit+0xb4>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f52:	4b12      	ldr	r3, [pc, #72]	; (8008f9c <prvHeapInit+0xb4>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2200      	movs	r2, #0
 8008f58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	1ad2      	subs	r2, r2, r3
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f68:	4b0c      	ldr	r3, [pc, #48]	; (8008f9c <prvHeapInit+0xb4>)
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	4a0a      	ldr	r2, [pc, #40]	; (8008fa0 <prvHeapInit+0xb8>)
 8008f76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	4a09      	ldr	r2, [pc, #36]	; (8008fa4 <prvHeapInit+0xbc>)
 8008f7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f80:	4b09      	ldr	r3, [pc, #36]	; (8008fa8 <prvHeapInit+0xc0>)
 8008f82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008f86:	601a      	str	r2, [r3, #0]
}
 8008f88:	bf00      	nop
 8008f8a:	3714      	adds	r7, #20
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr
 8008f94:	200013d4 	.word	0x200013d4
 8008f98:	20001fd4 	.word	0x20001fd4
 8008f9c:	20001fdc 	.word	0x20001fdc
 8008fa0:	20001fe4 	.word	0x20001fe4
 8008fa4:	20001fe0 	.word	0x20001fe0
 8008fa8:	20001fe8 	.word	0x20001fe8

08008fac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008fb4:	4b28      	ldr	r3, [pc, #160]	; (8009058 <prvInsertBlockIntoFreeList+0xac>)
 8008fb6:	60fb      	str	r3, [r7, #12]
 8008fb8:	e002      	b.n	8008fc0 <prvInsertBlockIntoFreeList+0x14>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	60fb      	str	r3, [r7, #12]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d8f7      	bhi.n	8008fba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	68ba      	ldr	r2, [r7, #8]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d108      	bne.n	8008fee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	685a      	ldr	r2, [r3, #4]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	441a      	add	r2, r3
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	441a      	add	r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d118      	bne.n	8009034 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	4b15      	ldr	r3, [pc, #84]	; (800905c <prvInsertBlockIntoFreeList+0xb0>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	429a      	cmp	r2, r3
 800900c:	d00d      	beq.n	800902a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	685a      	ldr	r2, [r3, #4]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	441a      	add	r2, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	601a      	str	r2, [r3, #0]
 8009028:	e008      	b.n	800903c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800902a:	4b0c      	ldr	r3, [pc, #48]	; (800905c <prvInsertBlockIntoFreeList+0xb0>)
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	601a      	str	r2, [r3, #0]
 8009032:	e003      	b.n	800903c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	429a      	cmp	r2, r3
 8009042:	d002      	beq.n	800904a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800904a:	bf00      	nop
 800904c:	3714      	adds	r7, #20
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	20001fd4 	.word	0x20001fd4
 800905c:	20001fdc 	.word	0x20001fdc

08009060 <__libc_init_array>:
 8009060:	b570      	push	{r4, r5, r6, lr}
 8009062:	4e0d      	ldr	r6, [pc, #52]	; (8009098 <__libc_init_array+0x38>)
 8009064:	4c0d      	ldr	r4, [pc, #52]	; (800909c <__libc_init_array+0x3c>)
 8009066:	1ba4      	subs	r4, r4, r6
 8009068:	10a4      	asrs	r4, r4, #2
 800906a:	2500      	movs	r5, #0
 800906c:	42a5      	cmp	r5, r4
 800906e:	d109      	bne.n	8009084 <__libc_init_array+0x24>
 8009070:	4e0b      	ldr	r6, [pc, #44]	; (80090a0 <__libc_init_array+0x40>)
 8009072:	4c0c      	ldr	r4, [pc, #48]	; (80090a4 <__libc_init_array+0x44>)
 8009074:	f000 f820 	bl	80090b8 <_init>
 8009078:	1ba4      	subs	r4, r4, r6
 800907a:	10a4      	asrs	r4, r4, #2
 800907c:	2500      	movs	r5, #0
 800907e:	42a5      	cmp	r5, r4
 8009080:	d105      	bne.n	800908e <__libc_init_array+0x2e>
 8009082:	bd70      	pop	{r4, r5, r6, pc}
 8009084:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009088:	4798      	blx	r3
 800908a:	3501      	adds	r5, #1
 800908c:	e7ee      	b.n	800906c <__libc_init_array+0xc>
 800908e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009092:	4798      	blx	r3
 8009094:	3501      	adds	r5, #1
 8009096:	e7f2      	b.n	800907e <__libc_init_array+0x1e>
 8009098:	0800939c 	.word	0x0800939c
 800909c:	0800939c 	.word	0x0800939c
 80090a0:	0800939c 	.word	0x0800939c
 80090a4:	080093a0 	.word	0x080093a0

080090a8 <memset>:
 80090a8:	4402      	add	r2, r0
 80090aa:	4603      	mov	r3, r0
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d100      	bne.n	80090b2 <memset+0xa>
 80090b0:	4770      	bx	lr
 80090b2:	f803 1b01 	strb.w	r1, [r3], #1
 80090b6:	e7f9      	b.n	80090ac <memset+0x4>

080090b8 <_init>:
 80090b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ba:	bf00      	nop
 80090bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090be:	bc08      	pop	{r3}
 80090c0:	469e      	mov	lr, r3
 80090c2:	4770      	bx	lr

080090c4 <_fini>:
 80090c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c6:	bf00      	nop
 80090c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ca:	bc08      	pop	{r3}
 80090cc:	469e      	mov	lr, r3
 80090ce:	4770      	bx	lr
